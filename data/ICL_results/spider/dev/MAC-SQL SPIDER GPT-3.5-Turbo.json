[
    {
        "idx": 0,
        "db_id": "concert_singer",
        "question": "How many singers do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM singer",
        "pred": "SELECT COUNT(*) FROM singer",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM singer",
        "repair_result": 1
    },
    {
        "idx": 1,
        "db_id": "concert_singer",
        "question": "What is the total number of singers?",
        "evidence": "",
        "gold": "SELECT count(*) FROM singer",
        "pred": "SELECT COUNT(*) FROM singer",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM singer",
        "repair_result": 1
    },
    {
        "idx": 2,
        "db_id": "concert_singer",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "evidence": "",
        "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "pred": "SELECT `Name`, `Country`, `Age` FROM singer ORDER BY `Age` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name`, `Country`, `Age` FROM singer ORDER BY `Age` DESC",
        "repair_result": 1
    },
    {
        "idx": 3,
        "db_id": "concert_singer",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "evidence": "",
        "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "pred": "SELECT `Name`, `Country`, `Age` FROM singer ORDER BY `Age` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name`, `Country`, `Age` FROM singer ORDER BY `Age` DESC",
        "repair_result": 1
    },
    {
        "idx": 4,
        "db_id": "concert_singer",
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "evidence": "",
        "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "pred": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Min_Age, MAX(Age) AS Max_Age FROM singer WHERE Country = 'France'",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Min_Age, MAX(Age) AS Max_Age FROM singer WHERE Country = 'France'",
        "repair_result": 1
    },
    {
        "idx": 5,
        "db_id": "concert_singer",
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "evidence": "",
        "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "pred": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Min_Age, MAX(Age) AS Max_Age FROM singer WHERE Country = 'France'",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Min_Age, MAX(Age) AS Max_Age FROM singer WHERE Country = 'France'",
        "repair_result": 1
    },
    {
        "idx": 6,
        "db_id": "concert_singer",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "evidence": "",
        "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "pred": "SELECT `Name`, `Song_release_year` FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)",
        "pred_result": 0,
        "repair_sql": "SELECT `Name`, `Song_release_year` FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)",
        "repair_result": 0
    },
    {
        "idx": 7,
        "db_id": "concert_singer",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "evidence": "",
        "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "pred": "SELECT `Song_Name`, `Song_release_year` FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)",
        "pred_result": 1,
        "repair_sql": "SELECT `Song_Name`, `Song_release_year` FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)",
        "repair_result": 1
    },
    {
        "idx": 8,
        "db_id": "concert_singer",
        "question": "What are all distinct countries where singers above age 20 are from?",
        "evidence": "",
        "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "pred": "SELECT DISTINCT `Country` FROM singer WHERE Age > 20",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Country` FROM singer WHERE Age > 20",
        "repair_result": 1
    },
    {
        "idx": 9,
        "db_id": "concert_singer",
        "question": "What are  the different countries with singers above age 20?",
        "evidence": "",
        "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "pred": "SELECT DISTINCT `Country` FROM singer WHERE Age > 20",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Country` FROM singer WHERE Age > 20",
        "repair_result": 1
    },
    {
        "idx": 10,
        "db_id": "concert_singer",
        "question": "Show all countries and the number of singers in each country.",
        "evidence": "",
        "gold": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "pred": "SELECT `Country`, COUNT(*) FROM singer GROUP BY `Country`",
        "pred_result": 1,
        "repair_sql": "SELECT `Country`, COUNT(*) FROM singer GROUP BY `Country`",
        "repair_result": 1
    },
    {
        "idx": 11,
        "db_id": "concert_singer",
        "question": "How many singers are from each country?",
        "evidence": "",
        "gold": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "pred": "SELECT Country, COUNT(*) FROM singer GROUP BY Country",
        "pred_result": 1,
        "repair_sql": "SELECT Country, COUNT(*) FROM singer GROUP BY Country",
        "repair_result": 1
    },
    {
        "idx": 12,
        "db_id": "concert_singer",
        "question": "List all song names by singers above the average age.",
        "evidence": "",
        "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "pred": "SELECT `Song_Name` FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)",
        "pred_result": 1,
        "repair_sql": "SELECT `Song_Name` FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)",
        "repair_result": 1
    },
    {
        "idx": 13,
        "db_id": "concert_singer",
        "question": "What are all the song names by singers who are older than average?",
        "evidence": "",
        "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "pred": "SELECT `Song_Name` FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)",
        "pred_result": 1,
        "repair_sql": "SELECT `Song_Name` FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)",
        "repair_result": 1
    },
    {
        "idx": 14,
        "db_id": "concert_singer",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "evidence": "",
        "gold": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "pred": "SELECT `Location`, `Name` FROM stadium WHERE `Capacity` BETWEEN 5000 AND 10000",
        "pred_result": 1,
        "repair_sql": "SELECT `Location`, `Name` FROM stadium WHERE `Capacity` BETWEEN 5000 AND 10000",
        "repair_result": 1
    },
    {
        "idx": 15,
        "db_id": "concert_singer",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "evidence": "",
        "gold": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "pred": "SELECT `Location`, `Name` FROM stadium WHERE `Capacity` BETWEEN 5000 AND 10000",
        "pred_result": 1,
        "repair_sql": "SELECT `Location`, `Name` FROM stadium WHERE `Capacity` BETWEEN 5000 AND 10000",
        "repair_result": 1
    },
    {
        "idx": 16,
        "db_id": "concert_singer",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "evidence": "",
        "gold": "select max(capacity), average from stadium",
        "pred": "SELECT MAX(Capacity), AVG(Capacity) FROM stadium",
        "pred_result": 0,
        "repair_sql": "SELECT MAX(Capacity), AVG(Capacity) FROM stadium",
        "repair_result": 0
    },
    {
        "idx": 17,
        "db_id": "concert_singer",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "evidence": "",
        "gold": "select avg(capacity) ,  max(capacity) from stadium",
        "pred": "SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium",
        "repair_result": 1
    },
    {
        "idx": 18,
        "db_id": "concert_singer",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "evidence": "",
        "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "pred": "SELECT `Name`, `Capacity` FROM stadium WHERE `Stadium_ID` = (SELECT `Stadium_ID` FROM stadium ORDER BY `Average` DESC LIMIT 1)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name`, `Capacity` FROM stadium WHERE `Stadium_ID` = (SELECT `Stadium_ID` FROM stadium ORDER BY `Average` DESC LIMIT 1)",
        "repair_result": 1
    },
    {
        "idx": 19,
        "db_id": "concert_singer",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "evidence": "",
        "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "pred": "SELECT `Name`, `Capacity` FROM stadium WHERE `Stadium_ID` = (SELECT `Stadium_ID` FROM stadium ORDER BY `Average` DESC LIMIT 1)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name`, `Capacity` FROM stadium WHERE `Stadium_ID` = (SELECT `Stadium_ID` FROM stadium ORDER BY `Average` DESC LIMIT 1)",
        "repair_result": 1
    },
    {
        "idx": 20,
        "db_id": "concert_singer",
        "question": "How many concerts are there in year 2014 or 2015?",
        "evidence": "",
        "gold": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "pred": "SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015')",
        "repair_result": 1
    },
    {
        "idx": 21,
        "db_id": "concert_singer",
        "question": "How many concerts occurred in 2014 or 2015?",
        "evidence": "",
        "gold": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "pred": "SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015')",
        "repair_result": 1
    },
    {
        "idx": 22,
        "db_id": "concert_singer",
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "evidence": "",
        "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "pred": "SELECT T1.`Name`, COUNT(*) FROM stadium AS T1 JOIN concert AS T2 ON T1.`Stadium_ID` = T2.`Stadium_ID` GROUP BY T1.`Stadium_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Name`, COUNT(*) FROM stadium AS T1 JOIN concert AS T2 ON T1.`Stadium_ID` = T2.`Stadium_ID` GROUP BY T1.`Stadium_ID`",
        "repair_result": 1
    },
    {
        "idx": 23,
        "db_id": "concert_singer",
        "question": "For each stadium, how many concerts play there?",
        "evidence": "",
        "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "pred": "SELECT T1.`Name`, COUNT(T2.`concert_ID`) FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.`Stadium_ID` = T2.`Stadium_ID` GROUP BY T1.`Stadium_ID`",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`Name`, COUNT(T2.`concert_ID`) FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.`Stadium_ID` = T2.`Stadium_ID` GROUP BY T1.`Stadium_ID`",
        "repair_result": 0
    },
    {
        "idx": 24,
        "db_id": "concert_singer",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "evidence": "",
        "gold": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`Name`, T1.`Capacity` FROM stadium AS T1 JOIN ( SELECT T2.`Stadium_ID`, COUNT(*) AS num_concerts FROM concert AS T2 WHERE T2.`Year` >= '2014' GROUP BY T2.`Stadium_ID` ORDER BY num_concerts DESC LIMIT 1 ) AS T3 ON T1.`Stadium_ID` = T3.`Stadium_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Name`, T1.`Capacity` FROM stadium AS T1 JOIN ( SELECT T2.`Stadium_ID`, COUNT(*) AS num_concerts FROM concert AS T2 WHERE T2.`Year` >= '2014' GROUP BY T2.`Stadium_ID` ORDER BY num_concerts DESC LIMIT 1 ) AS T3 ON T1.`Stadium_ID` = T3.`Stadium_ID`",
        "repair_result": 1
    },
    {
        "idx": 25,
        "db_id": "concert_singer",
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "evidence": "",
        "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "pred": "SELECT T1.`Name`, T1.`Capacity` FROM stadium AS T1 JOIN concert AS T2 ON T1.`Stadium_ID` = T2.`Stadium_ID` WHERE T2.`Year` > '2013' GROUP BY T1.`Stadium_ID` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Name`, T1.`Capacity` FROM stadium AS T1 JOIN concert AS T2 ON T1.`Stadium_ID` = T2.`Stadium_ID` WHERE T2.`Year` > '2013' GROUP BY T1.`Stadium_ID` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 26,
        "db_id": "concert_singer",
        "question": "Which year has most number of concerts?",
        "evidence": "",
        "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 27,
        "db_id": "concert_singer",
        "question": "What is the year that had the most concerts?",
        "evidence": "",
        "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 28,
        "db_id": "concert_singer",
        "question": "Show the stadium names without any concert.",
        "evidence": "",
        "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "pred": "SELECT `Name` FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert)",
        "repair_result": 1
    },
    {
        "idx": 29,
        "db_id": "concert_singer",
        "question": "What are the names of the stadiums without any concerts?",
        "evidence": "",
        "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "pred": "SELECT `Name` FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert)",
        "repair_result": 1
    },
    {
        "idx": 30,
        "db_id": "concert_singer",
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "evidence": "",
        "gold": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "pred": "SELECT DISTINCT `Country` FROM singer WHERE Age > 40 INTERSECT SELECT DISTINCT `Country` FROM singer WHERE Age < 30",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Country` FROM singer WHERE Age > 40 INTERSECT SELECT DISTINCT `Country` FROM singer WHERE Age < 30",
        "repair_result": 1
    },
    {
        "idx": 31,
        "db_id": "concert_singer",
        "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "evidence": "",
        "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "pred": "SELECT DISTINCT T1.`Name` FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.`Stadium_ID` = T2.`Stadium_ID` WHERE T2.`Year` != '2014' OR T2.`Year` IS NULL",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`Name` FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.`Stadium_ID` = T2.`Stadium_ID` WHERE T2.`Year` != '2014' OR T2.`Year` IS NULL",
        "repair_result": 0
    },
    {
        "idx": 32,
        "db_id": "concert_singer",
        "question": "What are the names of all stadiums that did not have a concert in 2014?",
        "evidence": "",
        "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "pred": "SELECT `Name` FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert WHERE Year = '2014')",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert WHERE Year = '2014')",
        "repair_result": 1
    },
    {
        "idx": 33,
        "db_id": "concert_singer",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "evidence": "",
        "gold": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "pred": "SELECT T1.`concert_Name`, T1.`Theme`, COUNT(T2.`Singer_ID`) AS Singer_Count FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.`concert_ID` = T2.`concert_ID` GROUP BY T1.`concert_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`concert_Name`, T1.`Theme`, COUNT(T2.`Singer_ID`) AS Singer_Count FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.`concert_ID` = T2.`concert_ID` GROUP BY T1.`concert_ID`",
        "repair_result": 1
    },
    {
        "idx": 34,
        "db_id": "concert_singer",
        "question": "What are the names , themes , and number of singers for every concert ?",
        "evidence": "",
        "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "pred": "SELECT T1.`concert_Name`, T2.`Theme`, COUNT(T3.`Singer_ID`) FROM concert AS T1 JOIN concert AS T2 ON T1.`concert_ID` = T2.`concert_ID` JOIN singer_in_concert AS T3 ON T1.`concert_ID` = T3.`concert_ID` GROUP BY T1.`concert_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`concert_Name`, T2.`Theme`, COUNT(T3.`Singer_ID`) FROM concert AS T1 JOIN concert AS T2 ON T1.`concert_ID` = T2.`concert_ID` JOIN singer_in_concert AS T3 ON T1.`concert_ID` = T3.`concert_ID` GROUP BY T1.`concert_ID`",
        "repair_result": 1
    },
    {
        "idx": 35,
        "db_id": "concert_singer",
        "question": "List singer names and number of concerts for each singer.",
        "evidence": "",
        "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "pred": "SELECT T1.`Name`, COUNT(*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.`Singer_ID` = T2.`Singer_ID` GROUP BY T1.`Singer_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Name`, COUNT(*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.`Singer_ID` = T2.`Singer_ID` GROUP BY T1.`Singer_ID`",
        "repair_result": 1
    },
    {
        "idx": 36,
        "db_id": "concert_singer",
        "question": "What are the names of the singers and number of concerts for each person?",
        "evidence": "",
        "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "pred": "SELECT T1.`Name`, COUNT(*) AS Concert_Count FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.`Singer_ID` = T2.`Singer_ID` GROUP BY T1.`Singer_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Name`, COUNT(*) AS Concert_Count FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.`Singer_ID` = T2.`Singer_ID` GROUP BY T1.`Singer_ID`",
        "repair_result": 1
    },
    {
        "idx": 37,
        "db_id": "concert_singer",
        "question": "List all singer names in concerts in year 2014.",
        "evidence": "",
        "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "pred": "SELECT DISTINCT T2.`Name` FROM singer AS T2 JOIN singer_in_concert AS T3 ON T2.`Singer_ID` = T3.`Singer_ID` JOIN concert AS T4 ON T3.`concert_ID` = T4.`concert_ID` WHERE T4.`Year` = '2014'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.`Name` FROM singer AS T2 JOIN singer_in_concert AS T3 ON T2.`Singer_ID` = T3.`Singer_ID` JOIN concert AS T4 ON T3.`concert_ID` = T4.`concert_ID` WHERE T4.`Year` = '2014'",
        "repair_result": 1
    },
    {
        "idx": 38,
        "db_id": "concert_singer",
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "evidence": "",
        "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "pred": "SELECT DISTINCT T2.`Name` FROM singer AS T2 JOIN singer_in_concert AS T1 ON T1.`Singer_ID` = T2.`Singer_ID` JOIN concert AS T3 ON T1.`concert_ID` = T3.`concert_ID` WHERE T3.`Year` = '2014'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.`Name` FROM singer AS T2 JOIN singer_in_concert AS T1 ON T1.`Singer_ID` = T2.`Singer_ID` JOIN concert AS T3 ON T1.`concert_ID` = T3.`concert_ID` WHERE T3.`Year` = '2014'",
        "repair_result": 1
    },
    {
        "idx": 39,
        "db_id": "concert_singer",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "evidence": "",
        "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "pred": "SELECT `Name`, `Country` FROM singer WHERE `Song_Name` LIKE '%Hey%'",
        "pred_result": 1,
        "repair_sql": "SELECT `Name`, `Country` FROM singer WHERE `Song_Name` LIKE '%Hey%'",
        "repair_result": 1
    },
    {
        "idx": 40,
        "db_id": "concert_singer",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "evidence": "",
        "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "pred": "SELECT `Name`, `Country` FROM singer WHERE `Song_Name` LIKE '%Hey%'",
        "pred_result": 1,
        "repair_sql": "SELECT `Name`, `Country` FROM singer WHERE `Song_Name` LIKE '%Hey%'",
        "repair_result": 1
    },
    {
        "idx": 41,
        "db_id": "concert_singer",
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "evidence": "",
        "gold": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "pred": "SELECT DISTINCT T1.`Name`, T1.`Location` FROM stadium AS T1 JOIN concert AS T2 ON T1.`Stadium_ID` = T2.`Stadium_ID` WHERE T2.`Year` = '2014' AND T1.`Stadium_ID` IN (SELECT T2.`Stadium_ID` FROM concert AS T2 WHERE T2.`Year` = '2015')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`Name`, T1.`Location` FROM stadium AS T1 JOIN concert AS T2 ON T1.`Stadium_ID` = T2.`Stadium_ID` WHERE T2.`Year` = '2014' AND T1.`Stadium_ID` IN (SELECT T2.`Stadium_ID` FROM concert AS T2 WHERE T2.`Year` = '2015')",
        "repair_result": 1
    },
    {
        "idx": 42,
        "db_id": "concert_singer",
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "evidence": "",
        "gold": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "pred": "SELECT DISTINCT T1.`Name`, T1.`Location` FROM stadium AS T1 JOIN concert AS T2 ON T1.`Stadium_ID` = T2.`Stadium_ID` WHERE T2.`Year` = '2014' AND T1.`Stadium_ID` IN (SELECT T1.`Stadium_ID` FROM stadium AS T1 JOIN concert AS T2 ON T1.`Stadium_ID` = T2.`Stadium_ID` WHERE T2.`Year` = '2015')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`Name`, T1.`Location` FROM stadium AS T1 JOIN concert AS T2 ON T1.`Stadium_ID` = T2.`Stadium_ID` WHERE T2.`Year` = '2014' AND T1.`Stadium_ID` IN (SELECT T1.`Stadium_ID` FROM stadium AS T1 JOIN concert AS T2 ON T1.`Stadium_ID` = T2.`Stadium_ID` WHERE T2.`Year` = '2015')",
        "repair_result": 1
    },
    {
        "idx": 43,
        "db_id": "concert_singer",
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "evidence": "",
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "pred": "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)",
        "repair_result": 1
    },
    {
        "idx": 44,
        "db_id": "concert_singer",
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "evidence": "",
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "pred": "SELECT COUNT(*) FROM concert WHERE `Stadium_ID` = (SELECT `Stadium_ID` FROM stadium ORDER BY `Capacity` DESC LIMIT 1)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM concert WHERE `Stadium_ID` = (SELECT `Stadium_ID` FROM stadium ORDER BY `Capacity` DESC LIMIT 1)",
        "repair_result": 1
    },
    {
        "idx": 45,
        "db_id": "pets_1",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "evidence": "",
        "gold": "SELECT count(*) FROM pets WHERE weight  >  10",
        "pred": "SELECT COUNT(*) FROM Pets WHERE weight > 10",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Pets WHERE weight > 10",
        "repair_result": 1
    },
    {
        "idx": 46,
        "db_id": "pets_1",
        "question": "How many pets have a greater weight than 10?",
        "evidence": "",
        "gold": "SELECT count(*) FROM pets WHERE weight  >  10",
        "pred": "SELECT COUNT(*) FROM Pets WHERE weight > 10",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Pets WHERE weight > 10",
        "repair_result": 1
    },
    {
        "idx": 47,
        "db_id": "pets_1",
        "question": "Find the weight of the youngest dog.",
        "evidence": "",
        "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "pred": "SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')",
        "pred_result": 1,
        "repair_sql": "SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')",
        "repair_result": 1
    },
    {
        "idx": 48,
        "db_id": "pets_1",
        "question": "How much does the youngest dog weigh?",
        "evidence": "",
        "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "pred": "SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')",
        "pred_result": 1,
        "repair_sql": "SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')",
        "repair_result": 1
    },
    {
        "idx": 49,
        "db_id": "pets_1",
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "evidence": "",
        "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "pred": "SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType",
        "pred_result": 0,
        "repair_sql": "SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType",
        "repair_result": 0
    },
    {
        "idx": 50,
        "db_id": "pets_1",
        "question": "List the maximum weight and type for each type of pet.",
        "evidence": "",
        "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "pred": "SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType",
        "pred_result": 0,
        "repair_sql": "SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType",
        "repair_result": 0
    },
    {
        "idx": 51,
        "db_id": "pets_1",
        "question": "Find number of pets owned by students who are older than 20.",
        "evidence": "",
        "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "pred": "SELECT COUNT(*) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20)",
        "repair_result": 1
    },
    {
        "idx": 52,
        "db_id": "pets_1",
        "question": "How many pets are owned by students that have an age greater than 20?",
        "evidence": "",
        "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "pred": "SELECT COUNT(*) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20)",
        "repair_result": 1
    },
    {
        "idx": 53,
        "db_id": "pets_1",
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "evidence": "",
        "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "pred": "SELECT COUNT(*) FROM Has_Pet AS HP JOIN Student AS S ON HP.`StuID` = S.`StuID` JOIN Pets AS P ON HP.`PetID` = P.`PetID` WHERE S.`Sex` = 'F' AND P.`PetType` = 'dog'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Has_Pet AS HP JOIN Student AS S ON HP.`StuID` = S.`StuID` JOIN Pets AS P ON HP.`PetID` = P.`PetID` WHERE S.`Sex` = 'F' AND P.`PetType` = 'dog'",
        "repair_result": 1
    },
    {
        "idx": 54,
        "db_id": "pets_1",
        "question": "How many dog pets are raised by female students?",
        "evidence": "",
        "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "pred": "SELECT COUNT(*) FROM Has_Pet AS HP JOIN Pets AS P ON HP.PetID = P.PetID JOIN Student AS S ON HP.StuID = S.StuID WHERE P.PetType = 'dog' AND S.Sex = 'F'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Has_Pet AS HP JOIN Pets AS P ON HP.PetID = P.PetID JOIN Student AS S ON HP.StuID = S.StuID WHERE P.PetType = 'dog' AND S.Sex = 'F'",
        "repair_result": 1
    },
    {
        "idx": 55,
        "db_id": "pets_1",
        "question": "Find the number of distinct type of pets.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT pettype) FROM pets",
        "pred": "SELECT COUNT(DISTINCT PetType) FROM Pets",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT PetType) FROM Pets",
        "repair_result": 1
    },
    {
        "idx": 56,
        "db_id": "pets_1",
        "question": "How many different types of pet are there?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT pettype) FROM pets",
        "pred": "SELECT COUNT(DISTINCT PetType) FROM Pets",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT PetType) FROM Pets",
        "repair_result": 1
    },
    {
        "idx": 57,
        "db_id": "pets_1",
        "question": "Find the first name of students who have cat or dog pet.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "pred": "SELECT DISTINCT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType IN ('dog', 'cat'))",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType IN ('dog', 'cat'))",
        "repair_result": 1
    },
    {
        "idx": 58,
        "db_id": "pets_1",
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "pred": "SELECT DISTINCT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType IN ('dog', 'cat')))",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType IN ('dog', 'cat')))",
        "repair_result": 1
    },
    {
        "idx": 59,
        "db_id": "pets_1",
        "question": "Find the first name of students who have both cat and dog pets .",
        "evidence": "",
        "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "pred": "SELECT DISTINCT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'cat' ) INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'dog' ) )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'cat' ) INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'dog' ) )",
        "repair_result": 1
    },
    {
        "idx": 60,
        "db_id": "pets_1",
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "evidence": "",
        "gold": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "pred": "SELECT DISTINCT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'dog' ) AND StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'cat' ) ) )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'dog' ) AND StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'cat' ) ) )",
        "repair_result": 1
    },
    {
        "idx": 61,
        "db_id": "pets_1",
        "question": "Find the major and age of students who do not have a cat pet.",
        "evidence": "",
        "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "pred": "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')",
        "pred_result": 1,
        "repair_sql": "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')",
        "repair_result": 1
    },
    {
        "idx": 62,
        "db_id": "pets_1",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "evidence": "",
        "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "pred": "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')",
        "pred_result": 1,
        "repair_sql": "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')",
        "repair_result": 1
    },
    {
        "idx": 63,
        "db_id": "pets_1",
        "question": "Find the id of students who do not have a cat pet.",
        "evidence": "",
        "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "pred": "SELECT DISTINCT Student.`StuID` FROM Student WHERE Student.`StuID` NOT IN (SELECT Has_Pet.`StuID` FROM Has_Pet JOIN Pets ON Has_Pet.`PetID` = Pets.`PetID` WHERE Pets.`PetType` = 'cat')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT Student.`StuID` FROM Student WHERE Student.`StuID` NOT IN (SELECT Has_Pet.`StuID` FROM Has_Pet JOIN Pets ON Has_Pet.`PetID` = Pets.`PetID` WHERE Pets.`PetType` = 'cat')",
        "repair_result": 1
    },
    {
        "idx": 64,
        "db_id": "pets_1",
        "question": "What are the ids of the students who do not own cats as pets?",
        "evidence": "",
        "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "pred": "SELECT DISTINCT Student.`StuID` FROM Student WHERE Student.`StuID` NOT IN (SELECT Student.`StuID` FROM Student JOIN Has_Pet ON Student.`StuID` = Has_Pet.`StuID` JOIN Pets ON Has_Pet.`PetID` = Pets.`PetID` WHERE Pets.`PetType` = 'cat')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT Student.`StuID` FROM Student WHERE Student.`StuID` NOT IN (SELECT Student.`StuID` FROM Student JOIN Has_Pet ON Student.`StuID` = Has_Pet.`StuID` JOIN Pets ON Has_Pet.`PetID` = Pets.`PetID` WHERE Pets.`PetType` = 'cat')",
        "repair_result": 1
    },
    {
        "idx": 65,
        "db_id": "pets_1",
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "evidence": "",
        "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "pred": "SELECT Fname, Age FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog' AND StuID NOT IN ( SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' ) )",
        "pred_result": 1,
        "repair_sql": "SELECT Fname, Age FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog' AND StuID NOT IN ( SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' ) )",
        "repair_result": 1
    },
    {
        "idx": 66,
        "db_id": "pets_1",
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "evidence": "",
        "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "pred": "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog') AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')))",
        "pred_result": 0,
        "repair_sql": "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog') AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')))",
        "repair_result": 0
    },
    {
        "idx": 67,
        "db_id": "pets_1",
        "question": "Find the type and weight of the youngest pet.",
        "evidence": "",
        "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "pred": "SELECT `PetType`, `weight` FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)",
        "pred_result": 1,
        "repair_sql": "SELECT `PetType`, `weight` FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)",
        "repair_result": 1
    },
    {
        "idx": 68,
        "db_id": "pets_1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "evidence": "",
        "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "pred": "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)",
        "pred_result": 1,
        "repair_sql": "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)",
        "repair_result": 1
    },
    {
        "idx": 69,
        "db_id": "pets_1",
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "evidence": "",
        "gold": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "pred": "SELECT Pets.`PetID`, Pets.`weight` FROM Pets WHERE Pets.`pet_age` > 1",
        "pred_result": 1,
        "repair_sql": "SELECT Pets.`PetID`, Pets.`weight` FROM Pets WHERE Pets.`pet_age` > 1",
        "repair_result": 1
    },
    {
        "idx": 70,
        "db_id": "pets_1",
        "question": "What is the id and weight of every pet who is older than 1?",
        "evidence": "",
        "gold": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "pred": "SELECT Pets.`PetID`, Pets.`weight` FROM Pets WHERE Pets.`pet_age` > 1",
        "pred_result": 1,
        "repair_sql": "SELECT Pets.`PetID`, Pets.`weight` FROM Pets WHERE Pets.`pet_age` > 1",
        "repair_result": 1
    },
    {
        "idx": 71,
        "db_id": "pets_1",
        "question": "Find the average and maximum age for each type of pet.",
        "evidence": "",
        "gold": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "pred": "SELECT PetType, AVG(pet_age) AS Average_Age, MAX(pet_age) AS Max_Age FROM Pets GROUP BY PetType",
        "pred_result": 0,
        "repair_sql": "SELECT PetType, AVG(pet_age) AS Average_Age, MAX(pet_age) AS Max_Age FROM Pets GROUP BY PetType",
        "repair_result": 0
    },
    {
        "idx": 72,
        "db_id": "pets_1",
        "question": "What is the average and maximum age for each pet type?",
        "evidence": "",
        "gold": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "pred": "SELECT PetType, AVG(pet_age) AS Average_Age, MAX(pet_age) AS Max_Age FROM Pets GROUP BY PetType",
        "pred_result": 0,
        "repair_sql": "SELECT PetType, AVG(pet_age) AS Average_Age, MAX(pet_age) AS Max_Age FROM Pets GROUP BY PetType",
        "repair_result": 0
    },
    {
        "idx": 73,
        "db_id": "pets_1",
        "question": "Find the average weight for each pet type.",
        "evidence": "",
        "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "pred": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType",
        "pred_result": 0,
        "repair_sql": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType",
        "repair_result": 0
    },
    {
        "idx": 74,
        "db_id": "pets_1",
        "question": "What is the average weight for each type of pet?",
        "evidence": "",
        "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "pred": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType",
        "pred_result": 0,
        "repair_sql": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType",
        "repair_result": 0
    },
    {
        "idx": 75,
        "db_id": "pets_1",
        "question": "Find the first name and age of students who have a pet.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "pred": "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)",
        "pred_result": 1,
        "repair_sql": "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)",
        "repair_result": 1
    },
    {
        "idx": 76,
        "db_id": "pets_1",
        "question": "What are the different first names and ages of the students who do have pets?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "pred": "SELECT DISTINCT `Fname`, `Age` FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Fname`, `Age` FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)",
        "repair_result": 1
    },
    {
        "idx": 77,
        "db_id": "pets_1",
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "evidence": "",
        "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "pred": "SELECT Pets.`PetID` FROM Student JOIN Has_Pet ON Student.`StuID` = Has_Pet.`StuID` JOIN Pets ON Has_Pet.`PetID` = Pets.`PetID` WHERE Student.`LName` = 'Smith'",
        "pred_result": 1,
        "repair_sql": "SELECT Pets.`PetID` FROM Student JOIN Has_Pet ON Student.`StuID` = Has_Pet.`StuID` JOIN Pets ON Has_Pet.`PetID` = Pets.`PetID` WHERE Student.`LName` = 'Smith'",
        "repair_result": 1
    },
    {
        "idx": 78,
        "db_id": "pets_1",
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "evidence": "",
        "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "pred": "SELECT Pets.`PetID` FROM Student JOIN Has_Pet ON Student.`StuID` = Has_Pet.`StuID` JOIN Pets ON Has_Pet.`PetID` = Pets.`PetID` WHERE Student.`LName` = 'Smith'",
        "pred_result": 1,
        "repair_sql": "SELECT Pets.`PetID` FROM Student JOIN Has_Pet ON Student.`StuID` = Has_Pet.`StuID` JOIN Pets ON Has_Pet.`PetID` = Pets.`PetID` WHERE Student.`LName` = 'Smith'",
        "repair_result": 1
    },
    {
        "idx": 79,
        "db_id": "pets_1",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "evidence": "",
        "gold": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "pred": "SELECT H.`StuID`, COUNT(*) AS num_of_pets FROM Has_Pet AS H GROUP BY H.`StuID`",
        "pred_result": 0,
        "repair_sql": "SELECT H.`StuID`, COUNT(*) AS num_of_pets FROM Has_Pet AS H GROUP BY H.`StuID`",
        "repair_result": 0
    },
    {
        "idx": 80,
        "db_id": "pets_1",
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "evidence": "",
        "gold": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "pred": "SELECT `StuID`, COUNT(`PetID`) AS num_of_pets FROM Has_Pet GROUP BY `StuID`",
        "pred_result": 0,
        "repair_sql": "SELECT `StuID`, COUNT(`PetID`) AS num_of_pets FROM Has_Pet GROUP BY `StuID`",
        "repair_result": 0
    },
    {
        "idx": 81,
        "db_id": "pets_1",
        "question": "Find the first name and gender of student who have more than one pet.",
        "evidence": "",
        "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "pred": "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1)",
        "pred_result": 1,
        "repair_sql": "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1)",
        "repair_result": 1
    },
    {
        "idx": 82,
        "db_id": "pets_1",
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "evidence": "",
        "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "pred": "SELECT Fname, Sex FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT Fname, Sex FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1 )",
        "repair_result": 1
    },
    {
        "idx": 83,
        "db_id": "pets_1",
        "question": "Find the last name of the student who has a cat that is age 3.",
        "evidence": "",
        "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "pred": "SELECT LName FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' AND pet_age = 3))",
        "pred_result": 1,
        "repair_sql": "SELECT LName FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' AND pet_age = 3))",
        "repair_result": 1
    },
    {
        "idx": 84,
        "db_id": "pets_1",
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "evidence": "",
        "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "pred": "SELECT LName FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' AND pet_age = 3 )",
        "pred_result": 1,
        "repair_sql": "SELECT LName FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' AND pet_age = 3 )",
        "repair_result": 1
    },
    {
        "idx": 85,
        "db_id": "pets_1",
        "question": "Find the average age of students who do not have any pet .",
        "evidence": "",
        "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "pred": "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
        "repair_result": 1
    },
    {
        "idx": 86,
        "db_id": "pets_1",
        "question": "What is the average age for all students who do not own any pets ?",
        "evidence": "",
        "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "pred": "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
        "repair_result": 1
    },
    {
        "idx": 87,
        "db_id": "car_1",
        "question": "How many continents are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CONTINENTS;",
        "pred": "SELECT COUNT(*) FROM continents",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM continents",
        "repair_result": 1
    },
    {
        "idx": 88,
        "db_id": "car_1",
        "question": "What is the number of continents?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CONTINENTS;",
        "pred": "SELECT COUNT(*) FROM continents",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM continents",
        "repair_result": 1
    },
    {
        "idx": 89,
        "db_id": "car_1",
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "evidence": "",
        "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "pred": "SELECT c.ContId, c.Continent, COUNT(*) AS Num_of_Countries FROM continents c JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent",
        "pred_result": 1,
        "repair_sql": "SELECT c.ContId, c.Continent, COUNT(*) AS Num_of_Countries FROM continents c JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent",
        "repair_result": 1
    },
    {
        "idx": 90,
        "db_id": "car_1",
        "question": "For each continent, list its id, name, and how many countries it has?",
        "evidence": "",
        "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "pred": "SELECT c.ContId, c.Continent, COUNT(*) AS num_countries FROM continents c JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent",
        "pred_result": 1,
        "repair_sql": "SELECT c.ContId, c.Continent, COUNT(*) AS num_countries FROM continents c JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent",
        "repair_result": 1
    },
    {
        "idx": 91,
        "db_id": "car_1",
        "question": "How many countries are listed?",
        "evidence": "",
        "gold": "SELECT count(*) FROM COUNTRIES;",
        "pred": "SELECT COUNT(*) FROM countries",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM countries",
        "repair_result": 1
    },
    {
        "idx": 92,
        "db_id": "car_1",
        "question": "How many countries exist?",
        "evidence": "",
        "gold": "SELECT count(*) FROM COUNTRIES;",
        "pred": "SELECT COUNT(*) FROM countries",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM countries",
        "repair_result": 1
    },
    {
        "idx": 93,
        "db_id": "car_1",
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "evidence": "",
        "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "pred": "SELECT cm.`FullName`, cm.`Id`, COUNT(ml.`Model`) AS Number_of_Models FROM car_makers AS cm JOIN model_list AS ml ON cm.`Id` = ml.`Maker` GROUP BY cm.`Id`",
        "pred_result": 1,
        "repair_sql": "SELECT cm.`FullName`, cm.`Id`, COUNT(ml.`Model`) AS Number_of_Models FROM car_makers AS cm JOIN model_list AS ml ON cm.`Id` = ml.`Maker` GROUP BY cm.`Id`",
        "repair_result": 1
    },
    {
        "idx": 94,
        "db_id": "car_1",
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "evidence": "",
        "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "pred": "SELECT cm.`Id`, cm.`FullName`, COUNT(ml.`Model`) AS num_models FROM car_makers AS cm JOIN model_list AS ml ON cm.`Id` = ml.`Maker` GROUP BY cm.`Id`",
        "pred_result": 0,
        "repair_sql": "SELECT cm.`Id`, cm.`FullName`, COUNT(ml.`Model`) AS num_models FROM car_makers AS cm JOIN model_list AS ml ON cm.`Id` = ml.`Maker` GROUP BY cm.`Id`",
        "repair_result": 0
    },
    {
        "idx": 95,
        "db_id": "car_1",
        "question": "Which model of the car has the minimum horsepower?",
        "evidence": "",
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "pred": "SELECT `Model` FROM cars_data WHERE `Horsepower` = (SELECT MIN(`Horsepower`) FROM cars_data)",
        "pred_result": "no such column: Model",
        "repair_sql": "SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)",
        "repair_result": 0
    },
    {
        "idx": 96,
        "db_id": "car_1",
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "evidence": "",
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "pred": "SELECT `Model` FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data)",
        "pred_result": "no such column: Model",
        "repair_sql": "SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data WHERE Horsepower IS NOT NULL)",
        "repair_result": 0
    },
    {
        "idx": 97,
        "db_id": "car_1",
        "question": "Find the model of the car whose weight is below the average weight.",
        "evidence": "",
        "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "pred": "SELECT Model FROM car_names WHERE MakeId IN ( SELECT MakeId FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data) )",
        "pred_result": 0,
        "repair_sql": "SELECT Model FROM car_names WHERE MakeId IN ( SELECT MakeId FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data) )",
        "repair_result": 0
    },
    {
        "idx": 98,
        "db_id": "car_1",
        "question": "What is the model for the car with a weight smaller than the average?",
        "evidence": "",
        "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "pred": "SELECT Model FROM car_names WHERE MakeId IN (SELECT MakeId FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data))",
        "pred_result": 0,
        "repair_sql": "SELECT Model FROM car_names WHERE MakeId IN (SELECT MakeId FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data))",
        "repair_result": 0
    },
    {
        "idx": 99,
        "db_id": "car_1",
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "pred": "SELECT DISTINCT `Maker` FROM car_makers WHERE `Id` IN (SELECT `Maker` FROM model_list WHERE `ModelId` IN (SELECT `MakeId` FROM car_names WHERE `Model` IN (SELECT `Model` FROM cars_data WHERE `Year` = '1970')))",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT `Maker` FROM car_makers WHERE `Id` IN (SELECT `Maker` FROM model_list WHERE `ModelId` IN (SELECT `MakeId` FROM car_names WHERE `Model` IN (SELECT `Model` FROM cars_data WHERE `Year` = '1970')))",
        "repair_result": 0
    },
    {
        "idx": 100,
        "db_id": "car_1",
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "pred": "SELECT DISTINCT `Maker` FROM car_makers WHERE `Id` IN (SELECT `Maker` FROM model_list WHERE `ModelId` IN (SELECT `MakeId` FROM car_names WHERE `Model` IN (SELECT `Model` FROM cars_data WHERE `Year` = '1970')))",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT `Maker` FROM car_makers WHERE `Id` IN (SELECT `Maker` FROM model_list WHERE `ModelId` IN (SELECT `MakeId` FROM car_names WHERE `Model` IN (SELECT `Model` FROM cars_data WHERE `Year` = '1970')))",
        "repair_result": 0
    },
    {
        "idx": 101,
        "db_id": "car_1",
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "evidence": "",
        "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "pred": "SELECT DISTINCT T4.`Make`, T7.`Year` FROM car_names AS T4 JOIN model_list AS T3 ON T4.`Model` = T3.`Model` JOIN car_makers AS T2 ON T3.`Maker` = T2.`Id` JOIN countries AS T1 ON T2.`Country` = T1.`CountryId` JOIN continents AS T0 ON T1.`Continent` = T0.`ContId` JOIN cars_data AS T7 ON T4.`MakeId` = T7.`Id` WHERE T7.`Year` = (SELECT MIN(`Year`) FROM cars_data)",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T4.`Make`, T7.`Year` FROM car_names AS T4 JOIN model_list AS T3 ON T4.`Model` = T3.`Model` JOIN car_makers AS T2 ON T3.`Maker` = T2.`Id` JOIN countries AS T1 ON T2.`Country` = T1.`CountryId` JOIN continents AS T0 ON T1.`Continent` = T0.`ContId` JOIN cars_data AS T7 ON T4.`MakeId` = T7.`Id` WHERE T7.`Year` = (SELECT MIN(`Year`) FROM cars_data)",
        "repair_result": 0
    },
    {
        "idx": 102,
        "db_id": "car_1",
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "evidence": "",
        "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "pred": "SELECT `FullName`, MIN(`Year`) FROM car_makers JOIN model_list ON car_makers.`Id` = model_list.`Maker` JOIN car_names ON model_list.`Model` = car_names.`Model` JOIN cars_data ON car_names.`MakeId` = cars_data.`Id` GROUP BY `FullName`",
        "pred_result": 0,
        "repair_sql": "SELECT `FullName`, MIN(`Year`) FROM car_makers JOIN model_list ON car_makers.`Id` = model_list.`Maker` JOIN car_names ON model_list.`Model` = car_names.`Model` JOIN cars_data ON car_names.`MakeId` = cars_data.`Id` GROUP BY `FullName`",
        "repair_result": 0
    },
    {
        "idx": 103,
        "db_id": "car_1",
        "question": "Which distinct car models are the produced after 1980?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "pred": "SELECT DISTINCT Model FROM model_list JOIN car_names ON model_list.Maker = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Year > 1980",
        "pred_result": "ambiguous column name: Model",
        "repair_sql": "SELECT DISTINCT car_names.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980",
        "repair_result": 0
    },
    {
        "idx": 104,
        "db_id": "car_1",
        "question": "What are the different models for the cards produced after 1980?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "pred": "SELECT DISTINCT `Model` FROM car_names JOIN cars_data ON car_names.`MakeId` = cars_data.`Id` WHERE cars_data.`Year` > 1980",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Model` FROM car_names JOIN cars_data ON car_names.`MakeId` = cars_data.`Id` WHERE cars_data.`Year` > 1980",
        "repair_result": 1
    },
    {
        "idx": 105,
        "db_id": "car_1",
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "evidence": "",
        "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "pred": "SELECT c.Continent, COUNT(DISTINCT cm.Id) AS num_car_makers FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent",
        "pred_result": 1,
        "repair_sql": "SELECT c.Continent, COUNT(DISTINCT cm.Id) AS num_car_makers FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent",
        "repair_result": 1
    },
    {
        "idx": 106,
        "db_id": "car_1",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "evidence": "",
        "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "pred": "SELECT c.Continent, COUNT(cm.Id) AS Num_of_Car_Makers FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent LEFT JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent",
        "pred_result": 0,
        "repair_sql": "SELECT c.Continent, COUNT(cm.Id) AS Num_of_Car_Makers FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent LEFT JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent",
        "repair_result": 0
    },
    {
        "idx": 107,
        "db_id": "car_1",
        "question": "Which of the countries has the most car makers? List the country name.",
        "evidence": "",
        "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "pred": "SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 108,
        "db_id": "car_1",
        "question": "What is the name of the country with the most car makers?",
        "evidence": "",
        "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "pred": "SELECT `CountryName` FROM countries WHERE CountryId = ( SELECT Country FROM car_makers GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT `CountryName` FROM countries WHERE CountryId = ( SELECT Country FROM car_makers GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 109,
        "db_id": "car_1",
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "evidence": "",
        "gold": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "pred": "SELECT T3.`FullName` AS Maker_FullName, COUNT(*) AS Model_Count FROM car_makers AS T1 JOIN model_list AS T2 ON T1.`Id` = T2.`Maker` GROUP BY T1.`Id`",
        "pred_result": "no such column: T3.FullName",
        "repair_sql": "SELECT T1.`FullName` AS Maker_FullName, COUNT(T2.`Model`) AS Model_Count FROM car_makers AS T1 JOIN model_list AS T2 ON T1.`Id` = T2.`Maker` GROUP BY T1.`Id`",
        "repair_result": 0
    },
    {
        "idx": 110,
        "db_id": "car_1",
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "evidence": "",
        "gold": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "pred": "SELECT T3.`Id`, T3.`FullName`, COUNT(*) AS Number_of_Models FROM car_makers AS T3 JOIN model_list AS T2 ON T3.`Id` = T2.`Maker` JOIN car_names AS T1 ON T2.`Model` = T1.`Model` GROUP BY T3.`Id`",
        "pred_result": 0,
        "repair_sql": "SELECT T3.`Id`, T3.`FullName`, COUNT(*) AS Number_of_Models FROM car_makers AS T3 JOIN model_list AS T2 ON T3.`Id` = T2.`Maker` JOIN car_names AS T1 ON T2.`Model` = T1.`Model` GROUP BY T3.`Id`",
        "repair_result": 0
    },
    {
        "idx": 111,
        "db_id": "car_1",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "evidence": "",
        "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "pred": "SELECT `Accelerate` FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Make = 'amc hornet sportabout (sw)')",
        "pred_result": 1,
        "repair_sql": "SELECT `Accelerate` FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Make = 'amc hornet sportabout (sw)')",
        "repair_result": 1
    },
    {
        "idx": 112,
        "db_id": "car_1",
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "evidence": "",
        "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "pred": "SELECT `Accelerate` FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'amc hornet sportabout')",
        "pred_result": 0,
        "repair_sql": "SELECT `Accelerate` FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'amc hornet sportabout')",
        "repair_result": 0
    },
    {
        "idx": 113,
        "db_id": "car_1",
        "question": "How many car makers are there in france?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "pred": "SELECT COUNT(*) FROM car_makers WHERE Country = 'france'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM car_makers WHERE Country = 'france'",
        "repair_result": 0
    },
    {
        "idx": 114,
        "db_id": "car_1",
        "question": "What is the number of makers of care in France?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "pred": "SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = 'france'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = 'france'",
        "repair_result": 0
    },
    {
        "idx": 115,
        "db_id": "car_1",
        "question": "How many car models are produced in the usa?",
        "evidence": "",
        "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "pred": "SELECT COUNT(*) FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Id IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'usa')))",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Id IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'usa')))",
        "repair_result": 0
    },
    {
        "idx": 116,
        "db_id": "car_1",
        "question": "What is the count of the car models produced in the United States?",
        "evidence": "",
        "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "pred": "SELECT COUNT(*) FROM car_names WHERE MakeId IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'usa'))",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM car_names WHERE MakeId IN (SELECT Id FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'usa'))",
        "repair_result": 0
    },
    {
        "idx": 117,
        "db_id": "car_1",
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "evidence": "",
        "gold": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "pred": "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4",
        "repair_result": 1
    },
    {
        "idx": 118,
        "db_id": "car_1",
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "evidence": "",
        "gold": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "pred": "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4",
        "repair_result": 1
    },
    {
        "idx": 119,
        "db_id": "car_1",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "evidence": "",
        "gold": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "pred": "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974",
        "pred_result": 1,
        "repair_sql": "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974",
        "repair_result": 1
    },
    {
        "idx": 120,
        "db_id": "car_1",
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "evidence": "",
        "gold": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "pred": "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = '1974'",
        "pred_result": 1,
        "repair_sql": "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = '1974'",
        "repair_result": 1
    },
    {
        "idx": 121,
        "db_id": "car_1",
        "question": "What are all the makers and models?",
        "evidence": "",
        "gold": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "pred": "SELECT DISTINCT `Maker`, `Model` FROM car_makers JOIN model_list ON car_makers.`Id` = model_list.`Maker`",
        "pred_result": "ambiguous column name: Maker",
        "repair_sql": "SELECT DISTINCT car_makers.`Maker`, model_list.`Model` FROM car_makers JOIN model_list ON car_makers.`Id` = model_list.`Maker`",
        "repair_result": 0
    },
    {
        "idx": 122,
        "db_id": "car_1",
        "question": "What are the makers and models?",
        "evidence": "",
        "gold": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "pred": "SELECT `Maker`, `Model` FROM car_makers JOIN model_list ON car_makers.`Id` = model_list.`Maker`",
        "pred_result": "ambiguous column name: Maker",
        "repair_sql": "SELECT car_makers.`Maker`, model_list.`Model` FROM car_makers JOIN model_list ON car_makers.`Id` = model_list.`Maker`",
        "repair_result": 0
    },
    {
        "idx": 123,
        "db_id": "car_1",
        "question": "What are the countries having at least one car maker? List name and id.",
        "evidence": "",
        "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "pred": "SELECT DISTINCT c.`CountryId`, c.`CountryName` FROM countries c JOIN car_makers cm ON c.`CountryId` = cm.`Country`",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT c.`CountryId`, c.`CountryName` FROM countries c JOIN car_makers cm ON c.`CountryId` = cm.`Country`",
        "repair_result": 0
    },
    {
        "idx": 124,
        "db_id": "car_1",
        "question": "What are the names and ids of all countries with at least one car maker?",
        "evidence": "",
        "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "pred": "SELECT DISTINCT c.`CountryId`, c.`CountryName` FROM countries c JOIN car_makers cm ON c.`CountryId` = cm.`Country`",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT c.`CountryId`, c.`CountryName` FROM countries c JOIN car_makers cm ON c.`CountryId` = cm.`Country`",
        "repair_result": 0
    },
    {
        "idx": 125,
        "db_id": "car_1",
        "question": "What is the number of the cars with horsepower more than 150?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "pred": "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150",
        "repair_result": 1
    },
    {
        "idx": 126,
        "db_id": "car_1",
        "question": "What is the number of cars with a horsepower greater than 150?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "pred": "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150",
        "repair_result": 1
    },
    {
        "idx": 127,
        "db_id": "car_1",
        "question": "What is the average weight of cars each year?",
        "evidence": "",
        "gold": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "pred": "SELECT `Year`, AVG(`Weight`) FROM cars_data GROUP BY `Year`",
        "pred_result": 0,
        "repair_sql": "SELECT `Year`, AVG(`Weight`) FROM cars_data GROUP BY `Year`",
        "repair_result": 0
    },
    {
        "idx": 128,
        "db_id": "car_1",
        "question": "What is the average weight and year for each year?",
        "evidence": "",
        "gold": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "pred": "SELECT `Year`, AVG(`Weight`), AVG(`Year`) FROM cars_data GROUP BY `Year`",
        "pred_result": 0,
        "repair_sql": "SELECT `Year`, AVG(`Weight`), AVG(`Year`) FROM cars_data GROUP BY `Year`",
        "repair_result": 0
    },
    {
        "idx": 129,
        "db_id": "car_1",
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "evidence": "",
        "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "pred": "SELECT DISTINCT c.`CountryName` FROM countries c JOIN car_makers cm ON c.`CountryId` = cm.`Country` JOIN model_list ml ON cm.`Id` = ml.`Maker` JOIN car_names cn ON ml.`Model` = cn.`Model` JOIN cars_data cd ON cn.`MakeId` = cd.`Id` WHERE c.`Continent` = 'europe' GROUP BY c.`CountryName` HAVING COUNT(DISTINCT cm.`Maker`) >= 3",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT c.`CountryName` FROM countries c JOIN car_makers cm ON c.`CountryId` = cm.`Country` JOIN model_list ml ON cm.`Id` = ml.`Maker` JOIN car_names cn ON ml.`Model` = cn.`Model` JOIN cars_data cd ON cn.`MakeId` = cd.`Id` WHERE c.`Continent` = 'europe' GROUP BY c.`CountryName` HAVING COUNT(DISTINCT cm.`Maker`) >= 3",
        "repair_result": 0
    },
    {
        "idx": 130,
        "db_id": "car_1",
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "evidence": "",
        "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "pred": "SELECT DISTINCT c.`CountryName` FROM countries c JOIN car_makers cm ON c.`CountryId` = cm.`Country` JOIN model_list ml ON cm.`Id` = ml.`Maker` JOIN car_names cn ON ml.`Model` = cn.`Model` JOIN cars_data cd ON cn.`MakeId` = cd.`Id` WHERE c.`Continent` = 'europe' GROUP BY c.`CountryName` HAVING COUNT(DISTINCT cm.`Maker`) >= 3",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT c.`CountryName` FROM countries c JOIN car_makers cm ON c.`CountryId` = cm.`Country` JOIN model_list ml ON cm.`Id` = ml.`Maker` JOIN car_names cn ON ml.`Model` = cn.`Model` JOIN cars_data cd ON cn.`MakeId` = cd.`Id` WHERE c.`Continent` = 'europe' GROUP BY c.`CountryName` HAVING COUNT(DISTINCT cm.`Maker`) >= 3",
        "repair_result": 0
    },
    {
        "idx": 131,
        "db_id": "car_1",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "evidence": "",
        "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "pred": "SELECT MAX(Horsepower), Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cylinders = 3",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(Horsepower), Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cylinders = 3",
        "repair_result": 1
    },
    {
        "idx": 132,
        "db_id": "car_1",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "evidence": "",
        "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "pred": "SELECT `Make`, MAX(`Horsepower`) AS Max_Horsepower FROM cars_data WHERE `Cylinders` = 3",
        "pred_result": "no such column: Make",
        "repair_sql": "SELECT car_names.Make, MAX(cars_data.Horsepower) AS Max_Horsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3",
        "repair_result": 0
    },
    {
        "idx": 133,
        "db_id": "car_1",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "evidence": "",
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "pred": "SELECT `Model` FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data)",
        "pred_result": "no such column: Model",
        "repair_sql": "SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data)",
        "repair_result": 0
    },
    {
        "idx": 134,
        "db_id": "car_1",
        "question": "What is the car model with the highest mpg ?",
        "evidence": "",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "pred": "SELECT `Model` FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data)",
        "pred_result": "no such column: Model",
        "repair_sql": "SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE MPG = (SELECT MAX(MPG) FROM cars_data)",
        "repair_result": 0
    },
    {
        "idx": 135,
        "db_id": "car_1",
        "question": "What is the average horsepower of the cars before 1980?",
        "evidence": "",
        "gold": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
        "pred": "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
        "repair_result": 1
    },
    {
        "idx": 136,
        "db_id": "car_1",
        "question": "What is the average horsepower for all cars produced before 1980 ?",
        "evidence": "",
        "gold": "select avg(horsepower) from cars_data where year  <  1980;",
        "pred": "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
        "repair_result": 1
    },
    {
        "idx": 137,
        "db_id": "car_1",
        "question": "What is the average edispl of the cars of model volvo?",
        "evidence": "",
        "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "pred": "SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')",
        "repair_result": 1
    },
    {
        "idx": 138,
        "db_id": "car_1",
        "question": "What is the average edispl for all volvos?",
        "evidence": "",
        "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "pred": "SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Maker = 'volvo')))",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Maker = 'volvo')))",
        "repair_result": 1
    },
    {
        "idx": 139,
        "db_id": "car_1",
        "question": "What is the maximum accelerate for different number of cylinders?",
        "evidence": "",
        "gold": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "pred": "SELECT `Cylinders`, MAX(`Accelerate`) FROM cars_data GROUP BY `Cylinders`",
        "pred_result": 0,
        "repair_sql": "SELECT `Cylinders`, MAX(`Accelerate`) FROM cars_data GROUP BY `Cylinders`",
        "repair_result": 0
    },
    {
        "idx": 140,
        "db_id": "car_1",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "evidence": "",
        "gold": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "pred": "SELECT `Cylinders`, MAX(`Accelerate`) FROM cars_data GROUP BY `Cylinders`",
        "pred_result": 0,
        "repair_sql": "SELECT `Cylinders`, MAX(`Accelerate`) FROM cars_data GROUP BY `Cylinders`",
        "repair_result": 0
    },
    {
        "idx": 141,
        "db_id": "car_1",
        "question": "Which model has the most version(make) of cars?",
        "evidence": "",
        "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "pred": "SELECT `Model`, COUNT(DISTINCT `Make`) AS Version_Count FROM car_names GROUP BY `Model` ORDER BY Version_Count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Model`, COUNT(DISTINCT `Make`) AS Version_Count FROM car_names GROUP BY `Model` ORDER BY Version_Count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 142,
        "db_id": "car_1",
        "question": "What model has the most different versions?",
        "evidence": "",
        "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "pred": "SELECT `Model`, COUNT(DISTINCT `Make`) AS num_versions FROM car_names GROUP BY `Model` ORDER BY num_versions DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Model`, COUNT(DISTINCT `Make`) AS num_versions FROM car_names GROUP BY `Model` ORDER BY num_versions DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 143,
        "db_id": "car_1",
        "question": "How many cars have more than 4 cylinders?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "pred": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4",
        "repair_result": 1
    },
    {
        "idx": 144,
        "db_id": "car_1",
        "question": "What is the number of cars with more than 4 cylinders?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "pred": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4",
        "repair_result": 1
    },
    {
        "idx": 145,
        "db_id": "car_1",
        "question": "how many cars were produced in 1980?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "pred": "SELECT COUNT(*) FROM cars_data WHERE Year = '1980'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM cars_data WHERE Year = '1980'",
        "repair_result": 1
    },
    {
        "idx": 146,
        "db_id": "car_1",
        "question": "In 1980, how many cars were made?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "pred": "SELECT COUNT(*) FROM cars_data WHERE Year = '1980'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM cars_data WHERE Year = '1980'",
        "repair_result": 1
    },
    {
        "idx": 147,
        "db_id": "car_1",
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "pred": "SELECT COUNT(*) FROM car_names WHERE MakeId IN (SELECT MakeId FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company'))",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM car_names WHERE MakeId IN (SELECT MakeId FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company'))",
        "repair_result": 0
    },
    {
        "idx": 148,
        "db_id": "car_1",
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "pred": "SELECT COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.`Id` = T2.`Maker` WHERE T1.`Maker` = 'amc'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.`Id` = T2.`Maker` WHERE T1.`Maker` = 'amc'",
        "repair_result": 1
    },
    {
        "idx": 149,
        "db_id": "car_1",
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "evidence": "",
        "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "pred": "SELECT `FullName`, `Id` FROM car_makers WHERE `Id` IN ( SELECT `Maker` FROM model_list GROUP BY `Maker` HAVING COUNT(`Model`) > 3 )",
        "pred_result": 1,
        "repair_sql": "SELECT `FullName`, `Id` FROM car_makers WHERE `Id` IN ( SELECT `Maker` FROM model_list GROUP BY `Maker` HAVING COUNT(`Model`) > 3 )",
        "repair_result": 1
    },
    {
        "idx": 150,
        "db_id": "car_1",
        "question": "What are the names and ids of all makers with more than 3 models?",
        "evidence": "",
        "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "pred": "SELECT `Id`, `Maker` FROM car_makers WHERE `Id` IN (SELECT `Maker` FROM model_list GROUP BY `Maker` HAVING COUNT(*) > 3)",
        "pred_result": 0,
        "repair_sql": "SELECT `Id`, `Maker` FROM car_makers WHERE `Id` IN (SELECT `Maker` FROM model_list GROUP BY `Maker` HAVING COUNT(*) > 3)",
        "repair_result": 0
    },
    {
        "idx": 151,
        "db_id": "car_1",
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "pred": "SELECT DISTINCT T4.`Model` FROM car_makers AS T1 JOIN model_list AS T2 ON T1.`Id` = T2.`Maker` JOIN car_names AS T3 ON T2.`Model` = T3.`Model` JOIN cars_data AS T4 ON T3.`MakeId` = T4.`Id` WHERE T1.`FullName` = 'General Motors' OR T4.`Weight` > 3500",
        "pred_result": "no such column: T4.Model",
        "repair_sql": "SELECT DISTINCT T3.`Model` FROM car_makers AS T1 JOIN model_list AS T2 ON T1.`Id` = T2.`Maker` JOIN car_names AS T3 ON T2.`Model` = T3.`Model` JOIN cars_data AS T4 ON T3.`MakeId` = T4.`Id` WHERE T1.`FullName` = 'General Motors' OR T4.`Weight` > 3500",
        "repair_result": 1
    },
    {
        "idx": 152,
        "db_id": "car_1",
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "pred": "SELECT DISTINCT T4.`Model` FROM car_makers AS T1 JOIN model_list AS T2 ON T1.`Id` = T2.`Maker` JOIN car_names AS T3 ON T2.`Model` = T3.`Model` JOIN cars_data AS T4 ON T3.`MakeId` = T4.`Id` WHERE T1.`Maker` = 'General Motors' OR T4.`Weight` > 3500",
        "pred_result": "no such column: T4.Model",
        "repair_sql": "SELECT DISTINCT T3.`Model` FROM car_makers AS T1 JOIN model_list AS T2 ON T1.`Id` = T2.`Maker` JOIN car_names AS T3 ON T2.`Model` = T3.`Model` JOIN cars_data AS T4 ON T3.`MakeId` = T4.`Id` WHERE T1.`Maker` = 'General Motors' OR T4.`Weight` > 3500",
        "repair_result": 1
    },
    {
        "idx": 153,
        "db_id": "car_1",
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "evidence": "",
        "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
        "pred": "SELECT DISTINCT `Year` FROM cars_data WHERE `Weight` >= 3000 AND `Weight` <= 4000",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Year` FROM cars_data WHERE `Weight` >= 3000 AND `Weight` <= 4000",
        "repair_result": 1
    },
    {
        "idx": 154,
        "db_id": "car_1",
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "evidence": "",
        "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
        "pred": "SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000",
        "repair_result": 1
    },
    {
        "idx": 155,
        "db_id": "car_1",
        "question": "What is the horsepower of the car with the largest accelerate?",
        "evidence": "",
        "gold": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "pred": "SELECT `Horsepower` FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)",
        "pred_result": 1,
        "repair_sql": "SELECT `Horsepower` FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)",
        "repair_result": 1
    },
    {
        "idx": 156,
        "db_id": "car_1",
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "evidence": "",
        "gold": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "pred": "SELECT `Horsepower` FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)",
        "pred_result": 1,
        "repair_sql": "SELECT `Horsepower` FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)",
        "repair_result": 1
    },
    {
        "idx": 157,
        "db_id": "car_1",
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "evidence": "",
        "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "pred": "SELECT MIN(Cylinders) FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'volvo' ORDER BY Accelerate LIMIT 1)",
        "pred_result": "no such column: Accelerate",
        "repair_sql": "SELECT MIN(Cylinders) FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'volvo')",
        "repair_result": 0
    },
    {
        "idx": 158,
        "db_id": "car_1",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "evidence": "",
        "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "pred": "SELECT MIN(Cylinders) FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Make = 'volvo')",
        "pred_result": 0,
        "repair_sql": "SELECT MIN(Cylinders) FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Make = 'volvo')",
        "repair_result": 0
    },
    {
        "idx": 159,
        "db_id": "car_1",
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "pred": "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)",
        "repair_result": 0
    },
    {
        "idx": 160,
        "db_id": "car_1",
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "pred": "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)",
        "repair_result": 0
    },
    {
        "idx": 161,
        "db_id": "car_1",
        "question": "How many countries has more than 2 car makers ?",
        "evidence": "",
        "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "pred": "SELECT COUNT(DISTINCT c.`CountryName`) FROM countries c JOIN car_makers cm ON c.`CountryId` = cm.`Country` GROUP BY c.`CountryName` HAVING COUNT(DISTINCT cm.`Id`) > 2",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT c.`CountryName`) FROM countries c JOIN car_makers cm ON c.`CountryId` = cm.`Country` GROUP BY c.`CountryName` HAVING COUNT(DISTINCT cm.`Id`) > 2",
        "repair_result": 0
    },
    {
        "idx": 162,
        "db_id": "car_1",
        "question": "What is the number of countries with more than 2 car makers ?",
        "evidence": "",
        "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "pred": "SELECT COUNT(DISTINCT countries.`CountryName`) FROM countries JOIN car_makers ON countries.`CountryId` = car_makers.`Country` GROUP BY countries.`CountryName` HAVING COUNT(DISTINCT car_makers.`Id`) > 2",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT countries.`CountryName`) FROM countries JOIN car_makers ON countries.`CountryId` = car_makers.`Country` GROUP BY countries.`CountryName` HAVING COUNT(DISTINCT car_makers.`Id`) > 2",
        "repair_result": 0
    },
    {
        "idx": 163,
        "db_id": "car_1",
        "question": "How many cars has over 6 cylinders?",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "pred": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6",
        "repair_result": 1
    },
    {
        "idx": 164,
        "db_id": "car_1",
        "question": "What is the number of carsw ith over 6 cylinders?",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "pred": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6",
        "repair_result": 1
    },
    {
        "idx": 165,
        "db_id": "car_1",
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "evidence": "",
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "pred": "SELECT `Model`, MAX(`Horsepower`) FROM cars_data WHERE `Cylinders` = 4",
        "pred_result": "no such column: Model",
        "repair_sql": "SELECT model_list.Model, MAX(cars_data.Horsepower) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 4",
        "repair_result": 0
    },
    {
        "idx": 166,
        "db_id": "car_1",
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "evidence": "",
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "pred": "SELECT `Model`, MAX(`Horsepower`) FROM cars_data WHERE `Cylinders` = 4",
        "pred_result": "no such column: Model",
        "repair_sql": "SELECT model_list.Model, MAX(cars_data.Horsepower) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 4 GROUP BY model_list.Model",
        "repair_result": 0
    },
    {
        "idx": 167,
        "db_id": "car_1",
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "evidence": "",
        "gold": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "pred": "SELECT DISTINCT T1.`MakeId`, T1.`Make` FROM car_names AS T1 JOIN cars_data AS T2 ON T1.`MakeId` = T2.`Id` WHERE T2.`Cylinders` <= 3 AND T2.`Horsepower` > (SELECT MIN(Horsepower) FROM cars_data)",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`MakeId`, T1.`Make` FROM car_names AS T1 JOIN cars_data AS T2 ON T1.`MakeId` = T2.`Id` WHERE T2.`Cylinders` <= 3 AND T2.`Horsepower` > (SELECT MIN(Horsepower) FROM cars_data)",
        "repair_result": 1
    },
    {
        "idx": 168,
        "db_id": "car_1",
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "evidence": "",
        "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "pred": "SELECT DISTINCT T1.`MakeId`, T2.`Make` FROM cars_data AS T1 JOIN car_names AS T2 ON T1.`Id` = T2.`MakeId` WHERE T1.`Cylinders` < 4 AND T1.`Horsepower` > (SELECT MIN(Horsepower) FROM cars_data)",
        "pred_result": "no such column: T1.MakeId",
        "repair_sql": "SELECT DISTINCT T2.`MakeId`, T2.`Make` FROM cars_data AS T1 JOIN car_names AS T2 ON T1.`Id` = T2.`MakeId` WHERE T1.`Cylinders` < 4 AND T1.`Horsepower` > (SELECT MIN(Horsepower) FROM cars_data WHERE Cylinders < 4)",
        "repair_result": 1
    },
    {
        "idx": 169,
        "db_id": "car_1",
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "evidence": "",
        "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "pred": "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980",
        "repair_result": 1
    },
    {
        "idx": 170,
        "db_id": "car_1",
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "evidence": "",
        "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "pred": "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980",
        "repair_result": 1
    },
    {
        "idx": 171,
        "db_id": "car_1",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "pred": "SELECT DISTINCT T1.`Model` FROM cars_data AS T1 JOIN car_names AS T2 ON T1.`Id` = T2.`MakeId` JOIN model_list AS T3 ON T2.`Model` = T3.`Model` JOIN car_makers AS T4 ON T3.`Maker` = T4.`Id` WHERE T1.`Weight` < 3500 AND T4.`Maker` != 'ford'",
        "pred_result": "no such column: T1.Model",
        "repair_sql": "SELECT DISTINCT T3.`Model` FROM cars_data AS T1 JOIN car_names AS T2 ON T1.`Id` = T2.`MakeId` JOIN model_list AS T3 ON T2.`Model` = T3.`Model` JOIN car_makers AS T4 ON T3.`Maker` = T4.`Id` WHERE T1.`Weight` < 3500 AND T4.`Maker` != 'ford'",
        "repair_result": 1
    },
    {
        "idx": 172,
        "db_id": "car_1",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "pred": "SELECT DISTINCT T1.`Model` FROM cars_data AS T1 JOIN car_names AS T2 ON T1.`Id` = T2.`MakeId` JOIN model_list AS T3 ON T2.`Model` = T3.`Model` JOIN car_makers AS T4 ON T3.`Maker` = T4.`Id` WHERE T1.`Weight` < 3500 AND T4.`Maker` != 'ford'",
        "pred_result": "no such column: T1.Model",
        "repair_sql": "SELECT DISTINCT T3.`Model` FROM cars_data AS T1 JOIN car_names AS T2 ON T1.`Id` = T2.`MakeId` JOIN model_list AS T3 ON T2.`Model` = T3.`Model` JOIN car_makers AS T4 ON T3.`Maker` = T4.`Id` WHERE T1.`Weight` < 3500 AND T4.`Maker` != 'ford'",
        "repair_result": 1
    },
    {
        "idx": 173,
        "db_id": "car_1",
        "question": "What are the name of the countries where there is not a single car maker?",
        "evidence": "",
        "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "pred": "SELECT DISTINCT CountryName FROM countries WHERE CountryName NOT IN (SELECT DISTINCT Country FROM car_makers)",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT CountryName FROM countries WHERE CountryName NOT IN (SELECT DISTINCT Country FROM car_makers)",
        "repair_result": 0
    },
    {
        "idx": 174,
        "db_id": "car_1",
        "question": "What are the names of the countries with no car makers?",
        "evidence": "",
        "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "pred": "SELECT DISTINCT CountryName FROM countries WHERE CountryName NOT IN (SELECT Country FROM car_makers)",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT CountryName FROM countries WHERE CountryName NOT IN (SELECT Country FROM car_makers)",
        "repair_result": 0
    },
    {
        "idx": 175,
        "db_id": "car_1",
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "evidence": "",
        "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "pred": "SELECT `Id`, `Maker` FROM car_makers WHERE `Id` IN (SELECT `Maker` FROM model_list GROUP BY `Maker` HAVING COUNT(DISTINCT `Model`) >= 2) AND `Id` IN (SELECT `Maker` FROM model_list GROUP BY `Maker` HAVING COUNT(DISTINCT `Model`) > 3)",
        "pred_result": 0,
        "repair_sql": "SELECT `Id`, `Maker` FROM car_makers WHERE `Id` IN (SELECT `Maker` FROM model_list GROUP BY `Maker` HAVING COUNT(DISTINCT `Model`) >= 2) AND `Id` IN (SELECT `Maker` FROM model_list GROUP BY `Maker` HAVING COUNT(DISTINCT `Model`) > 3)",
        "repair_result": 0
    },
    {
        "idx": 176,
        "db_id": "car_1",
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "evidence": "",
        "gold": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "pred": "SELECT T1.`Id`, T1.`Maker` FROM car_makers AS T1 JOIN model_list AS T2 ON T1.`Id` = T2.`Maker` JOIN car_names AS T3 ON T2.`Model` = T3.`Model` GROUP BY T1.`Id`, T1.`Maker` HAVING COUNT(DISTINCT T3.`Make`) > 3 AND COUNT(DISTINCT T2.`ModelId`) >= 2",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`Id`, T1.`Maker` FROM car_makers AS T1 JOIN model_list AS T2 ON T1.`Id` = T2.`Maker` JOIN car_names AS T3 ON T2.`Model` = T3.`Model` GROUP BY T1.`Id`, T1.`Maker` HAVING COUNT(DISTINCT T3.`Make`) > 3 AND COUNT(DISTINCT T2.`ModelId`) >= 2",
        "repair_result": 0
    },
    {
        "idx": 177,
        "db_id": "car_1",
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "evidence": "",
        "gold": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
        "pred": "SELECT CountryId, CountryName FROM countries WHERE CountryId IN ( SELECT DISTINCT Country FROM car_makers WHERE Id IN ( SELECT Maker FROM model_list WHERE Model = 'fiat' ) OR Country IN ( SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3 ) )",
        "pred_result": 1,
        "repair_sql": "SELECT CountryId, CountryName FROM countries WHERE CountryId IN ( SELECT DISTINCT Country FROM car_makers WHERE Id IN ( SELECT Maker FROM model_list WHERE Model = 'fiat' ) OR Country IN ( SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3 ) )",
        "repair_result": 1
    },
    {
        "idx": 178,
        "db_id": "car_1",
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "evidence": "",
        "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "pred": "SELECT CountryId, CountryName FROM countries WHERE CountryId IN ( SELECT DISTINCT Country FROM car_makers WHERE Id IN ( SELECT Maker FROM model_list WHERE Model IN ( SELECT Model FROM car_names WHERE Make LIKE '%fiat%' ) ) ) OR CountryId IN ( SELECT DISTINCT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3 )",
        "pred_result": 1,
        "repair_sql": "SELECT CountryId, CountryName FROM countries WHERE CountryId IN ( SELECT DISTINCT Country FROM car_makers WHERE Id IN ( SELECT Maker FROM model_list WHERE Model IN ( SELECT Model FROM car_names WHERE Make LIKE '%fiat%' ) ) ) OR CountryId IN ( SELECT DISTINCT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3 )",
        "repair_result": 1
    },
    {
        "idx": 179,
        "db_id": "flight_2",
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "evidence": "",
        "gold": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "pred": "SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'",
        "pred_result": 1,
        "repair_sql": "SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'",
        "repair_result": 1
    },
    {
        "idx": 180,
        "db_id": "flight_2",
        "question": "What country is Jetblue Airways affiliated with?",
        "evidence": "",
        "gold": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "pred": "SELECT `Country` FROM airlines WHERE `Airline` = 'JetBlue Airways'",
        "pred_result": 1,
        "repair_sql": "SELECT `Country` FROM airlines WHERE `Airline` = 'JetBlue Airways'",
        "repair_result": 1
    },
    {
        "idx": 181,
        "db_id": "flight_2",
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "evidence": "",
        "gold": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "pred": "SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'",
        "pred_result": 1,
        "repair_sql": "SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'",
        "repair_result": 1
    },
    {
        "idx": 182,
        "db_id": "flight_2",
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "evidence": "",
        "gold": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "pred": "SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'",
        "pred_result": 1,
        "repair_sql": "SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'",
        "repair_result": 1
    },
    {
        "idx": 183,
        "db_id": "flight_2",
        "question": "List all airline names and their abbreviations in \"USA\".",
        "evidence": "",
        "gold": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "pred": "SELECT `Airline`, `Abbreviation` FROM airlines WHERE `Country` = 'USA'",
        "pred_result": 1,
        "repair_sql": "SELECT `Airline`, `Abbreviation` FROM airlines WHERE `Country` = 'USA'",
        "repair_result": 1
    },
    {
        "idx": 184,
        "db_id": "flight_2",
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "evidence": "",
        "gold": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "pred": "SELECT `Airline`, `Abbreviation` FROM airlines WHERE `Country` = 'USA'",
        "pred_result": 1,
        "repair_sql": "SELECT `Airline`, `Abbreviation` FROM airlines WHERE `Country` = 'USA'",
        "repair_result": 1
    },
    {
        "idx": 185,
        "db_id": "flight_2",
        "question": "List the airport code and name in the city of Anthony.",
        "evidence": "",
        "gold": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "pred": "SELECT `AirportCode`, `AirportName` FROM airports WHERE City = 'Anthony'",
        "pred_result": 1,
        "repair_sql": "SELECT `AirportCode`, `AirportName` FROM airports WHERE City = 'Anthony'",
        "repair_result": 1
    },
    {
        "idx": 186,
        "db_id": "flight_2",
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "evidence": "",
        "gold": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "pred": "SELECT `AirportCode`, `AirportName` FROM airports WHERE City = 'Anthony'",
        "pred_result": 1,
        "repair_sql": "SELECT `AirportCode`, `AirportName` FROM airports WHERE City = 'Anthony'",
        "repair_result": 1
    },
    {
        "idx": 187,
        "db_id": "flight_2",
        "question": "How many airlines do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRLINES",
        "pred": "SELECT COUNT(*) FROM airlines",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM airlines",
        "repair_result": 1
    },
    {
        "idx": 188,
        "db_id": "flight_2",
        "question": "What is the total number of airlines?",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRLINES",
        "pred": "SELECT COUNT(*) FROM airlines",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM airlines",
        "repair_result": 1
    },
    {
        "idx": 189,
        "db_id": "flight_2",
        "question": "How many airports do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRPORTS",
        "pred": "SELECT COUNT(*) FROM airports",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM airports",
        "repair_result": 1
    },
    {
        "idx": 190,
        "db_id": "flight_2",
        "question": "Return the number of  airports.",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRPORTS",
        "pred": "SELECT COUNT(*) FROM airports",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM airports",
        "repair_result": 1
    },
    {
        "idx": 191,
        "db_id": "flight_2",
        "question": "How many flights do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS",
        "pred": "SELECT COUNT(*) FROM flights",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights",
        "repair_result": 1
    },
    {
        "idx": 192,
        "db_id": "flight_2",
        "question": "Return the number of flights.",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS",
        "pred": "SELECT COUNT(*) FROM flights",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights",
        "repair_result": 1
    },
    {
        "idx": 193,
        "db_id": "flight_2",
        "question": "Which airline has abbreviation 'UAL'?",
        "evidence": "",
        "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "pred": "SELECT `Airline` FROM airlines WHERE `Abbreviation` = 'UAL'",
        "pred_result": 1,
        "repair_sql": "SELECT `Airline` FROM airlines WHERE `Abbreviation` = 'UAL'",
        "repair_result": 1
    },
    {
        "idx": 194,
        "db_id": "flight_2",
        "question": "Give the airline with abbreviation 'UAL'.",
        "evidence": "",
        "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "pred": "SELECT * FROM airlines WHERE Abbreviation = 'UAL'",
        "pred_result": 0,
        "repair_sql": "SELECT * FROM airlines WHERE Abbreviation = 'UAL'",
        "repair_result": 0
    },
    {
        "idx": 195,
        "db_id": "flight_2",
        "question": "How many airlines are from USA?",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "pred": "SELECT COUNT(*) FROM airlines WHERE Country = 'USA'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM airlines WHERE Country = 'USA'",
        "repair_result": 1
    },
    {
        "idx": 196,
        "db_id": "flight_2",
        "question": "Return the number of airlines in the USA.",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "pred": "SELECT COUNT(*) FROM airlines WHERE Country = 'USA'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM airlines WHERE Country = 'USA'",
        "repair_result": 1
    },
    {
        "idx": 197,
        "db_id": "flight_2",
        "question": "Which city and country is the Alton airport at?",
        "evidence": "",
        "gold": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "pred": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
        "pred_result": 1,
        "repair_sql": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
        "repair_result": 1
    },
    {
        "idx": 198,
        "db_id": "flight_2",
        "question": "Give the city and country for the Alton airport.",
        "evidence": "",
        "gold": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "pred": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
        "pred_result": 1,
        "repair_sql": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
        "repair_result": 1
    },
    {
        "idx": 199,
        "db_id": "flight_2",
        "question": "What is the airport name for airport 'AKO'?",
        "evidence": "",
        "gold": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "pred": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'",
        "pred_result": 1,
        "repair_sql": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'",
        "repair_result": 1
    },
    {
        "idx": 200,
        "db_id": "flight_2",
        "question": "Return the name of the airport with code 'AKO'.",
        "evidence": "",
        "gold": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "pred": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'",
        "pred_result": 1,
        "repair_sql": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'",
        "repair_result": 1
    },
    {
        "idx": 201,
        "db_id": "flight_2",
        "question": "What are airport names at City 'Aberdeen'?",
        "evidence": "",
        "gold": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "pred": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'",
        "repair_result": 1
    },
    {
        "idx": 202,
        "db_id": "flight_2",
        "question": "What are the names of airports in Aberdeen?",
        "evidence": "",
        "gold": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "pred": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'",
        "repair_result": 1
    },
    {
        "idx": 203,
        "db_id": "flight_2",
        "question": "How many flights depart from 'APG'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "pred": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
        "repair_result": 1
    },
    {
        "idx": 204,
        "db_id": "flight_2",
        "question": "Count the number of flights departing from 'APG'.",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "pred": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
        "repair_result": 1
    },
    {
        "idx": 205,
        "db_id": "flight_2",
        "question": "How many flights have destination ATO?",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "pred": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'",
        "repair_result": 1
    },
    {
        "idx": 206,
        "db_id": "flight_2",
        "question": "Count the number of flights into ATO.",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "pred": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO' OR SourceAirport = 'ATO'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO' OR SourceAirport = 'ATO'",
        "repair_result": 1
    },
    {
        "idx": 207,
        "db_id": "flight_2",
        "question": "How many flights depart from City Aberdeen?",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "pred": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "repair_result": 1
    },
    {
        "idx": 208,
        "db_id": "flight_2",
        "question": "Return the number of flights departing from Aberdeen.",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "pred": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen'",
        "repair_result": 1
    },
    {
        "idx": 209,
        "db_id": "flight_2",
        "question": "How many flights arriving in Aberdeen city?",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "pred": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "repair_result": 1
    },
    {
        "idx": 210,
        "db_id": "flight_2",
        "question": "Return the number of flights arriving in Aberdeen.",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "pred": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ABZ'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ABZ'",
        "repair_result": 1
    },
    {
        "idx": 211,
        "db_id": "flight_2",
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "pred": "SELECT COUNT(*) FROM flights JOIN airports AS A1 ON flights.SourceAirport = A1.AirportCode JOIN airports AS A2 ON flights.DestAirport = A2.AirportCode WHERE A1.City = 'Aberdeen' AND A2.City = 'Ashley'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights JOIN airports AS A1 ON flights.SourceAirport = A1.AirportCode JOIN airports AS A2 ON flights.DestAirport = A2.AirportCode WHERE A1.City = 'Aberdeen' AND A2.City = 'Ashley'",
        "repair_result": 1
    },
    {
        "idx": 212,
        "db_id": "flight_2",
        "question": "How many flights fly from Aberdeen to Ashley?",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "pred": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'",
        "repair_result": 1
    },
    {
        "idx": 213,
        "db_id": "flight_2",
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "pred": "SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways'",
        "repair_result": 0
    },
    {
        "idx": 214,
        "db_id": "flight_2",
        "question": "Give the number of Jetblue Airways flights.",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "pred": "SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways'",
        "repair_result": 0
    },
    {
        "idx": 215,
        "db_id": "flight_2",
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "pred": "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'",
        "repair_result": 1
    },
    {
        "idx": 216,
        "db_id": "flight_2",
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "pred": "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'",
        "repair_result": 1
    },
    {
        "idx": 217,
        "db_id": "flight_2",
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "pred": "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'",
        "repair_result": 1
    },
    {
        "idx": 218,
        "db_id": "flight_2",
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "pred": "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'",
        "repair_result": 1
    },
    {
        "idx": 219,
        "db_id": "flight_2",
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "pred": "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')",
        "repair_result": 1
    },
    {
        "idx": 220,
        "db_id": "flight_2",
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "pred": "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ABR'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ABR'",
        "repair_result": 1
    },
    {
        "idx": 221,
        "db_id": "flight_2",
        "question": "Which city has most number of arriving flights?",
        "evidence": "",
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT City, COUNT(DestAirport) AS NumArrivingFlights FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY City ORDER BY NumArrivingFlights DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT City, COUNT(DestAirport) AS NumArrivingFlights FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY City ORDER BY NumArrivingFlights DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 222,
        "db_id": "flight_2",
        "question": "Which city has the most frequent destination airport?",
        "evidence": "",
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT City, COUNT(DestAirport) AS Frequency FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY City ORDER BY Frequency DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT City, COUNT(DestAirport) AS Frequency FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY City ORDER BY Frequency DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 223,
        "db_id": "flight_2",
        "question": "Which city has most number of departing flights?",
        "evidence": "",
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT City, COUNT(*) AS DepartingFlights FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City ORDER BY DepartingFlights DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT City, COUNT(*) AS DepartingFlights FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City ORDER BY DepartingFlights DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 224,
        "db_id": "flight_2",
        "question": "Which city is the most frequent source airport?",
        "evidence": "",
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT City, COUNT(SourceAirport) AS Frequency FROM airports GROUP BY City ORDER BY Frequency DESC LIMIT 1",
        "pred_result": "no such column: SourceAirport",
        "repair_sql": "SELECT City, COUNT(flights.SourceAirport) AS Frequency FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City ORDER BY Frequency DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 225,
        "db_id": "flight_2",
        "question": "What is the code of airport that has the highest number of flights?",
        "evidence": "",
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `AirportCode`, COUNT(*) AS num_flights FROM flights GROUP BY `DestAirport` ORDER BY num_flights DESC LIMIT 1",
        "pred_result": "no such column: AirportCode",
        "repair_sql": "SELECT airports.AirportCode, COUNT(*) AS num_flights FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY flights.DestAirport ORDER BY num_flights DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 226,
        "db_id": "flight_2",
        "question": "What is the airport code of the airport with the most flights?",
        "evidence": "",
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT AirportCode FROM airports WHERE AirportCode IN ( SELECT SourceAirport FROM flights UNION ALL SELECT DestAirport FROM flights ) GROUP BY AirportCode ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT AirportCode FROM airports WHERE AirportCode IN ( SELECT SourceAirport FROM flights UNION ALL SELECT DestAirport FROM flights ) GROUP BY AirportCode ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 227,
        "db_id": "flight_2",
        "question": "What is the code of airport that has fewest number of flights?",
        "evidence": "",
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "pred": "SELECT `AirportCode` FROM airports WHERE `AirportCode` IN (SELECT `SourceAirport` FROM flights UNION SELECT `DestAirport` FROM flights GROUP BY `AirportCode` ORDER BY COUNT(*) ASC LIMIT 1)",
        "pred_result": "no such column: AirportCode",
        "repair_sql": "SELECT a.AirportCode FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport GROUP BY a.AirportCode ORDER BY COUNT(*) ASC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 228,
        "db_id": "flight_2",
        "question": "Give the code of the airport with the least flights.",
        "evidence": "",
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "pred": "SELECT `AirportCode`, COUNT(*) AS num_flights FROM flights JOIN airports ON flights.`SourceAirport` = airports.`AirportCode` GROUP BY `AirportCode` ORDER BY num_flights ASC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT `AirportCode`, COUNT(*) AS num_flights FROM flights JOIN airports ON flights.`SourceAirport` = airports.`AirportCode` GROUP BY `AirportCode` ORDER BY num_flights ASC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 229,
        "db_id": "flight_2",
        "question": "Which airline has most number of flights?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT Airline, COUNT(*) AS NumFlights FROM flights GROUP BY Airline ORDER BY NumFlights DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT Airline, COUNT(*) AS NumFlights FROM flights GROUP BY Airline ORDER BY NumFlights DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 230,
        "db_id": "flight_2",
        "question": "What airline serves the most flights?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT Airline, COUNT(*) AS num_flights FROM flights GROUP BY Airline ORDER BY num_flights DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT Airline, COUNT(*) AS num_flights FROM flights GROUP BY Airline ORDER BY num_flights DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 231,
        "db_id": "flight_2",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "evidence": "",
        "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "pred": "SELECT `Abbreviation`, `Country` FROM airlines WHERE uid = (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1)",
        "pred_result": 0,
        "repair_sql": "SELECT `Abbreviation`, `Country` FROM airlines WHERE uid = (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1)",
        "repair_result": 0
    },
    {
        "idx": 232,
        "db_id": "flight_2",
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "evidence": "",
        "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "pred": "SELECT A.`Abbreviation`, A.`Country` FROM airlines AS A JOIN flights AS F ON A.`Airline` = F.`Airline` GROUP BY A.`Airline` ORDER BY COUNT(*) ASC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT A.`Abbreviation`, A.`Country` FROM airlines AS A JOIN flights AS F ON A.`Airline` = F.`Airline` GROUP BY A.`Airline` ORDER BY COUNT(*) ASC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 233,
        "db_id": "flight_2",
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "pred": "SELECT DISTINCT A.`Airline` FROM airlines A JOIN flights F ON A.`Abbreviation` = F.`Airline` JOIN airports S ON F.`SourceAirport` = S.`AirportCode` WHERE S.`AirportCode` = 'AHD'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT A.`Airline` FROM airlines A JOIN flights F ON A.`Abbreviation` = F.`Airline` JOIN airports S ON F.`SourceAirport` = S.`AirportCode` WHERE S.`AirportCode` = 'AHD'",
        "repair_result": 1
    },
    {
        "idx": 234,
        "db_id": "flight_2",
        "question": "Which airlines have a flight with source airport AHD?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "pred": "SELECT DISTINCT A.`Airline` FROM airlines A JOIN flights F ON A.`Airline` = F.`Airline` JOIN airports S ON F.`SourceAirport` = S.`AirportCode` WHERE S.`AirportCode` = 'AHD'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT A.`Airline` FROM airlines A JOIN flights F ON A.`Airline` = F.`Airline` JOIN airports S ON F.`SourceAirport` = S.`AirportCode` WHERE S.`AirportCode` = 'AHD'",
        "repair_result": 1
    },
    {
        "idx": 235,
        "db_id": "flight_2",
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "pred": "SELECT DISTINCT airlines.`Airline` FROM airlines JOIN flights ON airlines.`Abbreviation` = flights.`Airline` JOIN airports ON flights.`DestAirport` = airports.`AirportCode` WHERE airports.`AirportCode` = 'AHD'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT airlines.`Airline` FROM airlines JOIN flights ON airlines.`Abbreviation` = flights.`Airline` JOIN airports ON flights.`DestAirport` = airports.`AirportCode` WHERE airports.`AirportCode` = 'AHD'",
        "repair_result": 1
    },
    {
        "idx": 236,
        "db_id": "flight_2",
        "question": "Which airlines have a flight with destination airport AHD?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "pred": "SELECT DISTINCT airlines.`Airline` FROM airlines JOIN flights ON airlines.`Abbreviation` = flights.`Airline` JOIN airports ON flights.`DestAirport` = airports.`AirportCode` WHERE airports.`AirportCode` = 'AHD'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT airlines.`Airline` FROM airlines JOIN flights ON airlines.`Abbreviation` = flights.`Airline` JOIN airports ON flights.`DestAirport` = airports.`AirportCode` WHERE airports.`AirportCode` = 'AHD'",
        "repair_result": 1
    },
    {
        "idx": 237,
        "db_id": "flight_2",
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "pred": "SELECT DISTINCT A.`Airline` FROM airlines A JOIN flights F1 ON A.`Abbreviation` = F1.`Airline` JOIN flights F2 ON A.`Abbreviation` = F2.`Airline` JOIN airports APG ON F1.`SourceAirport` = APG.`AirportCode` AND APG.`AirportCode` = 'APG' JOIN airports CVO ON F2.`SourceAirport` = CVO.`AirportCode` AND CVO.`AirportCode` = 'CVO'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT A.`Airline` FROM airlines A JOIN flights F1 ON A.`Abbreviation` = F1.`Airline` JOIN flights F2 ON A.`Abbreviation` = F2.`Airline` JOIN airports APG ON F1.`SourceAirport` = APG.`AirportCode` AND APG.`AirportCode` = 'APG' JOIN airports CVO ON F2.`SourceAirport` = CVO.`AirportCode` AND CVO.`AirportCode` = 'CVO'",
        "repair_result": 1
    },
    {
        "idx": 238,
        "db_id": "flight_2",
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "pred": "SELECT DISTINCT A1.`Airline` FROM flights AS F1 JOIN airlines AS A1 ON F1.`Airline` = A1.`Abbreviation` WHERE F1.`SourceAirport` IN ('APG', 'CVO') AND EXISTS ( SELECT 1 FROM flights AS F2 WHERE F2.`SourceAirport` IN ('APG', 'CVO') AND F2.`Airline` = F1.`Airline' AND F2.`Airline` = A1.`Abbreviation' AND F2.`SourceAirport` <> F1.`SourceAirport' )",
        "pred_result": "near \"Airline\": syntax error",
        "repair_sql": "SELECT DISTINCT A1.`Airline` FROM flights AS F1 JOIN airlines AS A1 ON F1.`Airline` = A1.`Abbreviation` WHERE F1.`SourceAirport` IN ('APG', 'CVO') AND EXISTS ( SELECT 1 FROM flights AS F2 JOIN airlines AS A2 ON F2.`Airline` = A2.`Abbreviation` WHERE F2.`SourceAirport` IN ('APG', 'CVO') AND F2.`Airline` = F1.`Airline` AND F2.`Airline` = A1.`Abbreviation` AND F2.`SourceAirport` <> F1.`SourceAirport` )",
        "repair_result": 1
    },
    {
        "idx": 239,
        "db_id": "flight_2",
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "pred": "SELECT DISTINCT A.`Airline` FROM airlines A JOIN flights F ON A.`Abbreviation` = F.`Airline` JOIN airports A1 ON F.`SourceAirport` = A1.`AirportCode` JOIN airports A2 ON F.`DestAirport` = A2.`AirportCode` WHERE A1.`AirportCode` = 'CVO' AND A.`Airline` NOT IN ( SELECT DISTINCT A.`Airline` FROM airlines A JOIN flights F ON A.`Abbreviation` = F.`Airline` JOIN airports A3 ON F.`SourceAirport` = A3.`AirportCode` WHERE A3.`AirportCode` = 'APG' )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT A.`Airline` FROM airlines A JOIN flights F ON A.`Abbreviation` = F.`Airline` JOIN airports A1 ON F.`SourceAirport` = A1.`AirportCode` JOIN airports A2 ON F.`DestAirport` = A2.`AirportCode` WHERE A1.`AirportCode` = 'CVO' AND A.`Airline` NOT IN ( SELECT DISTINCT A.`Airline` FROM airlines A JOIN flights F ON A.`Abbreviation` = F.`Airline` JOIN airports A3 ON F.`SourceAirport` = A3.`AirportCode` WHERE A3.`AirportCode` = 'APG' )",
        "repair_result": 1
    },
    {
        "idx": 240,
        "db_id": "flight_2",
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "pred": "SELECT DISTINCT Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE flights.SourceAirport = 'CVO' AND flights.DestAirport != 'APG'",
        "pred_result": "ambiguous column name: Airline",
        "repair_sql": "SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.Airline = f.Airline WHERE f.SourceAirport = 'CVO' AND a.Airline NOT IN ( SELECT a2.Airline FROM airlines a2 JOIN flights f2 ON a2.Airline = f2.Airline WHERE f2.SourceAirport = 'APG' )",
        "repair_result": 1
    },
    {
        "idx": 241,
        "db_id": "flight_2",
        "question": "Find all airlines that have at least 10 flights.",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "pred": "SELECT `Airline` FROM airlines WHERE `uid` IN ( SELECT `Airline` FROM flights GROUP BY `Airline` HAVING COUNT(*) >= 10 )",
        "pred_result": 1,
        "repair_sql": "SELECT `Airline` FROM airlines WHERE `uid` IN ( SELECT `Airline` FROM flights GROUP BY `Airline` HAVING COUNT(*) >= 10 )",
        "repair_result": 1
    },
    {
        "idx": 242,
        "db_id": "flight_2",
        "question": "Which airlines have at least 10 flights?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "pred": "SELECT `Airline` FROM flights GROUP BY `Airline` HAVING COUNT(*) >= 10",
        "pred_result": 0,
        "repair_sql": "SELECT `Airline` FROM flights GROUP BY `Airline` HAVING COUNT(*) >= 10",
        "repair_result": 0
    },
    {
        "idx": 243,
        "db_id": "flight_2",
        "question": "Find all airlines that have fewer than 200 flights.",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "pred": "SELECT `Airline` FROM airlines WHERE `uid` IN ( SELECT `Airline` FROM flights GROUP BY `Airline` HAVING COUNT(*) < 200 )",
        "pred_result": 1,
        "repair_sql": "SELECT `Airline` FROM airlines WHERE `uid` IN ( SELECT `Airline` FROM flights GROUP BY `Airline` HAVING COUNT(*) < 200 )",
        "repair_result": 1
    },
    {
        "idx": 244,
        "db_id": "flight_2",
        "question": "Which airlines have less than 200 flights?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "pred": "SELECT `Airline` FROM flights GROUP BY `Airline` HAVING COUNT(*) < 200",
        "pred_result": 0,
        "repair_sql": "SELECT `Airline` FROM flights GROUP BY `Airline` HAVING COUNT(*) < 200",
        "repair_result": 0
    },
    {
        "idx": 245,
        "db_id": "flight_2",
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "evidence": "",
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "pred": "SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'",
        "pred_result": 0,
        "repair_sql": "SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'",
        "repair_result": 0
    },
    {
        "idx": 246,
        "db_id": "flight_2",
        "question": "Which flight numbers correspond to United Airlines flights?",
        "evidence": "",
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "pred": "SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'",
        "pred_result": 0,
        "repair_sql": "SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'",
        "repair_result": 0
    },
    {
        "idx": 247,
        "db_id": "flight_2",
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "evidence": "",
        "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "pred": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'",
        "pred_result": 1,
        "repair_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'",
        "repair_result": 1
    },
    {
        "idx": 248,
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights leaving from APG.",
        "evidence": "",
        "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "pred": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'",
        "pred_result": 1,
        "repair_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'",
        "repair_result": 1
    },
    {
        "idx": 249,
        "db_id": "flight_2",
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "evidence": "",
        "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "pred": "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'",
        "pred_result": 1,
        "repair_sql": "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'",
        "repair_result": 1
    },
    {
        "idx": 250,
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights landing at APG.",
        "evidence": "",
        "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "pred": "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'",
        "pred_result": 1,
        "repair_sql": "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'",
        "repair_result": 1
    },
    {
        "idx": 251,
        "db_id": "flight_2",
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "evidence": "",
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "pred": "SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "repair_result": 1
    },
    {
        "idx": 252,
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "evidence": "",
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "pred": "SELECT FlightNo FROM flights WHERE SourceAirport = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = 'Aberdeen'",
        "repair_result": 1
    },
    {
        "idx": 253,
        "db_id": "flight_2",
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "evidence": "",
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "pred": "SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
        "repair_result": 1
    },
    {
        "idx": 254,
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "evidence": "",
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "pred": "SELECT FlightNo FROM flights WHERE DestAirport = 'ABZ'",
        "pred_result": 1,
        "repair_sql": "SELECT FlightNo FROM flights WHERE DestAirport = 'ABZ'",
        "repair_result": 1
    },
    {
        "idx": 255,
        "db_id": "flight_2",
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "pred": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene'",
        "repair_result": 1
    },
    {
        "idx": 256,
        "db_id": "flight_2",
        "question": "How many flights land in Aberdeen or Abilene?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "pred": "SELECT COUNT(*) FROM flights WHERE DestAirport IN ('ABR', 'ABI')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights WHERE DestAirport IN ('ABR', 'ABI')",
        "repair_result": 1
    },
    {
        "idx": 257,
        "db_id": "flight_2",
        "question": "Find the name of airports which do not have any flight in and out.",
        "evidence": "",
        "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "pred": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)",
        "pred_result": 1,
        "repair_sql": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)",
        "repair_result": 1
    },
    {
        "idx": 258,
        "db_id": "flight_2",
        "question": "Which airports do not have departing or arriving flights?",
        "evidence": "",
        "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "pred": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)",
        "pred_result": 1,
        "repair_sql": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)",
        "repair_result": 1
    },
    {
        "idx": 259,
        "db_id": "employee_hire_evaluation",
        "question": "How many employees are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM employee",
        "pred": "SELECT COUNT(*) FROM employee",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM employee",
        "repair_result": 1
    },
    {
        "idx": 260,
        "db_id": "employee_hire_evaluation",
        "question": "Count the number of employees",
        "evidence": "",
        "gold": "SELECT count(*) FROM employee",
        "pred": "SELECT COUNT(*) FROM employee",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM employee",
        "repair_result": 1
    },
    {
        "idx": 261,
        "db_id": "employee_hire_evaluation",
        "question": "Sort employee names by their age in ascending order.",
        "evidence": "",
        "gold": "SELECT name FROM employee ORDER BY age",
        "pred": "SELECT `Name` FROM employee ORDER BY `Age` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM employee ORDER BY `Age` ASC",
        "repair_result": 1
    },
    {
        "idx": 262,
        "db_id": "employee_hire_evaluation",
        "question": "List the names of employees and sort in ascending order of age.",
        "evidence": "",
        "gold": "SELECT name FROM employee ORDER BY age",
        "pred": "SELECT `Name` FROM employee ORDER BY `Age` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM employee ORDER BY `Age` ASC",
        "repair_result": 1
    },
    {
        "idx": 263,
        "db_id": "employee_hire_evaluation",
        "question": "What is the number of employees from each city?",
        "evidence": "",
        "gold": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "pred": "SELECT City, COUNT(*) FROM employee GROUP BY City",
        "pred_result": 0,
        "repair_sql": "SELECT City, COUNT(*) FROM employee GROUP BY City",
        "repair_result": 0
    },
    {
        "idx": 264,
        "db_id": "employee_hire_evaluation",
        "question": "Count the number of employees for each city.",
        "evidence": "",
        "gold": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "pred": "SELECT City, COUNT(*) FROM employee GROUP BY City",
        "pred_result": 0,
        "repair_sql": "SELECT City, COUNT(*) FROM employee GROUP BY City",
        "repair_result": 0
    },
    {
        "idx": 265,
        "db_id": "employee_hire_evaluation",
        "question": "Which cities do more than one employee under age 30 come from?",
        "evidence": "",
        "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "pred": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1",
        "repair_result": 1
    },
    {
        "idx": 266,
        "db_id": "employee_hire_evaluation",
        "question": "Find the cities that have more than one employee under age 30.",
        "evidence": "",
        "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "pred": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1",
        "repair_result": 1
    },
    {
        "idx": 267,
        "db_id": "employee_hire_evaluation",
        "question": "Find the number of shops in each location.",
        "evidence": "",
        "gold": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "pred": "SELECT Location, COUNT(*) FROM shop GROUP BY Location",
        "pred_result": 0,
        "repair_sql": "SELECT Location, COUNT(*) FROM shop GROUP BY Location",
        "repair_result": 0
    },
    {
        "idx": 268,
        "db_id": "employee_hire_evaluation",
        "question": "How many shops are there in each location?",
        "evidence": "",
        "gold": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "pred": "SELECT Location, COUNT(*) FROM shop GROUP BY Location",
        "pred_result": 0,
        "repair_sql": "SELECT Location, COUNT(*) FROM shop GROUP BY Location",
        "repair_result": 0
    },
    {
        "idx": 269,
        "db_id": "employee_hire_evaluation",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "evidence": "",
        "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "pred": "SELECT `Manager_name`, `District` FROM shop WHERE `Number_products` = (SELECT MAX(`Number_products`) FROM shop)",
        "pred_result": 1,
        "repair_sql": "SELECT `Manager_name`, `District` FROM shop WHERE `Number_products` = (SELECT MAX(`Number_products`) FROM shop)",
        "repair_result": 1
    },
    {
        "idx": 270,
        "db_id": "employee_hire_evaluation",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "evidence": "",
        "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "pred": "SELECT T3.`Manager_name`, T3.`District` FROM shop AS T3 JOIN ( SELECT T1.`Shop_ID`, MAX(T2.`Number_products`) AS max_products FROM shop AS T1 JOIN hiring AS T2 ON T1.`Shop_ID` = T2.`Shop_ID` GROUP BY T1.`Shop_ID` ) AS T4 ON T3.`Shop_ID` = T4.`Shop_ID` AND T3.`Number_products` = T4.`max_products`",
        "pred_result": "no such column: T2.Number_products",
        "repair_sql": "SELECT T3.`Manager_name`, T3.`District` FROM shop AS T3 JOIN ( SELECT T1.`Shop_ID`, MAX(T1.`Number_products`) AS max_products FROM shop AS T1 JOIN hiring AS T2 ON T1.`Shop_ID` = T2.`Shop_ID` GROUP BY T1.`Shop_ID` ) AS T4 ON T3.`Shop_ID` = T4.`Shop_ID` AND T3.`Number_products` = T4.`max_products`",
        "repair_result": 0
    },
    {
        "idx": 271,
        "db_id": "employee_hire_evaluation",
        "question": "find the minimum and maximum number of products of all stores.",
        "evidence": "",
        "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "pred": "SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop",
        "pred_result": 1,
        "repair_sql": "SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop",
        "repair_result": 1
    },
    {
        "idx": 272,
        "db_id": "employee_hire_evaluation",
        "question": "What are the minimum and maximum number of products across all the shops?",
        "evidence": "",
        "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "pred": "SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop",
        "pred_result": 1,
        "repair_sql": "SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop",
        "repair_result": 1
    },
    {
        "idx": 273,
        "db_id": "employee_hire_evaluation",
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "evidence": "",
        "gold": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "pred": "SELECT `Name`, `Location`, `District` FROM shop ORDER BY `Number_products` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name`, `Location`, `District` FROM shop ORDER BY `Number_products` DESC",
        "repair_result": 1
    },
    {
        "idx": 274,
        "db_id": "employee_hire_evaluation",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "evidence": "",
        "gold": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "pred": "SELECT `Name`, `Location`, `District` FROM shop ORDER BY `Number_products` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name`, `Location`, `District` FROM shop ORDER BY `Number_products` DESC",
        "repair_result": 1
    },
    {
        "idx": 275,
        "db_id": "employee_hire_evaluation",
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "evidence": "",
        "gold": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "pred": "SELECT `Name` FROM shop WHERE `Number_products` > (SELECT AVG(`Number_products`) FROM shop)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM shop WHERE `Number_products` > (SELECT AVG(`Number_products`) FROM shop)",
        "repair_result": 1
    },
    {
        "idx": 276,
        "db_id": "employee_hire_evaluation",
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "evidence": "",
        "gold": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "pred": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)",
        "pred_result": 1,
        "repair_sql": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)",
        "repair_result": 1
    },
    {
        "idx": 277,
        "db_id": "employee_hire_evaluation",
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "evidence": "",
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT Name FROM employee WHERE Employee_ID IN ( SELECT Employee_ID FROM evaluation GROUP BY Employee_ID ORDER BY COUNT(*) DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT Name FROM employee WHERE Employee_ID IN ( SELECT Employee_ID FROM evaluation GROUP BY Employee_ID ORDER BY COUNT(*) DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 278,
        "db_id": "employee_hire_evaluation",
        "question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "evidence": "",
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT Name FROM employee WHERE Employee_ID = ( SELECT Employee_ID FROM evaluation GROUP BY Employee_ID ORDER BY COUNT(*) DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT Name FROM employee WHERE Employee_ID = ( SELECT Employee_ID FROM evaluation GROUP BY Employee_ID ORDER BY COUNT(*) DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 279,
        "db_id": "employee_hire_evaluation",
        "question": "Find the name of the employee who got the highest one time bonus.",
        "evidence": "",
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "pred": "SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation WHERE Bonus = (SELECT MAX(Bonus) FROM evaluation))",
        "pred_result": 1,
        "repair_sql": "SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation WHERE Bonus = (SELECT MAX(Bonus) FROM evaluation))",
        "repair_result": 1
    },
    {
        "idx": 280,
        "db_id": "employee_hire_evaluation",
        "question": "Which employee received the biggest bonus? Give me the employee name.",
        "evidence": "",
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "pred": "SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 281,
        "db_id": "employee_hire_evaluation",
        "question": "Find the names of employees who never won any award in the evaluation.",
        "evidence": "",
        "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "pred": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "pred_result": 1,
        "repair_sql": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "repair_result": 1
    },
    {
        "idx": 282,
        "db_id": "employee_hire_evaluation",
        "question": "What are the names of the employees who never received any evaluation?",
        "evidence": "",
        "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "pred": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "pred_result": 1,
        "repair_sql": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "repair_result": 1
    },
    {
        "idx": 283,
        "db_id": "employee_hire_evaluation",
        "question": "What is the name of the shop that is hiring the largest number of employees?",
        "evidence": "",
        "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T2.`Name` FROM shop AS T2 JOIN ( SELECT `Shop_ID`, COUNT(`Employee_ID`) AS num_employees FROM hiring GROUP BY `Shop_ID` ORDER BY num_employees DESC LIMIT 1 ) AS T1 ON T1.`Shop_ID` = T2.`Shop_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Name` FROM shop AS T2 JOIN ( SELECT `Shop_ID`, COUNT(`Employee_ID`) AS num_employees FROM hiring GROUP BY `Shop_ID` ORDER BY num_employees DESC LIMIT 1 ) AS T1 ON T1.`Shop_ID` = T2.`Shop_ID`",
        "repair_result": 1
    },
    {
        "idx": 284,
        "db_id": "employee_hire_evaluation",
        "question": "Which shop has the most employees? Give me the shop name.",
        "evidence": "",
        "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T2.`Name` FROM shop AS T2 JOIN hiring AS T1 ON T1.`Shop_ID` = T2.`Shop_ID` GROUP BY T1.`Shop_ID` ORDER BY COUNT(T1.`Employee_ID`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Name` FROM shop AS T2 JOIN hiring AS T1 ON T1.`Shop_ID` = T2.`Shop_ID` GROUP BY T1.`Shop_ID` ORDER BY COUNT(T1.`Employee_ID`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 285,
        "db_id": "employee_hire_evaluation",
        "question": "Find the name of the shops that do not hire any employee.",
        "evidence": "",
        "gold": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "pred": "SELECT `Name` FROM shop WHERE Shop_ID NOT IN (SELECT DISTINCT Shop_ID FROM hiring)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM shop WHERE Shop_ID NOT IN (SELECT DISTINCT Shop_ID FROM hiring)",
        "repair_result": 1
    },
    {
        "idx": 286,
        "db_id": "employee_hire_evaluation",
        "question": "Which shops run with no employees? Find the shop names",
        "evidence": "",
        "gold": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "pred": "SELECT `Name` FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
        "repair_result": 1
    },
    {
        "idx": 287,
        "db_id": "employee_hire_evaluation",
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "evidence": "",
        "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "pred": "SELECT T2.`Name`, COUNT(*) FROM shop AS T2 JOIN hiring AS T1 ON T1.`Shop_ID` = T2.`Shop_ID` GROUP BY T1.`Shop_ID`",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`Name`, COUNT(*) FROM shop AS T2 JOIN hiring AS T1 ON T1.`Shop_ID` = T2.`Shop_ID` GROUP BY T1.`Shop_ID`",
        "repair_result": 0
    },
    {
        "idx": 288,
        "db_id": "employee_hire_evaluation",
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "evidence": "",
        "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "pred": "SELECT T2.`Name`, COUNT(*) AS Number_of_Employees FROM shop AS T2 JOIN hiring AS T1 ON T1.`Shop_ID` = T2.`Shop_ID` GROUP BY T2.`Shop_ID`",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`Name`, COUNT(*) AS Number_of_Employees FROM shop AS T2 JOIN hiring AS T1 ON T1.`Shop_ID` = T2.`Shop_ID` GROUP BY T2.`Shop_ID`",
        "repair_result": 0
    },
    {
        "idx": 289,
        "db_id": "employee_hire_evaluation",
        "question": "What is total bonus given in all evaluations?",
        "evidence": "",
        "gold": "SELECT sum(bonus) FROM evaluation",
        "pred": "SELECT SUM(Bonus) FROM evaluation",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(Bonus) FROM evaluation",
        "repair_result": 1
    },
    {
        "idx": 290,
        "db_id": "employee_hire_evaluation",
        "question": "Find the total amount of bonus given in all the evaluations.",
        "evidence": "",
        "gold": "SELECT sum(bonus) FROM evaluation",
        "pred": "SELECT SUM(Bonus) FROM evaluation",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(Bonus) FROM evaluation",
        "repair_result": 1
    },
    {
        "idx": 291,
        "db_id": "employee_hire_evaluation",
        "question": "Give me all the information about hiring.",
        "evidence": "",
        "gold": "SELECT * FROM hiring",
        "pred": "SELECT * FROM hiring",
        "pred_result": 1,
        "repair_sql": "SELECT * FROM hiring",
        "repair_result": 1
    },
    {
        "idx": 292,
        "db_id": "employee_hire_evaluation",
        "question": "What is all the information about hiring?",
        "evidence": "",
        "gold": "SELECT * FROM hiring",
        "pred": "SELECT * FROM hiring",
        "pred_result": 1,
        "repair_sql": "SELECT * FROM hiring",
        "repair_result": 1
    },
    {
        "idx": 293,
        "db_id": "employee_hire_evaluation",
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "evidence": "",
        "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "pred": "SELECT DISTINCT T1.`District` FROM shop AS T1 WHERE T1.`Number_products` < 3000 AND EXISTS ( SELECT * FROM shop AS T2 WHERE T2.`Number_products` > 10000 AND T1.`District` = T2.`District` )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`District` FROM shop AS T1 WHERE T1.`Number_products` < 3000 AND EXISTS ( SELECT * FROM shop AS T2 WHERE T2.`Number_products` > 10000 AND T1.`District` = T2.`District` )",
        "repair_result": 1
    },
    {
        "idx": 294,
        "db_id": "employee_hire_evaluation",
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "evidence": "",
        "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "pred": "SELECT DISTINCT T1.`District` FROM shop AS T1 WHERE T1.`Number_products` < 3000 AND EXISTS ( SELECT * FROM shop AS T2 WHERE T2.`Number_products` > 10000 AND T1.`District` = T2.`District` )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`District` FROM shop AS T1 WHERE T1.`Number_products` < 3000 AND EXISTS ( SELECT * FROM shop AS T2 WHERE T2.`Number_products` > 10000 AND T1.`District` = T2.`District` )",
        "repair_result": 1
    },
    {
        "idx": 295,
        "db_id": "employee_hire_evaluation",
        "question": "How many different store locations are there?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT LOCATION) FROM shop",
        "pred": "SELECT COUNT(DISTINCT Location) FROM shop",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Location) FROM shop",
        "repair_result": 1
    },
    {
        "idx": 296,
        "db_id": "employee_hire_evaluation",
        "question": "Count the number of distinct store locations.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT LOCATION) FROM shop",
        "pred": "SELECT COUNT(DISTINCT Location) FROM shop",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Location) FROM shop",
        "repair_result": 1
    },
    {
        "idx": 297,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many documents do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Documents",
        "pred": "SELECT COUNT(*) FROM Documents",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Documents",
        "repair_result": 1
    },
    {
        "idx": 298,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of documents.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Documents",
        "pred": "SELECT COUNT(*) FROM Documents",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Documents",
        "repair_result": 1
    },
    {
        "idx": 299,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "evidence": "",
        "gold": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "pred": "SELECT `Document_ID`, `Document_Name`, `Document_Description` FROM Documents",
        "pred_result": 1,
        "repair_sql": "SELECT `Document_ID`, `Document_Name`, `Document_Description` FROM Documents",
        "repair_result": 1
    },
    {
        "idx": 300,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids, names, and descriptions for all documents?",
        "evidence": "",
        "gold": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "pred": "SELECT D.`Document_ID`, D.`Document_Name`, D.`Document_Description` FROM Documents AS D",
        "pred_result": 1,
        "repair_sql": "SELECT D.`Document_ID`, D.`Document_Name`, D.`Document_Description` FROM Documents AS D",
        "repair_result": 1
    },
    {
        "idx": 301,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "evidence": "",
        "gold": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "pred": "SELECT D.`Document_Name`, D.`Template_ID` FROM Documents AS D WHERE D.`Document_Description` LIKE '%w%'",
        "pred_result": 1,
        "repair_sql": "SELECT D.`Document_Name`, D.`Template_ID` FROM Documents AS D WHERE D.`Document_Description` LIKE '%w%'",
        "repair_result": 1
    },
    {
        "idx": 302,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "evidence": "",
        "gold": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "pred": "SELECT D.`Document_Name`, D.`Document_ID` FROM Documents AS D WHERE D.`Document_Description` LIKE '%w%'",
        "pred_result": 0,
        "repair_sql": "SELECT D.`Document_Name`, D.`Document_ID` FROM Documents AS D WHERE D.`Document_Description` LIKE '%w%'",
        "repair_result": 0
    },
    {
        "idx": 303,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "evidence": "",
        "gold": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "pred": "SELECT D.`Document_ID`, D.`Template_ID`, D.`Document_Description` FROM Documents AS D WHERE D.`Document_Name` = 'Robbin CV'",
        "pred_result": 1,
        "repair_sql": "SELECT D.`Document_ID`, D.`Template_ID`, D.`Document_Description` FROM Documents AS D WHERE D.`Document_Name` = 'Robbin CV'",
        "repair_result": 1
    },
    {
        "idx": 304,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "evidence": "",
        "gold": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "pred": "SELECT D.`Document_ID`, D.`Template_ID`, D.`Document_Description` FROM Documents AS D JOIN Templates AS T ON D.`Template_ID` = T.`Template_ID` WHERE D.`Document_Name` = 'Robbin CV'",
        "pred_result": 1,
        "repair_sql": "SELECT D.`Document_ID`, D.`Template_ID`, D.`Document_Description` FROM Documents AS D JOIN Templates AS T ON D.`Template_ID` = T.`Template_ID` WHERE D.`Document_Name` = 'Robbin CV'",
        "repair_result": 1
    },
    {
        "idx": 305,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many different templates do all document use?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT template_id) FROM Documents",
        "pred": "SELECT COUNT(DISTINCT Templates.`Template_ID`) FROM Documents",
        "pred_result": "no such column: Templates.Template_ID",
        "repair_sql": "SELECT COUNT(DISTINCT Templates.Template_Type_Code) FROM Templates",
        "repair_result": 0
    },
    {
        "idx": 306,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of different templates used for documents.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT template_id) FROM Documents",
        "pred": "SELECT COUNT(DISTINCT Template_ID) FROM Documents",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Template_ID) FROM Documents",
        "repair_result": 1
    },
    {
        "idx": 307,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many documents are using the template with type code 'PPT'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "pred": "SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')",
        "repair_result": 1
    },
    {
        "idx": 308,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of documents that use the PPT template type.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "pred": "SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'",
        "repair_result": 1
    },
    {
        "idx": 309,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template ids and number of documents using each template.",
        "evidence": "",
        "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "pred": "SELECT T1.`Template_ID`, COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.`Template_ID` = T2.`Template_ID` GROUP BY T1.`Template_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Template_ID`, COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.`Template_ID` = T2.`Template_ID` GROUP BY T1.`Template_ID`",
        "repair_result": 1
    },
    {
        "idx": 310,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "evidence": "",
        "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "pred": "SELECT T1.`Template_ID`, COUNT(*) FROM Documents AS T1 GROUP BY T1.`Template_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Template_ID`, COUNT(*) FROM Documents AS T1 GROUP BY T1.`Template_ID`",
        "repair_result": 1
    },
    {
        "idx": 311,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the id and type code for the template used by the most documents?",
        "evidence": "",
        "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`Template_ID`, T1.`Template_Type_Code` FROM Templates AS T1 JOIN Documents AS T2 ON T1.`Template_ID` = T2.`Template_ID` GROUP BY T1.`Template_ID` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Template_ID`, T1.`Template_Type_Code` FROM Templates AS T1 JOIN Documents AS T2 ON T1.`Template_ID` = T2.`Template_ID` GROUP BY T1.`Template_ID` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 312,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "evidence": "",
        "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`Template_ID`, T1.`Template_Type_Code` FROM Templates AS T1 JOIN Documents AS T2 ON T1.`Template_ID` = T2.`Template_ID` GROUP BY T1.`Template_ID` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Template_ID`, T1.`Template_Type_Code` FROM Templates AS T1 JOIN Documents AS T2 ON T1.`Template_ID` = T2.`Template_ID` GROUP BY T1.`Template_ID` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 313,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show ids for all templates that are used by more than one document.",
        "evidence": "",
        "gold": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "pred": "SELECT T1.`Template_ID` FROM Templates AS T1 JOIN Documents AS T2 ON T1.`Template_ID` = T2.`Template_ID` GROUP BY T1.`Template_ID` HAVING COUNT(DISTINCT T2.`Document_ID`) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Template_ID` FROM Templates AS T1 JOIN Documents AS T2 ON T1.`Template_ID` = T2.`Template_ID` GROUP BY T1.`Template_ID` HAVING COUNT(DISTINCT T2.`Document_ID`) > 1",
        "repair_result": 1
    },
    {
        "idx": 314,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the template ids of any templates used in more than a single document?",
        "evidence": "",
        "gold": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "pred": "SELECT T1.`Template_ID` FROM Templates AS T1 JOIN Documents AS T2 ON T1.`Template_ID` = T2.`Template_ID` GROUP BY T1.`Template_ID` HAVING COUNT(DISTINCT T2.`Document_ID`) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Template_ID` FROM Templates AS T1 JOIN Documents AS T2 ON T1.`Template_ID` = T2.`Template_ID` GROUP BY T1.`Template_ID` HAVING COUNT(DISTINCT T2.`Document_ID`) > 1",
        "repair_result": 1
    },
    {
        "idx": 315,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show ids for all templates not used by any document.",
        "evidence": "",
        "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "pred": "SELECT T1.`Template_ID` FROM Templates AS T1 LEFT JOIN Documents AS T2 ON T1.`Template_ID` = T2.`Template_ID` WHERE T2.`Template_ID` IS NULL",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Template_ID` FROM Templates AS T1 LEFT JOIN Documents AS T2 ON T1.`Template_ID` = T2.`Template_ID` WHERE T2.`Template_ID` IS NULL",
        "repair_result": 1
    },
    {
        "idx": 316,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids for templates that are not used in any documents?",
        "evidence": "",
        "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "pred": "SELECT T1.`Template_ID` FROM Templates AS T1 LEFT JOIN Documents AS T2 ON T1.`Template_ID` = T2.`Template_ID` WHERE T2.`Template_ID` IS NULL",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Template_ID` FROM Templates AS T1 LEFT JOIN Documents AS T2 ON T1.`Template_ID` = T2.`Template_ID` WHERE T2.`Template_ID` IS NULL",
        "repair_result": 1
    },
    {
        "idx": 317,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many templates do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Templates",
        "pred": "SELECT COUNT(*) FROM Templates",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Templates",
        "repair_result": 1
    },
    {
        "idx": 318,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of templates.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Templates",
        "pred": "SELECT COUNT(*) FROM Templates",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Templates",
        "repair_result": 1
    },
    {
        "idx": 319,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "evidence": "",
        "gold": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "pred": "SELECT `Template_ID`, `Version_Number`, `Template_Type_Code` FROM Templates",
        "pred_result": 1,
        "repair_sql": "SELECT `Template_ID`, `Version_Number`, `Template_Type_Code` FROM Templates",
        "repair_result": 1
    },
    {
        "idx": 320,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids, version numbers, and type codes for each template?",
        "evidence": "",
        "gold": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "pred": "SELECT T1.`Template_ID`, T2.`Version_Number`, T2.`Template_Type_Code` FROM Templates AS T2 JOIN Ref_Template_Types AS T1 ON T1.`Template_Type_Code` = T2.`Template_Type_Code`",
        "pred_result": "no such column: T1.Template_ID",
        "repair_sql": "SELECT T2.`Template_ID`, T2.`Version_Number`, T2.`Template_Type_Code` FROM Templates AS T2 JOIN Ref_Template_Types AS T1 ON T1.`Template_Type_Code` = T2.`Template_Type_Code`",
        "repair_result": 1
    },
    {
        "idx": 321,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all distinct template type codes for all templates.",
        "evidence": "",
        "gold": "SELECT DISTINCT template_type_code FROM Templates",
        "pred": "SELECT DISTINCT Template_Type_Code FROM Templates",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT Template_Type_Code FROM Templates",
        "repair_result": 1
    },
    {
        "idx": 322,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the different template type codes?",
        "evidence": "",
        "gold": "SELECT DISTINCT template_type_code FROM Templates",
        "pred": "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types",
        "repair_result": 1
    },
    {
        "idx": 323,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids of templates with template type code PP or PPT?",
        "evidence": "",
        "gold": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "pred": "SELECT T1.`Template_ID` FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` WHERE T2.`Template_Type_Description` = 'Presentation' OR T2.`Template_Type_Description` = 'Paper'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Template_ID` FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` WHERE T2.`Template_Type_Description` = 'Presentation' OR T2.`Template_Type_Description` = 'Paper'",
        "repair_result": 1
    },
    {
        "idx": 324,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the ids of templates that have the code PP or PPT.",
        "evidence": "",
        "gold": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "pred": "SELECT T1.`Template_ID` FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` WHERE T2.`Template_Type_Code` = 'PP' OR T2.`Template_Type_Code` = 'PPT'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Template_ID` FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` WHERE T2.`Template_Type_Code` = 'PP' OR T2.`Template_Type_Code` = 'PPT'",
        "repair_result": 1
    },
    {
        "idx": 325,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many templates have template type code CV?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "pred": "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'",
        "repair_result": 1
    },
    {
        "idx": 326,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of templates of the type CV.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "pred": "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'CV')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'CV')",
        "repair_result": 1
    },
    {
        "idx": 327,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "evidence": "",
        "gold": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "pred": "SELECT T1.`Version_Number`, T1.`Template_Type_Code` FROM Templates AS T1 WHERE T1.`Version_Number` > 5",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Version_Number`, T1.`Template_Type_Code` FROM Templates AS T1 WHERE T1.`Version_Number` > 5",
        "repair_result": 1
    },
    {
        "idx": 328,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "evidence": "",
        "gold": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "pred": "SELECT T1.`Version_Number`, T1.`Template_Type_Code` FROM Templates AS T1 WHERE T1.`Version_Number` > 5",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Version_Number`, T1.`Template_Type_Code` FROM Templates AS T1 WHERE T1.`Version_Number` > 5",
        "repair_result": 1
    },
    {
        "idx": 329,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes and number of templates for each.",
        "evidence": "",
        "gold": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "pred": "SELECT T1.`Template_Type_Code`, COUNT(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` GROUP BY T1.`Template_Type_Code`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Template_Type_Code`, COUNT(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` GROUP BY T1.`Template_Type_Code`",
        "repair_result": 1
    },
    {
        "idx": 330,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "evidence": "",
        "gold": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "pred": "SELECT T1.`Template_Type_Code`, COUNT(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` GROUP BY T1.`Template_Type_Code`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Template_Type_Code`, COUNT(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` GROUP BY T1.`Template_Type_Code`",
        "repair_result": 1
    },
    {
        "idx": 331,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Which template type code has most number of templates?",
        "evidence": "",
        "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT Template_Type_Code, COUNT(*) AS Total_Templates FROM Templates GROUP BY Template_Type_Code ORDER BY Total_Templates DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT Template_Type_Code, COUNT(*) AS Total_Templates FROM Templates GROUP BY Template_Type_Code ORDER BY Total_Templates DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 332,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the type code of the template type that the most templates belong to.",
        "evidence": "",
        "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 333,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes with less than three templates.",
        "evidence": "",
        "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "pred": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN ( SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3 )",
        "pred_result": 1,
        "repair_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN ( SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3 )",
        "repair_result": 1
    },
    {
        "idx": 334,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "evidence": "",
        "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "pred": "SELECT T1.`Template_Type_Code` FROM Ref_Template_Types AS T1 LEFT JOIN Templates AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` GROUP BY T1.`Template_Type_Code` HAVING COUNT(T2.`Template_ID`) < 3",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Template_Type_Code` FROM Ref_Template_Types AS T1 LEFT JOIN Templates AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` GROUP BY T1.`Template_Type_Code` HAVING COUNT(T2.`Template_ID`) < 3",
        "repair_result": 1
    },
    {
        "idx": 335,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What the smallest version number and its template type code?",
        "evidence": "",
        "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "pred": "SELECT MIN(Version_Number), Template_Type_Code FROM Templates",
        "pred_result": 1,
        "repair_sql": "SELECT MIN(Version_Number), Template_Type_Code FROM Templates",
        "repair_result": 1
    },
    {
        "idx": 336,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "evidence": "",
        "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "pred": "SELECT MIN(Version_Number), Template_Type_Code FROM Templates",
        "pred_result": 1,
        "repair_sql": "SELECT MIN(Version_Number), Template_Type_Code FROM Templates",
        "repair_result": 1
    },
    {
        "idx": 337,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "evidence": "",
        "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "pred": "SELECT T1.`Template_Type_Code` FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` JOIN Documents AS T3 ON T2.`Template_ID` = T3.`Template_ID` WHERE T3.`Document_Name` = 'Data base'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Template_Type_Code` FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` JOIN Documents AS T3 ON T2.`Template_ID` = T3.`Template_ID` WHERE T3.`Document_Name` = 'Data base'",
        "repair_result": 1
    },
    {
        "idx": 338,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "evidence": "",
        "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "pred": "SELECT T1.`Template_Type_Code` FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` JOIN Documents AS T3 ON T2.`Template_ID` = T3.`Template_ID` WHERE T3.`Document_Name` = 'Understanding DB'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`Template_Type_Code` FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` JOIN Documents AS T3 ON T2.`Template_ID` = T3.`Template_ID` WHERE T3.`Document_Name` = 'Understanding DB'",
        "repair_result": 0
    },
    {
        "idx": 339,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all document names using templates with template type code BK.",
        "evidence": "",
        "gold": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "pred": "SELECT D.`Document_Name` FROM Documents AS D JOIN Templates AS T ON D.`Template_ID` = T.`Template_ID` JOIN Ref_Template_Types AS RTT ON T.`Template_Type_Code` = RTT.`Template_Type_Code` WHERE RTT.`Template_Type_Description` = 'Book'",
        "pred_result": 1,
        "repair_sql": "SELECT D.`Document_Name` FROM Documents AS D JOIN Templates AS T ON D.`Template_ID` = T.`Template_ID` JOIN Ref_Template_Types AS RTT ON T.`Template_Type_Code` = RTT.`Template_Type_Code` WHERE RTT.`Template_Type_Description` = 'Book'",
        "repair_result": 1
    },
    {
        "idx": 340,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the names of documents that use templates with the code BK?",
        "evidence": "",
        "gold": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "pred": "SELECT D.`Document_Name` FROM Documents AS D JOIN Templates AS T ON D.`Template_ID` = T.`Template_ID` WHERE T.`Template_Type_Code` = 'BK'",
        "pred_result": 1,
        "repair_sql": "SELECT D.`Document_Name` FROM Documents AS D JOIN Templates AS T ON D.`Template_ID` = T.`Template_ID` WHERE T.`Template_Type_Code` = 'BK'",
        "repair_result": 1
    },
    {
        "idx": 341,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes and the number of documents using each type.",
        "evidence": "",
        "gold": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "pred": "SELECT T1.`Template_Type_Code`, COUNT(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` JOIN Documents AS T3 ON T2.`Template_ID` = T3.`Template_ID` GROUP BY T1.`Template_Type_Code`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Template_Type_Code`, COUNT(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` JOIN Documents AS T3 ON T2.`Template_ID` = T3.`Template_ID` GROUP BY T1.`Template_Type_Code`",
        "repair_result": 1
    },
    {
        "idx": 342,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the different template type codes, and how many documents use each type?",
        "evidence": "",
        "gold": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "pred": "SELECT T1.`Template_Type_Code`, COUNT(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` JOIN Documents AS T3 ON T2.`Template_ID` = T3.`Template_ID` GROUP BY T1.`Template_Type_Code`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Template_Type_Code`, COUNT(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` JOIN Documents AS T3 ON T2.`Template_ID` = T3.`Template_ID` GROUP BY T1.`Template_Type_Code`",
        "repair_result": 1
    },
    {
        "idx": 343,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Which template type code is used by most number of documents?",
        "evidence": "",
        "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`Template_Type_Code`, COUNT(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` JOIN Documents AS T3 ON T2.`Template_ID` = T3.`Template_ID` GROUP BY T1.`Template_Type_Code` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`Template_Type_Code`, COUNT(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` JOIN Documents AS T3 ON T2.`Template_ID` = T3.`Template_ID` GROUP BY T1.`Template_Type_Code` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 344,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the code of the template type that is most commonly used in documents.",
        "evidence": "",
        "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 345,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes that are not used by any document.",
        "evidence": "",
        "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "pred": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates)",
        "pred_result": 0,
        "repair_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates)",
        "repair_result": 0
    },
    {
        "idx": 346,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the codes of template types that are not used for any document?",
        "evidence": "",
        "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "pred": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN ( SELECT DISTINCT Template_Type_Code FROM Templates )",
        "pred_result": 0,
        "repair_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN ( SELECT DISTINCT Template_Type_Code FROM Templates )",
        "repair_result": 0
    },
    {
        "idx": 347,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes and descriptions.",
        "evidence": "",
        "gold": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "pred": "SELECT `Template_Type_Code`, `Template_Type_Description` FROM Ref_Template_Types",
        "pred_result": 1,
        "repair_sql": "SELECT `Template_Type_Code`, `Template_Type_Description` FROM Ref_Template_Types",
        "repair_result": 1
    },
    {
        "idx": 348,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the type codes and descriptions for all template types?",
        "evidence": "",
        "gold": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "pred": "SELECT `Template_Type_Code`, `Template_Type_Description` FROM Ref_Template_Types",
        "pred_result": 1,
        "repair_sql": "SELECT `Template_Type_Code`, `Template_Type_Description` FROM Ref_Template_Types",
        "repair_result": 1
    },
    {
        "idx": 349,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the template type descriptions for template type code \"AD\".",
        "evidence": "",
        "gold": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "pred": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'",
        "pred_result": 1,
        "repair_sql": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'",
        "repair_result": 1
    },
    {
        "idx": 350,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the template type description of the template type with the code AD.",
        "evidence": "",
        "gold": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "pred": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'",
        "pred_result": 1,
        "repair_sql": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'",
        "repair_result": 1
    },
    {
        "idx": 351,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the template type code for template type description \"Book\".",
        "evidence": "",
        "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "pred": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'",
        "pred_result": 1,
        "repair_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'",
        "repair_result": 1
    },
    {
        "idx": 352,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the type code of the template type with the description \"Book\".",
        "evidence": "",
        "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "pred": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'",
        "pred_result": 1,
        "repair_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'",
        "repair_result": 1
    },
    {
        "idx": 353,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "pred": "SELECT DISTINCT T2.`Template_Type_Description` FROM Ref_Template_Types AS T2 JOIN Templates AS T1 ON T2.`Template_Type_Code` = T1.`Template_Type_Code` JOIN Documents AS T3 ON T1.`Template_ID` = T3.`Template_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.`Template_Type_Description` FROM Ref_Template_Types AS T2 JOIN Templates AS T1 ON T2.`Template_Type_Code` = T1.`Template_Type_Code` JOIN Documents AS T3 ON T1.`Template_ID` = T3.`Template_ID`",
        "repair_result": 1
    },
    {
        "idx": 354,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the different descriptions for templates that have been used in a document.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "pred": "SELECT DISTINCT RTT.`Template_Type_Description` FROM Ref_Template_Types RTT JOIN Templates T ON RTT.`Template_Type_Code` = T.`Template_Type_Code` JOIN Documents D ON T.`Template_ID` = D.`Template_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT RTT.`Template_Type_Description` FROM Ref_Template_Types RTT JOIN Templates T ON RTT.`Template_Type_Code` = T.`Template_Type_Code` JOIN Documents D ON T.`Template_ID` = D.`Template_ID`",
        "repair_result": 1
    },
    {
        "idx": 355,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the template ids with template type description \"Presentation\".",
        "evidence": "",
        "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "pred": "SELECT T1.`Template_ID` FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` WHERE T2.`Template_Type_Description` = 'Presentation'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Template_ID` FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` WHERE T2.`Template_Type_Description` = 'Presentation'",
        "repair_result": 1
    },
    {
        "idx": 356,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "evidence": "",
        "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "pred": "SELECT T1.`Template_ID` FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` WHERE T2.`Template_Type_Description` = 'Presentation'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Template_ID` FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.`Template_Type_Code` = T2.`Template_Type_Code` WHERE T2.`Template_Type_Description` = 'Presentation'",
        "repair_result": 1
    },
    {
        "idx": 357,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many paragraphs in total?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Paragraphs",
        "pred": "SELECT COUNT(*) FROM Paragraphs",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Paragraphs",
        "repair_result": 1
    },
    {
        "idx": 358,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of paragraphs.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Paragraphs",
        "pred": "SELECT COUNT(*) FROM Paragraphs",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Paragraphs",
        "repair_result": 1
    },
    {
        "idx": 359,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "pred": "SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')",
        "repair_result": 1
    },
    {
        "idx": 360,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "pred": "SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')",
        "repair_result": 1
    },
    {
        "idx": 361,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "evidence": "",
        "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
        "pred": "SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea'",
        "pred_result": 0,
        "repair_sql": "SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea'",
        "repair_result": 0
    },
    {
        "idx": 362,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "evidence": "",
        "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
        "pred": "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'",
        "pred_result": 0,
        "repair_sql": "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'",
        "repair_result": 0
    },
    {
        "idx": 363,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "evidence": "",
        "gold": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "pred": "SELECT `Paragraph_ID`, `Paragraph_Text` FROM Paragraphs WHERE `Document_ID` = (SELECT `Document_ID` FROM Documents WHERE `Document_Name` = 'Welcome to NY')",
        "pred_result": 1,
        "repair_sql": "SELECT `Paragraph_ID`, `Paragraph_Text` FROM Paragraphs WHERE `Document_ID` = (SELECT `Document_ID` FROM Documents WHERE `Document_Name` = 'Welcome to NY')",
        "repair_result": 1
    },
    {
        "idx": 364,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "evidence": "",
        "gold": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "pred": "SELECT `Paragraph_ID`, `Paragraph_Text` FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')",
        "pred_result": 1,
        "repair_sql": "SELECT `Paragraph_ID`, `Paragraph_Text` FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')",
        "repair_result": 1
    },
    {
        "idx": 365,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "evidence": "",
        "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "pred": "SELECT `Paragraph_Text` FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews')",
        "pred_result": 1,
        "repair_sql": "SELECT `Paragraph_Text` FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews')",
        "repair_result": 1
    },
    {
        "idx": 366,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "evidence": "",
        "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "pred": "SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = ( SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews' )",
        "pred_result": 1,
        "repair_sql": "SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = ( SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews' )",
        "repair_result": 1
    },
    {
        "idx": 367,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "evidence": "",
        "gold": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "pred": "SELECT D.`Document_ID`, COUNT(*) AS num_paragraphs FROM Documents AS D JOIN Paragraphs AS P ON D.`Document_ID` = P.`Document_ID` GROUP BY D.`Document_ID` ORDER BY D.`Document_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT D.`Document_ID`, COUNT(*) AS num_paragraphs FROM Documents AS D JOIN Paragraphs AS P ON D.`Document_ID` = P.`Document_ID` GROUP BY D.`Document_ID` ORDER BY D.`Document_ID`",
        "repair_result": 1
    },
    {
        "idx": 368,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "evidence": "",
        "gold": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "pred": "SELECT T1.`Document_ID`, COUNT(T2.`Paragraph_ID`) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.`Document_ID` = T2.`Document_ID` GROUP BY T1.`Document_ID` ORDER BY T1.`Document_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Document_ID`, COUNT(T2.`Paragraph_ID`) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.`Document_ID` = T2.`Document_ID` GROUP BY T1.`Document_ID` ORDER BY T1.`Document_ID`",
        "repair_result": 1
    },
    {
        "idx": 369,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "evidence": "",
        "gold": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "pred": "SELECT D.`Document_ID`, D.`Document_Name`, COUNT(P.`Paragraph_ID`) AS Paragraph_Count FROM Documents AS D JOIN Paragraphs AS P ON D.`Document_ID` = P.`Document_ID` GROUP BY D.`Document_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT D.`Document_ID`, D.`Document_Name`, COUNT(P.`Paragraph_ID`) AS Paragraph_Count FROM Documents AS D JOIN Paragraphs AS P ON D.`Document_ID` = P.`Document_ID` GROUP BY D.`Document_ID`",
        "repair_result": 1
    },
    {
        "idx": 370,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "evidence": "",
        "gold": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "pred": "SELECT D.`Document_ID`, D.`Document_Name`, COUNT(P.`Paragraph_ID`) AS Num_of_Paragraphs FROM Documents AS D JOIN Paragraphs AS P ON D.`Document_ID` = P.`Document_ID` GROUP BY D.`Document_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT D.`Document_ID`, D.`Document_Name`, COUNT(P.`Paragraph_ID`) AS Num_of_Paragraphs FROM Documents AS D JOIN Paragraphs AS P ON D.`Document_ID` = P.`Document_ID` GROUP BY D.`Document_ID`",
        "repair_result": 1
    },
    {
        "idx": 371,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "List all document ids with at least two paragraphs.",
        "evidence": "",
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "pred": "SELECT DISTINCT D.`Document_ID` FROM Documents AS D JOIN Paragraphs AS P ON D.`Document_ID` = P.`Document_ID` GROUP BY D.`Document_ID` HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT D.`Document_ID` FROM Documents AS D JOIN Paragraphs AS P ON D.`Document_ID` = P.`Document_ID` GROUP BY D.`Document_ID` HAVING COUNT(*) >= 2",
        "repair_result": 1
    },
    {
        "idx": 372,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "evidence": "",
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "pred": "SELECT DISTINCT D.`Document_ID` FROM Documents AS D JOIN Paragraphs AS P ON D.`Document_ID` = P.`Document_ID` GROUP BY D.`Document_ID` HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT D.`Document_ID` FROM Documents AS D JOIN Paragraphs AS P ON D.`Document_ID` = P.`Document_ID` GROUP BY D.`Document_ID` HAVING COUNT(*) >= 2",
        "repair_result": 1
    },
    {
        "idx": 373,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document id and name with greatest number of paragraphs?",
        "evidence": "",
        "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT D.`Document_ID`, D.`Document_Name` FROM Documents AS D JOIN ( SELECT Document_ID, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY num_paragraphs DESC LIMIT 1 ) AS P ON D.`Document_ID` = P.`Document_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT D.`Document_ID`, D.`Document_Name` FROM Documents AS D JOIN ( SELECT Document_ID, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY num_paragraphs DESC LIMIT 1 ) AS P ON D.`Document_ID` = P.`Document_ID`",
        "repair_result": 1
    },
    {
        "idx": 374,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the id and name of the document with the most paragraphs.",
        "evidence": "",
        "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT D.`Document_ID`, D.`Document_Name` FROM Documents AS D JOIN ( SELECT Document_ID, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY num_paragraphs DESC LIMIT 1 ) AS P ON D.`Document_ID` = P.`Document_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT D.`Document_ID`, D.`Document_Name` FROM Documents AS D JOIN ( SELECT Document_ID, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY num_paragraphs DESC LIMIT 1 ) AS P ON D.`Document_ID` = P.`Document_ID`",
        "repair_result": 1
    },
    {
        "idx": 375,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document id with least number of paragraphs?",
        "evidence": "",
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "pred": "SELECT Document_ID, COUNT(*) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ORDER BY Paragraph_Count LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT Document_ID, COUNT(*) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ORDER BY Paragraph_Count LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 376,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the id of the document with the fewest paragraphs.",
        "evidence": "",
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "pred": "SELECT Document_ID FROM ( SELECT Document_ID, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY num_paragraphs LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT Document_ID FROM ( SELECT Document_ID, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY num_paragraphs LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 377,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document id with 1 to 2 paragraphs?",
        "evidence": "",
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "pred": "SELECT DISTINCT D.`Document_ID` FROM Documents AS D JOIN ( SELECT Document_ID, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID ) AS P ON D.`Document_ID` = P.`Document_ID` WHERE P.num_paragraphs BETWEEN 1 AND 2",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT D.`Document_ID` FROM Documents AS D JOIN ( SELECT Document_ID, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID ) AS P ON D.`Document_ID` = P.`Document_ID` WHERE P.num_paragraphs BETWEEN 1 AND 2",
        "repair_result": 1
    },
    {
        "idx": 378,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Give the ids of documents that have between one and two paragraphs.",
        "evidence": "",
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "pred": "SELECT DISTINCT D.`Document_ID` FROM Documents AS D JOIN Paragraphs AS P ON D.`Document_ID` = P.`Document_ID` GROUP BY D.`Document_ID` HAVING COUNT(P.`Paragraph_ID`) BETWEEN 1 AND 2",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT D.`Document_ID` FROM Documents AS D JOIN Paragraphs AS P ON D.`Document_ID` = P.`Document_ID` GROUP BY D.`Document_ID` HAVING COUNT(P.`Paragraph_ID`) BETWEEN 1 AND 2",
        "repair_result": 1
    },
    {
        "idx": 379,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "evidence": "",
        "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "pred": "SELECT DISTINCT T3.`Document_ID` FROM Paragraphs AS T3 WHERE T3.`Paragraph_Text` IN ('Brazil', 'Ireland')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T3.`Document_ID` FROM Paragraphs AS T3 WHERE T3.`Paragraph_Text` IN ('Brazil', 'Ireland')",
        "repair_result": 1
    },
    {
        "idx": 380,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "evidence": "",
        "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "pred": "SELECT DISTINCT D.`Document_ID` FROM Documents AS D JOIN Paragraphs AS P ON D.`Document_ID` = P.`Document_ID` WHERE P.`Paragraph_Text` IN ('Brazil', 'Ireland')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT D.`Document_ID` FROM Documents AS D JOIN Paragraphs AS P ON D.`Document_ID` = P.`Document_ID` WHERE P.`Paragraph_Text` IN ('Brazil', 'Ireland')",
        "repair_result": 1
    },
    {
        "idx": 381,
        "db_id": "course_teach",
        "question": "How many teachers are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM teacher",
        "pred": "SELECT COUNT(*) FROM teacher",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM teacher",
        "repair_result": 1
    },
    {
        "idx": 382,
        "db_id": "course_teach",
        "question": "What is the total count of teachers?",
        "evidence": "",
        "gold": "SELECT count(*) FROM teacher",
        "pred": "SELECT COUNT(*) FROM teacher",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM teacher",
        "repair_result": 1
    },
    {
        "idx": 383,
        "db_id": "course_teach",
        "question": "List the names of teachers in ascending order of age.",
        "evidence": "",
        "gold": "SELECT Name FROM teacher ORDER BY Age ASC",
        "pred": "SELECT `Name` FROM teacher ORDER BY Age ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM teacher ORDER BY Age ASC",
        "repair_result": 1
    },
    {
        "idx": 384,
        "db_id": "course_teach",
        "question": "What are the names of the teachers ordered by ascending age?",
        "evidence": "",
        "gold": "SELECT Name FROM teacher ORDER BY Age ASC",
        "pred": "SELECT `Name` FROM teacher ORDER BY Age ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM teacher ORDER BY Age ASC",
        "repair_result": 1
    },
    {
        "idx": 385,
        "db_id": "course_teach",
        "question": "What are the age and hometown of teachers?",
        "evidence": "",
        "gold": "SELECT Age ,  Hometown FROM teacher",
        "pred": "SELECT `Age`, `Hometown` FROM teacher",
        "pred_result": 1,
        "repair_sql": "SELECT `Age`, `Hometown` FROM teacher",
        "repair_result": 1
    },
    {
        "idx": 386,
        "db_id": "course_teach",
        "question": "What is the age and hometown of every teacher?",
        "evidence": "",
        "gold": "SELECT Age ,  Hometown FROM teacher",
        "pred": "SELECT `Age`, `Hometown` FROM teacher",
        "pred_result": 1,
        "repair_sql": "SELECT `Age`, `Hometown` FROM teacher",
        "repair_result": 1
    },
    {
        "idx": 387,
        "db_id": "course_teach",
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "evidence": "",
        "gold": "select name from teacher where hometown != \"little lever urban district\"",
        "pred": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'",
        "pred_result": 0,
        "repair_sql": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'",
        "repair_result": 0
    },
    {
        "idx": 388,
        "db_id": "course_teach",
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "evidence": "",
        "gold": "select name from teacher where hometown != \"little lever urban district\"",
        "pred": "SELECT `Name` FROM teacher WHERE Hometown != 'Little Lever Urban District'",
        "pred_result": 0,
        "repair_sql": "SELECT `Name` FROM teacher WHERE Hometown != 'Little Lever Urban District'",
        "repair_result": 0
    },
    {
        "idx": 389,
        "db_id": "course_teach",
        "question": "Show the name of teachers aged either 32 or 33?",
        "evidence": "",
        "gold": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "pred": "SELECT `Name` FROM teacher WHERE Age IN ('32', '33')",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM teacher WHERE Age IN ('32', '33')",
        "repair_result": 1
    },
    {
        "idx": 390,
        "db_id": "course_teach",
        "question": "What are the names of the teachers who are aged either 32 or 33?",
        "evidence": "",
        "gold": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "pred": "SELECT `Name` FROM teacher WHERE Age IN ('32', '33')",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM teacher WHERE Age IN ('32', '33')",
        "repair_result": 1
    },
    {
        "idx": 391,
        "db_id": "course_teach",
        "question": "What is the hometown of the youngest teacher?",
        "evidence": "",
        "gold": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "pred": "SELECT `Hometown` FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "pred_result": 1,
        "repair_sql": "SELECT `Hometown` FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "repair_result": 1
    },
    {
        "idx": 392,
        "db_id": "course_teach",
        "question": "Where is the youngest teacher from?",
        "evidence": "",
        "gold": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "pred": "SELECT `Hometown` FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "pred_result": 1,
        "repair_sql": "SELECT `Hometown` FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "repair_result": 1
    },
    {
        "idx": 393,
        "db_id": "course_teach",
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "evidence": "",
        "gold": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "pred": "SELECT `Hometown`, COUNT(*) FROM teacher GROUP BY `Hometown`",
        "pred_result": 1,
        "repair_sql": "SELECT `Hometown`, COUNT(*) FROM teacher GROUP BY `Hometown`",
        "repair_result": 1
    },
    {
        "idx": 394,
        "db_id": "course_teach",
        "question": "For each hometown, how many teachers are there?",
        "evidence": "",
        "gold": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "pred": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown",
        "pred_result": 1,
        "repair_sql": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown",
        "repair_result": 1
    },
    {
        "idx": 395,
        "db_id": "course_teach",
        "question": "List the most common hometown of teachers.",
        "evidence": "",
        "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT `Hometown`, COUNT(*) AS `Count` FROM teacher GROUP BY `Hometown` ORDER BY `Count` DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Hometown`, COUNT(*) AS `Count` FROM teacher GROUP BY `Hometown` ORDER BY `Count` DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 396,
        "db_id": "course_teach",
        "question": "What is the most commmon hometowns for teachers?",
        "evidence": "",
        "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT `Hometown`, COUNT(*) AS `Count` FROM teacher GROUP BY `Hometown` ORDER BY `Count` DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Hometown`, COUNT(*) AS `Count` FROM teacher GROUP BY `Hometown` ORDER BY `Count` DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 397,
        "db_id": "course_teach",
        "question": "Show the hometowns shared by at least two teachers.",
        "evidence": "",
        "gold": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "pred": "SELECT `Hometown` FROM teacher GROUP BY `Hometown` HAVING COUNT(*) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT `Hometown` FROM teacher GROUP BY `Hometown` HAVING COUNT(*) > 1",
        "repair_result": 1
    },
    {
        "idx": 398,
        "db_id": "course_teach",
        "question": "What are the towns from which at least two teachers come from?",
        "evidence": "",
        "gold": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "pred": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
        "repair_result": 1
    },
    {
        "idx": 399,
        "db_id": "course_teach",
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "evidence": "",
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "pred": "SELECT T2.`Name`, T1.`Course` FROM course_arrange AS T3 JOIN teacher AS T2 ON T3.`Teacher_ID` = T2.`Teacher_ID` JOIN course AS T1 ON T3.`Course_ID` = T1.`Course_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Name`, T1.`Course` FROM course_arrange AS T3 JOIN teacher AS T2 ON T3.`Teacher_ID` = T2.`Teacher_ID` JOIN course AS T1 ON T3.`Course_ID` = T1.`Course_ID`",
        "repair_result": 1
    },
    {
        "idx": 400,
        "db_id": "course_teach",
        "question": "What is the name of each teacher and what course they teach?",
        "evidence": "",
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "pred": "SELECT T2.`Name`, T1.`Course` FROM teacher AS T2 JOIN course_arrange AS T3 ON T2.`Teacher_ID` = T3.`Teacher_ID` JOIN course AS T1 ON T3.`Course_ID` = T1.`Course_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Name`, T1.`Course` FROM teacher AS T2 JOIN course_arrange AS T3 ON T2.`Teacher_ID` = T3.`Teacher_ID` JOIN course AS T1 ON T3.`Course_ID` = T1.`Course_ID`",
        "repair_result": 1
    },
    {
        "idx": 401,
        "db_id": "course_teach",
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "evidence": "",
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "pred": "SELECT T2.`Name`, T1.`Course` FROM teacher AS T2 JOIN course_arrange AS T3 ON T2.`Teacher_ID` = T3.`Teacher_ID` JOIN course AS T1 ON T1.`Course_ID` = T3.`Course_ID` ORDER BY T2.`Name` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Name`, T1.`Course` FROM teacher AS T2 JOIN course_arrange AS T3 ON T2.`Teacher_ID` = T3.`Teacher_ID` JOIN course AS T1 ON T1.`Course_ID` = T3.`Course_ID` ORDER BY T2.`Name` ASC",
        "repair_result": 1
    },
    {
        "idx": 402,
        "db_id": "course_teach",
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "evidence": "",
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "pred": "SELECT T2.`Name`, T1.`Course` FROM teacher AS T2 JOIN course_arrange AS T3 ON T2.`Teacher_ID` = T3.`Teacher_ID` JOIN course AS T1 ON T3.`Course_ID` = T1.`Course_ID` ORDER BY T2.`Name` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Name`, T1.`Course` FROM teacher AS T2 JOIN course_arrange AS T3 ON T2.`Teacher_ID` = T3.`Teacher_ID` JOIN course AS T1 ON T3.`Course_ID` = T1.`Course_ID` ORDER BY T2.`Name` ASC",
        "repair_result": 1
    },
    {
        "idx": 403,
        "db_id": "course_teach",
        "question": "Show the name of the teacher for the math course.",
        "evidence": "",
        "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "pred": "SELECT T2.`Name` FROM course AS T1 JOIN course_arrange AS T3 ON T1.`Course_ID` = T3.`Course_ID` JOIN teacher AS T2 ON T3.`Teacher_ID` = T2.`Teacher_ID` WHERE T1.`Course` = 'Math'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Name` FROM course AS T1 JOIN course_arrange AS T3 ON T1.`Course_ID` = T3.`Course_ID` JOIN teacher AS T2 ON T3.`Teacher_ID` = T2.`Teacher_ID` WHERE T1.`Course` = 'Math'",
        "repair_result": 1
    },
    {
        "idx": 404,
        "db_id": "course_teach",
        "question": "What are the names of the people who teach math courses?",
        "evidence": "",
        "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "pred": "SELECT T2.`Name` FROM course AS T1 JOIN course_arrange AS T3 ON T1.`Course_ID` = T3.`Course_ID` JOIN teacher AS T2 ON T3.`Teacher_ID` = T2.`Teacher_ID` WHERE T1.`Course` = 'Math'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Name` FROM course AS T1 JOIN course_arrange AS T3 ON T1.`Course_ID` = T3.`Course_ID` JOIN teacher AS T2 ON T3.`Teacher_ID` = T2.`Teacher_ID` WHERE T1.`Course` = 'Math'",
        "repair_result": 1
    },
    {
        "idx": 405,
        "db_id": "course_teach",
        "question": "Show names of teachers and the number of courses they teach.",
        "evidence": "",
        "gold": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "pred": "SELECT T2.`Name`, COUNT(*) FROM teacher AS T2 JOIN course_arrange AS T1 ON T2.`Teacher_ID` = T1.`Teacher_ID` GROUP BY T2.`Teacher_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Name`, COUNT(*) FROM teacher AS T2 JOIN course_arrange AS T1 ON T2.`Teacher_ID` = T1.`Teacher_ID` GROUP BY T2.`Teacher_ID`",
        "repair_result": 1
    },
    {
        "idx": 406,
        "db_id": "course_teach",
        "question": "What are the names of the teachers and how many courses do they teach?",
        "evidence": "",
        "gold": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "pred": "SELECT T2.`Name`, COUNT(*) FROM teacher AS T2 JOIN course_arrange AS T3 ON T2.`Teacher_ID` = T3.`Teacher_ID` GROUP BY T2.`Teacher_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Name`, COUNT(*) FROM teacher AS T2 JOIN course_arrange AS T3 ON T2.`Teacher_ID` = T3.`Teacher_ID` GROUP BY T2.`Teacher_ID`",
        "repair_result": 1
    },
    {
        "idx": 407,
        "db_id": "course_teach",
        "question": "Show names of teachers that teach at least two courses.",
        "evidence": "",
        "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "pred": "SELECT T2.`Name` FROM teacher AS T2 JOIN course_arrange AS T1 ON T1.`Teacher_ID` = T2.`Teacher_ID` GROUP BY T2.`Teacher_ID` HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Name` FROM teacher AS T2 JOIN course_arrange AS T1 ON T1.`Teacher_ID` = T2.`Teacher_ID` GROUP BY T2.`Teacher_ID` HAVING COUNT(*) >= 2",
        "repair_result": 1
    },
    {
        "idx": 408,
        "db_id": "course_teach",
        "question": "What are the names of the teachers who teach at least two courses?",
        "evidence": "",
        "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "pred": "SELECT T2.`Name` FROM teacher AS T2 JOIN course_arrange AS T1 ON T1.`Teacher_ID` = T2.`Teacher_ID` GROUP BY T1.`Teacher_ID` HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Name` FROM teacher AS T2 JOIN course_arrange AS T1 ON T1.`Teacher_ID` = T2.`Teacher_ID` GROUP BY T1.`Teacher_ID` HAVING COUNT(*) >= 2",
        "repair_result": 1
    },
    {
        "idx": 409,
        "db_id": "course_teach",
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "evidence": "",
        "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "pred": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT DISTINCT Teacher_ID FROM course_arrange)",
        "pred_result": 1,
        "repair_sql": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT DISTINCT Teacher_ID FROM course_arrange)",
        "repair_result": 1
    },
    {
        "idx": 410,
        "db_id": "course_teach",
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "evidence": "",
        "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "pred": "SELECT `Name` FROM teacher WHERE Teacher_ID NOT IN (SELECT DISTINCT Teacher_ID FROM course_arrange)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM teacher WHERE Teacher_ID NOT IN (SELECT DISTINCT Teacher_ID FROM course_arrange)",
        "repair_result": 1
    },
    {
        "idx": 411,
        "db_id": "museum_visit",
        "question": "How many visitors below age 30 are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM visitor WHERE age  <  30",
        "pred": "SELECT COUNT(*) FROM visitor WHERE Age < 30",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM visitor WHERE Age < 30",
        "repair_result": 1
    },
    {
        "idx": 412,
        "db_id": "museum_visit",
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "evidence": "",
        "gold": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "pred": "SELECT `Name` FROM visitor WHERE `Level_of_membership` > 4 ORDER BY `Level_of_membership` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM visitor WHERE `Level_of_membership` > 4 ORDER BY `Level_of_membership` DESC",
        "repair_result": 1
    },
    {
        "idx": 413,
        "db_id": "museum_visit",
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "evidence": "",
        "gold": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "pred": "SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4",
        "repair_result": 1
    },
    {
        "idx": 414,
        "db_id": "museum_visit",
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "evidence": "",
        "gold": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "pred": "SELECT `Name`, `Level_of_membership` FROM visitor WHERE `Level_of_membership` > 4 ORDER BY `Age` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name`, `Level_of_membership` FROM visitor WHERE `Level_of_membership` > 4 ORDER BY `Age` DESC",
        "repair_result": 1
    },
    {
        "idx": 415,
        "db_id": "museum_visit",
        "question": "Find the id and name of the museum that has the most staff members?",
        "evidence": "",
        "gold": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "pred": "SELECT `Museum_ID`, `Name` FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)",
        "pred_result": 1,
        "repair_sql": "SELECT `Museum_ID`, `Name` FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)",
        "repair_result": 1
    },
    {
        "idx": 416,
        "db_id": "museum_visit",
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "evidence": "",
        "gold": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "pred": "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < '2009'",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < '2009'",
        "repair_result": 1
    },
    {
        "idx": 417,
        "db_id": "museum_visit",
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "evidence": "",
        "gold": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "pred": "SELECT `Open_Year`, `Num_of_Staff` FROM museum WHERE `Name` = 'Plaza Museum'",
        "pred_result": 0,
        "repair_sql": "SELECT `Open_Year`, `Num_of_Staff` FROM museum WHERE `Name` = 'Plaza Museum'",
        "repair_result": 0
    },
    {
        "idx": 418,
        "db_id": "museum_visit",
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "evidence": "",
        "gold": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
        "pred": "SELECT `Name` FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010')",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010')",
        "repair_result": 1
    },
    {
        "idx": 419,
        "db_id": "museum_visit",
        "question": "find the id, name and age for visitors who visited some museums more than once.",
        "evidence": "",
        "gold": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
        "pred": "SELECT V.`visitor_ID`, V.`Name`, V.`Age` FROM visitor AS V JOIN visit AS VT ON V.`ID` = VT.`visitor_ID` GROUP BY VT.`visitor_ID`, V.`Name`, V.`Age` HAVING COUNT(VT.`Museum_ID`) > 1",
        "pred_result": "no such column: V.visitor_ID",
        "repair_sql": "SELECT V.`ID` AS visitor_ID, V.`Name`, V.`Age` FROM visitor AS V JOIN visit AS VT ON V.`ID` = VT.`visitor_ID` GROUP BY V.`ID`, V.`Name`, V.`Age` HAVING COUNT(VT.`Museum_ID`) > 1",
        "repair_result": 1
    },
    {
        "idx": 420,
        "db_id": "museum_visit",
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "evidence": "",
        "gold": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "pred": "SELECT V.`visitor_ID`, V.`Name`, V.`Level_of_membership` FROM visitor AS V JOIN visit AS VT ON V.`ID` = VT.`visitor_ID` GROUP BY V.`visitor_ID` ORDER BY SUM(VT.`Total_spent`) DESC LIMIT 1",
        "pred_result": "no such column: V.visitor_ID",
        "repair_sql": "SELECT V.`ID` AS id, V.`Name` AS name, V.`Level_of_membership` AS membership_level FROM visitor AS V JOIN visit AS VT ON V.`ID` = VT.`visitor_ID` GROUP BY V.`ID`, V.`Name`, V.`Level_of_membership` ORDER BY SUM(VT.`Total_spent`) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 421,
        "db_id": "museum_visit",
        "question": "What are the id and name of the museum visited most times?",
        "evidence": "",
        "gold": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`Museum_ID`, T1.`Name` FROM museum AS T1 JOIN visit AS T2 ON T1.`Museum_ID` = T2.`Museum_ID` GROUP BY T1.`Museum_ID`, T1.`Name` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Museum_ID`, T1.`Name` FROM museum AS T1 JOIN visit AS T2 ON T1.`Museum_ID` = T2.`Museum_ID` GROUP BY T1.`Museum_ID`, T1.`Name` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 422,
        "db_id": "museum_visit",
        "question": "What is the name of the museum that had no visitor yet?",
        "evidence": "",
        "gold": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "pred": "SELECT `Name` FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)",
        "repair_result": 1
    },
    {
        "idx": 423,
        "db_id": "museum_visit",
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "evidence": "",
        "gold": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "pred": "SELECT V.`Name`, V.`Age` FROM visitor AS V JOIN visit AS VT ON V.`ID` = VT.`visitor_ID` WHERE VT.`Num_of_Ticket` = (SELECT MAX(`Num_of_Ticket`) FROM visit)",
        "pred_result": 1,
        "repair_sql": "SELECT V.`Name`, V.`Age` FROM visitor AS V JOIN visit AS VT ON V.`ID` = VT.`visitor_ID` WHERE VT.`Num_of_Ticket` = (SELECT MAX(`Num_of_Ticket`) FROM visit)",
        "repair_result": 1
    },
    {
        "idx": 424,
        "db_id": "museum_visit",
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "evidence": "",
        "gold": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "pred": "SELECT AVG(Num_of_Ticket) AS Average_Num_of_Tickets, MAX(Num_of_Ticket) AS Max_Num_of_Tickets FROM visit",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Num_of_Ticket) AS Average_Num_of_Tickets, MAX(Num_of_Ticket) AS Max_Num_of_Tickets FROM visit",
        "repair_result": 1
    },
    {
        "idx": 425,
        "db_id": "museum_visit",
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "evidence": "",
        "gold": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "pred": "SELECT SUM(`Total_spent`) FROM visit WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership = 1)",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(`Total_spent`) FROM visit WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership = 1)",
        "repair_result": 1
    },
    {
        "idx": 426,
        "db_id": "museum_visit",
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "evidence": "",
        "gold": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
        "pred": "SELECT DISTINCT V1.`Name` FROM visitor AS V1 JOIN visit AS V2 ON V1.`ID` = V2.`visitor_ID` JOIN museum AS M1 ON V2.`Museum_ID` = M1.`Museum_ID` WHERE M1.`Open_Year` < '2009' AND EXISTS ( SELECT * FROM visit AS V3 JOIN museum AS M2 ON V3.`Museum_ID` = M2.`Museum_ID` WHERE V1.`ID` = V3.`visitor_ID` AND M2.`Open_Year` > '2011' )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT V1.`Name` FROM visitor AS V1 JOIN visit AS V2 ON V1.`ID` = V2.`visitor_ID` JOIN museum AS M1 ON V2.`Museum_ID` = M1.`Museum_ID` WHERE M1.`Open_Year` < '2009' AND EXISTS ( SELECT * FROM visit AS V3 JOIN museum AS M2 ON V3.`Museum_ID` = M2.`Museum_ID` WHERE V1.`ID` = V3.`visitor_ID` AND M2.`Open_Year` > '2011' )",
        "repair_result": 1
    },
    {
        "idx": 427,
        "db_id": "museum_visit",
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "evidence": "",
        "gold": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
        "pred": "SELECT COUNT(*) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE Open_Year > '2010')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE Open_Year > '2010')",
        "repair_result": 1
    },
    {
        "idx": 428,
        "db_id": "museum_visit",
        "question": "How many museums were opened after 2013 or before 2008?",
        "evidence": "",
        "gold": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "pred": "SELECT COUNT(*) FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008'",
        "repair_result": 1
    },
    {
        "idx": 429,
        "db_id": "wta_1",
        "question": "Find the total number of players.",
        "evidence": "",
        "gold": "SELECT count(*) FROM players",
        "pred": "SELECT COUNT(*) FROM players",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM players",
        "repair_result": 1
    },
    {
        "idx": 430,
        "db_id": "wta_1",
        "question": "How many players are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM players",
        "pred": "SELECT COUNT(*) FROM players",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM players",
        "repair_result": 1
    },
    {
        "idx": 431,
        "db_id": "wta_1",
        "question": "Find the total number of matches.",
        "evidence": "",
        "gold": "SELECT count(*) FROM matches",
        "pred": "SELECT COUNT(*) FROM matches",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM matches",
        "repair_result": 1
    },
    {
        "idx": 432,
        "db_id": "wta_1",
        "question": "Count the number of matches.",
        "evidence": "",
        "gold": "SELECT count(*) FROM matches",
        "pred": "SELECT COUNT(*) FROM matches",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM matches",
        "repair_result": 1
    },
    {
        "idx": 433,
        "db_id": "wta_1",
        "question": "List the first name and birth date of all players from the country with code USA.",
        "evidence": "",
        "gold": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "pred": "SELECT `first_name`, `birth_date` FROM players WHERE `country_code` = 'USA'",
        "pred_result": 1,
        "repair_sql": "SELECT `first_name`, `birth_date` FROM players WHERE `country_code` = 'USA'",
        "repair_result": 1
    },
    {
        "idx": 434,
        "db_id": "wta_1",
        "question": "What are the first names and birth dates of players from the USA?",
        "evidence": "",
        "gold": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "pred": "SELECT `first_name`, `birth_date` FROM players WHERE `country_code` = 'USA'",
        "pred_result": 1,
        "repair_sql": "SELECT `first_name`, `birth_date` FROM players WHERE `country_code` = 'USA'",
        "repair_result": 1
    },
    {
        "idx": 435,
        "db_id": "wta_1",
        "question": "Find the average age of losers and winners of all matches.",
        "evidence": "",
        "gold": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "pred": "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches",
        "repair_result": 1
    },
    {
        "idx": 436,
        "db_id": "wta_1",
        "question": "What are the average ages of losers and winners across matches?",
        "evidence": "",
        "gold": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "pred": "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches",
        "repair_result": 1
    },
    {
        "idx": 437,
        "db_id": "wta_1",
        "question": "Find the average rank of winners in all matches.",
        "evidence": "",
        "gold": "SELECT avg(winner_rank) FROM matches",
        "pred": "SELECT AVG(ranking) FROM rankings WHERE player_id IN (SELECT winner_id FROM matches)",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(ranking) FROM rankings WHERE player_id IN (SELECT winner_id FROM matches)",
        "repair_result": 0
    },
    {
        "idx": 438,
        "db_id": "wta_1",
        "question": "What is the average rank for winners in all matches?",
        "evidence": "",
        "gold": "SELECT avg(winner_rank) FROM matches",
        "pred": "SELECT AVG(winner_rank) FROM matches",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(winner_rank) FROM matches",
        "repair_result": 1
    },
    {
        "idx": 439,
        "db_id": "wta_1",
        "question": "Find the highest rank of losers in all matches.",
        "evidence": "",
        "gold": "SELECT min(loser_rank) FROM matches",
        "pred": "SELECT MAX(loser_rank) FROM matches",
        "pred_result": 0,
        "repair_sql": "SELECT MAX(loser_rank) FROM matches",
        "repair_result": 0
    },
    {
        "idx": 440,
        "db_id": "wta_1",
        "question": "What is the best rank of losers across all matches?",
        "evidence": "",
        "gold": "SELECT min(loser_rank) FROM matches",
        "pred": "SELECT MAX(loser_rank) FROM matches",
        "pred_result": 0,
        "repair_sql": "SELECT MAX(loser_rank) FROM matches",
        "repair_result": 0
    },
    {
        "idx": 441,
        "db_id": "wta_1",
        "question": "find the number of distinct country codes of all players.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT country_code) FROM players",
        "pred": "SELECT COUNT(DISTINCT `country_code`) FROM players",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT `country_code`) FROM players",
        "repair_result": 1
    },
    {
        "idx": 442,
        "db_id": "wta_1",
        "question": "How many distinct countries do players come from?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT country_code) FROM players",
        "pred": "SELECT COUNT(DISTINCT country_code) FROM players",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT country_code) FROM players",
        "repair_result": 1
    },
    {
        "idx": 443,
        "db_id": "wta_1",
        "question": "Find the number of distinct name of losers.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT loser_name) FROM matches",
        "pred": "SELECT COUNT(DISTINCT first_name || ' ' || last_name) AS distinct_name FROM players WHERE player_id IN (SELECT loser_id FROM matches)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT first_name || ' ' || last_name) AS distinct_name FROM players WHERE player_id IN (SELECT loser_id FROM matches)",
        "repair_result": 1
    },
    {
        "idx": 444,
        "db_id": "wta_1",
        "question": "How many different loser names are there?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT loser_name) FROM matches",
        "pred": "SELECT COUNT(DISTINCT CONCAT(`first_name`, ' ', `last_name`)) AS different_loser_names FROM players WHERE player_id IN (SELECT loser_id FROM matches)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT CONCAT(`first_name`, ' ', `last_name`)) AS different_loser_names FROM players WHERE player_id IN (SELECT loser_id FROM matches)",
        "repair_result": 1
    },
    {
        "idx": 445,
        "db_id": "wta_1",
        "question": "Find the name of tourney that has more than 10 matches.",
        "evidence": "",
        "gold": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "pred": "SELECT DISTINCT `tourney_name` FROM matches GROUP BY `tourney_name` HAVING COUNT(*) > 10",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `tourney_name` FROM matches GROUP BY `tourney_name` HAVING COUNT(*) > 10",
        "repair_result": 1
    },
    {
        "idx": 446,
        "db_id": "wta_1",
        "question": "What are the names of tournaments that have more than 10 matches?",
        "evidence": "",
        "gold": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "pred": "SELECT DISTINCT `tourney_name` FROM matches GROUP BY `tourney_name` HAVING COUNT(*) > 10",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `tourney_name` FROM matches GROUP BY `tourney_name` HAVING COUNT(*) > 10",
        "repair_result": 1
    },
    {
        "idx": 447,
        "db_id": "wta_1",
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "evidence": "",
        "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "pred": "SELECT DISTINCT T1.`first_name`, T1.`last_name` FROM players AS T1 JOIN matches AS T2 ON T1.`player_id` = T2.`winner_id` WHERE T2.`winner_id` IN ( SELECT T2.`winner_id` FROM matches AS T2 WHERE strftime('%Y', T2.`match_date`) = '2013' ) AND T2.`winner_id` IN ( SELECT T2.`winner_id` FROM matches AS T2 WHERE strftime('%Y', T2.`match_date`) = '2016' )",
        "pred_result": "no such column: T2.match_date",
        "repair_sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.winner_id IN ( SELECT T2.winner_id FROM matches AS T2 JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE strftime('%Y', T2.match_date) = '2013' ) AND T2.winner_id IN ( SELECT T2.winner_id FROM matches AS T2 JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE strftime('%Y', T2.match_date) = '2016' )",
        "repair_result": "no such column: T2.match_date"
    },
    {
        "idx": 448,
        "db_id": "wta_1",
        "question": "What are the names of players who won in both 2013 and 2016?",
        "evidence": "",
        "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "pred": "SELECT DISTINCT T1.`first_name`, T1.`last_name` FROM players AS T1 JOIN matches AS T2 ON T1.`player_id` = T2.`winner_id` WHERE T2.`winner_id` IN ( SELECT T2.`winner_id` FROM matches AS T2 JOIN players AS T1 ON T1.`player_id` = T2.`winner_id` WHERE T2.`winner_id` IN ( SELECT T2.`winner_id` FROM matches AS T2 JOIN players AS T1 ON T1.`player_id` = T2.`winner_id` JOIN rankings AS T3 ON T1.`player_id` = T3.`player_id` WHERE strftime('%Y', T3.`ranking_date`) = '2013' ) AND T2.`winner_id` IN ( SELECT T2.`winner_id` FROM matches AS T2 JOIN players AS T1 ON T1.`player_id` = T2.`winner_id` JOIN rankings AS T3 ON T1.`player_id` = T3.`player_id` WHERE strftime('%Y', T3.`ranking_date`) = '2016' ) )",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`first_name`, T1.`last_name` FROM players AS T1 JOIN matches AS T2 ON T1.`player_id` = T2.`winner_id` WHERE T2.`winner_id` IN ( SELECT T2.`winner_id` FROM matches AS T2 JOIN players AS T1 ON T1.`player_id` = T2.`winner_id` WHERE T2.`winner_id` IN ( SELECT T2.`winner_id` FROM matches AS T2 JOIN players AS T1 ON T1.`player_id` = T2.`winner_id` JOIN rankings AS T3 ON T1.`player_id` = T3.`player_id` WHERE strftime('%Y', T3.`ranking_date`) = '2013' ) AND T2.`winner_id` IN ( SELECT T2.`winner_id` FROM matches AS T2 JOIN players AS T1 ON T1.`player_id` = T2.`winner_id` JOIN rankings AS T3 ON T1.`player_id` = T3.`player_id` WHERE strftime('%Y', T3.`ranking_date`) = '2016' ) )",
        "repair_result": 0
    },
    {
        "idx": 449,
        "db_id": "wta_1",
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "evidence": "",
        "gold": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "pred": "SELECT COUNT(*) FROM matches WHERE strftime('%Y', tourney_date) IN ('2013', '2016')",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM matches WHERE strftime('%Y', tourney_date) IN ('2013', '2016')",
        "repair_result": 0
    },
    {
        "idx": 450,
        "db_id": "wta_1",
        "question": "How many matches were played in 2013 or 2016?",
        "evidence": "",
        "gold": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "pred": "SELECT COUNT(*) FROM matches WHERE tourney_date LIKE '2013%' OR tourney_date LIKE '2016%'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM matches WHERE tourney_date LIKE '2013%' OR tourney_date LIKE '2016%'",
        "repair_result": 1
    },
    {
        "idx": 451,
        "db_id": "wta_1",
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "evidence": "",
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "pred": "SELECT DISTINCT p.`country_code`, p.`first_name` FROM players AS p JOIN matches AS m1 ON p.`player_id` = m1.`winner_id` JOIN matches AS m2 ON p.`player_id` = m2.`winner_id` JOIN rankings AS r1 ON p.`player_id` = r1.`player_id` JOIN rankings AS r2 ON p.`player_id` = r2.`player_id` WHERE m1.`tourney_name` = 'WTA Championships' AND m2.`tourney_name` = 'Australian Open'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT p.`country_code`, p.`first_name` FROM players AS p JOIN matches AS m1 ON p.`player_id` = m1.`winner_id` JOIN matches AS m2 ON p.`player_id` = m2.`winner_id` JOIN rankings AS r1 ON p.`player_id` = r1.`player_id` JOIN rankings AS r2 ON p.`player_id` = r2.`player_id` WHERE m1.`tourney_name` = 'WTA Championships' AND m2.`tourney_name` = 'Australian Open'",
        "repair_result": 1
    },
    {
        "idx": 452,
        "db_id": "wta_1",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "evidence": "",
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "pred": "SELECT p.first_name, p.country_code FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.tournament = 'WTA Championships' AND m2.tournament = 'Australian Open'",
        "pred_result": "no such column: m1.tournament",
        "repair_sql": "SELECT p.first_name, p.country_code FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.tournament = 'WTA Championships' AND m2.tournament = 'Australian Open'",
        "repair_result": "no such column: m1.tournament"
    },
    {
        "idx": 453,
        "db_id": "wta_1",
        "question": "Find the first name and country code of the oldest player.",
        "evidence": "",
        "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "pred": "SELECT `first_name`, `country_code` FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)",
        "pred_result": 0,
        "repair_sql": "SELECT `first_name`, `country_code` FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)",
        "repair_result": 0
    },
    {
        "idx": 454,
        "db_id": "wta_1",
        "question": "What is the first name and country code of the oldest player?",
        "evidence": "",
        "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "pred": "SELECT `first_name`, `country_code` FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)",
        "pred_result": 0,
        "repair_sql": "SELECT `first_name`, `country_code` FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)",
        "repair_result": 0
    },
    {
        "idx": 455,
        "db_id": "wta_1",
        "question": "List the first and last name of all players in the order of birth date.",
        "evidence": "",
        "gold": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "pred": "SELECT `first_name`, `last_name` FROM players ORDER BY `birth_date`",
        "pred_result": "Could not decode to UTF-8 column 'last_name' with text 'Treyes Albarrac\ufffd\ufffdN'",
        "repair_sql": "SELECT `first_name`, `last_name` FROM players ORDER BY `birth_date`",
        "repair_result": "Could not decode to UTF-8 column 'last_name' with text 'Treyes Albarrac\ufffd\ufffdN'"
    },
    {
        "idx": 456,
        "db_id": "wta_1",
        "question": "What are the full names of all players, sorted by birth date?",
        "evidence": "",
        "gold": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "pred": "SELECT `first_name` || ' ' || `last_name` AS full_name FROM players ORDER BY `birth_date`",
        "pred_result": "Could not decode to UTF-8 column 'full_name' with text 'Joselyn Margarita Treyes Albarrac\ufffd\ufffdN'",
        "repair_sql": "SELECT `first_name` || ' ' || `last_name` AS full_name FROM players ORDER BY `birth_date`",
        "repair_result": "Could not decode to UTF-8 column 'full_name' with text 'Joselyn Margarita Treyes Albarrac\ufffd\ufffdN'"
    },
    {
        "idx": 457,
        "db_id": "wta_1",
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "evidence": "",
        "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "pred": "SELECT `first_name`, `last_name` FROM players WHERE `hand` = 'L' ORDER BY `birth_date`",
        "pred_result": 1,
        "repair_sql": "SELECT `first_name`, `last_name` FROM players WHERE `hand` = 'L' ORDER BY `birth_date`",
        "repair_result": 1
    },
    {
        "idx": 458,
        "db_id": "wta_1",
        "question": "What are the full names of all left handed players, in order of birth date?",
        "evidence": "",
        "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "pred": "SELECT `first_name` || ' ' || `last_name` AS full_name FROM players WHERE `hand` = 'L' ORDER BY `birth_date`",
        "pred_result": 0,
        "repair_sql": "SELECT `first_name` || ' ' || `last_name` AS full_name FROM players WHERE `hand` = 'L' ORDER BY `birth_date`",
        "repair_result": 0
    },
    {
        "idx": 459,
        "db_id": "wta_1",
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "evidence": "",
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "pred": "SELECT T1.`first_name`, T1.`country_code` FROM players AS T1 JOIN rankings AS T2 ON T1.`player_id` = T2.`player_id` WHERE T2.`tours` = (SELECT MAX(tours) FROM rankings)",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`first_name`, T1.`country_code` FROM players AS T1 JOIN rankings AS T2 ON T1.`player_id` = T2.`player_id` WHERE T2.`tours` = (SELECT MAX(tours) FROM rankings)",
        "repair_result": 0
    },
    {
        "idx": 460,
        "db_id": "wta_1",
        "question": "What is the first name and country code of the player with the most tours?",
        "evidence": "",
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "pred": "SELECT T1.`first_name`, T1.`country_code` FROM players AS T1 JOIN rankings AS T2 ON T1.`player_id` = T2.`player_id` WHERE T2.`tours` = (SELECT MAX(tours) FROM rankings)",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`first_name`, T1.`country_code` FROM players AS T1 JOIN rankings AS T2 ON T1.`player_id` = T2.`player_id` WHERE T2.`tours` = (SELECT MAX(tours) FROM rankings)",
        "repair_result": 0
    },
    {
        "idx": 461,
        "db_id": "wta_1",
        "question": "Find the year that has the most number of matches.",
        "evidence": "",
        "gold": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `year`, COUNT(*) AS num_matches FROM matches GROUP BY `year` ORDER BY num_matches DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `year`, COUNT(*) AS num_matches FROM matches GROUP BY `year` ORDER BY num_matches DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 462,
        "db_id": "wta_1",
        "question": "Which year had the most matches?",
        "evidence": "",
        "gold": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 463,
        "db_id": "wta_1",
        "question": "Find the name and rank points of the winner who won the most times.",
        "evidence": "",
        "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`winner_name`, T1.`winner_rank_points` FROM matches AS T1 JOIN ( SELECT winner_id, COUNT(*) AS total_wins FROM matches GROUP BY winner_id ORDER BY total_wins DESC LIMIT 1 ) AS T2 ON T1.winner_id = T2.winner_id",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`winner_name`, T1.`winner_rank_points` FROM matches AS T1 JOIN ( SELECT winner_id, COUNT(*) AS total_wins FROM matches GROUP BY winner_id ORDER BY total_wins DESC LIMIT 1 ) AS T2 ON T1.winner_id = T2.winner_id",
        "repair_result": 0
    },
    {
        "idx": 464,
        "db_id": "wta_1",
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "evidence": "",
        "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`first_name`, T1.`last_name`, T3.`ranking_points` FROM players AS T1 JOIN matches AS T2 ON T1.`player_id` = T2.`winner_id` JOIN rankings AS T3 ON T1.`player_id` = T3.`player_id` GROUP BY T1.`player_id` ORDER BY COUNT(T2.`winner_id`) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`first_name`, T1.`last_name`, T3.`ranking_points` FROM players AS T1 JOIN matches AS T2 ON T1.`player_id` = T2.`winner_id` JOIN rankings AS T3 ON T1.`player_id` = T3.`player_id` GROUP BY T1.`player_id` ORDER BY COUNT(T2.`winner_id`) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 465,
        "db_id": "wta_1",
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "evidence": "",
        "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "pred": "SELECT first_name, last_name FROM players WHERE player_id = ( SELECT winner_id FROM matches JOIN rankings ON matches.winner_id = rankings.player_id WHERE tours = 'Australian Open' ORDER BY ranking_points DESC LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT first_name, last_name FROM players WHERE player_id = ( SELECT winner_id FROM matches JOIN rankings ON matches.winner_id = rankings.player_id WHERE tours = 'Australian Open' ORDER BY ranking_points DESC LIMIT 1 )",
        "repair_result": 0
    },
    {
        "idx": 466,
        "db_id": "wta_1",
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "evidence": "",
        "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "pred": "SELECT first_name, last_name FROM players WHERE player_id = ( SELECT winner_id FROM matches WHERE draw_size = 128 ORDER BY ranking_points DESC LIMIT 1 )",
        "pred_result": "no such column: ranking_points",
        "repair_sql": "SELECT p.first_name, p.last_name FROM players p JOIN matches m ON m.winner_id = p.player_id JOIN rankings r ON r.player_id = p.player_id WHERE m.draw_size = 128 ORDER BY r.ranking_points DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 467,
        "db_id": "wta_1",
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "evidence": "",
        "gold": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "pred": "SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
        "pred_result": 0,
        "repair_sql": "SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
        "repair_result": 0
    },
    {
        "idx": 468,
        "db_id": "wta_1",
        "question": "What are the names of the winner and loser who played in the longest match?",
        "evidence": "",
        "gold": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "pred": "SELECT DISTINCT P1.first_name || ' ' || P1.last_name AS winner_name, P2.first_name || ' ' || P2.last_name AS loser_name FROM matches AS M JOIN players AS P1 ON M.winner_id = P1.player_id JOIN players AS P2 ON M.loser_id = P2.player_id WHERE M.minutes = (SELECT MAX(minutes) FROM matches)",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT P1.first_name || ' ' || P1.last_name AS winner_name, P2.first_name || ' ' || P2.last_name AS loser_name FROM matches AS M JOIN players AS P1 ON M.winner_id = P1.player_id JOIN players AS P2 ON M.loser_id = P2.player_id WHERE M.minutes = (SELECT MAX(minutes) FROM matches)",
        "repair_result": 1
    },
    {
        "idx": 469,
        "db_id": "wta_1",
        "question": "Find the average ranking for each player and their first name.",
        "evidence": "",
        "gold": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "pred": "SELECT P.`first_name`, AVG(R.`ranking`) AS avg_ranking FROM players AS P JOIN rankings AS R ON P.`player_id` = R.`player_id` GROUP BY P.`player_id`",
        "pred_result": 0,
        "repair_sql": "SELECT P.`first_name`, AVG(R.`ranking`) AS avg_ranking FROM players AS P JOIN rankings AS R ON P.`player_id` = R.`player_id` GROUP BY P.`player_id`",
        "repair_result": 0
    },
    {
        "idx": 470,
        "db_id": "wta_1",
        "question": "What are the first names of all players, and their average rankings?",
        "evidence": "",
        "gold": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "pred": "SELECT first_name, AVG(ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id",
        "pred_result": 0,
        "repair_sql": "SELECT first_name, AVG(ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id",
        "repair_result": 0
    },
    {
        "idx": 471,
        "db_id": "wta_1",
        "question": "Find the total ranking points for each player and their first name.",
        "evidence": "",
        "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "pred": "SELECT P.`first_name`, SUM(R.`ranking_points`) AS total_ranking_points FROM players AS P JOIN rankings AS R ON P.`player_id` = R.`player_id` GROUP BY P.`player_id`",
        "pred_result": 0,
        "repair_sql": "SELECT P.`first_name`, SUM(R.`ranking_points`) AS total_ranking_points FROM players AS P JOIN rankings AS R ON P.`player_id` = R.`player_id` GROUP BY P.`player_id`",
        "repair_result": 0
    },
    {
        "idx": 472,
        "db_id": "wta_1",
        "question": "What are the first names of all players, and their total ranking points?",
        "evidence": "",
        "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "pred": "SELECT `first_name`, SUM(`ranking_points`) AS total_ranking_points FROM players JOIN rankings ON players.`player_id` = rankings.`player_id` GROUP BY players.`player_id`",
        "pred_result": 0,
        "repair_sql": "SELECT `first_name`, SUM(`ranking_points`) AS total_ranking_points FROM players JOIN rankings ON players.`player_id` = rankings.`player_id` GROUP BY players.`player_id`",
        "repair_result": 0
    },
    {
        "idx": 473,
        "db_id": "wta_1",
        "question": "find the number of players for each country.",
        "evidence": "",
        "gold": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "pred": "SELECT `country_code`, COUNT(*) FROM players GROUP BY `country_code`",
        "pred_result": 0,
        "repair_sql": "SELECT `country_code`, COUNT(*) FROM players GROUP BY `country_code`",
        "repair_result": 0
    },
    {
        "idx": 474,
        "db_id": "wta_1",
        "question": "How many players are from each country?",
        "evidence": "",
        "gold": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "pred": "SELECT `country_code`, COUNT(*) FROM players GROUP BY `country_code`",
        "pred_result": 0,
        "repair_sql": "SELECT `country_code`, COUNT(*) FROM players GROUP BY `country_code`",
        "repair_result": 0
    },
    {
        "idx": 475,
        "db_id": "wta_1",
        "question": "find the code of the country where has the greatest number of players.",
        "evidence": "",
        "gold": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `country_code`, COUNT(*) AS player_count FROM players GROUP BY `country_code` ORDER BY player_count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `country_code`, COUNT(*) AS player_count FROM players GROUP BY `country_code` ORDER BY player_count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 476,
        "db_id": "wta_1",
        "question": "What is the code of the country with the most players?",
        "evidence": "",
        "gold": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `country_code`, COUNT(*) AS player_count FROM players GROUP BY `country_code` ORDER BY player_count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `country_code`, COUNT(*) AS player_count FROM players GROUP BY `country_code` ORDER BY player_count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 477,
        "db_id": "wta_1",
        "question": "Find the codes of countries that have more than 50 players.",
        "evidence": "",
        "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "pred": "SELECT DISTINCT `country_code` FROM players GROUP BY `country_code` HAVING COUNT(*) > 50",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `country_code` FROM players GROUP BY `country_code` HAVING COUNT(*) > 50",
        "repair_result": 1
    },
    {
        "idx": 478,
        "db_id": "wta_1",
        "question": "What are the codes of countries with more than 50 players?",
        "evidence": "",
        "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "pred": "SELECT DISTINCT `country_code` FROM players GROUP BY `country_code` HAVING COUNT(*) > 50",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `country_code` FROM players GROUP BY `country_code` HAVING COUNT(*) > 50",
        "repair_result": 1
    },
    {
        "idx": 479,
        "db_id": "wta_1",
        "question": "Find the total number of tours for each ranking date.",
        "evidence": "",
        "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "pred": "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
        "pred_result": 0,
        "repair_sql": "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
        "repair_result": 0
    },
    {
        "idx": 480,
        "db_id": "wta_1",
        "question": "How many total tours were there for each ranking date?",
        "evidence": "",
        "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "pred": "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
        "pred_result": 0,
        "repair_sql": "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
        "repair_result": 0
    },
    {
        "idx": 481,
        "db_id": "wta_1",
        "question": "Find the number of matches happened in each year.",
        "evidence": "",
        "gold": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "pred": "SELECT year, COUNT(*) FROM matches GROUP BY year",
        "pred_result": 0,
        "repair_sql": "SELECT year, COUNT(*) FROM matches GROUP BY year",
        "repair_result": 0
    },
    {
        "idx": 482,
        "db_id": "wta_1",
        "question": "How many matches were played in each year?",
        "evidence": "",
        "gold": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "pred": "SELECT year, COUNT(*) FROM matches GROUP BY year",
        "pred_result": 0,
        "repair_sql": "SELECT year, COUNT(*) FROM matches GROUP BY year",
        "repair_result": 0
    },
    {
        "idx": 483,
        "db_id": "wta_1",
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "evidence": "",
        "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "pred": "SELECT P.`first_name`, P.`last_name`, R.`ranking` FROM players AS P JOIN rankings AS R ON P.`player_id` = R.`player_id` WHERE P.`player_id` IN ( SELECT `winner_id` FROM matches ORDER BY loser_age ASC LIMIT 3 )",
        "pred_result": 0,
        "repair_sql": "SELECT P.`first_name`, P.`last_name`, R.`ranking` FROM players AS P JOIN rankings AS R ON P.`player_id` = R.`player_id` WHERE P.`player_id` IN ( SELECT `winner_id` FROM matches ORDER BY loser_age ASC LIMIT 3 )",
        "repair_result": 0
    },
    {
        "idx": 484,
        "db_id": "wta_1",
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "evidence": "",
        "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "pred": "SELECT P.`first_name`, P.`last_name`, R.`ranking` FROM players AS P JOIN matches AS M ON M.`winner_id` = P.`player_id` JOIN rankings AS R ON R.`player_id` = P.`player_id` ORDER BY P.`birth_date` DESC LIMIT 3",
        "pred_result": 0,
        "repair_sql": "SELECT P.`first_name`, P.`last_name`, R.`ranking` FROM players AS P JOIN matches AS M ON M.`winner_id` = P.`player_id` JOIN rankings AS R ON R.`player_id` = P.`player_id` ORDER BY P.`birth_date` DESC LIMIT 3",
        "repair_result": 0
    },
    {
        "idx": 485,
        "db_id": "wta_1",
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "pred": "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_id IN (SELECT player_id FROM players WHERE hand = 'L') AND draw_size = 8",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_id IN (SELECT player_id FROM players WHERE hand = 'L') AND draw_size = 8",
        "repair_result": 0
    },
    {
        "idx": 486,
        "db_id": "wta_1",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "pred": "SELECT COUNT(*) FROM players AS p JOIN matches AS m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tournament = 'WTA Championships'",
        "pred_result": "no such column: m.tournament",
        "repair_sql": "SELECT COUNT(*) FROM players AS p JOIN matches AS m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tournament = 'WTA Championships'",
        "repair_result": "no such column: m.tournament"
    },
    {
        "idx": 487,
        "db_id": "wta_1",
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "pred": "SELECT P.`first_name`, P.`country_code`, P.`birth_date` FROM players AS P JOIN matches AS M ON M.`winner_id` = P.`player_id` JOIN rankings AS R ON R.`player_id` = P.`player_id` WHERE R.`ranking_points` = (SELECT MAX(`ranking_points`) FROM rankings)",
        "pred_result": 1,
        "repair_sql": "SELECT P.`first_name`, P.`country_code`, P.`birth_date` FROM players AS P JOIN matches AS M ON M.`winner_id` = P.`player_id` JOIN rankings AS R ON R.`player_id` = P.`player_id` WHERE R.`ranking_points` = (SELECT MAX(`ranking_points`) FROM rankings)",
        "repair_result": 1
    },
    {
        "idx": 488,
        "db_id": "wta_1",
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "pred": "SELECT P.`first_name`, P.`country_code`, P.`birth_date` FROM players AS P JOIN rankings AS R ON P.`player_id` = R.`player_id` WHERE R.`ranking_points` = (SELECT MAX(`ranking_points`) FROM rankings)",
        "pred_result": 1,
        "repair_sql": "SELECT P.`first_name`, P.`country_code`, P.`birth_date` FROM players AS P JOIN rankings AS R ON P.`player_id` = R.`player_id` WHERE R.`ranking_points` = (SELECT MAX(`ranking_points`) FROM rankings)",
        "repair_result": 1
    },
    {
        "idx": 489,
        "db_id": "wta_1",
        "question": "Find the number of players for each hand type.",
        "evidence": "",
        "gold": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "pred": "SELECT `hand`, COUNT(*) FROM players GROUP BY `hand`",
        "pred_result": 0,
        "repair_sql": "SELECT `hand`, COUNT(*) FROM players GROUP BY `hand`",
        "repair_result": 0
    },
    {
        "idx": 490,
        "db_id": "wta_1",
        "question": "How many players are there for each hand type?",
        "evidence": "",
        "gold": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "pred": "SELECT hand, COUNT(*) FROM players GROUP BY hand",
        "pred_result": 0,
        "repair_sql": "SELECT hand, COUNT(*) FROM players GROUP BY hand",
        "repair_result": 0
    },
    {
        "idx": 491,
        "db_id": "battle_death",
        "question": "How many ships ended up being 'Captured'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "pred": "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'",
        "repair_result": 1
    },
    {
        "idx": 492,
        "db_id": "battle_death",
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "evidence": "",
        "gold": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
        "pred": "SELECT `name`, `tonnage` FROM ship ORDER BY `name` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `name`, `tonnage` FROM ship ORDER BY `name` DESC",
        "repair_result": 1
    },
    {
        "idx": 493,
        "db_id": "battle_death",
        "question": "List the name, date and result of each battle.",
        "evidence": "",
        "gold": "SELECT name ,  date FROM battle",
        "pred": "SELECT `name`, `date`, `result` FROM battle",
        "pred_result": 0,
        "repair_sql": "SELECT `name`, `date`, `result` FROM battle",
        "repair_result": 0
    },
    {
        "idx": 494,
        "db_id": "battle_death",
        "question": "What is maximum and minimum death toll caused each time?",
        "evidence": "",
        "gold": "SELECT max(killed) ,  min(killed) FROM death",
        "pred": "SELECT b.name, MAX(d.killed) AS max_death_toll, MIN(d.killed) AS min_death_toll FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.name",
        "pred_result": 0,
        "repair_sql": "SELECT b.name, MAX(d.killed) AS max_death_toll, MIN(d.killed) AS min_death_toll FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.name",
        "repair_result": 0
    },
    {
        "idx": 495,
        "db_id": "battle_death",
        "question": "What is the average number of injuries caused each time?",
        "evidence": "",
        "gold": "SELECT avg(injured) FROM death",
        "pred": "SELECT AVG(injured) FROM death",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(injured) FROM death",
        "repair_result": 1
    },
    {
        "idx": 496,
        "db_id": "battle_death",
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "evidence": "",
        "gold": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "pred": "SELECT `killed`, `injured` FROM death WHERE `caused_by_ship_id` IN (SELECT `id` FROM ship WHERE `tonnage` = 't')",
        "pred_result": 1,
        "repair_sql": "SELECT `killed`, `injured` FROM death WHERE `caused_by_ship_id` IN (SELECT `id` FROM ship WHERE `tonnage` = 't')",
        "repair_result": 1
    },
    {
        "idx": 497,
        "db_id": "battle_death",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "evidence": "",
        "gold": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "pred": "SELECT `name`, `result` FROM battle WHERE bulgarian_commander != 'Boril'",
        "pred_result": 1,
        "repair_sql": "SELECT `name`, `result` FROM battle WHERE bulgarian_commander != 'Boril'",
        "repair_result": 1
    },
    {
        "idx": 498,
        "db_id": "battle_death",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "pred": "SELECT DISTINCT T1.`id`, T1.`name` FROM battle AS T1 JOIN ship AS T2 ON T1.`id` = T2.`lost_in_battle` WHERE T2.`ship_type` = 'Brig'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`id`, T1.`name` FROM battle AS T1 JOIN ship AS T2 ON T1.`id` = T2.`lost_in_battle` WHERE T2.`ship_type` = 'Brig'",
        "repair_result": 1
    },
    {
        "idx": 499,
        "db_id": "battle_death",
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "evidence": "",
        "gold": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "pred": "SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10",
        "pred_result": 1,
        "repair_sql": "SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10",
        "repair_result": 1
    },
    {
        "idx": 500,
        "db_id": "battle_death",
        "question": "What is the ship id and name that caused most total injuries?",
        "evidence": "",
        "gold": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`id`, T1.`name` FROM ship AS T1 JOIN death AS T2 ON T1.`id` = T2.`caused_by_ship_id` GROUP BY T1.`id`, T1.`name` ORDER BY SUM(T2.`injured`) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`id`, T1.`name` FROM ship AS T1 JOIN death AS T2 ON T1.`id` = T2.`caused_by_ship_id` GROUP BY T1.`id`, T1.`name` ORDER BY SUM(T2.`injured`) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 501,
        "db_id": "battle_death",
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "evidence": "",
        "gold": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "pred": "SELECT DISTINCT `name` FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `name` FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
        "repair_result": 1
    },
    {
        "idx": 502,
        "db_id": "battle_death",
        "question": "How many different results are there for the battles?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT RESULT) FROM battle",
        "pred": "SELECT COUNT(DISTINCT result) FROM battle",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT result) FROM battle",
        "repair_result": 1
    },
    {
        "idx": 503,
        "db_id": "battle_death",
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "pred": "SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')",
        "repair_result": 1
    },
    {
        "idx": 504,
        "db_id": "battle_death",
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "evidence": "",
        "gold": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
        "pred": "SELECT T1.`name`, T1.`date` FROM battle AS T1 JOIN ship AS T2 ON T1.`id` = T2.`lost_in_battle` WHERE T2.`name` IN ('Lettice', 'HMS Atalanta')",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`name`, T1.`date` FROM battle AS T1 JOIN ship AS T2 ON T1.`id` = T2.`lost_in_battle` WHERE T2.`name` IN ('Lettice', 'HMS Atalanta')",
        "repair_result": 1
    },
    {
        "idx": 505,
        "db_id": "battle_death",
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "evidence": "",
        "gold": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "pred": "SELECT b.`name`, b.`result`, b.`bulgarian_commander` FROM battle AS b LEFT JOIN ship AS s ON b.`id` = s.`lost_in_battle` WHERE s.`location` IS NULL OR s.`location` <> 'English Channel'",
        "pred_result": 0,
        "repair_sql": "SELECT b.`name`, b.`result`, b.`bulgarian_commander` FROM battle AS b LEFT JOIN ship AS s ON b.`id` = s.`lost_in_battle` WHERE s.`location` IS NULL OR s.`location` <> 'English Channel'",
        "repair_result": 0
    },
    {
        "idx": 506,
        "db_id": "battle_death",
        "question": "What are the notes of the death events which has substring 'East'?",
        "evidence": "",
        "gold": "SELECT note FROM death WHERE note LIKE '%East%'",
        "pred": "SELECT `note` FROM death WHERE `note` LIKE '%East%'",
        "pred_result": 1,
        "repair_sql": "SELECT `note` FROM death WHERE `note` LIKE '%East%'",
        "repair_result": 1
    },
    {
        "idx": 507,
        "db_id": "student_transcripts_tracking",
        "question": "what are all the addresses including line 1 and line 2?",
        "evidence": "",
        "gold": "SELECT line_1 ,  line_2 FROM addresses",
        "pred": "SELECT `line_1`, `line_2` FROM Addresses",
        "pred_result": 1,
        "repair_sql": "SELECT `line_1`, `line_2` FROM Addresses",
        "repair_result": 1
    },
    {
        "idx": 508,
        "db_id": "student_transcripts_tracking",
        "question": "What is the first and second line for all addresses?",
        "evidence": "",
        "gold": "SELECT line_1 ,  line_2 FROM addresses",
        "pred": "SELECT line_1, line_2 FROM Addresses",
        "pred_result": 1,
        "repair_sql": "SELECT line_1, line_2 FROM Addresses",
        "repair_result": 1
    },
    {
        "idx": 509,
        "db_id": "student_transcripts_tracking",
        "question": "How many courses in total are listed?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Courses",
        "pred": "SELECT COUNT(*) FROM Courses",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Courses",
        "repair_result": 1
    },
    {
        "idx": 510,
        "db_id": "student_transcripts_tracking",
        "question": "How many courses are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Courses",
        "pred": "SELECT COUNT(*) FROM Courses",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Courses",
        "repair_result": 1
    },
    {
        "idx": 511,
        "db_id": "student_transcripts_tracking",
        "question": "How is the math course described?",
        "evidence": "",
        "gold": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "pred": "SELECT course_description FROM Courses WHERE course_name = 'math'",
        "pred_result": 1,
        "repair_sql": "SELECT course_description FROM Courses WHERE course_name = 'math'",
        "repair_result": 1
    },
    {
        "idx": 512,
        "db_id": "student_transcripts_tracking",
        "question": "What are the descriptions for all the math courses?",
        "evidence": "",
        "gold": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "pred": "SELECT course_description FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id JOIN Degree_Programs ON Sections.course_id = Degree_Programs.department_id JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE department_name = 'math'",
        "pred_result": 0,
        "repair_sql": "SELECT course_description FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id JOIN Degree_Programs ON Sections.course_id = Degree_Programs.department_id JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE department_name = 'math'",
        "repair_result": 0
    },
    {
        "idx": 513,
        "db_id": "student_transcripts_tracking",
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "evidence": "",
        "gold": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "pred": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
        "pred_result": 1,
        "repair_sql": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
        "repair_result": 1
    },
    {
        "idx": 514,
        "db_id": "student_transcripts_tracking",
        "question": "What is the zip code for Port Chelsea?",
        "evidence": "",
        "gold": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "pred": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
        "pred_result": 1,
        "repair_sql": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
        "repair_result": 1
    },
    {
        "idx": 515,
        "db_id": "student_transcripts_tracking",
        "question": "Which department offers the most number of degrees? List department name and id.",
        "evidence": "",
        "gold": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT department_name, department_id FROM Departments WHERE department_id = ( SELECT department_id FROM Degree_Programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT department_name, department_id FROM Departments WHERE department_id = ( SELECT department_id FROM Degree_Programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 516,
        "db_id": "student_transcripts_tracking",
        "question": "What is the name and id of the department with the most number of degrees ?",
        "evidence": "",
        "gold": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "pred": "SELECT T1.`department_name`, COUNT(*) AS degree_count FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.`department_id` = T2.`department_id` GROUP BY T1.`department_id` ORDER BY degree_count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`department_name`, COUNT(*) AS degree_count FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.`department_id` = T2.`department_id` GROUP BY T1.`department_id` ORDER BY degree_count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 517,
        "db_id": "student_transcripts_tracking",
        "question": "How many departments offer any degree?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "pred": "SELECT COUNT(*) FROM Departments",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Departments",
        "repair_result": 0
    },
    {
        "idx": 518,
        "db_id": "student_transcripts_tracking",
        "question": "How many different departments offer degrees?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "pred": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs",
        "repair_result": 1
    },
    {
        "idx": 519,
        "db_id": "student_transcripts_tracking",
        "question": "How many different degree names are offered?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "pred": "SELECT COUNT(DISTINCT `degree_summary_name`) FROM Degree_Programs",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT `degree_summary_name`) FROM Degree_Programs",
        "repair_result": 1
    },
    {
        "idx": 520,
        "db_id": "student_transcripts_tracking",
        "question": "How many different degrees are offered?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "pred": "SELECT COUNT(DISTINCT `degree_summary_name`) FROM Degree_Programs",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT `degree_summary_name`) FROM Degree_Programs",
        "repair_result": 1
    },
    {
        "idx": 521,
        "db_id": "student_transcripts_tracking",
        "question": "How many degrees does the engineering department offer?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "pred": "SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')",
        "repair_result": 1
    },
    {
        "idx": 522,
        "db_id": "student_transcripts_tracking",
        "question": "How many degrees does the engineering department have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "pred": "SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')",
        "repair_result": 1
    },
    {
        "idx": 523,
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and descriptions of all the sections?",
        "evidence": "",
        "gold": "SELECT section_name ,  section_description FROM Sections",
        "pred": "SELECT `section_name`, `section_description` FROM Sections",
        "pred_result": 1,
        "repair_sql": "SELECT `section_name`, `section_description` FROM Sections",
        "repair_result": 1
    },
    {
        "idx": 524,
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and descriptions for all the sections?",
        "evidence": "",
        "gold": "SELECT section_name ,  section_description FROM Sections",
        "pred": "SELECT `section_name`, `section_description` FROM Sections",
        "pred_result": 1,
        "repair_sql": "SELECT `section_name`, `section_description` FROM Sections",
        "repair_result": 1
    },
    {
        "idx": 525,
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and id of courses having at most 2 sections?",
        "evidence": "",
        "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "pred": "SELECT `course_id`, `course_name` FROM Courses WHERE `course_id` IN (SELECT `course_id` FROM Sections GROUP BY `course_id` HAVING COUNT(`section_id`) <= 2)",
        "pred_result": 0,
        "repair_sql": "SELECT `course_id`, `course_name` FROM Courses WHERE `course_id` IN (SELECT `course_id` FROM Sections GROUP BY `course_id` HAVING COUNT(`section_id`) <= 2)",
        "repair_result": 0
    },
    {
        "idx": 526,
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and ids of every course with less than 2 sections?",
        "evidence": "",
        "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "pred": "SELECT `course_id`, `course_name` FROM Courses WHERE `course_id` NOT IN (SELECT `course_id` FROM Sections GROUP BY `course_id` HAVING COUNT(*) >= 2)",
        "pred_result": 0,
        "repair_sql": "SELECT `course_id`, `course_name` FROM Courses WHERE `course_id` NOT IN (SELECT `course_id` FROM Sections GROUP BY `course_id` HAVING COUNT(*) >= 2)",
        "repair_result": 0
    },
    {
        "idx": 527,
        "db_id": "student_transcripts_tracking",
        "question": "List the section_name in reversed lexicographical order.",
        "evidence": "",
        "gold": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "pred": "SELECT `section_name` FROM Sections ORDER BY `section_name` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `section_name` FROM Sections ORDER BY `section_name` DESC",
        "repair_result": 1
    },
    {
        "idx": 528,
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of the sections in reverse alphabetical order?",
        "evidence": "",
        "gold": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "pred": "SELECT `section_name` FROM Sections ORDER BY `section_name` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `section_name` FROM Sections ORDER BY `section_name` DESC",
        "repair_result": 1
    },
    {
        "idx": 529,
        "db_id": "student_transcripts_tracking",
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "evidence": "",
        "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`semester_name`, T1.`semester_id` FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.`semester_id` = T2.`semester_id` GROUP BY T1.`semester_id` ORDER BY COUNT(T2.`student_id`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`semester_name`, T1.`semester_id` FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.`semester_id` = T2.`semester_id` GROUP BY T1.`semester_id` ORDER BY COUNT(T2.`student_id`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 530,
        "db_id": "student_transcripts_tracking",
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "evidence": "",
        "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`semester_name`, T1.`semester_id`, COUNT(*) AS total_students FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.`semester_id` = T2.`semester_id` GROUP BY T1.`semester_id` ORDER BY total_students DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`semester_name`, T1.`semester_id`, COUNT(*) AS total_students FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.`semester_id` = T2.`semester_id` GROUP BY T1.`semester_id` ORDER BY total_students DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 531,
        "db_id": "student_transcripts_tracking",
        "question": "What is the description of the department whose name has the substring the computer?",
        "evidence": "",
        "gold": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "pred": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "pred_result": 1,
        "repair_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "repair_result": 1
    },
    {
        "idx": 532,
        "db_id": "student_transcripts_tracking",
        "question": "What is the department description for the one whose name has the word computer?",
        "evidence": "",
        "gold": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "pred": "SELECT D.`department_description` FROM Departments AS D WHERE D.`department_name` LIKE '%computer%'",
        "pred_result": 1,
        "repair_sql": "SELECT D.`department_description` FROM Departments AS D WHERE D.`department_name` LIKE '%computer%'",
        "repair_result": 1
    },
    {
        "idx": 533,
        "db_id": "student_transcripts_tracking",
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "pred": "SELECT S.first_name, S.middle_name, S.last_name, S.student_id FROM Students AS S JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id GROUP BY S.student_id HAVING COUNT(DISTINCT SE.degree_program_id) = 2",
        "pred_result": 0,
        "repair_sql": "SELECT S.first_name, S.middle_name, S.last_name, S.student_id FROM Students AS S JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id GROUP BY S.student_id HAVING COUNT(DISTINCT SE.degree_program_id) = 2",
        "repair_result": 0
    },
    {
        "idx": 534,
        "db_id": "student_transcripts_tracking",
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "pred": "SELECT S.`student_id`, S.`first_name`, S.`middle_name`, S.`last_name` FROM Students AS S JOIN Student_Enrolment AS SE ON S.`student_id` = SE.`student_id` GROUP BY S.`student_id` HAVING COUNT(DISTINCT SE.`degree_program_id`) = 2",
        "pred_result": 0,
        "repair_sql": "SELECT S.`student_id`, S.`first_name`, S.`middle_name`, S.`last_name` FROM Students AS S JOIN Student_Enrolment AS SE ON S.`student_id` = SE.`student_id` GROUP BY S.`student_id` HAVING COUNT(DISTINCT SE.`degree_program_id`) = 2",
        "repair_result": 0
    },
    {
        "idx": 535,
        "db_id": "student_transcripts_tracking",
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "pred": "SELECT S.first_name, S.middle_name, S.last_name FROM Students AS S JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id JOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelor'",
        "pred_result": 1,
        "repair_sql": "SELECT S.first_name, S.middle_name, S.last_name FROM Students AS S JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id JOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelor'",
        "repair_result": 1
    },
    {
        "idx": 536,
        "db_id": "student_transcripts_tracking",
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "pred": "SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN ( SELECT student_id FROM Student_Enrolment WHERE degree_program_id = ( SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor' ) )",
        "pred_result": 0,
        "repair_sql": "SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN ( SELECT student_id FROM Student_Enrolment WHERE degree_program_id = ( SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor' ) )",
        "repair_result": 0
    },
    {
        "idx": 537,
        "db_id": "student_transcripts_tracking",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "evidence": "",
        "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`degree_summary_name`, COUNT(*) AS num_students FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.`degree_program_id` = T2.`degree_program_id` GROUP BY T1.`degree_summary_name` ORDER BY num_students DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`degree_summary_name`, COUNT(*) AS num_students FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.`degree_program_id` = T2.`degree_program_id` GROUP BY T1.`degree_summary_name` ORDER BY num_students DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 538,
        "db_id": "student_transcripts_tracking",
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "evidence": "",
        "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`degree_summary_name`, COUNT(*) AS num_students FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.`degree_program_id` = T2.`degree_program_id` GROUP BY T1.`degree_summary_name` ORDER BY num_students DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`degree_summary_name`, COUNT(*) AS num_students FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.`degree_program_id` = T2.`degree_program_id` GROUP BY T1.`degree_summary_name` ORDER BY num_students DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 539,
        "db_id": "student_transcripts_tracking",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "evidence": "",
        "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`degree_program_id`, T1.`degree_summary_name` FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.`degree_program_id` = T2.`degree_program_id` GROUP BY T1.`degree_program_id` ORDER BY COUNT(T2.`student_id`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`degree_program_id`, T1.`degree_summary_name` FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.`degree_program_id` = T2.`degree_program_id` GROUP BY T1.`degree_program_id` ORDER BY COUNT(T2.`student_id`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 540,
        "db_id": "student_transcripts_tracking",
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "evidence": "",
        "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`degree_program_id`, T1.`degree_summary_name` FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.`degree_program_id` = T2.`degree_program_id` GROUP BY T1.`degree_program_id` ORDER BY COUNT(T2.`student_id`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`degree_program_id`, T1.`degree_summary_name` FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.`degree_program_id` = T2.`degree_program_id` GROUP BY T1.`degree_program_id` ORDER BY COUNT(T2.`student_id`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 541,
        "db_id": "student_transcripts_tracking",
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "evidence": "",
        "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`student_id`, T1.`first_name`, T1.`middle_name`, T1.`last_name`, COUNT(*) AS num_of_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.`student_id` = T2.`student_id` GROUP BY T1.`student_id`, T1.`first_name`, T1.`middle_name`, T1.`last_name` ORDER BY num_of_enrollments DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`student_id`, T1.`first_name`, T1.`middle_name`, T1.`last_name`, COUNT(*) AS num_of_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.`student_id` = T2.`student_id` GROUP BY T1.`student_id`, T1.`first_name`, T1.`middle_name`, T1.`last_name` ORDER BY num_of_enrollments DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 542,
        "db_id": "student_transcripts_tracking",
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "evidence": "",
        "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT S.`student_id`, S.`first_name`, S.`middle_name`, S.`last_name`, COUNT(SE.`student_enrolment_id`) AS num_enrollments FROM Students AS S JOIN Student_Enrolment AS SE ON S.`student_id` = SE.`student_id` GROUP BY S.`student_id` ORDER BY num_enrollments DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT S.`student_id`, S.`first_name`, S.`middle_name`, S.`last_name`, COUNT(SE.`student_enrolment_id`) AS num_enrollments FROM Students AS S JOIN Student_Enrolment AS SE ON S.`student_id` = SE.`student_id` GROUP BY S.`student_id` ORDER BY num_enrollments DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 543,
        "db_id": "student_transcripts_tracking",
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "evidence": "",
        "gold": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "pred": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_Enrolment)",
        "pred_result": 1,
        "repair_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_Enrolment)",
        "repair_result": 1
    },
    {
        "idx": 544,
        "db_id": "student_transcripts_tracking",
        "question": "What is the name of the semester with no students enrolled?",
        "evidence": "",
        "gold": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "pred": "SELECT `semester_name` FROM Semesters WHERE `semester_id` NOT IN (SELECT `semester_id` FROM Student_Enrolment)",
        "pred_result": 1,
        "repair_sql": "SELECT `semester_name` FROM Semesters WHERE `semester_id` NOT IN (SELECT `semester_id` FROM Student_Enrolment)",
        "repair_result": 1
    },
    {
        "idx": 545,
        "db_id": "student_transcripts_tracking",
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "pred": "SELECT DISTINCT C.`course_name` FROM Courses AS C JOIN Student_Enrolment_Courses AS SEC ON C.`course_id` = SEC.`course_id`",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT C.`course_name` FROM Courses AS C JOIN Student_Enrolment_Courses AS SEC ON C.`course_id` = SEC.`course_id`",
        "repair_result": 1
    },
    {
        "idx": 546,
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of all courses that have some students enrolled?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "pred": "SELECT DISTINCT C.`course_name` FROM Courses AS C JOIN Student_Enrolment_Courses AS SEC ON C.`course_id` = SEC.`course_id`",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT C.`course_name` FROM Courses AS C JOIN Student_Enrolment_Courses AS SEC ON C.`course_id` = SEC.`course_id`",
        "repair_result": 1
    },
    {
        "idx": 547,
        "db_id": "student_transcripts_tracking",
        "question": "What's the name of the course with most number of enrollments?",
        "evidence": "",
        "gold": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT C.course_name, COUNT(*) AS enrollments FROM Courses C JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id GROUP BY C.course_name ORDER BY enrollments DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT C.course_name, COUNT(*) AS enrollments FROM Courses C JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id GROUP BY C.course_name ORDER BY enrollments DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 548,
        "db_id": "student_transcripts_tracking",
        "question": "What is the name of the course with the most students enrolled?",
        "evidence": "",
        "gold": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT C.course_name, COUNT(*) AS total_students FROM Courses AS C JOIN Student_Enrolment_Courses AS SEC ON C.course_id = SEC.course_id GROUP BY C.course_name ORDER BY total_students DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT C.course_name, COUNT(*) AS total_students FROM Courses AS C JOIN Student_Enrolment_Courses AS SEC ON C.course_id = SEC.course_id GROUP BY C.course_name ORDER BY total_students DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 549,
        "db_id": "student_transcripts_tracking",
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "evidence": "",
        "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "pred": "SELECT DISTINCT S.last_name FROM Students AS S JOIN Addresses AS A ON S.current_address_id = A.address_id LEFT JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id WHERE A.city = 'Rutherfordtown' AND SE.student_id IS NULL",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT S.last_name FROM Students AS S JOIN Addresses AS A ON S.current_address_id = A.address_id LEFT JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id WHERE A.city = 'Rutherfordtown' AND SE.student_id IS NULL",
        "repair_result": 0
    },
    {
        "idx": 550,
        "db_id": "student_transcripts_tracking",
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "evidence": "",
        "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "pred": "SELECT DISTINCT S.`last_name` FROM Students AS S JOIN Addresses AS A ON S.`current_address_id` = A.`address_id` LEFT JOIN Student_Enrolment AS SE ON S.`student_id` = SE.`student_id` WHERE A.`city` = 'North Carolina' AND SE.`student_id` IS NULL",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT S.`last_name` FROM Students AS S JOIN Addresses AS A ON S.`current_address_id` = A.`address_id` LEFT JOIN Student_Enrolment AS SE ON S.`student_id` = SE.`student_id` WHERE A.`city` = 'North Carolina' AND SE.`student_id` IS NULL",
        "repair_result": 0
    },
    {
        "idx": 551,
        "db_id": "student_transcripts_tracking",
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "evidence": "",
        "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "pred": "SELECT T1.`transcript_date`, T1.`transcript_id` FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.`transcript_id` = T2.`transcript_id` GROUP BY T2.`transcript_id` HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`transcript_date`, T1.`transcript_id` FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.`transcript_id` = T2.`transcript_id` GROUP BY T2.`transcript_id` HAVING COUNT(*) >= 2",
        "repair_result": 1
    },
    {
        "idx": 552,
        "db_id": "student_transcripts_tracking",
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "evidence": "",
        "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "pred": "SELECT T1.`transcript_date`, T1.`transcript_id` FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.`transcript_id` = T2.`transcript_id` GROUP BY T2.`transcript_id` HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`transcript_date`, T1.`transcript_id` FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.`transcript_id` = T2.`transcript_id` GROUP BY T2.`transcript_id` HAVING COUNT(*) >= 2",
        "repair_result": 1
    },
    {
        "idx": 553,
        "db_id": "student_transcripts_tracking",
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "evidence": "",
        "gold": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "pred": "SELECT `cell_mobile_number` FROM Students WHERE `first_name` = 'Timmothy' AND `last_name` = 'Ward'",
        "pred_result": 1,
        "repair_sql": "SELECT `cell_mobile_number` FROM Students WHERE `first_name` = 'Timmothy' AND `last_name` = 'Ward'",
        "repair_result": 1
    },
    {
        "idx": 554,
        "db_id": "student_transcripts_tracking",
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "evidence": "",
        "gold": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "pred": "SELECT `cell_mobile_number` FROM Students WHERE `first_name` = 'Timmothy' AND `last_name` = 'Ward'",
        "pred_result": 0,
        "repair_sql": "SELECT `cell_mobile_number` FROM Students WHERE `first_name` = 'Timmothy' AND `last_name` = 'Ward'",
        "repair_result": 0
    },
    {
        "idx": 555,
        "db_id": "student_transcripts_tracking",
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "evidence": "",
        "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "pred": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 556,
        "db_id": "student_transcripts_tracking",
        "question": "What is the first, middle, and last name of the first student to register?",
        "evidence": "",
        "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "pred": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 557,
        "db_id": "student_transcripts_tracking",
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "evidence": "",
        "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "pred": "SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students)",
        "pred_result": 1,
        "repair_sql": "SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students)",
        "repair_result": 1
    },
    {
        "idx": 558,
        "db_id": "student_transcripts_tracking",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "evidence": "",
        "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "pred": "SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students)",
        "pred_result": 1,
        "repair_sql": "SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students)",
        "repair_result": 1
    },
    {
        "idx": 559,
        "db_id": "student_transcripts_tracking",
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "evidence": "",
        "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "pred": "SELECT `first_name` FROM Students WHERE `current_address_id` <> `permanent_address_id`",
        "pred_result": 1,
        "repair_sql": "SELECT `first_name` FROM Students WHERE `current_address_id` <> `permanent_address_id`",
        "repair_result": 1
    },
    {
        "idx": 560,
        "db_id": "student_transcripts_tracking",
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "evidence": "",
        "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "pred": "SELECT `first_name` FROM Students WHERE `current_address_id` <> `permanent_address_id`",
        "pred_result": 1,
        "repair_sql": "SELECT `first_name` FROM Students WHERE `current_address_id` <> `permanent_address_id`",
        "repair_result": 1
    },
    {
        "idx": 561,
        "db_id": "student_transcripts_tracking",
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "evidence": "",
        "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`address_id`, T1.`line_1`, T1.`line_2`, T1.`city`, T1.`zip_postcode`, T1.`state_province_county`, T1.`country` FROM Addresses AS T1 JOIN Students AS T2 ON T1.`address_id` = T2.`current_address_id` GROUP BY T1.`address_id` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`address_id`, T1.`line_1`, T1.`line_2`, T1.`city`, T1.`zip_postcode`, T1.`state_province_county`, T1.`country` FROM Addresses AS T1 JOIN Students AS T2 ON T1.`address_id` = T2.`current_address_id` GROUP BY T1.`address_id` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 562,
        "db_id": "student_transcripts_tracking",
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "evidence": "",
        "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`address_id`, T1.`line_1`, T1.`line_2` FROM Addresses AS T1 JOIN Students AS T2 ON T1.`address_id` = T2.`current_address_id` GROUP BY T1.`address_id` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`address_id`, T1.`line_1`, T1.`line_2` FROM Addresses AS T1 JOIN Students AS T2 ON T1.`address_id` = T2.`current_address_id` GROUP BY T1.`address_id` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 563,
        "db_id": "student_transcripts_tracking",
        "question": "On average, when were the transcripts printed?",
        "evidence": "",
        "gold": "SELECT avg(transcript_date) FROM Transcripts",
        "pred": "SELECT AVG(strftime('%s', transcript_date)) FROM Transcripts",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(strftime('%s', transcript_date)) FROM Transcripts",
        "repair_result": 0
    },
    {
        "idx": 564,
        "db_id": "student_transcripts_tracking",
        "question": "What is the average transcript date?",
        "evidence": "",
        "gold": "SELECT avg(transcript_date) FROM Transcripts",
        "pred": "SELECT AVG(strftime('%s', transcript_date)) FROM Transcripts",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(strftime('%s', transcript_date)) FROM Transcripts",
        "repair_result": 0
    },
    {
        "idx": 565,
        "db_id": "student_transcripts_tracking",
        "question": "When is the first transcript released? List the date and details.",
        "evidence": "",
        "gold": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "pred": "SELECT `transcript_date`, `other_details` FROM Transcripts ORDER BY `transcript_date` ASC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT `transcript_date`, `other_details` FROM Transcripts ORDER BY `transcript_date` ASC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 566,
        "db_id": "student_transcripts_tracking",
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "evidence": "",
        "gold": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "pred": "SELECT MIN(`transcript_date`), `other_details` FROM Transcripts",
        "pred_result": 1,
        "repair_sql": "SELECT MIN(`transcript_date`), `other_details` FROM Transcripts",
        "repair_result": 1
    },
    {
        "idx": 567,
        "db_id": "student_transcripts_tracking",
        "question": "How many transcripts are released?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Transcripts",
        "pred": "SELECT COUNT(*) FROM Transcripts",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Transcripts",
        "repair_result": 1
    },
    {
        "idx": 568,
        "db_id": "student_transcripts_tracking",
        "question": "How many transcripts are listed?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Transcripts",
        "pred": "SELECT COUNT(*) FROM Transcripts",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Transcripts",
        "repair_result": 1
    },
    {
        "idx": 569,
        "db_id": "student_transcripts_tracking",
        "question": "What is the last transcript release date?",
        "evidence": "",
        "gold": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "pred": "SELECT MAX(`transcript_date`) FROM Transcripts",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(`transcript_date`) FROM Transcripts",
        "repair_result": 1
    },
    {
        "idx": 570,
        "db_id": "student_transcripts_tracking",
        "question": "When was the last transcript released?",
        "evidence": "",
        "gold": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "pred": "SELECT MAX(`transcript_date`) FROM Transcripts",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(`transcript_date`) FROM Transcripts",
        "repair_result": 1
    },
    {
        "idx": 571,
        "db_id": "student_transcripts_tracking",
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "evidence": "",
        "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT COUNT(*) AS max_occurrences, student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY max_occurrences DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) AS max_occurrences, student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY max_occurrences DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 572,
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "evidence": "",
        "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT course_id, COUNT(course_id) AS course_count FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY course_count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT course_id, COUNT(course_id) AS course_count FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY course_count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 573,
        "db_id": "student_transcripts_tracking",
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "evidence": "",
        "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "pred": "SELECT T2.`transcript_date`, T1.`transcript_id` FROM Transcripts AS T1 JOIN ( SELECT `transcript_id`, COUNT(*) AS result_count FROM Transcript_Contents GROUP BY `transcript_id` ORDER BY result_count ASC LIMIT 1 ) AS T2 ON T1.`transcript_id` = T2.`transcript_id`",
        "pred_result": "no such column: T2.transcript_date",
        "repair_sql": "SELECT T1.`transcript_date`, T1.`transcript_id` FROM Transcripts AS T1 JOIN ( SELECT `transcript_id`, COUNT(*) AS result_count FROM Transcript_Contents GROUP BY `transcript_id` ORDER BY result_count ASC LIMIT 1 ) AS T2 ON T1.`transcript_id` = T2.`transcript_id`",
        "repair_result": 1
    },
    {
        "idx": 574,
        "db_id": "student_transcripts_tracking",
        "question": "What is the date and id of the transcript with the least number of results?",
        "evidence": "",
        "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "pred": "SELECT `transcript_date`, `transcript_id` FROM Transcripts WHERE `transcript_id` = (SELECT `transcript_id` FROM Transcript_Contents GROUP BY `transcript_id` ORDER BY COUNT(*) ASC LIMIT 1)",
        "pred_result": 1,
        "repair_sql": "SELECT `transcript_date`, `transcript_id` FROM Transcripts WHERE `transcript_id` = (SELECT `transcript_id` FROM Transcript_Contents GROUP BY `transcript_id` ORDER BY COUNT(*) ASC LIMIT 1)",
        "repair_result": 1
    },
    {
        "idx": 575,
        "db_id": "student_transcripts_tracking",
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "pred": "SELECT DISTINCT Semesters.`semester_name` FROM Semesters JOIN Student_Enrolment ON Semesters.`semester_id` = Student_Enrolment.`semester_id` JOIN Degree_Programs ON Student_Enrolment.`degree_program_id` = Degree_Programs.`degree_program_id` WHERE Degree_Programs.`degree_summary_name` IN ('Master', 'Bachelor') GROUP BY Semesters.`semester_name` HAVING COUNT(DISTINCT Degree_Programs.`degree_summary_name`) = 2",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT Semesters.`semester_name` FROM Semesters JOIN Student_Enrolment ON Semesters.`semester_id` = Student_Enrolment.`semester_id` JOIN Degree_Programs ON Student_Enrolment.`degree_program_id` = Degree_Programs.`degree_program_id` WHERE Degree_Programs.`degree_summary_name` IN ('Master', 'Bachelor') GROUP BY Semesters.`semester_name` HAVING COUNT(DISTINCT Degree_Programs.`degree_summary_name`) = 2",
        "repair_result": 0
    },
    {
        "idx": 576,
        "db_id": "student_transcripts_tracking",
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "pred": "SELECT se.`semester_id` FROM Student_Enrolment se JOIN Degree_Programs dp ON se.`degree_program_id` = dp.`degree_program_id` WHERE dp.`degree_summary_name` IN ('Master', 'Bachelor') GROUP BY se.`semester_id` HAVING COUNT(DISTINCT dp.`degree_summary_name`) = 2",
        "pred_result": 1,
        "repair_sql": "SELECT se.`semester_id` FROM Student_Enrolment se JOIN Degree_Programs dp ON se.`degree_program_id` = dp.`degree_program_id` WHERE dp.`degree_summary_name` IN ('Master', 'Bachelor') GROUP BY se.`semester_id` HAVING COUNT(DISTINCT dp.`degree_summary_name`) = 2",
        "repair_result": 1
    },
    {
        "idx": 577,
        "db_id": "student_transcripts_tracking",
        "question": "How many different addresses do the students currently live?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT current_address_id) FROM Students",
        "pred": "SELECT COUNT(DISTINCT current_address_id) FROM Students",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT current_address_id) FROM Students",
        "repair_result": 1
    },
    {
        "idx": 578,
        "db_id": "student_transcripts_tracking",
        "question": "What are the different addresses that have students living there?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT current_address_id) FROM Students",
        "pred": "SELECT DISTINCT line_1, line_2, city, zip_postcode, state_province_county, country FROM Addresses WHERE address_id IN (SELECT current_address_id FROM Students) OR address_id IN (SELECT permanent_address_id FROM Students)",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT line_1, line_2, city, zip_postcode, state_province_county, country FROM Addresses WHERE address_id IN (SELECT current_address_id FROM Students) OR address_id IN (SELECT permanent_address_id FROM Students)",
        "repair_result": 0
    },
    {
        "idx": 579,
        "db_id": "student_transcripts_tracking",
        "question": "List all the student details in reversed lexicographical order.",
        "evidence": "",
        "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "pred": "SELECT * FROM Students ORDER BY last_name DESC, first_name DESC",
        "pred_result": 0,
        "repair_sql": "SELECT * FROM Students ORDER BY last_name DESC, first_name DESC",
        "repair_result": 0
    },
    {
        "idx": 580,
        "db_id": "student_transcripts_tracking",
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "evidence": "",
        "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "pred": "SELECT * FROM Students ORDER BY first_name DESC",
        "pred_result": 0,
        "repair_sql": "SELECT * FROM Students ORDER BY first_name DESC",
        "repair_result": 0
    },
    {
        "idx": 581,
        "db_id": "student_transcripts_tracking",
        "question": "Describe the section h.",
        "evidence": "",
        "gold": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "pred": "SELECT * FROM Sections WHERE section_name = 'h'",
        "pred_result": 0,
        "repair_sql": "SELECT * FROM Sections WHERE section_name = 'h'",
        "repair_result": 0
    },
    {
        "idx": 582,
        "db_id": "student_transcripts_tracking",
        "question": "What is the description for the section named h?",
        "evidence": "",
        "gold": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "pred": "SELECT section_description FROM Sections WHERE section_name = 'h'",
        "pred_result": 1,
        "repair_sql": "SELECT section_description FROM Sections WHERE section_name = 'h'",
        "repair_result": 1
    },
    {
        "idx": 583,
        "db_id": "student_transcripts_tracking",
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "evidence": "",
        "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "pred": "SELECT `first_name` FROM Students WHERE `permanent_address_id` IN (SELECT `address_id` FROM Addresses WHERE `city` = 'Haiti') OR `cell_mobile_number` = '09700166582'",
        "pred_result": 1,
        "repair_sql": "SELECT `first_name` FROM Students WHERE `permanent_address_id` IN (SELECT `address_id` FROM Addresses WHERE `city` = 'Haiti') OR `cell_mobile_number` = '09700166582'",
        "repair_result": 1
    },
    {
        "idx": 584,
        "db_id": "student_transcripts_tracking",
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "evidence": "",
        "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "pred": "SELECT `first_name` FROM Students WHERE `permanent_address_id` IN (SELECT `address_id` FROM Addresses WHERE `city` = 'Haiti') OR `cell_mobile_number` = '09700166582'",
        "pred_result": 1,
        "repair_sql": "SELECT `first_name` FROM Students WHERE `permanent_address_id` IN (SELECT `address_id` FROM Addresses WHERE `city` = 'Haiti') OR `cell_mobile_number` = '09700166582'",
        "repair_result": 1
    },
    {
        "idx": 585,
        "db_id": "tvshow",
        "question": "List the title of all cartoons in alphabetical order.",
        "evidence": "",
        "gold": "SELECT Title FROM Cartoon ORDER BY title",
        "pred": "SELECT `Title` FROM Cartoon ORDER BY `Title` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM Cartoon ORDER BY `Title` ASC",
        "repair_result": 1
    },
    {
        "idx": 586,
        "db_id": "tvshow",
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "evidence": "",
        "gold": "SELECT Title FROM Cartoon ORDER BY title",
        "pred": "SELECT `Title` FROM Cartoon ORDER BY `Title` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM Cartoon ORDER BY `Title` ASC",
        "repair_result": 1
    },
    {
        "idx": 587,
        "db_id": "tvshow",
        "question": "List all cartoon directed by \"Ben Jones\".",
        "evidence": "",
        "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "pred": "SELECT `Title` FROM Cartoon WHERE `Directed_by` = 'Ben Jones'",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM Cartoon WHERE `Directed_by` = 'Ben Jones'",
        "repair_result": 1
    },
    {
        "idx": 588,
        "db_id": "tvshow",
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "evidence": "",
        "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "pred": "SELECT `Title` FROM Cartoon WHERE `Directed_by` = 'Ben Jones'",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM Cartoon WHERE `Directed_by` = 'Ben Jones'",
        "repair_result": 1
    },
    {
        "idx": 589,
        "db_id": "tvshow",
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "pred": "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "repair_result": 1
    },
    {
        "idx": 590,
        "db_id": "tvshow",
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "pred": "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "repair_result": 1
    },
    {
        "idx": 591,
        "db_id": "tvshow",
        "question": "list all cartoon titles and their directors ordered by their air date",
        "evidence": "",
        "gold": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "pred": "SELECT `Title`, `Directed_by` FROM Cartoon ORDER BY `Original_air_date` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Title`, `Directed_by` FROM Cartoon ORDER BY `Original_air_date` ASC",
        "repair_result": 1
    },
    {
        "idx": 592,
        "db_id": "tvshow",
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "evidence": "",
        "gold": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "pred": "SELECT `Title`, `Directed_by` FROM Cartoon ORDER BY Original_air_date",
        "pred_result": 1,
        "repair_sql": "SELECT `Title`, `Directed_by` FROM Cartoon ORDER BY Original_air_date",
        "repair_result": 1
    },
    {
        "idx": 593,
        "db_id": "tvshow",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "evidence": "",
        "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "pred": "SELECT `Title` FROM Cartoon WHERE `Directed_by` = 'Ben Jones' OR `Directed_by` = 'Brandon Vietti'",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM Cartoon WHERE `Directed_by` = 'Ben Jones' OR `Directed_by` = 'Brandon Vietti'",
        "repair_result": 1
    },
    {
        "idx": 594,
        "db_id": "tvshow",
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "evidence": "",
        "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "pred": "SELECT `Title` FROM Cartoon WHERE `Directed_by` IN ('Ben Jones', 'Brandon Vietti')",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM Cartoon WHERE `Directed_by` IN ('Ben Jones', 'Brandon Vietti')",
        "repair_result": 1
    },
    {
        "idx": 595,
        "db_id": "tvshow",
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "evidence": "",
        "gold": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "pred": "SELECT Country, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_Channels DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT Country, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_Channels DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 596,
        "db_id": "tvshow",
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "evidence": "",
        "gold": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "pred": "SELECT Country, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_Channels DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT Country, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_Channels DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 597,
        "db_id": "tvshow",
        "question": "List the number of different series names and contents in the TV Channel table.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "pred": "SELECT COUNT(DISTINCT series_name) AS num_series_names, COUNT(DISTINCT Content) AS num_contents FROM TV_Channel",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT series_name) AS num_series_names, COUNT(DISTINCT Content) AS num_contents FROM TV_Channel",
        "repair_result": 1
    },
    {
        "idx": 598,
        "db_id": "tvshow",
        "question": "How many different series and contents are listed in the TV Channel table?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "pred": "SELECT COUNT(DISTINCT series_name) AS num_series, COUNT(DISTINCT Content) AS num_contents FROM TV_Channel",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT series_name) AS num_series, COUNT(DISTINCT Content) AS num_contents FROM TV_Channel",
        "repair_result": 1
    },
    {
        "idx": 599,
        "db_id": "tvshow",
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "evidence": "",
        "gold": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "pred": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
        "pred_result": 1,
        "repair_sql": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
        "repair_result": 1
    },
    {
        "idx": 600,
        "db_id": "tvshow",
        "question": "What is the content of the series Sky Radio?",
        "evidence": "",
        "gold": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "pred": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
        "pred_result": 1,
        "repair_sql": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
        "repair_result": 1
    },
    {
        "idx": 601,
        "db_id": "tvshow",
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "evidence": "",
        "gold": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "pred": "SELECT `Package_Option` FROM TV_Channel WHERE `series_name` = 'Sky Radio'",
        "pred_result": 1,
        "repair_sql": "SELECT `Package_Option` FROM TV_Channel WHERE `series_name` = 'Sky Radio'",
        "repair_result": 1
    },
    {
        "idx": 602,
        "db_id": "tvshow",
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "evidence": "",
        "gold": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "pred": "SELECT `Package_Option` FROM TV_Channel WHERE `series_name` = 'Sky Radio'",
        "pred_result": 1,
        "repair_sql": "SELECT `Package_Option` FROM TV_Channel WHERE `series_name` = 'Sky Radio'",
        "repair_result": 1
    },
    {
        "idx": 603,
        "db_id": "tvshow",
        "question": "How many TV Channel using language English?",
        "evidence": "",
        "gold": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "pred": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'",
        "repair_result": 1
    },
    {
        "idx": 604,
        "db_id": "tvshow",
        "question": "How many TV Channels use the English language?",
        "evidence": "",
        "gold": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "pred": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'",
        "repair_result": 1
    },
    {
        "idx": 605,
        "db_id": "tvshow",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "evidence": "",
        "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "pred": "SELECT `Language`, COUNT(*) FROM TV_Channel GROUP BY `Language` ORDER BY COUNT(*) ASC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT `Language`, COUNT(*) FROM TV_Channel GROUP BY `Language` ORDER BY COUNT(*) ASC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 606,
        "db_id": "tvshow",
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "evidence": "",
        "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "pred": "SELECT T1.`Language`, COUNT(*) AS Channel_Count FROM TV_Channel AS T1 GROUP BY T1.`Language` ORDER BY Channel_Count LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Language`, COUNT(*) AS Channel_Count FROM TV_Channel AS T1 GROUP BY T1.`Language` ORDER BY Channel_Count LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 607,
        "db_id": "tvshow",
        "question": "List each language and the number of TV Channels using it.",
        "evidence": "",
        "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "pred": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language",
        "pred_result": 1,
        "repair_sql": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language",
        "repair_result": 1
    },
    {
        "idx": 608,
        "db_id": "tvshow",
        "question": "For each language, list the number of TV Channels that use it.",
        "evidence": "",
        "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "pred": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language",
        "pred_result": 1,
        "repair_sql": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language",
        "repair_result": 1
    },
    {
        "idx": 609,
        "db_id": "tvshow",
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "evidence": "",
        "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "pred": "SELECT T1.`series_name` FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.`id` = T2.`Channel` WHERE T2.`Title` = 'The Rise of the Blue Beetle!'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`series_name` FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.`id` = T2.`Channel` WHERE T2.`Title` = 'The Rise of the Blue Beetle!'",
        "repair_result": 1
    },
    {
        "idx": 610,
        "db_id": "tvshow",
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "evidence": "",
        "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "pred": "SELECT T1.`series_name` FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.`id` = T2.`Channel` WHERE T2.`Title` = 'The Rise of the Blue Beetle!'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`series_name` FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.`id` = T2.`Channel` WHERE T2.`Title` = 'The Rise of the Blue Beetle!'",
        "repair_result": 1
    },
    {
        "idx": 611,
        "db_id": "tvshow",
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "evidence": "",
        "gold": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "pred": "SELECT C.`Title` FROM Cartoon AS C JOIN TV_Channel AS TC ON C.`Channel` = TC.`id` WHERE TC.`series_name` = 'Sky Radio'",
        "pred_result": 1,
        "repair_sql": "SELECT C.`Title` FROM Cartoon AS C JOIN TV_Channel AS TC ON C.`Channel` = TC.`id` WHERE TC.`series_name` = 'Sky Radio'",
        "repair_result": 1
    },
    {
        "idx": 612,
        "db_id": "tvshow",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "evidence": "",
        "gold": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "pred": "SELECT `Title` FROM Cartoon WHERE `Channel` = (SELECT `id` FROM TV_Channel WHERE `series_name` = 'Sky Radio')",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM Cartoon WHERE `Channel` = (SELECT `id` FROM TV_Channel WHERE `series_name` = 'Sky Radio')",
        "repair_result": 1
    },
    {
        "idx": 613,
        "db_id": "tvshow",
        "question": "List the Episode of all TV series sorted by rating.",
        "evidence": "",
        "gold": "SELECT Episode FROM TV_series ORDER BY rating",
        "pred": "SELECT Episode FROM TV_series ORDER BY Rating DESC",
        "pred_result": 1,
        "repair_sql": "SELECT Episode FROM TV_series ORDER BY Rating DESC",
        "repair_result": 1
    },
    {
        "idx": 614,
        "db_id": "tvshow",
        "question": "What are all of the episodes ordered by ratings?",
        "evidence": "",
        "gold": "SELECT Episode FROM TV_series ORDER BY rating",
        "pred": "SELECT Episode FROM TV_series ORDER BY Rating DESC",
        "pred_result": 1,
        "repair_sql": "SELECT Episode FROM TV_series ORDER BY Rating DESC",
        "repair_result": 1
    },
    {
        "idx": 615,
        "db_id": "tvshow",
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "evidence": "",
        "gold": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "pred": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
        "pred_result": 1,
        "repair_sql": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
        "repair_result": 1
    },
    {
        "idx": 616,
        "db_id": "tvshow",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "evidence": "",
        "gold": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "pred": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
        "pred_result": 1,
        "repair_sql": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
        "repair_result": 1
    },
    {
        "idx": 617,
        "db_id": "tvshow",
        "question": "What is minimum and maximum share of TV series?",
        "evidence": "",
        "gold": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "pred": "SELECT MIN(Share), MAX(Share) FROM TV_series",
        "pred_result": 0,
        "repair_sql": "SELECT MIN(Share), MAX(Share) FROM TV_series",
        "repair_result": 0
    },
    {
        "idx": 618,
        "db_id": "tvshow",
        "question": "What is the maximum and minimum share for the TV series?",
        "evidence": "",
        "gold": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "pred": "SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM TV_series",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM TV_series",
        "repair_result": 1
    },
    {
        "idx": 619,
        "db_id": "tvshow",
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "evidence": "",
        "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "pred": "SELECT `Air_Date` FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
        "pred_result": 1,
        "repair_sql": "SELECT `Air_Date` FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
        "repair_result": 1
    },
    {
        "idx": 620,
        "db_id": "tvshow",
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "evidence": "",
        "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "pred": "SELECT `Air_Date` FROM TV_series WHERE `Episode` = 'A Love of a Lifetime'",
        "pred_result": 1,
        "repair_sql": "SELECT `Air_Date` FROM TV_series WHERE `Episode` = 'A Love of a Lifetime'",
        "repair_result": 1
    },
    {
        "idx": 621,
        "db_id": "tvshow",
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "evidence": "",
        "gold": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "pred": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
        "pred_result": 1,
        "repair_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
        "repair_result": 1
    },
    {
        "idx": 622,
        "db_id": "tvshow",
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "evidence": "",
        "gold": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "pred": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
        "pred_result": 1,
        "repair_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
        "repair_result": 1
    },
    {
        "idx": 623,
        "db_id": "tvshow",
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "evidence": "",
        "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "pred": "SELECT TV_Channel.`series_name` FROM TV_Channel JOIN TV_series ON TV_series.`Channel` = TV_Channel.`id` WHERE TV_series.`Episode` = 'A Love of a Lifetime'",
        "pred_result": 1,
        "repair_sql": "SELECT TV_Channel.`series_name` FROM TV_Channel JOIN TV_series ON TV_series.`Channel` = TV_Channel.`id` WHERE TV_series.`Episode` = 'A Love of a Lifetime'",
        "repair_result": 1
    },
    {
        "idx": 624,
        "db_id": "tvshow",
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "evidence": "",
        "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "pred": "SELECT series_name FROM TV_Channel WHERE id IN (SELECT id FROM TV_series WHERE Episode = 'A Love of a Lifetime')",
        "pred_result": 0,
        "repair_sql": "SELECT series_name FROM TV_Channel WHERE id IN (SELECT id FROM TV_series WHERE Episode = 'A Love of a Lifetime')",
        "repair_result": 0
    },
    {
        "idx": 625,
        "db_id": "tvshow",
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "evidence": "",
        "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "pred": "SELECT T2.`Episode` FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.`Channel` = T2.`id` WHERE T2.`series_name` = 'Sky Radio'",
        "pred_result": "no such column: T2.Episode",
        "repair_sql": "SELECT T1.`Episode` FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.`Channel` = T2.`id` WHERE T2.`series_name` = 'Sky Radio'",
        "repair_result": 1
    },
    {
        "idx": 626,
        "db_id": "tvshow",
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "evidence": "",
        "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "pred": "SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')",
        "pred_result": 1,
        "repair_sql": "SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')",
        "repair_result": 1
    },
    {
        "idx": 627,
        "db_id": "tvshow",
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "evidence": "",
        "gold": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "pred": "SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by",
        "pred_result": 0,
        "repair_sql": "SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by",
        "repair_result": 0
    },
    {
        "idx": 628,
        "db_id": "tvshow",
        "question": "How many cartoons did each director create?",
        "evidence": "",
        "gold": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "pred": "SELECT `Directed_by`, COUNT(*) FROM Cartoon GROUP BY `Directed_by`",
        "pred_result": 0,
        "repair_sql": "SELECT `Directed_by`, COUNT(*) FROM Cartoon GROUP BY `Directed_by`",
        "repair_result": 0
    },
    {
        "idx": 629,
        "db_id": "tvshow",
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "evidence": "",
        "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "pred": "SELECT `Production_code`, `Channel` FROM Cartoon ORDER BY STRFTIME('%Y-%m-%d', `Original_air_date`) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Production_code`, `Channel` FROM Cartoon ORDER BY STRFTIME('%Y-%m-%d', `Original_air_date`) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 630,
        "db_id": "tvshow",
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "evidence": "",
        "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "pred": "SELECT `Production_code`, `Channel` FROM Cartoon ORDER BY date(`Original_air_date`) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Production_code`, `Channel` FROM Cartoon ORDER BY date(`Original_air_date`) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 631,
        "db_id": "tvshow",
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "evidence": "",
        "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "pred": "SELECT T1.`Package_Option`, T2.`series_name` FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.`id` = T2.`Channel` WHERE T1.`Hight_definition_TV` = 'yes'",
        "pred_result": "no such column: T2.series_name",
        "repair_sql": "SELECT T1.`Package_Option`, T1.`series_name` FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.`id` = T2.`Channel` WHERE T1.`Hight_definition_TV` = 'yes'",
        "repair_result": 0
    },
    {
        "idx": 632,
        "db_id": "tvshow",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "evidence": "",
        "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "pred": "SELECT T1.`Package_Option`, T2.`series_name` FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.`id` = T2.`Channel` WHERE T1.`Hight_definition_TV` = 'yes'",
        "pred_result": "no such column: T2.series_name",
        "repair_sql": "SELECT T1.`Package_Option`, T1.`series_name` FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.`id` = T2.`Channel` WHERE T1.`Hight_definition_TV` = 'yes'",
        "repair_result": 0
    },
    {
        "idx": 633,
        "db_id": "tvshow",
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "evidence": "",
        "gold": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "pred": "SELECT DISTINCT TV_Channel.`Country` FROM TV_Channel JOIN Cartoon ON TV_Channel.`id` = Cartoon.`Channel` WHERE Cartoon.`Written_by` LIKE '%Todd Casey%'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT TV_Channel.`Country` FROM TV_Channel JOIN Cartoon ON TV_Channel.`id` = Cartoon.`Channel` WHERE Cartoon.`Written_by` LIKE '%Todd Casey%'",
        "repair_result": 1
    },
    {
        "idx": 634,
        "db_id": "tvshow",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "evidence": "",
        "gold": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "pred": "SELECT DISTINCT TV_Channel.`Country` FROM TV_Channel JOIN Cartoon ON TV_Channel.`id` = Cartoon.`Channel` WHERE Cartoon.`Written_by` = 'Todd Casey'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT TV_Channel.`Country` FROM TV_Channel JOIN Cartoon ON TV_Channel.`id` = Cartoon.`Channel` WHERE Cartoon.`Written_by` = 'Todd Casey'",
        "repair_result": 1
    },
    {
        "idx": 635,
        "db_id": "tvshow",
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "evidence": "",
        "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "pred": "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')",
        "repair_result": 0
    },
    {
        "idx": 636,
        "db_id": "tvshow",
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "evidence": "",
        "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "pred": "SELECT DISTINCT TV_Channel.`Country` FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.`id` = Cartoon.`Channel` WHERE Cartoon.`Written_by` != 'Todd Casey' OR Cartoon.`Written_by` IS NULL",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT TV_Channel.`Country` FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.`id` = Cartoon.`Channel` WHERE Cartoon.`Written_by` != 'Todd Casey' OR Cartoon.`Written_by` IS NULL",
        "repair_result": 0
    },
    {
        "idx": 637,
        "db_id": "tvshow",
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "evidence": "",
        "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "pred": "SELECT DISTINCT T1.`series_name`, T1.`Country` FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.`id` = T2.`Channel` WHERE T2.`Directed_by` IN ('Ben Jones', 'Michael Chang')",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`series_name`, T1.`Country` FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.`id` = T2.`Channel` WHERE T2.`Directed_by` IN ('Ben Jones', 'Michael Chang')",
        "repair_result": 0
    },
    {
        "idx": 638,
        "db_id": "tvshow",
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "evidence": "",
        "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "pred": "SELECT T1.`series_name`, T1.`Country` FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.`id` = T2.`Channel` JOIN Cartoon AS T3 ON T1.`id` = T3.`Channel` WHERE T3.`Directed_by` = 'Ben Jones' OR T3.`Directed_by` = 'Michael Chang'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`series_name`, T1.`Country` FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.`id` = T2.`Channel` JOIN Cartoon AS T3 ON T1.`id` = T3.`Channel` WHERE T3.`Directed_by` = 'Ben Jones' OR T3.`Directed_by` = 'Michael Chang'",
        "repair_result": 0
    },
    {
        "idx": 639,
        "db_id": "tvshow",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "evidence": "",
        "gold": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "pred": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'",
        "pred_result": 1,
        "repair_sql": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'",
        "repair_result": 1
    },
    {
        "idx": 640,
        "db_id": "tvshow",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "evidence": "",
        "gold": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "pred": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'",
        "pred_result": 1,
        "repair_sql": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'",
        "repair_result": 1
    },
    {
        "idx": 641,
        "db_id": "tvshow",
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "evidence": "",
        "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "pred": "SELECT DISTINCT T1.`id` FROM TV_Channel AS T1 WHERE T1.`Country` IN ( SELECT `Country` FROM TV_Channel GROUP BY `Country` HAVING COUNT(`id`) > 2 )",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`id` FROM TV_Channel AS T1 WHERE T1.`Country` IN ( SELECT `Country` FROM TV_Channel GROUP BY `Country` HAVING COUNT(`id`) > 2 )",
        "repair_result": 0
    },
    {
        "idx": 642,
        "db_id": "tvshow",
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "evidence": "",
        "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "pred": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(series_name) > 2",
        "pred_result": 0,
        "repair_sql": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(series_name) > 2",
        "repair_result": 0
    },
    {
        "idx": 643,
        "db_id": "tvshow",
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "evidence": "",
        "gold": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "pred": "SELECT DISTINCT T1.`id` FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.`id` = T2.`Channel` WHERE T2.`Directed_by` != 'Ben Jones' OR T2.`Directed_by` IS NULL",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`id` FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.`id` = T2.`Channel` WHERE T2.`Directed_by` != 'Ben Jones' OR T2.`Directed_by` IS NULL",
        "repair_result": 0
    },
    {
        "idx": 644,
        "db_id": "tvshow",
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "evidence": "",
        "gold": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "pred": "SELECT DISTINCT T1.`id` FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.`id` = T2.`Channel` WHERE T2.`Directed_by` IS NULL OR T2.`Directed_by` <> 'Ben Jones'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`id` FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.`id` = T2.`Channel` WHERE T2.`Directed_by` IS NULL OR T2.`Directed_by` <> 'Ben Jones'",
        "repair_result": 0
    },
    {
        "idx": 645,
        "db_id": "tvshow",
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "evidence": "",
        "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "pred": "SELECT DISTINCT T1.`Package_Option` FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.`id` = T2.`Channel` WHERE T2.`Directed_by` <> 'Ben Jones' OR T2.`Directed_by` IS NULL",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`Package_Option` FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.`id` = T2.`Channel` WHERE T2.`Directed_by` <> 'Ben Jones' OR T2.`Directed_by` IS NULL",
        "repair_result": 1
    },
    {
        "idx": 646,
        "db_id": "tvshow",
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "evidence": "",
        "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "pred": "SELECT DISTINCT T1.`Package_Option` FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.`id` = T2.`Channel` AND T2.`Directed_by` = 'Ben Jones' WHERE T2.`Channel` IS NULL",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`Package_Option` FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.`id` = T2.`Channel` AND T2.`Directed_by` = 'Ben Jones' WHERE T2.`Channel` IS NULL",
        "repair_result": 1
    },
    {
        "idx": 647,
        "db_id": "poker_player",
        "question": "How many poker players are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM poker_player",
        "pred": "SELECT COUNT(*) FROM poker_player",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM poker_player",
        "repair_result": 1
    },
    {
        "idx": 648,
        "db_id": "poker_player",
        "question": "Count the number of poker players.",
        "evidence": "",
        "gold": "SELECT count(*) FROM poker_player",
        "pred": "SELECT COUNT(*) FROM poker_player",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM poker_player",
        "repair_result": 1
    },
    {
        "idx": 649,
        "db_id": "poker_player",
        "question": "List the earnings of poker players in descending order.",
        "evidence": "",
        "gold": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "pred": "SELECT `Earnings` FROM poker_player ORDER BY `Earnings` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Earnings` FROM poker_player ORDER BY `Earnings` DESC",
        "repair_result": 1
    },
    {
        "idx": 650,
        "db_id": "poker_player",
        "question": "What are the earnings of poker players, ordered descending by value?",
        "evidence": "",
        "gold": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "pred": "SELECT `Earnings` FROM poker_player ORDER BY `Earnings` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Earnings` FROM poker_player ORDER BY `Earnings` DESC",
        "repair_result": 1
    },
    {
        "idx": 651,
        "db_id": "poker_player",
        "question": "List the final tables made and the best finishes of poker players.",
        "evidence": "",
        "gold": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "pred": "SELECT `Final_Table_Made`, `Best_Finish` FROM poker_player",
        "pred_result": 1,
        "repair_sql": "SELECT `Final_Table_Made`, `Best_Finish` FROM poker_player",
        "repair_result": 1
    },
    {
        "idx": 652,
        "db_id": "poker_player",
        "question": "What are the final tables made and best finishes for all poker players?",
        "evidence": "",
        "gold": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "pred": "SELECT `Final_Table_Made`, `Best_Finish` FROM poker_player",
        "pred_result": 1,
        "repair_sql": "SELECT `Final_Table_Made`, `Best_Finish` FROM poker_player",
        "repair_result": 1
    },
    {
        "idx": 653,
        "db_id": "poker_player",
        "question": "What is the average earnings of poker players?",
        "evidence": "",
        "gold": "SELECT avg(Earnings) FROM poker_player",
        "pred": "SELECT AVG(Earnings) FROM poker_player",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Earnings) FROM poker_player",
        "repair_result": 1
    },
    {
        "idx": 654,
        "db_id": "poker_player",
        "question": "Return the average earnings across all poker players.",
        "evidence": "",
        "gold": "SELECT avg(Earnings) FROM poker_player",
        "pred": "SELECT AVG(Earnings) FROM poker_player",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Earnings) FROM poker_player",
        "repair_result": 1
    },
    {
        "idx": 655,
        "db_id": "poker_player",
        "question": "What is the money rank of the poker player with the highest earnings?",
        "evidence": "",
        "gold": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "pred": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)",
        "pred_result": 1,
        "repair_sql": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)",
        "repair_result": 1
    },
    {
        "idx": 656,
        "db_id": "poker_player",
        "question": "Return the money rank of the player with the greatest earnings.",
        "evidence": "",
        "gold": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "pred": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)",
        "pred_result": 1,
        "repair_sql": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)",
        "repair_result": 1
    },
    {
        "idx": 657,
        "db_id": "poker_player",
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "evidence": "",
        "gold": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "pred": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
        "repair_result": 1
    },
    {
        "idx": 658,
        "db_id": "poker_player",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "evidence": "",
        "gold": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "pred": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
        "repair_result": 1
    },
    {
        "idx": 659,
        "db_id": "poker_player",
        "question": "What are the names of poker players?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "pred": "SELECT `Name` FROM people",
        "pred_result": 0,
        "repair_sql": "SELECT `Name` FROM people",
        "repair_result": 0
    },
    {
        "idx": 660,
        "db_id": "poker_player",
        "question": "Return the names of all the poker players.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "pred": "SELECT `Name` FROM people",
        "pred_result": 0,
        "repair_sql": "SELECT `Name` FROM people",
        "repair_result": 0
    },
    {
        "idx": 661,
        "db_id": "poker_player",
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "pred": "SELECT p.`Name` FROM poker_player AS pp JOIN people AS p ON pp.`People_ID` = p.`People_ID` WHERE pp.`Earnings` > 300000",
        "pred_result": 1,
        "repair_sql": "SELECT p.`Name` FROM poker_player AS pp JOIN people AS p ON pp.`People_ID` = p.`People_ID` WHERE pp.`Earnings` > 300000",
        "repair_result": 1
    },
    {
        "idx": 662,
        "db_id": "poker_player",
        "question": "Give the names of poker players who have earnings above 300000.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "pred": "SELECT p.`Name` FROM poker_player AS pp JOIN people AS p ON pp.`People_ID` = p.`People_ID` WHERE pp.`Earnings` > 300000",
        "pred_result": 1,
        "repair_sql": "SELECT p.`Name` FROM poker_player AS pp JOIN people AS p ON pp.`People_ID` = p.`People_ID` WHERE pp.`Earnings` > 300000",
        "repair_result": 1
    },
    {
        "idx": 663,
        "db_id": "poker_player",
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "pred": "SELECT P2.`Name` FROM poker_player AS P1 JOIN people AS P2 ON P1.`People_ID` = P2.`People_ID` ORDER BY P1.`Final_Table_Made` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT P2.`Name` FROM poker_player AS P1 JOIN people AS P2 ON P1.`People_ID` = P2.`People_ID` ORDER BY P1.`Final_Table_Made` ASC",
        "repair_result": 1
    },
    {
        "idx": 664,
        "db_id": "poker_player",
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "pred": "SELECT P.`Name` FROM poker_player AS PP JOIN people AS P ON PP.`People_ID` = P.`People_ID` ORDER BY PP.`Final_Table_Made` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT P.`Name` FROM poker_player AS PP JOIN people AS P ON PP.`People_ID` = P.`People_ID` ORDER BY PP.`Final_Table_Made` ASC",
        "repair_result": 1
    },
    {
        "idx": 665,
        "db_id": "poker_player",
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "evidence": "",
        "gold": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "pred": "SELECT `Birth_Date` FROM people WHERE People_ID = (SELECT People_ID FROM poker_player WHERE Earnings = (SELECT MIN(Earnings) FROM poker_player))",
        "pred_result": 1,
        "repair_sql": "SELECT `Birth_Date` FROM people WHERE People_ID = (SELECT People_ID FROM poker_player WHERE Earnings = (SELECT MIN(Earnings) FROM poker_player))",
        "repair_result": 1
    },
    {
        "idx": 666,
        "db_id": "poker_player",
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "evidence": "",
        "gold": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "pred": "SELECT `Birth_Date` FROM people WHERE `People_ID` = (SELECT `People_ID` FROM poker_player WHERE `Earnings` = (SELECT MIN(`Earnings`) FROM poker_player))",
        "pred_result": 1,
        "repair_sql": "SELECT `Birth_Date` FROM people WHERE `People_ID` = (SELECT `People_ID` FROM poker_player WHERE `Earnings` = (SELECT MIN(`Earnings`) FROM poker_player))",
        "repair_result": 1
    },
    {
        "idx": 667,
        "db_id": "poker_player",
        "question": "What is the money rank of the tallest poker player?",
        "evidence": "",
        "gold": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "pred": "SELECT `Money_Rank` FROM poker_player JOIN people ON poker_player.`People_ID` = people.`People_ID` ORDER BY people.`Height` DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT `Money_Rank` FROM poker_player JOIN people ON poker_player.`People_ID` = people.`People_ID` ORDER BY people.`Height` DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 668,
        "db_id": "poker_player",
        "question": "Return the money rank of the poker player with the greatest height.",
        "evidence": "",
        "gold": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "pred": "SELECT `Money_Rank` FROM poker_player AS T1 JOIN people AS T2 ON T1.`People_ID` = T2.`People_ID` ORDER BY T2.`Height` DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT `Money_Rank` FROM poker_player AS T1 JOIN people AS T2 ON T1.`People_ID` = T2.`People_ID` ORDER BY T2.`Height` DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 669,
        "db_id": "poker_player",
        "question": "What is the average earnings of poker players with height higher than 200?",
        "evidence": "",
        "gold": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "pred": "SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200",
        "repair_result": 1
    },
    {
        "idx": 670,
        "db_id": "poker_player",
        "question": "Give average earnings of poker players who are taller than 200.",
        "evidence": "",
        "gold": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "pred": "SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200",
        "repair_result": 1
    },
    {
        "idx": 671,
        "db_id": "poker_player",
        "question": "What are the names of poker players in descending order of earnings?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "pred": "SELECT p.`Name` FROM poker_player AS pp JOIN people AS p ON pp.`People_ID` = p.`People_ID` ORDER BY pp.`Earnings` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT p.`Name` FROM poker_player AS pp JOIN people AS p ON pp.`People_ID` = p.`People_ID` ORDER BY pp.`Earnings` DESC",
        "repair_result": 1
    },
    {
        "idx": 672,
        "db_id": "poker_player",
        "question": "Return the names of poker players sorted by their earnings descending.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "pred": "SELECT p.`Name` FROM poker_player AS pp JOIN people AS p ON pp.`People_ID` = p.`People_ID` ORDER BY pp.`Earnings` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT p.`Name` FROM poker_player AS pp JOIN people AS p ON pp.`People_ID` = p.`People_ID` ORDER BY pp.`Earnings` DESC",
        "repair_result": 1
    },
    {
        "idx": 673,
        "db_id": "poker_player",
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "evidence": "",
        "gold": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "pred": "SELECT `Nationality`, COUNT(*) FROM people GROUP BY `Nationality`",
        "pred_result": 1,
        "repair_sql": "SELECT `Nationality`, COUNT(*) FROM people GROUP BY `Nationality`",
        "repair_result": 1
    },
    {
        "idx": 674,
        "db_id": "poker_player",
        "question": "How many people are there of each nationality?",
        "evidence": "",
        "gold": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "pred": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality",
        "pred_result": 1,
        "repair_sql": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality",
        "repair_result": 1
    },
    {
        "idx": 675,
        "db_id": "poker_player",
        "question": "What is the most common nationality of people?",
        "evidence": "",
        "gold": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT `Nationality`, COUNT(*) FROM people GROUP BY `Nationality` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Nationality`, COUNT(*) FROM people GROUP BY `Nationality` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 676,
        "db_id": "poker_player",
        "question": "Give the nationality that is most common across all people.",
        "evidence": "",
        "gold": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 677,
        "db_id": "poker_player",
        "question": "What are the nationalities that are shared by at least two people?",
        "evidence": "",
        "gold": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "pred": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
        "repair_result": 1
    },
    {
        "idx": 678,
        "db_id": "poker_player",
        "question": "Return the nationalities for which there are two or more people.",
        "evidence": "",
        "gold": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "pred": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
        "repair_result": 1
    },
    {
        "idx": 679,
        "db_id": "poker_player",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "evidence": "",
        "gold": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "pred": "SELECT `Name`, `Birth_Date` FROM people ORDER BY `Name` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name`, `Birth_Date` FROM people ORDER BY `Name` ASC",
        "repair_result": 1
    },
    {
        "idx": 680,
        "db_id": "poker_player",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "evidence": "",
        "gold": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "pred": "SELECT `Name`, `Birth_Date` FROM people ORDER BY `Name` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name`, `Birth_Date` FROM people ORDER BY `Name` ASC",
        "repair_result": 1
    },
    {
        "idx": 681,
        "db_id": "poker_player",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "evidence": "",
        "gold": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "pred": "SELECT `Name` FROM people WHERE Nationality != 'Russia'",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM people WHERE Nationality != 'Russia'",
        "repair_result": 1
    },
    {
        "idx": 682,
        "db_id": "poker_player",
        "question": "What are the names of people who are not from Russia?",
        "evidence": "",
        "gold": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "pred": "SELECT `Name` FROM people WHERE Nationality != 'Russia'",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM people WHERE Nationality != 'Russia'",
        "repair_result": 1
    },
    {
        "idx": 683,
        "db_id": "poker_player",
        "question": "List the names of people that are not poker players.",
        "evidence": "",
        "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "pred": "SELECT `Name` FROM people WHERE `People_ID` NOT IN (SELECT `People_ID` FROM poker_player)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM people WHERE `People_ID` NOT IN (SELECT `People_ID` FROM poker_player)",
        "repair_result": 1
    },
    {
        "idx": 684,
        "db_id": "poker_player",
        "question": "What are the names of people who do not play poker?",
        "evidence": "",
        "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "pred": "SELECT `Name` FROM people WHERE `People_ID` NOT IN (SELECT `People_ID` FROM poker_player)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM people WHERE `People_ID` NOT IN (SELECT `People_ID` FROM poker_player)",
        "repair_result": 1
    },
    {
        "idx": 685,
        "db_id": "poker_player",
        "question": "How many distinct nationalities are there?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT Nationality) FROM people",
        "pred": "SELECT COUNT(DISTINCT Nationality) FROM people",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Nationality) FROM people",
        "repair_result": 1
    },
    {
        "idx": 686,
        "db_id": "poker_player",
        "question": "Count the number of different nationalities.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT Nationality) FROM people",
        "pred": "SELECT COUNT(DISTINCT Nationality) FROM people",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Nationality) FROM people",
        "repair_result": 1
    },
    {
        "idx": 687,
        "db_id": "voter_1",
        "question": "How many states are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM area_code_state",
        "pred": "SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE",
        "repair_result": 0
    },
    {
        "idx": 688,
        "db_id": "voter_1",
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "evidence": "",
        "gold": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "pred": "SELECT `contestant_number`, `contestant_name` FROM CONTESTANTS ORDER BY `contestant_name` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `contestant_number`, `contestant_name` FROM CONTESTANTS ORDER BY `contestant_name` DESC",
        "repair_result": 1
    },
    {
        "idx": 689,
        "db_id": "voter_1",
        "question": "List the vote ids, phone numbers and states of all votes.",
        "evidence": "",
        "gold": "SELECT vote_id ,  phone_number ,  state FROM votes",
        "pred": "SELECT `vote_id`, `phone_number`, `state` FROM VOTES",
        "pred_result": 1,
        "repair_sql": "SELECT `vote_id`, `phone_number`, `state` FROM VOTES",
        "repair_result": 1
    },
    {
        "idx": 690,
        "db_id": "voter_1",
        "question": "What are the maximum and minimum values of area codes?",
        "evidence": "",
        "gold": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
        "pred": "SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE",
        "repair_result": 1
    },
    {
        "idx": 691,
        "db_id": "voter_1",
        "question": "What is last date created of votes from the state 'CA'?",
        "evidence": "",
        "gold": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "pred": "SELECT MAX(created) FROM VOTES WHERE state = 'CA'",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(created) FROM VOTES WHERE state = 'CA'",
        "repair_result": 1
    },
    {
        "idx": 692,
        "db_id": "voter_1",
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "evidence": "",
        "gold": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "pred": "SELECT `contestant_name` FROM CONTESTANTS WHERE `contestant_name` != 'Jessie Alloway'",
        "pred_result": 1,
        "repair_sql": "SELECT `contestant_name` FROM CONTESTANTS WHERE `contestant_name` != 'Jessie Alloway'",
        "repair_result": 1
    },
    {
        "idx": 693,
        "db_id": "voter_1",
        "question": "What are the distinct states and create time of all votes?",
        "evidence": "",
        "gold": "SELECT DISTINCT state ,  created FROM votes",
        "pred": "SELECT DISTINCT `state`, `created` FROM VOTES",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `state`, `created` FROM VOTES",
        "repair_result": 1
    },
    {
        "idx": 694,
        "db_id": "voter_1",
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "evidence": "",
        "gold": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "pred": "SELECT `contestant_number`, `contestant_name` FROM CONTESTANTS WHERE `contestant_number` IN (SELECT `contestant_number` FROM VOTES GROUP BY `contestant_number` HAVING COUNT(*) >= 2)",
        "pred_result": 1,
        "repair_sql": "SELECT `contestant_number`, `contestant_name` FROM CONTESTANTS WHERE `contestant_number` IN (SELECT `contestant_number` FROM VOTES GROUP BY `contestant_number` HAVING COUNT(*) >= 2)",
        "repair_result": 1
    },
    {
        "idx": 695,
        "db_id": "voter_1",
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "evidence": "",
        "gold": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "pred": "SELECT C.`contestant_number`, C.`contestant_name` FROM CONTESTANTS AS C JOIN VOTES AS V ON C.`contestant_number` = V.`contestant_number` GROUP BY C.`contestant_number`, C.`contestant_name` ORDER BY COUNT(*) ASC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT C.`contestant_number`, C.`contestant_name` FROM CONTESTANTS AS C JOIN VOTES AS V ON C.`contestant_number` = V.`contestant_number` GROUP BY C.`contestant_number`, C.`contestant_name` ORDER BY COUNT(*) ASC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 696,
        "db_id": "voter_1",
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "pred": "SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'",
        "repair_result": 1
    },
    {
        "idx": 697,
        "db_id": "voter_1",
        "question": "How many contestants did not get voted?",
        "evidence": "",
        "gold": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "pred": "SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)",
        "repair_result": 1
    },
    {
        "idx": 698,
        "db_id": "voter_1",
        "question": "What is the area code in which the most voters voted?",
        "evidence": "",
        "gold": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT area_code, COUNT(*) AS total_votes FROM AREA_CODE_STATE AS A JOIN VOTES AS V ON A.state = V.state GROUP BY area_code ORDER BY total_votes DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT area_code, COUNT(*) AS total_votes FROM AREA_CODE_STATE AS A JOIN VOTES AS V ON A.state = V.state GROUP BY area_code ORDER BY total_votes DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 699,
        "db_id": "voter_1",
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "evidence": "",
        "gold": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "pred": "SELECT `created`, VOTES.`state`, `phone_number` FROM VOTES JOIN CONTESTANTS ON VOTES.`contestant_number` = CONTESTANTS.`contestant_number` WHERE CONTESTANTS.`contestant_name` = 'Tabatha Gehling'",
        "pred_result": 1,
        "repair_sql": "SELECT `created`, VOTES.`state`, `phone_number` FROM VOTES JOIN CONTESTANTS ON VOTES.`contestant_number` = CONTESTANTS.`contestant_number` WHERE CONTESTANTS.`contestant_name` = 'Tabatha Gehling'",
        "repair_result": 1
    },
    {
        "idx": 700,
        "db_id": "voter_1",
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "evidence": "",
        "gold": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "pred": "SELECT DISTINCT A1.`area_code` FROM VOTES AS V JOIN CONTESTANTS AS C1 ON V.`contestant_number` = C1.`contestant_number` AND C1.`contestant_name` = 'Tabatha Gehling' JOIN CONTESTANTS AS C2 ON V.`contestant_number` = C2.`contestant_number` AND C2.`contestant_name` = 'Kelly Clauss' JOIN AREA_CODE_STATE AS A1 ON V.`state` = A1.`state`",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT A1.`area_code` FROM VOTES AS V JOIN CONTESTANTS AS C1 ON V.`contestant_number` = C1.`contestant_number` AND C1.`contestant_name` = 'Tabatha Gehling' JOIN CONTESTANTS AS C2 ON V.`contestant_number` = C2.`contestant_number` AND C2.`contestant_name` = 'Kelly Clauss' JOIN AREA_CODE_STATE AS A1 ON V.`state` = A1.`state`",
        "repair_result": 0
    },
    {
        "idx": 701,
        "db_id": "voter_1",
        "question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "evidence": "",
        "gold": "select contestant_name from contestants where contestant_name like \"%al%\"",
        "pred": "SELECT `contestant_name` FROM CONTESTANTS WHERE `contestant_name` LIKE '%Al%'",
        "pred_result": 1,
        "repair_sql": "SELECT `contestant_name` FROM CONTESTANTS WHERE `contestant_name` LIKE '%Al%'",
        "repair_result": 1
    },
    {
        "idx": 702,
        "db_id": "world_1",
        "question": "What are the names of all the countries that became independent after 1950?",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "pred": "SELECT `Name` FROM country WHERE IndepYear > 1950",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM country WHERE IndepYear > 1950",
        "repair_result": 1
    },
    {
        "idx": 703,
        "db_id": "world_1",
        "question": "Give the names of the nations that were founded after 1950.",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "pred": "SELECT `Name` FROM country WHERE IndepYear > 1950",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM country WHERE IndepYear > 1950",
        "repair_result": 1
    },
    {
        "idx": 704,
        "db_id": "world_1",
        "question": "How many countries have a republic as their form of government?",
        "evidence": "",
        "gold": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "pred": "SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'",
        "repair_result": 1
    },
    {
        "idx": 705,
        "db_id": "world_1",
        "question": "How many countries have governments that are republics?",
        "evidence": "",
        "gold": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "pred": "SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'",
        "repair_result": 1
    },
    {
        "idx": 706,
        "db_id": "world_1",
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "evidence": "",
        "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "pred": "SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'",
        "repair_result": 1
    },
    {
        "idx": 707,
        "db_id": "world_1",
        "question": "How much surface area do the countires in the Carribean cover together?",
        "evidence": "",
        "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "pred": "SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'",
        "repair_result": 1
    },
    {
        "idx": 708,
        "db_id": "world_1",
        "question": "Which continent is Anguilla in?",
        "evidence": "",
        "gold": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "pred": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
        "pred_result": 1,
        "repair_sql": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
        "repair_result": 1
    },
    {
        "idx": 709,
        "db_id": "world_1",
        "question": "What is the continent name which Anguilla belongs to?",
        "evidence": "",
        "gold": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "pred": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
        "pred_result": 1,
        "repair_sql": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
        "repair_result": 1
    },
    {
        "idx": 710,
        "db_id": "world_1",
        "question": "Which region is the city Kabul located in?",
        "evidence": "",
        "gold": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "pred": "SELECT c.District FROM city AS c JOIN country AS co ON c.CountryCode = co.Code WHERE c.Name = 'Kabul'",
        "pred_result": 0,
        "repair_sql": "SELECT c.District FROM city AS c JOIN country AS co ON c.CountryCode = co.Code WHERE c.Name = 'Kabul'",
        "repair_result": 0
    },
    {
        "idx": 711,
        "db_id": "world_1",
        "question": "What region is Kabul in?",
        "evidence": "",
        "gold": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "pred": "SELECT c.Region FROM city AS ci JOIN country AS co ON ci.CountryCode = co.Code WHERE ci.Name = 'Kabul'",
        "pred_result": "no such column: c.Region",
        "repair_sql": "SELECT co.Region FROM city AS ci JOIN country AS co ON ci.CountryCode = co.Code WHERE ci.Name = 'Kabul'",
        "repair_result": 1
    },
    {
        "idx": 712,
        "db_id": "world_1",
        "question": "Which language is the most popular in Aruba?",
        "evidence": "",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "pred": "SELECT `Language` FROM countrylanguage WHERE `CountryCode` = 'ABW' ORDER BY `Percentage` DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT `Language` FROM countrylanguage WHERE `CountryCode` = 'ABW' ORDER BY `Percentage` DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 713,
        "db_id": "world_1",
        "question": "What language is predominantly spoken in Aruba?",
        "evidence": "",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "pred": "SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'",
        "pred_result": 0,
        "repair_sql": "SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'",
        "repair_result": 0
    },
    {
        "idx": 714,
        "db_id": "world_1",
        "question": "What are the population and life expectancies in Brazil?",
        "evidence": "",
        "gold": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "pred": "SELECT city.`Population`, country.`LifeExpectancy` FROM city JOIN country ON city.`CountryCode` = country.`Code` WHERE city.`Name` = 'Brazil'",
        "pred_result": 0,
        "repair_sql": "SELECT city.`Population`, country.`LifeExpectancy` FROM city JOIN country ON city.`CountryCode` = country.`Code` WHERE city.`Name` = 'Brazil'",
        "repair_result": 0
    },
    {
        "idx": 715,
        "db_id": "world_1",
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "evidence": "",
        "gold": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "pred": "SELECT city.`Population`, country.`LifeExpectancy` FROM city JOIN country ON city.`CountryCode` = country.`Code` WHERE city.`Name` = 'Toledo' AND country.`Name` = 'Brazil'",
        "pred_result": 0,
        "repair_sql": "SELECT city.`Population`, country.`LifeExpectancy` FROM city JOIN country ON city.`CountryCode` = country.`Code` WHERE city.`Name` = 'Toledo' AND country.`Name` = 'Brazil'",
        "repair_result": 0
    },
    {
        "idx": 716,
        "db_id": "world_1",
        "question": "What are the region and population of Angola?",
        "evidence": "",
        "gold": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "pred": "SELECT Region, Population FROM country WHERE Name = 'Angola'",
        "pred_result": 0,
        "repair_sql": "SELECT Region, Population FROM country WHERE Name = 'Angola'",
        "repair_result": 0
    },
    {
        "idx": 717,
        "db_id": "world_1",
        "question": "What region does Angola belong to and what is its population?",
        "evidence": "",
        "gold": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "pred": "SELECT c.Region, c.Population FROM country c WHERE c.Name = 'Angola'",
        "pred_result": 0,
        "repair_sql": "SELECT c.Region, c.Population FROM country c WHERE c.Name = 'Angola'",
        "repair_result": 0
    },
    {
        "idx": 718,
        "db_id": "world_1",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "evidence": "",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "pred": "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'",
        "repair_result": 1
    },
    {
        "idx": 719,
        "db_id": "world_1",
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "evidence": "",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "pred": "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'",
        "repair_result": 1
    },
    {
        "idx": 720,
        "db_id": "world_1",
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "pred": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 721,
        "db_id": "world_1",
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "pred": "SELECT `Name` FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 722,
        "db_id": "world_1",
        "question": "What is the total population and maximum GNP in Asia?",
        "evidence": "",
        "gold": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "pred": "SELECT SUM(city.`Population`), MAX(country.`GNP`) FROM city JOIN country ON city.`CountryCode` = country.`Code` WHERE country.`Continent` = 'Asia'",
        "pred_result": 0,
        "repair_sql": "SELECT SUM(city.`Population`), MAX(country.`GNP`) FROM city JOIN country ON city.`CountryCode` = country.`Code` WHERE country.`Continent` = 'Asia'",
        "repair_result": 0
    },
    {
        "idx": 723,
        "db_id": "world_1",
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "evidence": "",
        "gold": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "pred": "SELECT SUM(city.`Population`), MAX(country.`GNP`) FROM city JOIN country ON city.`CountryCode` = country.`Code` WHERE country.`Continent` = 'Asia'",
        "pred_result": 0,
        "repair_sql": "SELECT SUM(city.`Population`), MAX(country.`GNP`) FROM city JOIN country ON city.`CountryCode` = country.`Code` WHERE country.`Continent` = 'Asia'",
        "repair_result": 0
    },
    {
        "idx": 724,
        "db_id": "world_1",
        "question": "What is the average life expectancy in African countries that are republics?",
        "evidence": "",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "pred": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
        "repair_result": 1
    },
    {
        "idx": 725,
        "db_id": "world_1",
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "evidence": "",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "pred": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
        "repair_result": 1
    },
    {
        "idx": 726,
        "db_id": "world_1",
        "question": "What is the total surface area of the continents Asia and Europe?",
        "evidence": "",
        "gold": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "pred": "SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')",
        "repair_result": 1
    },
    {
        "idx": 727,
        "db_id": "world_1",
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "evidence": "",
        "gold": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "pred": "SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')",
        "repair_result": 1
    },
    {
        "idx": 728,
        "db_id": "world_1",
        "question": "How many people live in Gelderland district?",
        "evidence": "",
        "gold": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "pred": "SELECT SUM(Population) FROM city WHERE District = 'Gelderland'",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(Population) FROM city WHERE District = 'Gelderland'",
        "repair_result": 1
    },
    {
        "idx": 729,
        "db_id": "world_1",
        "question": "What is the total population of Gelderland district?",
        "evidence": "",
        "gold": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "pred": "SELECT SUM(city.`Population`) FROM city WHERE city.`District` = 'Gelderland'",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(city.`Population`) FROM city WHERE city.`District` = 'Gelderland'",
        "repair_result": 1
    },
    {
        "idx": 730,
        "db_id": "world_1",
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "evidence": "",
        "gold": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "pred": "SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'Dependent Territory of the UK'",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'Dependent Territory of the UK'",
        "repair_result": 0
    },
    {
        "idx": 731,
        "db_id": "world_1",
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "evidence": "",
        "gold": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "pred": "SELECT AVG(GNP) AS Mean_GNP, SUM(Population) AS Total_Population FROM country WHERE GovernmentForm = 'Dependent Territory of the UK'",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(GNP) AS Mean_GNP, SUM(Population) AS Total_Population FROM country WHERE GovernmentForm = 'Dependent Territory of the UK'",
        "repair_result": 0
    },
    {
        "idx": 732,
        "db_id": "world_1",
        "question": "How many unique languages are spoken in the world?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "pred": "SELECT COUNT(DISTINCT Language) FROM countrylanguage",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Language) FROM countrylanguage",
        "repair_result": 1
    },
    {
        "idx": 733,
        "db_id": "world_1",
        "question": "What is the number of distinct languages used around the world?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "pred": "SELECT COUNT(DISTINCT `Language`) FROM countrylanguage",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT `Language`) FROM countrylanguage",
        "repair_result": 1
    },
    {
        "idx": 734,
        "db_id": "world_1",
        "question": "How many type of governments are in Africa?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "pred": "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "repair_result": 1
    },
    {
        "idx": 735,
        "db_id": "world_1",
        "question": "How many different forms of governments are there in Africa?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "pred": "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "repair_result": 1
    },
    {
        "idx": 736,
        "db_id": "world_1",
        "question": "What is the total number of languages used in Aruba?",
        "evidence": "",
        "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "pred": "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'",
        "repair_result": 0
    },
    {
        "idx": 737,
        "db_id": "world_1",
        "question": "How many languages are spoken in Aruba?",
        "evidence": "",
        "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "pred": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW'",
        "repair_result": 1
    },
    {
        "idx": 738,
        "db_id": "world_1",
        "question": "How many official languages does Afghanistan have?",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "pred": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AF' AND IsOfficial = 'T'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AF' AND IsOfficial = 'T'",
        "repair_result": 0
    },
    {
        "idx": 739,
        "db_id": "world_1",
        "question": "How many official languages are spoken in Afghanistan?",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "pred": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AF' AND IsOfficial = 'T'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AF' AND IsOfficial = 'T'",
        "repair_result": 0
    },
    {
        "idx": 740,
        "db_id": "world_1",
        "question": "What is name of the country that speaks the largest number of languages?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT c.Name FROM country c JOIN ( SELECT CountryCode, COUNT(Language) AS num_languages FROM countrylanguage GROUP BY CountryCode ORDER BY num_languages DESC LIMIT 1 ) cl ON c.Code = cl.CountryCode",
        "pred_result": 0,
        "repair_sql": "SELECT c.Name FROM country c JOIN ( SELECT CountryCode, COUNT(Language) AS num_languages FROM countrylanguage GROUP BY CountryCode ORDER BY num_languages DESC LIMIT 1 ) cl ON c.Code = cl.CountryCode",
        "repair_result": 0
    },
    {
        "idx": 741,
        "db_id": "world_1",
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT country.`Name` FROM country JOIN ( SELECT CountryCode, COUNT(Language) AS num_languages FROM countrylanguage GROUP BY CountryCode ORDER BY num_languages DESC LIMIT 1 ) AS max_languages ON country.`Code` = max_languages.CountryCode",
        "pred_result": 0,
        "repair_sql": "SELECT country.`Name` FROM country JOIN ( SELECT CountryCode, COUNT(Language) AS num_languages FROM countrylanguage GROUP BY CountryCode ORDER BY num_languages DESC LIMIT 1 ) AS max_languages ON country.`Code` = max_languages.CountryCode",
        "repair_result": 0
    },
    {
        "idx": 742,
        "db_id": "world_1",
        "question": "Which continent has the most diverse languages?",
        "evidence": "",
        "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT Continent FROM country GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1",
        "pred_result": "no such column: Language",
        "repair_sql": "SELECT c.Continent FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY COUNT(DISTINCT cl.Language) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 743,
        "db_id": "world_1",
        "question": "Which continent speaks the most languages?",
        "evidence": "",
        "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT Continent, COUNT(DISTINCT Language) AS Num_Languages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY Num_Languages DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT Continent, COUNT(DISTINCT Language) AS Num_Languages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY Num_Languages DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 744,
        "db_id": "world_1",
        "question": "How many countries speak both English and Dutch?",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "pred": "SELECT COUNT(*) FROM countrylanguage WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM countrylanguage WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2",
        "repair_result": 0
    },
    {
        "idx": 745,
        "db_id": "world_1",
        "question": "What is the number of nations that use English and Dutch?",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "pred": "SELECT COUNT(DISTINCT c1.`Code`) AS Number_of_Nations FROM countrylanguage AS cl1 JOIN countrylanguage AS cl2 ON cl1.`CountryCode` = cl2.`CountryCode` JOIN country AS c1 ON cl1.`CountryCode` = c1.`Code` JOIN country AS c2 ON cl2.`CountryCode` = c2.`Code` WHERE cl1.`Language` = 'English' AND cl2.`Language` = 'Dutch'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT c1.`Code`) AS Number_of_Nations FROM countrylanguage AS cl1 JOIN countrylanguage AS cl2 ON cl1.`CountryCode` = cl2.`CountryCode` JOIN country AS c1 ON cl1.`CountryCode` = c1.`Code` JOIN country AS c2 ON cl2.`CountryCode` = c2.`Code` WHERE cl1.`Language` = 'English' AND cl2.`Language` = 'Dutch'",
        "repair_result": 1
    },
    {
        "idx": 746,
        "db_id": "world_1",
        "question": "What are the names of nations speak both English and French?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "pred": "SELECT DISTINCT c1.`Name` FROM country c1 JOIN countrylanguage cl1 ON c1.`Code` = cl1.`CountryCode` AND cl1.`Language` = 'English' JOIN countrylanguage cl2 ON c1.`Code` = cl2.`CountryCode` AND cl2.`Language` = 'French'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT c1.`Name` FROM country c1 JOIN countrylanguage cl1 ON c1.`Code` = cl1.`CountryCode` AND cl1.`Language` = 'English' JOIN countrylanguage cl2 ON c1.`Code` = cl2.`CountryCode` AND cl2.`Language` = 'French'",
        "repair_result": 1
    },
    {
        "idx": 747,
        "db_id": "world_1",
        "question": "Give the names of nations that speak both English and French.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "pred": "SELECT DISTINCT c1.`Name` FROM country c1 JOIN countrylanguage cl1 ON c1.`Code` = cl1.`CountryCode` AND cl1.`Language` = 'English' JOIN countrylanguage cl2 ON c1.`Code` = cl2.`CountryCode` AND cl2.`Language` = 'French'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT c1.`Name` FROM country c1 JOIN countrylanguage cl1 ON c1.`Code` = cl1.`CountryCode` AND cl1.`Language` = 'English' JOIN countrylanguage cl2 ON c1.`Code` = cl2.`CountryCode` AND cl2.`Language` = 'French'",
        "repair_result": 1
    },
    {
        "idx": 748,
        "db_id": "world_1",
        "question": "What are the names of nations where both English and French are official languages?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "pred": "SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'",
        "repair_result": 1
    },
    {
        "idx": 749,
        "db_id": "world_1",
        "question": "Give the names of countries with English and French as official languages.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "pred": "SELECT DISTINCT c.`Name` FROM country c JOIN countrylanguage cl1 ON c.`Code` = cl1.`CountryCode` AND cl1.`Language` = 'English' AND cl1.`IsOfficial` = 'T' JOIN countrylanguage cl2 ON c.`Code` = cl2.`CountryCode` AND cl2.`Language` = 'French' AND cl2.`IsOfficial` = 'T'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT c.`Name` FROM country c JOIN countrylanguage cl1 ON c.`Code` = cl1.`CountryCode` AND cl1.`Language` = 'English' AND cl1.`IsOfficial` = 'T' JOIN countrylanguage cl2 ON c.`Code` = cl2.`CountryCode` AND cl2.`Language` = 'French' AND cl2.`IsOfficial` = 'T'",
        "repair_result": 1
    },
    {
        "idx": 750,
        "db_id": "world_1",
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "evidence": "",
        "gold": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "pred": "SELECT COUNT(DISTINCT Continent) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Continent) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese')",
        "repair_result": 1
    },
    {
        "idx": 751,
        "db_id": "world_1",
        "question": "How many continents speak Chinese?",
        "evidence": "",
        "gold": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "pred": "SELECT COUNT(DISTINCT c.Continent) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language = 'Chinese'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT c.Continent) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language = 'Chinese'",
        "repair_result": 1
    },
    {
        "idx": 752,
        "db_id": "world_1",
        "question": "What are the regions that use English or Dutch?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "pred": "SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch')",
        "repair_result": 1
    },
    {
        "idx": 753,
        "db_id": "world_1",
        "question": "Which regions speak Dutch or English?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "pred": "SELECT DISTINCT c.Region FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language IN ('Dutch', 'English')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT c.Region FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language IN ('Dutch', 'English')",
        "repair_result": 1
    },
    {
        "idx": 754,
        "db_id": "world_1",
        "question": "What are the countries where either English or Dutch is the official language ?",
        "evidence": "",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "pred": "SELECT DISTINCT c.`Name` FROM country c JOIN countrylanguage cl ON c.`Code` = cl.`CountryCode` WHERE cl.`Language` = 'English' OR cl.`Language` = 'Dutch' AND cl.`IsOfficial` = 'T'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT c.`Name` FROM country c JOIN countrylanguage cl ON c.`Code` = cl.`CountryCode` WHERE cl.`Language` = 'English' OR cl.`Language` = 'Dutch' AND cl.`IsOfficial` = 'T'",
        "repair_result": 0
    },
    {
        "idx": 755,
        "db_id": "world_1",
        "question": "Which countries have either English or Dutch as an official language?",
        "evidence": "",
        "gold": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "pred": "SELECT DISTINCT c.`Name` FROM country c JOIN countrylanguage cl ON c.`Code` = cl.`CountryCode` WHERE cl.`Language` IN ('English', 'Dutch') AND cl.`IsOfficial` = 'T'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT c.`Name` FROM country c JOIN countrylanguage cl ON c.`Code` = cl.`CountryCode` WHERE cl.`Language` IN ('English', 'Dutch') AND cl.`IsOfficial` = 'T'",
        "repair_result": 0
    },
    {
        "idx": 756,
        "db_id": "world_1",
        "question": "Which language is the most popular on the Asian continent?",
        "evidence": "",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "pred": "SELECT `Language` FROM countrylanguage JOIN country ON countrylanguage.`CountryCode` = country.`Code` WHERE country.`Continent` = 'Asia' ORDER BY `Percentage` DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Language` FROM countrylanguage JOIN country ON countrylanguage.`CountryCode` = country.`Code` WHERE country.`Continent` = 'Asia' ORDER BY `Percentage` DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 757,
        "db_id": "world_1",
        "question": "What is the language that is used by the largest number of Asian nations?",
        "evidence": "",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "pred": "SELECT Language FROM countrylanguage WHERE CountryCode IN ( SELECT Code FROM country WHERE Continent = 'Asia' ) GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT Language FROM countrylanguage WHERE CountryCode IN ( SELECT Code FROM country WHERE Continent = 'Asia' ) GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 758,
        "db_id": "world_1",
        "question": "Which languages are spoken by only one country in republic governments?",
        "evidence": "",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "pred": "SELECT DISTINCT cl.`Language` FROM countrylanguage cl JOIN country c ON cl.`CountryCode` = c.`Code` WHERE cl.`IsOfficial` = 'T' AND c.`GovernmentForm` = 'Republic' AND cl.`Language` NOT IN ( SELECT cl2.`Language` FROM countrylanguage cl2 JOIN country c2 ON cl2.`CountryCode` = c2.`Code` WHERE cl2.`IsOfficial` = 'T' GROUP BY cl2.`Language` HAVING COUNT(DISTINCT c2.`Code`) > 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT cl.`Language` FROM countrylanguage cl JOIN country c ON cl.`CountryCode` = c.`Code` WHERE cl.`IsOfficial` = 'T' AND c.`GovernmentForm` = 'Republic' AND cl.`Language` NOT IN ( SELECT cl2.`Language` FROM countrylanguage cl2 JOIN country c2 ON cl2.`CountryCode` = c2.`Code` WHERE cl2.`IsOfficial` = 'T' GROUP BY cl2.`Language` HAVING COUNT(DISTINCT c2.`Code`) > 1 )",
        "repair_result": 0
    },
    {
        "idx": 759,
        "db_id": "world_1",
        "question": "What languages are only used by a single country with a republic government?",
        "evidence": "",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "pred": "SELECT DISTINCT cl.`Language` FROM countrylanguage cl JOIN country c ON cl.`CountryCode` = c.`Code` WHERE c.`GovernmentForm` = 'Republic' GROUP BY cl.`Language` HAVING COUNT(DISTINCT c.`Code`) = 1",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT cl.`Language` FROM countrylanguage cl JOIN country c ON cl.`CountryCode` = c.`Code` WHERE c.`GovernmentForm` = 'Republic' GROUP BY cl.`Language` HAVING COUNT(DISTINCT c.`Code`) = 1",
        "repair_result": 1
    },
    {
        "idx": 760,
        "db_id": "world_1",
        "question": "Find the city with the largest population that uses English.",
        "evidence": "",
        "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "pred": "SELECT city.`Name` FROM city JOIN countrylanguage ON city.`CountryCode` = countrylanguage.`CountryCode` WHERE countrylanguage.`Language` = 'English' ORDER BY city.`Population` DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT city.`Name` FROM city JOIN countrylanguage ON city.`CountryCode` = countrylanguage.`CountryCode` WHERE countrylanguage.`Language` = 'English' ORDER BY city.`Population` DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 761,
        "db_id": "world_1",
        "question": "What is the most populace city that speaks English?",
        "evidence": "",
        "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "pred": "SELECT city.`Name` FROM city JOIN countrylanguage ON city.`CountryCode` = countrylanguage.`CountryCode` WHERE countrylanguage.`Language` = 'English' ORDER BY city.`Population` DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT city.`Name` FROM city JOIN countrylanguage ON city.`CountryCode` = countrylanguage.`CountryCode` WHERE countrylanguage.`Language` = 'English' ORDER BY city.`Population` DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 762,
        "db_id": "world_1",
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "evidence": "",
        "gold": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "pred": "SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 763,
        "db_id": "world_1",
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "evidence": "",
        "gold": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "pred": "SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 764,
        "db_id": "world_1",
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "evidence": "",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "pred": "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "repair_result": 1
    },
    {
        "idx": 765,
        "db_id": "world_1",
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "evidence": "",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "pred": "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "repair_result": 1
    },
    {
        "idx": 766,
        "db_id": "world_1",
        "question": "What is the total number of people living in the nations that do not use English?",
        "evidence": "",
        "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "pred": "SELECT SUM(Population) FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English'))",
        "pred_result": 0,
        "repair_sql": "SELECT SUM(Population) FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English'))",
        "repair_result": 0
    },
    {
        "idx": 767,
        "db_id": "world_1",
        "question": "How many people live in countries that do not speak English?",
        "evidence": "",
        "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "pred": "SELECT SUM(Population) FROM city WHERE CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "pred_result": 0,
        "repair_sql": "SELECT SUM(Population) FROM city WHERE CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "repair_result": 0
    },
    {
        "idx": 768,
        "db_id": "world_1",
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "evidence": "",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "pred": "SELECT cl.`Language` FROM countrylanguage AS cl JOIN country AS c ON cl.`CountryCode` = c.`Code` WHERE c.`HeadOfState` = 'Beatrix' AND cl.`IsOfficial` = 'T'",
        "pred_result": 1,
        "repair_sql": "SELECT cl.`Language` FROM countrylanguage AS cl JOIN country AS c ON cl.`CountryCode` = c.`Code` WHERE c.`HeadOfState` = 'Beatrix' AND cl.`IsOfficial` = 'T'",
        "repair_result": 1
    },
    {
        "idx": 769,
        "db_id": "world_1",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "evidence": "",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "pred": "SELECT cl.`Language` FROM countrylanguage AS cl JOIN country AS c ON cl.`CountryCode` = c.`Code` WHERE c.`HeadOfState` = 'Beatrix' AND cl.`IsOfficial` = 'T'",
        "pred_result": 1,
        "repair_sql": "SELECT cl.`Language` FROM countrylanguage AS cl JOIN country AS c ON cl.`CountryCode` = c.`Code` WHERE c.`HeadOfState` = 'Beatrix' AND cl.`IsOfficial` = 'T'",
        "repair_result": 1
    },
    {
        "idx": 770,
        "db_id": "world_1",
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "pred": "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)",
        "repair_result": 1
    },
    {
        "idx": 771,
        "db_id": "world_1",
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "pred": "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)",
        "repair_result": 0
    },
    {
        "idx": 772,
        "db_id": "world_1",
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "pred": "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')",
        "pred_result": 0,
        "repair_sql": "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')",
        "repair_result": 0
    },
    {
        "idx": 773,
        "db_id": "world_1",
        "question": "Which countries have greater area than that of any country in Europe?",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "pred": "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')",
        "pred_result": 0,
        "repair_sql": "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')",
        "repair_result": 0
    },
    {
        "idx": 774,
        "db_id": "world_1",
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
        "pred": "SELECT c1.`Name` FROM country AS c1 WHERE c1.`Continent` = 'Africa' AND c1.`Population` < (SELECT MIN(c2.`Population`) FROM country AS c2 WHERE c2.`Continent` = 'Asia')",
        "pred_result": 0,
        "repair_sql": "SELECT c1.`Name` FROM country AS c1 WHERE c1.`Continent` = 'Africa' AND c1.`Population` < (SELECT MIN(c2.`Population`) FROM country AS c2 WHERE c2.`Continent` = 'Asia')",
        "repair_result": 0
    },
    {
        "idx": 775,
        "db_id": "world_1",
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
        "pred": "SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Africa' AND c1.Population < (SELECT MIN(c2.Population) FROM country c2 WHERE c2.Continent = 'Asia')",
        "pred_result": 1,
        "repair_sql": "SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Africa' AND c1.Population < (SELECT MIN(c2.Population) FROM country c2 WHERE c2.Continent = 'Asia')",
        "repair_result": 1
    },
    {
        "idx": 776,
        "db_id": "world_1",
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
        "pred": "SELECT c1.`Name` FROM country c1 WHERE c1.`Continent` = 'Asia' AND c1.`Population` > ( SELECT MAX(c2.`Population`) FROM country c2 WHERE c2.`Continent` = 'Africa' )",
        "pred_result": 1,
        "repair_sql": "SELECT c1.`Name` FROM country c1 WHERE c1.`Continent` = 'Asia' AND c1.`Population` > ( SELECT MAX(c2.`Population`) FROM country c2 WHERE c2.`Continent` = 'Africa' )",
        "repair_result": 1
    },
    {
        "idx": 777,
        "db_id": "world_1",
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
        "pred": "SELECT c1.`Name` FROM country c1 WHERE c1.`Continent` = 'Asia' AND c1.`Population` > (SELECT MAX(c2.`Population`) FROM country c2 WHERE c2.`Continent` = 'Africa')",
        "pred_result": 0,
        "repair_sql": "SELECT c1.`Name` FROM country c1 WHERE c1.`Continent` = 'Asia' AND c1.`Population` > (SELECT MAX(c2.`Population`) FROM country c2 WHERE c2.`Continent` = 'Africa')",
        "repair_result": 0
    },
    {
        "idx": 778,
        "db_id": "world_1",
        "question": "What are the country codes for countries that do not speak English?",
        "evidence": "",
        "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "pred": "SELECT DISTINCT c.`Code` FROM country c WHERE c.`Code` NOT IN ( SELECT cl.`CountryCode` FROM countrylanguage cl WHERE cl.`Language` = 'English' )",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT c.`Code` FROM country c WHERE c.`Code` NOT IN ( SELECT cl.`CountryCode` FROM countrylanguage cl WHERE cl.`Language` = 'English' )",
        "repair_result": 0
    },
    {
        "idx": 779,
        "db_id": "world_1",
        "question": "Return the country codes for countries that do not speak English.",
        "evidence": "",
        "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "pred": "SELECT DISTINCT c.`Code` FROM country c WHERE c.`Code` NOT IN ( SELECT cl.`CountryCode` FROM countrylanguage cl WHERE cl.`Language` = 'English' AND cl.`IsOfficial` = 'T' )",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT c.`Code` FROM country c WHERE c.`Code` NOT IN ( SELECT cl.`CountryCode` FROM countrylanguage cl WHERE cl.`Language` = 'English' AND cl.`IsOfficial` = 'T' )",
        "repair_result": 0
    },
    {
        "idx": 780,
        "db_id": "world_1",
        "question": "What are the country codes of countries where people use languages other than English?",
        "evidence": "",
        "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "pred": "SELECT DISTINCT country.`Code` FROM country WHERE country.`Code` IN (SELECT DISTINCT countrylanguage.`CountryCode` FROM countrylanguage WHERE countrylanguage.`Language` <> 'English')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT country.`Code` FROM country WHERE country.`Code` IN (SELECT DISTINCT countrylanguage.`CountryCode` FROM countrylanguage WHERE countrylanguage.`Language` <> 'English')",
        "repair_result": 1
    },
    {
        "idx": 781,
        "db_id": "world_1",
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "evidence": "",
        "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "pred": "SELECT DISTINCT c.`Code` FROM country c JOIN countrylanguage cl ON c.`Code` = cl.`CountryCode` WHERE cl.`Language` <> 'English'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT c.`Code` FROM country c JOIN countrylanguage cl ON c.`Code` = cl.`CountryCode` WHERE cl.`Language` <> 'English'",
        "repair_result": 1
    },
    {
        "idx": 782,
        "db_id": "world_1",
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "evidence": "",
        "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "pred": "SELECT DISTINCT c.`Code` FROM country c JOIN countrylanguage cl ON c.`Code` = cl.`CountryCode` WHERE cl.`Language` != 'English' AND c.`GovernmentForm` != 'Republic'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT c.`Code` FROM country c JOIN countrylanguage cl ON c.`Code` = cl.`CountryCode` WHERE cl.`Language` != 'English' AND c.`GovernmentForm` != 'Republic'",
        "repair_result": 0
    },
    {
        "idx": 783,
        "db_id": "world_1",
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "evidence": "",
        "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "pred": "SELECT DISTINCT c.`Code` FROM country c LEFT JOIN countrylanguage cl ON c.`Code` = cl.`CountryCode` WHERE cl.`Language` != 'English' AND c.`GovernmentForm` != 'Republic'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT c.`Code` FROM country c LEFT JOIN countrylanguage cl ON c.`Code` = cl.`CountryCode` WHERE cl.`Language` != 'English' AND c.`GovernmentForm` != 'Republic'",
        "repair_result": 0
    },
    {
        "idx": 784,
        "db_id": "world_1",
        "question": "Which cities are in European countries where English is not the official language?",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "pred": "SELECT city.`Name` FROM city JOIN country ON city.`CountryCode` = country.`Code` LEFT JOIN countrylanguage ON city.`CountryCode` = countrylanguage.`CountryCode` WHERE country.`Continent` = 'Europe' AND countrylanguage.`Language` != 'English' OR countrylanguage.`IsOfficial` != 'T'",
        "pred_result": 0,
        "repair_sql": "SELECT city.`Name` FROM city JOIN country ON city.`CountryCode` = country.`Code` LEFT JOIN countrylanguage ON city.`CountryCode` = countrylanguage.`CountryCode` WHERE country.`Continent` = 'Europe' AND countrylanguage.`Language` != 'English' OR countrylanguage.`IsOfficial` != 'T'",
        "repair_result": 0
    },
    {
        "idx": 785,
        "db_id": "world_1",
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "pred": "SELECT city.`Name` FROM city JOIN country ON city.`CountryCode` = country.`Code` JOIN countrylanguage ON country.`Code` = countrylanguage.`CountryCode` WHERE country.`Continent` = 'Europe' AND countrylanguage.`Language` = 'English' AND countrylanguage.`IsOfficial` = 'F'",
        "pred_result": 0,
        "repair_sql": "SELECT city.`Name` FROM city JOIN country ON city.`CountryCode` = country.`Code` JOIN countrylanguage ON country.`Code` = countrylanguage.`CountryCode` WHERE country.`Continent` = 'Europe' AND countrylanguage.`Language` = 'English' AND countrylanguage.`IsOfficial` = 'F'",
        "repair_result": 0
    },
    {
        "idx": 786,
        "db_id": "world_1",
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "evidence": "",
        "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "pred": "SELECT DISTINCT c.`Name` FROM city c JOIN country co ON c.`CountryCode` = co.`Code` JOIN countrylanguage cl ON co.`Code` = cl.`CountryCode` WHERE co.`Continent` = 'Asia' AND cl.`Language` = 'Chinese' AND cl.`IsOfficial` = 'T'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT c.`Name` FROM city c JOIN country co ON c.`CountryCode` = co.`Code` JOIN countrylanguage cl ON co.`Code` = cl.`CountryCode` WHERE co.`Continent` = 'Asia' AND cl.`Language` = 'Chinese' AND cl.`IsOfficial` = 'T'",
        "repair_result": 0
    },
    {
        "idx": 787,
        "db_id": "world_1",
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "evidence": "",
        "gold": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "pred": "SELECT DISTINCT city.`Name` FROM city JOIN country ON city.`CountryCode` = country.`Code` JOIN countrylanguage ON country.`Code` = countrylanguage.`CountryCode` WHERE country.`Continent` = 'Asia' AND countrylanguage.`Language` = 'Chinese' AND countrylanguage.`IsOfficial` = 'T'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT city.`Name` FROM city JOIN country ON city.`CountryCode` = country.`Code` JOIN countrylanguage ON country.`Code` = countrylanguage.`CountryCode` WHERE country.`Continent` = 'Asia' AND countrylanguage.`Language` = 'Chinese' AND countrylanguage.`IsOfficial` = 'T'",
        "repair_result": 1
    },
    {
        "idx": 788,
        "db_id": "world_1",
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "evidence": "",
        "gold": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "pred": "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)",
        "pred_result": 0,
        "repair_sql": "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)",
        "repair_result": 0
    },
    {
        "idx": 789,
        "db_id": "world_1",
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "evidence": "",
        "gold": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "pred": "SELECT `Name`, `IndepYear`, `SurfaceArea` FROM country WHERE `Population` = (SELECT MIN(`Population`) FROM country)",
        "pred_result": 0,
        "repair_sql": "SELECT `Name`, `IndepYear`, `SurfaceArea` FROM country WHERE `Population` = (SELECT MIN(`Population`) FROM country)",
        "repair_result": 0
    },
    {
        "idx": 790,
        "db_id": "world_1",
        "question": "What are the population, name and leader of the country with the largest area?",
        "evidence": "",
        "gold": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "pred": "SELECT c.Population, c.Name, c.HeadOfState FROM country c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)",
        "pred_result": 0,
        "repair_sql": "SELECT c.Population, c.Name, c.HeadOfState FROM country c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)",
        "repair_result": 0
    },
    {
        "idx": 791,
        "db_id": "world_1",
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "evidence": "",
        "gold": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "pred": "SELECT c.Name, c.Population, c.HeadOfState FROM country c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)",
        "pred_result": 1,
        "repair_sql": "SELECT c.Name, c.Population, c.HeadOfState FROM country c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)",
        "repair_result": 1
    },
    {
        "idx": 792,
        "db_id": "world_1",
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "evidence": "",
        "gold": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "pred": "SELECT c.`Name`, COUNT(cl.`Language`) AS num_languages FROM country c JOIN countrylanguage cl ON c.`Code` = cl.`CountryCode` GROUP BY c.`Name` HAVING COUNT(cl.`Language`) >= 3",
        "pred_result": 0,
        "repair_sql": "SELECT c.`Name`, COUNT(cl.`Language`) AS num_languages FROM country c JOIN countrylanguage cl ON c.`Code` = cl.`CountryCode` GROUP BY c.`Name` HAVING COUNT(cl.`Language`) >= 3",
        "repair_result": 0
    },
    {
        "idx": 793,
        "db_id": "world_1",
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "evidence": "",
        "gold": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "pred": "SELECT country.`Name`, COUNT(countrylanguage.`Language`) AS num_languages FROM country JOIN countrylanguage ON country.`Code` = countrylanguage.`CountryCode` GROUP BY country.`Name` HAVING COUNT(countrylanguage.`Language`) > 2",
        "pred_result": 0,
        "repair_sql": "SELECT country.`Name`, COUNT(countrylanguage.`Language`) AS num_languages FROM country JOIN countrylanguage ON country.`Code` = countrylanguage.`CountryCode` GROUP BY country.`Name` HAVING COUNT(countrylanguage.`Language`) > 2",
        "repair_result": 0
    },
    {
        "idx": 794,
        "db_id": "world_1",
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "evidence": "",
        "gold": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "pred": "SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District",
        "pred_result": 0,
        "repair_sql": "SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District",
        "repair_result": 0
    },
    {
        "idx": 795,
        "db_id": "world_1",
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "evidence": "",
        "gold": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "pred": "SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District",
        "pred_result": 0,
        "repair_sql": "SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District",
        "repair_result": 0
    },
    {
        "idx": 796,
        "db_id": "world_1",
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "evidence": "",
        "gold": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "pred": "SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm",
        "pred_result": 0,
        "repair_sql": "SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm",
        "repair_result": 0
    },
    {
        "idx": 797,
        "db_id": "world_1",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "evidence": "",
        "gold": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "pred": "SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm",
        "pred_result": 0,
        "repair_sql": "SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm",
        "repair_result": 0
    },
    {
        "idx": 798,
        "db_id": "world_1",
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "evidence": "",
        "gold": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "pred": "SELECT c.Continent, AVG(c.LifeExpectancy) AS AvgLifeExpectancy, SUM(c.Population) AS TotalPopulation FROM country c WHERE c.Continent IN ( SELECT c2.Continent FROM country c2 GROUP BY c2.Continent HAVING AVG(c2.LifeExpectancy) < 72 ) GROUP BY c.Continent",
        "pred_result": 0,
        "repair_sql": "SELECT c.Continent, AVG(c.LifeExpectancy) AS AvgLifeExpectancy, SUM(c.Population) AS TotalPopulation FROM country c WHERE c.Continent IN ( SELECT c2.Continent FROM country c2 GROUP BY c2.Continent HAVING AVG(c2.LifeExpectancy) < 72 ) GROUP BY c.Continent",
        "repair_result": 0
    },
    {
        "idx": 799,
        "db_id": "world_1",
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "evidence": "",
        "gold": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "pred": "SELECT c.Continent, SUM(c.Population) AS Total_Population, AVG(c.LifeExpectancy) AS Average_Life_Expectancy FROM country AS c WHERE c.Continent IN ( SELECT Continent FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72 ) GROUP BY c.Continent",
        "pred_result": 0,
        "repair_sql": "SELECT c.Continent, SUM(c.Population) AS Total_Population, AVG(c.LifeExpectancy) AS Average_Life_Expectancy FROM country AS c WHERE c.Continent IN ( SELECT Continent FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72 ) GROUP BY c.Continent",
        "repair_result": 0
    },
    {
        "idx": 800,
        "db_id": "world_1",
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "evidence": "",
        "gold": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "pred": "SELECT `Name`, `SurfaceArea` FROM country ORDER BY `SurfaceArea` DESC LIMIT 5",
        "pred_result": 1,
        "repair_sql": "SELECT `Name`, `SurfaceArea` FROM country ORDER BY `SurfaceArea` DESC LIMIT 5",
        "repair_result": 1
    },
    {
        "idx": 801,
        "db_id": "world_1",
        "question": "Return the names and surface areas of the 5 largest countries.",
        "evidence": "",
        "gold": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "pred": "SELECT `Name`, `SurfaceArea` FROM country ORDER BY `SurfaceArea` DESC LIMIT 5",
        "pred_result": 1,
        "repair_sql": "SELECT `Name`, `SurfaceArea` FROM country ORDER BY `SurfaceArea` DESC LIMIT 5",
        "repair_result": 1
    },
    {
        "idx": 802,
        "db_id": "world_1",
        "question": "What are names of countries with the top 3 largest population?",
        "evidence": "",
        "gold": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "pred": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "pred_result": 1,
        "repair_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "repair_result": 1
    },
    {
        "idx": 803,
        "db_id": "world_1",
        "question": "Return the names of the 3 most populated countries.",
        "evidence": "",
        "gold": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "pred": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "pred_result": 1,
        "repair_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "repair_result": 1
    },
    {
        "idx": 804,
        "db_id": "world_1",
        "question": "What are the names of the nations with the 3 lowest populations?",
        "evidence": "",
        "gold": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "pred": "SELECT `Name` FROM country ORDER BY `Population` ASC LIMIT 3",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM country ORDER BY `Population` ASC LIMIT 3",
        "repair_result": 1
    },
    {
        "idx": 805,
        "db_id": "world_1",
        "question": "Return the names of the 3 countries with the fewest people.",
        "evidence": "",
        "gold": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "pred": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "pred_result": 1,
        "repair_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "repair_result": 1
    },
    {
        "idx": 806,
        "db_id": "world_1",
        "question": "how many countries are in Asia?",
        "evidence": "",
        "gold": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "pred": "SELECT COUNT(*) FROM country WHERE Continent = 'Asia'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM country WHERE Continent = 'Asia'",
        "repair_result": 1
    },
    {
        "idx": 807,
        "db_id": "world_1",
        "question": "Count the number of countries in Asia.",
        "evidence": "",
        "gold": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "pred": "SELECT COUNT(*) FROM country WHERE Continent = 'Asia'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM country WHERE Continent = 'Asia'",
        "repair_result": 1
    },
    {
        "idx": 808,
        "db_id": "world_1",
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "pred": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000",
        "pred_result": 1,
        "repair_sql": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000",
        "repair_result": 1
    },
    {
        "idx": 809,
        "db_id": "world_1",
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "pred": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000",
        "pred_result": 1,
        "repair_sql": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000",
        "repair_result": 1
    },
    {
        "idx": 810,
        "db_id": "world_1",
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "evidence": "",
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "pred": "SELECT SUM(country.Population) AS total_population, AVG(country.SurfaceArea) AS average_area FROM country WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000",
        "pred_result": 0,
        "repair_sql": "SELECT SUM(country.Population) AS total_population, AVG(country.SurfaceArea) AS average_area FROM country WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000",
        "repair_result": 0
    },
    {
        "idx": 811,
        "db_id": "world_1",
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "evidence": "",
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "pred": "SELECT SUM(country.`Population`) AS total_population, AVG(country.`SurfaceArea`) AS average_surface_area FROM country WHERE country.`Continent` = 'North America' AND country.`SurfaceArea` > 3000",
        "pred_result": 0,
        "repair_sql": "SELECT SUM(country.`Population`) AS total_population, AVG(country.`SurfaceArea`) AS average_surface_area FROM country WHERE country.`Continent` = 'North America' AND country.`SurfaceArea` > 3000",
        "repair_result": 0
    },
    {
        "idx": 812,
        "db_id": "world_1",
        "question": "What are the cities whose population is between 160000 and 900000?",
        "evidence": "",
        "gold": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "pred": "SELECT `Name` FROM city WHERE `Population` BETWEEN 160000 AND 900000",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM city WHERE `Population` BETWEEN 160000 AND 900000",
        "repair_result": 1
    },
    {
        "idx": 813,
        "db_id": "world_1",
        "question": "Return the names of cities that have a population between 160000 and 900000 .",
        "evidence": "",
        "gold": "select name from city where population between 160000 and 900000",
        "pred": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "pred_result": 1,
        "repair_sql": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "repair_result": 1
    },
    {
        "idx": 814,
        "db_id": "world_1",
        "question": "Which language is spoken by the largest number of countries?",
        "evidence": "",
        "gold": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `Language`, COUNT(DISTINCT `CountryCode`) AS num_countries FROM countrylanguage GROUP BY `Language` ORDER BY num_countries DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Language`, COUNT(DISTINCT `CountryCode`) AS num_countries FROM countrylanguage GROUP BY `Language` ORDER BY num_countries DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 815,
        "db_id": "world_1",
        "question": "Give the language that is spoken in the most countries.",
        "evidence": "",
        "gold": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `Language`, COUNT(DISTINCT countrylanguage.`CountryCode`) AS num_countries FROM countrylanguage GROUP BY `Language` ORDER BY num_countries DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Language`, COUNT(DISTINCT countrylanguage.`CountryCode`) AS num_countries FROM countrylanguage GROUP BY `Language` ORDER BY num_countries DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 816,
        "db_id": "world_1",
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "evidence": "",
        "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "pred": "SELECT c.Name AS Country, cl.Language AS Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = c.Code)",
        "pred_result": 0,
        "repair_sql": "SELECT c.Name AS Country, cl.Language AS Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = c.Code)",
        "repair_result": 0
    },
    {
        "idx": 817,
        "db_id": "world_1",
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "evidence": "",
        "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "pred": "SELECT C1.`Code`, CL.`Language` FROM country AS C1 JOIN countrylanguage AS CL ON C1.`Code` = CL.`CountryCode` WHERE CL.`Percentage` = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = C1.`Code`)",
        "pred_result": 0,
        "repair_sql": "SELECT C1.`Code`, CL.`Language` FROM country AS C1 JOIN countrylanguage AS CL ON C1.`Code` = CL.`CountryCode` WHERE CL.`Percentage` = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = C1.`Code`)",
        "repair_result": 0
    },
    {
        "idx": 818,
        "db_id": "world_1",
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "evidence": "",
        "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "pred": "SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')",
        "repair_result": 0
    },
    {
        "idx": 819,
        "db_id": "world_1",
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "evidence": "",
        "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "pred": "SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'",
        "repair_result": 0
    },
    {
        "idx": 820,
        "db_id": "world_1",
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "evidence": "",
        "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "pred": "SELECT cl.`CountryCode` FROM countrylanguage AS cl WHERE cl.`Language` = 'Spanish' ORDER BY cl.`Percentage` DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT cl.`CountryCode` FROM countrylanguage AS cl WHERE cl.`Language` = 'Spanish' ORDER BY cl.`Percentage` DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 821,
        "db_id": "world_1",
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "evidence": "",
        "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "pred": "SELECT cl.`CountryCode` FROM countrylanguage AS cl WHERE cl.`Language` = 'Spanish' AND cl.`IsOfficial` = 'T' AND cl.`Percentage` > 0.5",
        "pred_result": 0,
        "repair_sql": "SELECT cl.`CountryCode` FROM countrylanguage AS cl WHERE cl.`Language` = 'Spanish' AND cl.`IsOfficial` = 'T' AND cl.`Percentage` > 0.5",
        "repair_result": 0
    },
    {
        "idx": 822,
        "db_id": "orchestra",
        "question": "How many conductors are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM conductor",
        "pred": "SELECT COUNT(*) FROM conductor",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM conductor",
        "repair_result": 1
    },
    {
        "idx": 823,
        "db_id": "orchestra",
        "question": "Count the number of conductors.",
        "evidence": "",
        "gold": "SELECT count(*) FROM conductor",
        "pred": "SELECT COUNT(*) FROM conductor",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM conductor",
        "repair_result": 1
    },
    {
        "idx": 824,
        "db_id": "orchestra",
        "question": "List the names of conductors in ascending order of age.",
        "evidence": "",
        "gold": "SELECT Name FROM conductor ORDER BY Age ASC",
        "pred": "SELECT `Name` FROM conductor ORDER BY `Age` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM conductor ORDER BY `Age` ASC",
        "repair_result": 1
    },
    {
        "idx": 825,
        "db_id": "orchestra",
        "question": "What are the names of conductors, ordered by age?",
        "evidence": "",
        "gold": "SELECT Name FROM conductor ORDER BY Age ASC",
        "pred": "SELECT `Name` FROM conductor ORDER BY `Age`",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM conductor ORDER BY `Age`",
        "repair_result": 1
    },
    {
        "idx": 826,
        "db_id": "orchestra",
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "evidence": "",
        "gold": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "pred": "SELECT `Name` FROM conductor WHERE Nationality != 'USA'",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM conductor WHERE Nationality != 'USA'",
        "repair_result": 1
    },
    {
        "idx": 827,
        "db_id": "orchestra",
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "evidence": "",
        "gold": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "pred": "SELECT `Name` FROM conductor WHERE Nationality != 'USA'",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM conductor WHERE Nationality != 'USA'",
        "repair_result": 1
    },
    {
        "idx": 828,
        "db_id": "orchestra",
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "evidence": "",
        "gold": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "pred": "SELECT DISTINCT T1.`Record_Company` FROM orchestra AS T1 ORDER BY T1.`Year_of_Founded` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`Record_Company` FROM orchestra AS T1 ORDER BY T1.`Year_of_Founded` DESC",
        "repair_result": 1
    },
    {
        "idx": 829,
        "db_id": "orchestra",
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "evidence": "",
        "gold": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "pred": "SELECT DISTINCT `Record_Company` FROM orchestra ORDER BY `Year_of_Founded` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Record_Company` FROM orchestra ORDER BY `Year_of_Founded` DESC",
        "repair_result": 1
    },
    {
        "idx": 830,
        "db_id": "orchestra",
        "question": "What is the average attendance of shows?",
        "evidence": "",
        "gold": "SELECT avg(Attendance) FROM SHOW",
        "pred": "SELECT AVG(Attendance) FROM show",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Attendance) FROM show",
        "repair_result": 1
    },
    {
        "idx": 831,
        "db_id": "orchestra",
        "question": "Return the average attendance across all shows.",
        "evidence": "",
        "gold": "SELECT avg(Attendance) FROM SHOW",
        "pred": "SELECT AVG(Attendance) FROM show",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Attendance) FROM show",
        "repair_result": 1
    },
    {
        "idx": 832,
        "db_id": "orchestra",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "evidence": "",
        "gold": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "pred": "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final'",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final'",
        "repair_result": 1
    },
    {
        "idx": 833,
        "db_id": "orchestra",
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "evidence": "",
        "gold": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "pred": "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final'",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final'",
        "repair_result": 1
    },
    {
        "idx": 834,
        "db_id": "orchestra",
        "question": "How many different nationalities do conductors have?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT Nationality) FROM conductor",
        "pred": "SELECT COUNT(DISTINCT Nationality) FROM conductor",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Nationality) FROM conductor",
        "repair_result": 1
    },
    {
        "idx": 835,
        "db_id": "orchestra",
        "question": "Count the number of different nationalities of conductors.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT Nationality) FROM conductor",
        "pred": "SELECT COUNT(DISTINCT Nationality) FROM conductor",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Nationality) FROM conductor",
        "repair_result": 1
    },
    {
        "idx": 836,
        "db_id": "orchestra",
        "question": "List names of conductors in descending order of years of work.",
        "evidence": "",
        "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "pred": "SELECT `Name` FROM conductor ORDER BY `Year_of_Work` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM conductor ORDER BY `Year_of_Work` DESC",
        "repair_result": 1
    },
    {
        "idx": 837,
        "db_id": "orchestra",
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "evidence": "",
        "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "pred": "SELECT `Name` FROM conductor ORDER BY `Year_of_Work` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM conductor ORDER BY `Year_of_Work` DESC",
        "repair_result": 1
    },
    {
        "idx": 838,
        "db_id": "orchestra",
        "question": "List the name of the conductor with the most years of work.",
        "evidence": "",
        "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "pred": "SELECT `Name` FROM conductor WHERE Age = (SELECT MAX(Age) FROM conductor)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM conductor WHERE Age = (SELECT MAX(Age) FROM conductor)",
        "repair_result": 1
    },
    {
        "idx": 839,
        "db_id": "orchestra",
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "evidence": "",
        "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "pred": "SELECT `Name` FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)",
        "repair_result": 1
    },
    {
        "idx": 840,
        "db_id": "orchestra",
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "evidence": "",
        "gold": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "pred": "SELECT C.`Name`, O.`Orchestra` FROM conductor AS C JOIN orchestra AS O ON C.`Conductor_ID` = O.`Conductor_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT C.`Name`, O.`Orchestra` FROM conductor AS C JOIN orchestra AS O ON C.`Conductor_ID` = O.`Conductor_ID`",
        "repair_result": 1
    },
    {
        "idx": 841,
        "db_id": "orchestra",
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "evidence": "",
        "gold": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "pred": "SELECT C.`Name` AS Conductor_Name, O.`Orchestra` AS Orchestra_Name FROM conductor AS C JOIN orchestra AS O ON C.`Conductor_ID` = O.`Conductor_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT C.`Name` AS Conductor_Name, O.`Orchestra` AS Orchestra_Name FROM conductor AS C JOIN orchestra AS O ON C.`Conductor_ID` = O.`Conductor_ID`",
        "repair_result": 1
    },
    {
        "idx": 842,
        "db_id": "orchestra",
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "pred": "SELECT `Name` FROM conductor GROUP BY `Name` HAVING COUNT(DISTINCT `Conductor_ID`) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM conductor GROUP BY `Name` HAVING COUNT(DISTINCT `Conductor_ID`) > 1",
        "repair_result": 1
    },
    {
        "idx": 843,
        "db_id": "orchestra",
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "pred": "SELECT `Name` FROM conductor GROUP BY `Name` HAVING COUNT(DISTINCT `Conductor_ID`) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM conductor GROUP BY `Name` HAVING COUNT(DISTINCT `Conductor_ID`) > 1",
        "repair_result": 1
    },
    {
        "idx": 844,
        "db_id": "orchestra",
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT `Name` FROM conductor WHERE Conductor_ID = ( SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM conductor WHERE Conductor_ID = ( SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 845,
        "db_id": "orchestra",
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT `Name` FROM conductor WHERE Conductor_ID = (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM conductor WHERE Conductor_ID = (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1)",
        "repair_result": 1
    },
    {
        "idx": 846,
        "db_id": "orchestra",
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "pred": "SELECT `Name` FROM conductor JOIN orchestra ON conductor.`Conductor_ID` = orchestra.`Conductor_ID` WHERE orchestra.`Year_of_Founded` > 2008",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM conductor JOIN orchestra ON conductor.`Conductor_ID` = orchestra.`Conductor_ID` WHERE orchestra.`Year_of_Founded` > 2008",
        "repair_result": 1
    },
    {
        "idx": 847,
        "db_id": "orchestra",
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "pred": "SELECT `Name` FROM conductor JOIN orchestra ON conductor.`Conductor_ID` = orchestra.`Conductor_ID` WHERE orchestra.`Year_of_Founded` > 2008",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM conductor JOIN orchestra ON conductor.`Conductor_ID` = orchestra.`Conductor_ID` WHERE orchestra.`Year_of_Founded` > 2008",
        "repair_result": 1
    },
    {
        "idx": 848,
        "db_id": "orchestra",
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "evidence": "",
        "gold": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "pred": "SELECT T1.`Record_Company`, COUNT(DISTINCT T2.`Orchestra_ID`) FROM orchestra AS T1 JOIN performance AS T2 ON T1.`Orchestra_ID` = T2.`Orchestra_ID` GROUP BY T1.`Record_Company`",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`Record_Company`, COUNT(DISTINCT T2.`Orchestra_ID`) FROM orchestra AS T1 JOIN performance AS T2 ON T1.`Orchestra_ID` = T2.`Orchestra_ID` GROUP BY T1.`Record_Company`",
        "repair_result": 0
    },
    {
        "idx": 849,
        "db_id": "orchestra",
        "question": "How many orchestras does each record company manage?",
        "evidence": "",
        "gold": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "pred": "SELECT T1.`Record_Company`, COUNT(DISTINCT T2.`Orchestra_ID`) AS Orchestra_Count FROM orchestra AS T2 JOIN conductor AS T1 ON T1.`Conductor_ID` = T2.`Conductor_ID` GROUP BY T1.`Record_Company`",
        "pred_result": "no such column: T1.Record_Company",
        "repair_sql": "SELECT T2.`Record_Company`, COUNT(DISTINCT T2.`Orchestra_ID`) AS Orchestra_Count FROM orchestra AS T2 JOIN conductor AS T1 ON T1.`Conductor_ID` = T2.`Conductor_ID` GROUP BY T2.`Record_Company`",
        "repair_result": 1
    },
    {
        "idx": 850,
        "db_id": "orchestra",
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "evidence": "",
        "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "pred": "SELECT `Major_Record_Format`, COUNT(*) FROM orchestra GROUP BY `Major_Record_Format` ORDER BY COUNT(*)",
        "pred_result": 0,
        "repair_sql": "SELECT `Major_Record_Format`, COUNT(*) FROM orchestra GROUP BY `Major_Record_Format` ORDER BY COUNT(*)",
        "repair_result": 0
    },
    {
        "idx": 851,
        "db_id": "orchestra",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "evidence": "",
        "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "pred": "SELECT `Major_Record_Format`, COUNT(*) AS Frequency FROM orchestra GROUP BY `Major_Record_Format` ORDER BY Frequency DESC",
        "pred_result": 0,
        "repair_sql": "SELECT `Major_Record_Format`, COUNT(*) AS Frequency FROM orchestra GROUP BY `Major_Record_Format` ORDER BY Frequency DESC",
        "repair_result": 0
    },
    {
        "idx": 852,
        "db_id": "orchestra",
        "question": "List the record company shared by the most number of orchestras.",
        "evidence": "",
        "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT T1.`Record_Company`, COUNT(*) FROM orchestra AS T1 GROUP BY T1.`Record_Company` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`Record_Company`, COUNT(*) FROM orchestra AS T1 GROUP BY T1.`Record_Company` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 853,
        "db_id": "orchestra",
        "question": "What is the record company used by the greatest number of orchestras?",
        "evidence": "",
        "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT T1.`Record_Company`, COUNT(*) FROM orchestra AS T1 GROUP BY T1.`Record_Company` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`Record_Company`, COUNT(*) FROM orchestra AS T1 GROUP BY T1.`Record_Company` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 854,
        "db_id": "orchestra",
        "question": "List the names of orchestras that have no performance.",
        "evidence": "",
        "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "pred": "SELECT `Orchestra` FROM orchestra WHERE `Orchestra_ID` NOT IN (SELECT DISTINCT `Orchestra_ID` FROM performance)",
        "pred_result": 1,
        "repair_sql": "SELECT `Orchestra` FROM orchestra WHERE `Orchestra_ID` NOT IN (SELECT DISTINCT `Orchestra_ID` FROM performance)",
        "repair_result": 1
    },
    {
        "idx": 855,
        "db_id": "orchestra",
        "question": "What are the orchestras that do not have any performances?",
        "evidence": "",
        "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "pred": "SELECT `Orchestra` FROM orchestra WHERE `Orchestra_ID` NOT IN (SELECT DISTINCT `Orchestra_ID` FROM performance)",
        "pred_result": 1,
        "repair_sql": "SELECT `Orchestra` FROM orchestra WHERE `Orchestra_ID` NOT IN (SELECT DISTINCT `Orchestra_ID` FROM performance)",
        "repair_result": 1
    },
    {
        "idx": 856,
        "db_id": "orchestra",
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "evidence": "",
        "gold": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "pred": "SELECT DISTINCT T1.`Record_Company` FROM orchestra AS T1 WHERE T1.`Year_of_Founded` < 2003 INTERSECT SELECT DISTINCT T2.`Record_Company` FROM orchestra AS T2 WHERE T2.`Year_of_Founded` > 2003",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`Record_Company` FROM orchestra AS T1 WHERE T1.`Year_of_Founded` < 2003 INTERSECT SELECT DISTINCT T2.`Record_Company` FROM orchestra AS T2 WHERE T2.`Year_of_Founded` > 2003",
        "repair_result": 1
    },
    {
        "idx": 857,
        "db_id": "orchestra",
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "evidence": "",
        "gold": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "pred": "SELECT DISTINCT T1.`Record_Company` FROM orchestra AS T1 JOIN orchestra AS T2 ON T1.`Record_Company` = T2.`Record_Company` WHERE T1.`Year_of_Founded` < 2003 AND T2.`Year_of_Founded` > 2003",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`Record_Company` FROM orchestra AS T1 JOIN orchestra AS T2 ON T1.`Record_Company` = T2.`Record_Company` WHERE T1.`Year_of_Founded` < 2003 AND T2.`Year_of_Founded` > 2003",
        "repair_result": 1
    },
    {
        "idx": 858,
        "db_id": "orchestra",
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "pred": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
        "repair_result": 1
    },
    {
        "idx": 859,
        "db_id": "orchestra",
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "pred": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')",
        "repair_result": 1
    },
    {
        "idx": 860,
        "db_id": "orchestra",
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "evidence": "",
        "gold": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "pred": "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)",
        "pred_result": 1,
        "repair_sql": "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)",
        "repair_result": 1
    },
    {
        "idx": 861,
        "db_id": "orchestra",
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "evidence": "",
        "gold": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "pred": "SELECT DISTINCT `Year_of_Founded` FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Year_of_Founded` FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)",
        "repair_result": 1
    },
    {
        "idx": 862,
        "db_id": "network_1",
        "question": "How many high schoolers are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Highschooler",
        "pred": "SELECT COUNT(*) FROM Highschooler",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Highschooler",
        "repair_result": 1
    },
    {
        "idx": 863,
        "db_id": "network_1",
        "question": "Count the number of high schoolers.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Highschooler",
        "pred": "SELECT COUNT(*) FROM Highschooler",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Highschooler",
        "repair_result": 1
    },
    {
        "idx": 864,
        "db_id": "network_1",
        "question": "Show the names and grades of each high schooler.",
        "evidence": "",
        "gold": "SELECT name ,  grade FROM Highschooler",
        "pred": "SELECT `name`, `grade` FROM Highschooler",
        "pred_result": 1,
        "repair_sql": "SELECT `name`, `grade` FROM Highschooler",
        "repair_result": 1
    },
    {
        "idx": 865,
        "db_id": "network_1",
        "question": "What are the names and grades for each high schooler?",
        "evidence": "",
        "gold": "SELECT name ,  grade FROM Highschooler",
        "pred": "SELECT `name`, `grade` FROM Highschooler",
        "pred_result": 1,
        "repair_sql": "SELECT `name`, `grade` FROM Highschooler",
        "repair_result": 1
    },
    {
        "idx": 866,
        "db_id": "network_1",
        "question": "Show all the grades of the high schoolers.",
        "evidence": "",
        "gold": "SELECT grade FROM Highschooler",
        "pred": "SELECT DISTINCT `grade` FROM Highschooler",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `grade` FROM Highschooler",
        "repair_result": 1
    },
    {
        "idx": 867,
        "db_id": "network_1",
        "question": "What is the grade of each high schooler?",
        "evidence": "",
        "gold": "SELECT grade FROM Highschooler",
        "pred": "SELECT `name`, `grade` FROM Highschooler",
        "pred_result": 0,
        "repair_sql": "SELECT `name`, `grade` FROM Highschooler",
        "repair_result": 0
    },
    {
        "idx": 868,
        "db_id": "network_1",
        "question": "What grade is Kyle in?",
        "evidence": "",
        "gold": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "pred": "SELECT `grade` FROM Highschooler WHERE `name` = 'Kyle'",
        "pred_result": 1,
        "repair_sql": "SELECT `grade` FROM Highschooler WHERE `name` = 'Kyle'",
        "repair_result": 1
    },
    {
        "idx": 869,
        "db_id": "network_1",
        "question": "Return the grade for the high schooler named Kyle.",
        "evidence": "",
        "gold": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "pred": "SELECT `grade` FROM Highschooler WHERE `name` = 'Kyle'",
        "pred_result": 1,
        "repair_sql": "SELECT `grade` FROM Highschooler WHERE `name` = 'Kyle'",
        "repair_result": 1
    },
    {
        "idx": 870,
        "db_id": "network_1",
        "question": "Show the names of all high schoolers in grade 10.",
        "evidence": "",
        "gold": "SELECT name FROM Highschooler WHERE grade  =  10",
        "pred": "SELECT `name` FROM Highschooler WHERE `grade` = 10",
        "pred_result": 1,
        "repair_sql": "SELECT `name` FROM Highschooler WHERE `grade` = 10",
        "repair_result": 1
    },
    {
        "idx": 871,
        "db_id": "network_1",
        "question": "What are the names of all high schoolers in grade 10?",
        "evidence": "",
        "gold": "SELECT name FROM Highschooler WHERE grade  =  10",
        "pred": "SELECT `name` FROM Highschooler WHERE `grade` = 10",
        "pred_result": 1,
        "repair_sql": "SELECT `name` FROM Highschooler WHERE `grade` = 10",
        "repair_result": 1
    },
    {
        "idx": 872,
        "db_id": "network_1",
        "question": "Show the ID of the high schooler named Kyle.",
        "evidence": "",
        "gold": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "pred": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
        "pred_result": 1,
        "repair_sql": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
        "repair_result": 1
    },
    {
        "idx": 873,
        "db_id": "network_1",
        "question": "What is Kyle's id?",
        "evidence": "",
        "gold": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "pred": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
        "pred_result": 1,
        "repair_sql": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
        "repair_result": 1
    },
    {
        "idx": 874,
        "db_id": "network_1",
        "question": "How many high schoolers are there in grade 9 or 10?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "pred": "SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)",
        "repair_result": 1
    },
    {
        "idx": 875,
        "db_id": "network_1",
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "pred": "SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)",
        "repair_result": 1
    },
    {
        "idx": 876,
        "db_id": "network_1",
        "question": "Show the number of high schoolers for each grade.",
        "evidence": "",
        "gold": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "pred": "SELECT `grade`, COUNT(*) FROM Highschooler GROUP BY `grade`",
        "pred_result": 1,
        "repair_sql": "SELECT `grade`, COUNT(*) FROM Highschooler GROUP BY `grade`",
        "repair_result": 1
    },
    {
        "idx": 877,
        "db_id": "network_1",
        "question": "How many high schoolers are in each grade?",
        "evidence": "",
        "gold": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "pred": "SELECT `grade`, COUNT(*) FROM Highschooler GROUP BY `grade`",
        "pred_result": 1,
        "repair_sql": "SELECT `grade`, COUNT(*) FROM Highschooler GROUP BY `grade`",
        "repair_result": 1
    },
    {
        "idx": 878,
        "db_id": "network_1",
        "question": "Which grade has the most high schoolers?",
        "evidence": "",
        "gold": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `grade`, COUNT(*) AS total_highschoolers FROM Highschooler GROUP BY `grade` ORDER BY total_highschoolers DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `grade`, COUNT(*) AS total_highschoolers FROM Highschooler GROUP BY `grade` ORDER BY total_highschoolers DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 879,
        "db_id": "network_1",
        "question": "Return the grade that has the greatest number of high schoolers.",
        "evidence": "",
        "gold": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT grade, COUNT(*) AS num_highschoolers FROM Highschooler GROUP BY grade ORDER BY num_highschoolers DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT grade, COUNT(*) AS num_highschoolers FROM Highschooler GROUP BY grade ORDER BY num_highschoolers DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 880,
        "db_id": "network_1",
        "question": "Show me all grades that have at least 4 students.",
        "evidence": "",
        "gold": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "pred": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4",
        "pred_result": 1,
        "repair_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4",
        "repair_result": 1
    },
    {
        "idx": 881,
        "db_id": "network_1",
        "question": "Which grades have 4 or more high schoolers?",
        "evidence": "",
        "gold": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "pred": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4",
        "pred_result": 1,
        "repair_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4",
        "repair_result": 1
    },
    {
        "idx": 882,
        "db_id": "network_1",
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "evidence": "",
        "gold": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "pred": "SELECT `student_id`, COUNT(`friend_id`) AS `number_of_friends` FROM Friend GROUP BY `student_id`",
        "pred_result": 1,
        "repair_sql": "SELECT `student_id`, COUNT(`friend_id`) AS `number_of_friends` FROM Friend GROUP BY `student_id`",
        "repair_result": 1
    },
    {
        "idx": 883,
        "db_id": "network_1",
        "question": "How many friends does each student have?",
        "evidence": "",
        "gold": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "pred": "SELECT H1.`name`, COUNT(F1.`friend_id`) AS num_friends FROM Highschooler AS H1 LEFT JOIN Friend AS F1 ON H1.`ID` = F1.`student_id` GROUP BY H1.`ID`",
        "pred_result": 0,
        "repair_sql": "SELECT H1.`name`, COUNT(F1.`friend_id`) AS num_friends FROM Highschooler AS H1 LEFT JOIN Friend AS F1 ON H1.`ID` = F1.`student_id` GROUP BY H1.`ID`",
        "repair_result": 0
    },
    {
        "idx": 884,
        "db_id": "network_1",
        "question": "Show the names of high school students and their corresponding number of friends.",
        "evidence": "",
        "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "pred": "SELECT H.`name`, COUNT(F.`friend_id`) AS num_of_friends FROM Highschooler AS H LEFT JOIN Friend AS F ON H.`ID` = F.`student_id` GROUP BY H.`ID`",
        "pred_result": 0,
        "repair_sql": "SELECT H.`name`, COUNT(F.`friend_id`) AS num_of_friends FROM Highschooler AS H LEFT JOIN Friend AS F ON H.`ID` = F.`student_id` GROUP BY H.`ID`",
        "repair_result": 0
    },
    {
        "idx": 885,
        "db_id": "network_1",
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "evidence": "",
        "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "pred": "SELECT H.`name`, COUNT(F.`friend_id`) AS num_of_friends FROM Highschooler AS H LEFT JOIN Friend AS F ON H.`ID` = F.`student_id` GROUP BY H.`ID`",
        "pred_result": 0,
        "repair_sql": "SELECT H.`name`, COUNT(F.`friend_id`) AS num_of_friends FROM Highschooler AS H LEFT JOIN Friend AS F ON H.`ID` = F.`student_id` GROUP BY H.`ID`",
        "repair_result": 0
    },
    {
        "idx": 886,
        "db_id": "network_1",
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "evidence": "",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT H1.`name` FROM Highschooler AS H1 JOIN Friend AS F ON H1.`ID` = F.`student_id` GROUP BY H1.`ID` ORDER BY COUNT(F.`friend_id`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT H1.`name` FROM Highschooler AS H1 JOIN Friend AS F ON H1.`ID` = F.`student_id` GROUP BY H1.`ID` ORDER BY COUNT(F.`friend_id`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 887,
        "db_id": "network_1",
        "question": "Return the name of the high school student with the most friends.",
        "evidence": "",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT H1.`name` FROM Highschooler AS H1 JOIN Friend AS F ON H1.`ID` = F.`student_id` GROUP BY H1.`ID` ORDER BY COUNT(F.`friend_id`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT H1.`name` FROM Highschooler AS H1 JOIN Friend AS F ON H1.`ID` = F.`student_id` GROUP BY H1.`ID` ORDER BY COUNT(F.`friend_id`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 888,
        "db_id": "network_1",
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "evidence": "",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "pred": "SELECT H1.`name` FROM Highschooler AS H1 JOIN Friend AS F ON H1.`ID` = F.`student_id` GROUP BY H1.`ID` HAVING COUNT(F.`friend_id`) >= 3",
        "pred_result": 1,
        "repair_sql": "SELECT H1.`name` FROM Highschooler AS H1 JOIN Friend AS F ON H1.`ID` = F.`student_id` GROUP BY H1.`ID` HAVING COUNT(F.`friend_id`) >= 3",
        "repair_result": 1
    },
    {
        "idx": 889,
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "evidence": "",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "pred": "SELECT DISTINCT H1.`name` FROM Highschooler AS H1 JOIN Friend AS F ON H1.`ID` = F.`student_id` GROUP BY H1.`ID` HAVING COUNT(F.`friend_id`) >= 3",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT H1.`name` FROM Highschooler AS H1 JOIN Friend AS F ON H1.`ID` = F.`student_id` GROUP BY H1.`ID` HAVING COUNT(F.`friend_id`) >= 3",
        "repair_result": 1
    },
    {
        "idx": 890,
        "db_id": "network_1",
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "evidence": "",
        "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "pred": "SELECT H2.`name` FROM Highschooler AS H1 JOIN Friend AS F ON H1.`ID` = F.`student_id` JOIN Highschooler AS H2 ON F.`friend_id` = H2.`ID` WHERE H1.`name` = 'Kyle'",
        "pred_result": 1,
        "repair_sql": "SELECT H2.`name` FROM Highschooler AS H1 JOIN Friend AS F ON H1.`ID` = F.`student_id` JOIN Highschooler AS H2 ON F.`friend_id` = H2.`ID` WHERE H1.`name` = 'Kyle'",
        "repair_result": 1
    },
    {
        "idx": 891,
        "db_id": "network_1",
        "question": "Return the names of friends of the high school student Kyle.",
        "evidence": "",
        "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "pred": "SELECT H2.`name` FROM Highschooler AS H1 JOIN Friend AS F ON H1.`ID` = F.`student_id` JOIN Highschooler AS H2 ON F.`friend_id` = H2.`ID` WHERE H1.`name` = 'Kyle'",
        "pred_result": 1,
        "repair_sql": "SELECT H2.`name` FROM Highschooler AS H1 JOIN Friend AS F ON H1.`ID` = F.`student_id` JOIN Highschooler AS H2 ON F.`friend_id` = H2.`ID` WHERE H1.`name` = 'Kyle'",
        "repair_result": 1
    },
    {
        "idx": 892,
        "db_id": "network_1",
        "question": "How many friends does the high school student Kyle have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "pred": "SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "repair_result": 1
    },
    {
        "idx": 893,
        "db_id": "network_1",
        "question": "Count the number of friends Kyle has.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "pred": "SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "repair_result": 1
    },
    {
        "idx": 894,
        "db_id": "network_1",
        "question": "Show ids of all students who do not have any friends.",
        "evidence": "",
        "gold": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "pred": "SELECT DISTINCT H1.`ID` FROM Highschooler AS H1 LEFT JOIN Friend AS F ON H1.`ID` = F.`student_id` WHERE F.`friend_id` IS NULL",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT H1.`ID` FROM Highschooler AS H1 LEFT JOIN Friend AS F ON H1.`ID` = F.`student_id` WHERE F.`friend_id` IS NULL",
        "repair_result": 1
    },
    {
        "idx": 895,
        "db_id": "network_1",
        "question": "What are the ids of high school students who do not have friends?",
        "evidence": "",
        "gold": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "pred": "SELECT H1.`ID` FROM Highschooler AS H1 LEFT JOIN Friend AS F ON H1.`ID` = F.`student_id` WHERE F.`friend_id` IS NULL",
        "pred_result": 1,
        "repair_sql": "SELECT H1.`ID` FROM Highschooler AS H1 LEFT JOIN Friend AS F ON H1.`ID` = F.`student_id` WHERE F.`friend_id` IS NULL",
        "repair_result": 1
    },
    {
        "idx": 896,
        "db_id": "network_1",
        "question": "Show names of all high school students who do not have any friends.",
        "evidence": "",
        "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "pred": "SELECT `name` FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)",
        "pred_result": 1,
        "repair_sql": "SELECT `name` FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)",
        "repair_result": 1
    },
    {
        "idx": 897,
        "db_id": "network_1",
        "question": "What are the names of students who have no friends?",
        "evidence": "",
        "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "pred": "SELECT `name` FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)",
        "pred_result": 1,
        "repair_sql": "SELECT `name` FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)",
        "repair_result": 1
    },
    {
        "idx": 898,
        "db_id": "network_1",
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "evidence": "",
        "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "pred": "SELECT DISTINCT f1.`student_id` FROM Friend f1 JOIN Likes l ON f1.`student_id` = l.`student_id` WHERE f1.`student_id` IN (SELECT f2.`student_id` FROM Friend f2)",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT f1.`student_id` FROM Friend f1 JOIN Likes l ON f1.`student_id` = l.`student_id` WHERE f1.`student_id` IN (SELECT f2.`student_id` FROM Friend f2)",
        "repair_result": 0
    },
    {
        "idx": 899,
        "db_id": "network_1",
        "question": "What are the ids of students who both have friends and are liked?",
        "evidence": "",
        "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "pred": "SELECT DISTINCT f1.student_id FROM Friend f1 JOIN Likes l1 ON f1.student_id = l1.student_id INTERSECT SELECT DISTINCT f2.student_id FROM Friend f2 JOIN Likes l2 ON f2.student_id = l2.student_id",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT f1.student_id FROM Friend f1 JOIN Likes l1 ON f1.student_id = l1.student_id INTERSECT SELECT DISTINCT f2.student_id FROM Friend f2 JOIN Likes l2 ON f2.student_id = l2.student_id",
        "repair_result": 0
    },
    {
        "idx": 900,
        "db_id": "network_1",
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "evidence": "",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "pred": "SELECT DISTINCT H1.`name` FROM Highschooler AS H1 JOIN Friend AS F ON H1.`ID` = F.`student_id` JOIN Likes AS L ON H1.`ID` = L.`student_id`",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT H1.`name` FROM Highschooler AS H1 JOIN Friend AS F ON H1.`ID` = F.`student_id` JOIN Likes AS L ON H1.`ID` = L.`student_id`",
        "repair_result": 0
    },
    {
        "idx": 901,
        "db_id": "network_1",
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "evidence": "",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "pred": "SELECT DISTINCT H1.`name` FROM Highschooler AS H1 JOIN Friend AS F ON H1.`ID` = F.`student_id` JOIN Likes AS L ON H1.`ID` = L.`student_id`",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT H1.`name` FROM Highschooler AS H1 JOIN Friend AS F ON H1.`ID` = F.`student_id` JOIN Likes AS L ON H1.`ID` = L.`student_id`",
        "repair_result": 0
    },
    {
        "idx": 902,
        "db_id": "network_1",
        "question": "Count the number of likes for each student id.",
        "evidence": "",
        "gold": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "pred": "SELECT `student_id`, COUNT(`liked_id`) FROM Likes GROUP BY `student_id`",
        "pred_result": 1,
        "repair_sql": "SELECT `student_id`, COUNT(`liked_id`) FROM Likes GROUP BY `student_id`",
        "repair_result": 1
    },
    {
        "idx": 903,
        "db_id": "network_1",
        "question": "How many likes correspond to each student id?",
        "evidence": "",
        "gold": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "pred": "SELECT `student_id`, COUNT(`liked_id`) FROM Likes GROUP BY `student_id`",
        "pred_result": 1,
        "repair_sql": "SELECT `student_id`, COUNT(`liked_id`) FROM Likes GROUP BY `student_id`",
        "repair_result": 1
    },
    {
        "idx": 904,
        "db_id": "network_1",
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "evidence": "",
        "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "pred": "SELECT H1.`name`, COUNT(*) FROM Highschooler AS H1 JOIN Likes AS L1 ON H1.`ID` = L1.`student_id` GROUP BY H1.`ID`",
        "pred_result": 1,
        "repair_sql": "SELECT H1.`name`, COUNT(*) FROM Highschooler AS H1 JOIN Likes AS L1 ON H1.`ID` = L1.`student_id` GROUP BY H1.`ID`",
        "repair_result": 1
    },
    {
        "idx": 905,
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "evidence": "",
        "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "pred": "SELECT H1.`name`, COUNT(L1.`liked_id`) AS num_likes FROM Highschooler AS H1 JOIN Likes AS L1 ON H1.`ID` = L1.`student_id` GROUP BY H1.`ID`",
        "pred_result": 1,
        "repair_sql": "SELECT H1.`name`, COUNT(L1.`liked_id`) AS num_likes FROM Highschooler AS H1 JOIN Likes AS L1 ON H1.`ID` = L1.`student_id` GROUP BY H1.`ID`",
        "repair_result": 1
    },
    {
        "idx": 906,
        "db_id": "network_1",
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "evidence": "",
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT H1.`name` FROM Highschooler AS H1 JOIN Likes AS L1 ON H1.`ID` = L1.`student_id` GROUP BY H1.`ID` ORDER BY COUNT(L1.`liked_id`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT H1.`name` FROM Highschooler AS H1 JOIN Likes AS L1 ON H1.`ID` = L1.`student_id` GROUP BY H1.`ID` ORDER BY COUNT(L1.`liked_id`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 907,
        "db_id": "network_1",
        "question": "Give the name of the student with the most likes.",
        "evidence": "",
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT H1.`name` FROM Highschooler AS H1 JOIN Likes AS L1 ON H1.`ID` = L1.`student_id` GROUP BY H1.`ID` ORDER BY COUNT(L1.`liked_id`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT H1.`name` FROM Highschooler AS H1 JOIN Likes AS L1 ON H1.`ID` = L1.`student_id` GROUP BY H1.`ID` ORDER BY COUNT(L1.`liked_id`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 908,
        "db_id": "network_1",
        "question": "Show the names of students who have at least 2 likes.",
        "evidence": "",
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "pred": "SELECT DISTINCT H1.`name` FROM Highschooler AS H1 JOIN Likes AS L1 ON H1.`ID` = L1.`student_id` GROUP BY H1.`ID` HAVING COUNT(L1.`liked_id`) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT H1.`name` FROM Highschooler AS H1 JOIN Likes AS L1 ON H1.`ID` = L1.`student_id` GROUP BY H1.`ID` HAVING COUNT(L1.`liked_id`) >= 2",
        "repair_result": 1
    },
    {
        "idx": 909,
        "db_id": "network_1",
        "question": "What are the names of students who have 2 or more likes?",
        "evidence": "",
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "pred": "SELECT DISTINCT H1.`name` FROM Highschooler AS H1 JOIN Likes AS L1 ON H1.`ID` = L1.`student_id` GROUP BY H1.`ID` HAVING COUNT(L1.`liked_id`) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT H1.`name` FROM Highschooler AS H1 JOIN Likes AS L1 ON H1.`ID` = L1.`student_id` GROUP BY H1.`ID` HAVING COUNT(L1.`liked_id`) >= 2",
        "repair_result": 1
    },
    {
        "idx": 910,
        "db_id": "network_1",
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "evidence": "",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "pred": "SELECT DISTINCT H1.`name` FROM Highschooler AS H1 JOIN Friend AS F1 ON H1.`ID` = F1.`student_id` JOIN Friend AS F2 ON H1.`ID` = F2.`student_id` WHERE H1.`grade` > 5 GROUP BY H1.`ID` HAVING COUNT(DISTINCT F1.`friend_id`) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT H1.`name` FROM Highschooler AS H1 JOIN Friend AS F1 ON H1.`ID` = F1.`student_id` JOIN Friend AS F2 ON H1.`ID` = F2.`student_id` WHERE H1.`grade` > 5 GROUP BY H1.`ID` HAVING COUNT(DISTINCT F1.`friend_id`) >= 2",
        "repair_result": 1
    },
    {
        "idx": 911,
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "evidence": "",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "pred": "SELECT DISTINCT H1.`name` FROM Highschooler AS H1 JOIN Friend AS F1 ON H1.`ID` = F1.`student_id` WHERE H1.`grade` > 5 GROUP BY H1.`ID` HAVING COUNT(F1.`friend_id`) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT H1.`name` FROM Highschooler AS H1 JOIN Friend AS F1 ON H1.`ID` = F1.`student_id` WHERE H1.`grade` > 5 GROUP BY H1.`ID` HAVING COUNT(F1.`friend_id`) >= 2",
        "repair_result": 1
    },
    {
        "idx": 912,
        "db_id": "network_1",
        "question": "How many likes does Kyle have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "pred": "SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "repair_result": 1
    },
    {
        "idx": 913,
        "db_id": "network_1",
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "pred": "SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "repair_result": 1
    },
    {
        "idx": 914,
        "db_id": "network_1",
        "question": "Find the average grade of all students who have some friends.",
        "evidence": "",
        "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "pred": "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)",
        "repair_result": 1
    },
    {
        "idx": 915,
        "db_id": "network_1",
        "question": "What is the average grade of students who have friends?",
        "evidence": "",
        "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "pred": "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)",
        "repair_result": 1
    },
    {
        "idx": 916,
        "db_id": "network_1",
        "question": "Find the minimum grade of students who have no friends.",
        "evidence": "",
        "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "pred": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "pred_result": 1,
        "repair_sql": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "repair_result": 1
    },
    {
        "idx": 917,
        "db_id": "network_1",
        "question": "What is the lowest grade of students who do not have any friends?",
        "evidence": "",
        "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "pred": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "pred_result": 1,
        "repair_sql": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "repair_result": 1
    },
    {
        "idx": 918,
        "db_id": "dog_kennels",
        "question": "Which states have both owners and professionals living there?",
        "evidence": "",
        "gold": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "pred": "SELECT DISTINCT o.state FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id JOIN Professionals p ON t.professional_id = p.professional_id WHERE o.state IN ( SELECT state FROM Owners INTERSECT SELECT state FROM Professionals )",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT o.state FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id JOIN Professionals p ON t.professional_id = p.professional_id WHERE o.state IN ( SELECT state FROM Owners INTERSECT SELECT state FROM Professionals )",
        "repair_result": 0
    },
    {
        "idx": 919,
        "db_id": "dog_kennels",
        "question": "Find the states where both owners and professionals live.",
        "evidence": "",
        "gold": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "pred": "SELECT DISTINCT Owners.`state` FROM Owners WHERE Owners.`state` IN (SELECT DISTINCT Professionals.`state` FROM Professionals)",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT Owners.`state` FROM Owners WHERE Owners.`state` IN (SELECT DISTINCT Professionals.`state` FROM Professionals)",
        "repair_result": 1
    },
    {
        "idx": 920,
        "db_id": "dog_kennels",
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "evidence": "",
        "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "pred": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments)",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments)",
        "repair_result": 1
    },
    {
        "idx": 921,
        "db_id": "dog_kennels",
        "question": "Find the average age of the dogs who went through treatments.",
        "evidence": "",
        "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "pred": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments)",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments)",
        "repair_result": 1
    },
    {
        "idx": 922,
        "db_id": "dog_kennels",
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "evidence": "",
        "gold": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "pred": "SELECT `professional_id`, `last_name`, `cell_number` FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
        "pred_result": 1,
        "repair_sql": "SELECT `professional_id`, `last_name`, `cell_number` FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
        "repair_result": 1
    },
    {
        "idx": 923,
        "db_id": "dog_kennels",
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "evidence": "",
        "gold": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "pred": "SELECT `professional_id`, `last_name`, `cell_number` FROM Professionals WHERE `state` = 'Indiana' OR `professional_id` IN (SELECT `professional_id` FROM Treatments GROUP BY `professional_id` HAVING COUNT(*) > 2)",
        "pred_result": 1,
        "repair_sql": "SELECT `professional_id`, `last_name`, `cell_number` FROM Professionals WHERE `state` = 'Indiana' OR `professional_id` IN (SELECT `professional_id` FROM Treatments GROUP BY `professional_id` HAVING COUNT(*) > 2)",
        "repair_result": 1
    },
    {
        "idx": 924,
        "db_id": "dog_kennels",
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "evidence": "",
        "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "pred": "SELECT `name` FROM Dogs WHERE `dog_id` NOT IN (SELECT `dog_id` FROM Treatments WHERE `cost_of_treatment` > 1000)",
        "pred_result": 0,
        "repair_sql": "SELECT `name` FROM Dogs WHERE `dog_id` NOT IN (SELECT `dog_id` FROM Treatments WHERE `cost_of_treatment` > 1000)",
        "repair_result": 0
    },
    {
        "idx": 925,
        "db_id": "dog_kennels",
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "evidence": "",
        "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "pred": "SELECT D.`name` FROM Dogs AS D JOIN Owners AS O ON D.`owner_id` = O.`owner_id` JOIN Treatments AS T ON D.`dog_id` = T.`dog_id` WHERE T.`cost_of_treatment` <= 1000",
        "pred_result": 0,
        "repair_sql": "SELECT D.`name` FROM Dogs AS D JOIN Owners AS O ON D.`owner_id` = O.`owner_id` JOIN Treatments AS T ON D.`dog_id` = T.`dog_id` WHERE T.`cost_of_treatment` <= 1000",
        "repair_result": 0
    },
    {
        "idx": 926,
        "db_id": "dog_kennels",
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "evidence": "",
        "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "pred": "SELECT DISTINCT first_name FROM ( SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals ) WHERE first_name NOT IN (SELECT name FROM Dogs)",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT first_name FROM ( SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals ) WHERE first_name NOT IN (SELECT name FROM Dogs)",
        "repair_result": 1
    },
    {
        "idx": 927,
        "db_id": "dog_kennels",
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "evidence": "",
        "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "pred": "SELECT DISTINCT first_name FROM ( SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals ) AS T WHERE T.first_name NOT IN (SELECT name FROM Dogs)",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT first_name FROM ( SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals ) AS T WHERE T.first_name NOT IN (SELECT name FROM Dogs)",
        "repair_result": 1
    },
    {
        "idx": 928,
        "db_id": "dog_kennels",
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "evidence": "",
        "gold": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "pred": "SELECT P.`professional_id`, P.`role_code`, P.`email_address` FROM Professionals AS P LEFT JOIN Treatments AS T ON P.`professional_id` = T.`professional_id` WHERE T.`professional_id` IS NULL AND P.`role_code` = 'Veterenarian'",
        "pred_result": 0,
        "repair_sql": "SELECT P.`professional_id`, P.`role_code`, P.`email_address` FROM Professionals AS P LEFT JOIN Treatments AS T ON P.`professional_id` = T.`professional_id` WHERE T.`professional_id` IS NULL AND P.`role_code` = 'Veterenarian'",
        "repair_result": 0
    },
    {
        "idx": 929,
        "db_id": "dog_kennels",
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "evidence": "",
        "gold": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "pred": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "pred_result": 1,
        "repair_sql": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "repair_result": 1
    },
    {
        "idx": 930,
        "db_id": "dog_kennels",
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "evidence": "",
        "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = ( SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = ( SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 931,
        "db_id": "dog_kennels",
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "evidence": "",
        "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `owner_id`, `first_name`, `last_name` FROM Owners WHERE `owner_id` = ( SELECT `owner_id` FROM Dogs GROUP BY `owner_id` ORDER BY COUNT(*) DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT `owner_id`, `first_name`, `last_name` FROM Owners WHERE `owner_id` = ( SELECT `owner_id` FROM Dogs GROUP BY `owner_id` ORDER BY COUNT(*) DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 932,
        "db_id": "dog_kennels",
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "evidence": "",
        "gold": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "pred": "SELECT T1.`professional_id`, T1.`role_code`, T1.`first_name` FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.`professional_id` = T2.`professional_id` GROUP BY T1.`professional_id`, T1.`role_code`, T1.`first_name` HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`professional_id`, T1.`role_code`, T1.`first_name` FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.`professional_id` = T2.`professional_id` GROUP BY T1.`professional_id`, T1.`role_code`, T1.`first_name` HAVING COUNT(*) >= 2",
        "repair_result": 1
    },
    {
        "idx": 933,
        "db_id": "dog_kennels",
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "evidence": "",
        "gold": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "pred": "SELECT T1.`professional_id`, T2.`role_code`, T2.`first_name` FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.`professional_id` = T2.`professional_id` GROUP BY T1.`professional_id` HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`professional_id`, T2.`role_code`, T2.`first_name` FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.`professional_id` = T2.`professional_id` GROUP BY T1.`professional_id` HAVING COUNT(*) >= 2",
        "repair_result": 1
    },
    {
        "idx": 934,
        "db_id": "dog_kennels",
        "question": "What is the name of the breed with the most dogs?",
        "evidence": "",
        "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `breed_name` FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)",
        "pred_result": 1,
        "repair_sql": "SELECT `breed_name` FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)",
        "repair_result": 1
    },
    {
        "idx": 935,
        "db_id": "dog_kennels",
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "evidence": "",
        "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT B.`breed_name` FROM Breeds AS B JOIN Dogs AS D ON B.`breed_code` = D.`breed_code` GROUP BY B.`breed_name` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT B.`breed_name` FROM Breeds AS B JOIN Dogs AS D ON B.`breed_code` = D.`breed_code` GROUP BY B.`breed_name` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 936,
        "db_id": "dog_kennels",
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "evidence": "",
        "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`owner_id`, T2.`last_name` FROM Owners AS T2 JOIN ( SELECT owner_id, COUNT(*) AS num_treatments FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id ORDER BY num_treatments DESC LIMIT 1 ) AS T1 ON T1.owner_id = T2.owner_id",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`owner_id`, T2.`last_name` FROM Owners AS T2 JOIN ( SELECT owner_id, COUNT(*) AS num_treatments FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id ORDER BY num_treatments DESC LIMIT 1 ) AS T1 ON T1.owner_id = T2.owner_id",
        "repair_result": 1
    },
    {
        "idx": 937,
        "db_id": "dog_kennels",
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "evidence": "",
        "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `owner_id`, `last_name` FROM Owners WHERE `owner_id` IN ( SELECT `owner_id` FROM Dogs WHERE `owner_id` IN ( SELECT `owner_id` FROM Treatments GROUP BY `owner_id` ORDER BY SUM(`cost_of_treatment`) DESC LIMIT 1 ) )",
        "pred_result": "no such column: owner_id",
        "repair_sql": "SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 938,
        "db_id": "dog_kennels",
        "question": "What is the description of the treatment type that costs the least money in total?",
        "evidence": "",
        "gold": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "pred": "SELECT `treatment_type_description` FROM Treatment_Types WHERE `treatment_type_code` = ( SELECT `treatment_type_code` FROM Treatments GROUP BY `treatment_type_code` ORDER BY SUM(`cost_of_treatment`) LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT `treatment_type_description` FROM Treatment_Types WHERE `treatment_type_code` = ( SELECT `treatment_type_code` FROM Treatments GROUP BY `treatment_type_code` ORDER BY SUM(`cost_of_treatment`) LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 939,
        "db_id": "dog_kennels",
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "evidence": "",
        "gold": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "pred": "SELECT `treatment_type_description` FROM Treatment_Types WHERE `treatment_type_code` = (SELECT `treatment_type_code` FROM Treatments GROUP BY `treatment_type_code` ORDER BY SUM(`cost_of_treatment`) ASC LIMIT 1)",
        "pred_result": 1,
        "repair_sql": "SELECT `treatment_type_description` FROM Treatment_Types WHERE `treatment_type_code` = (SELECT `treatment_type_code` FROM Treatments GROUP BY `treatment_type_code` ORDER BY SUM(`cost_of_treatment`) ASC LIMIT 1)",
        "repair_result": 1
    },
    {
        "idx": 940,
        "db_id": "dog_kennels",
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "evidence": "",
        "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "pred": "SELECT `owner_id`, `zip_code` FROM Owners WHERE `owner_id` IN ( SELECT `owner_id` FROM Dogs WHERE `owner_id` IN ( SELECT `owner_id` FROM Dogs GROUP BY `owner_id` ORDER BY SUM(`weight`) DESC LIMIT 1 ) )",
        "pred_result": 1,
        "repair_sql": "SELECT `owner_id`, `zip_code` FROM Owners WHERE `owner_id` IN ( SELECT `owner_id` FROM Dogs WHERE `owner_id` IN ( SELECT `owner_id` FROM Dogs GROUP BY `owner_id` ORDER BY SUM(`weight`) DESC LIMIT 1 ) )",
        "repair_result": 1
    },
    {
        "idx": 941,
        "db_id": "dog_kennels",
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "evidence": "",
        "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "pred": "SELECT `owner_id`, `zip_code` FROM Owners WHERE `owner_id` IN ( SELECT `owner_id` FROM Dogs WHERE `owner_id` IN ( SELECT `owner_id` FROM Treatments GROUP BY `owner_id` ORDER BY SUM(`cost_of_treatment`) DESC LIMIT 1 ) )",
        "pred_result": "no such column: owner_id",
        "repair_sql": "SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 942,
        "db_id": "dog_kennels",
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "evidence": "",
        "gold": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "pred": "SELECT T1.`professional_id`, T2.`cell_number` FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.`professional_id` = T2.`professional_id` GROUP BY T1.`professional_id` HAVING COUNT(DISTINCT T1.`treatment_type_code`) >= 2",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`professional_id`, T2.`cell_number` FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.`professional_id` = T2.`professional_id` GROUP BY T1.`professional_id` HAVING COUNT(DISTINCT T1.`treatment_type_code`) >= 2",
        "repair_result": 0
    },
    {
        "idx": 943,
        "db_id": "dog_kennels",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "evidence": "",
        "gold": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "pred": "SELECT T1.`professional_id`, T1.`cell_number` FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.`professional_id` = T2.`professional_id` GROUP BY T1.`professional_id` HAVING COUNT(DISTINCT T2.`treatment_type_code`) >= 2",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`professional_id`, T1.`cell_number` FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.`professional_id` = T2.`professional_id` GROUP BY T1.`professional_id` HAVING COUNT(DISTINCT T2.`treatment_type_code`) >= 2",
        "repair_result": 0
    },
    {
        "idx": 944,
        "db_id": "dog_kennels",
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "pred": "SELECT DISTINCT T1.`first_name`, T1.`last_name` FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.`professional_id` = T2.`professional_id` WHERE T2.`cost_of_treatment` < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`first_name`, T1.`last_name` FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.`professional_id` = T2.`professional_id` WHERE T2.`cost_of_treatment` < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "repair_result": 0
    },
    {
        "idx": 945,
        "db_id": "dog_kennels",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "pred": "SELECT DISTINCT T1.`first_name`, T1.`last_name` FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.`professional_id` = T2.`professional_id` WHERE T2.`cost_of_treatment` < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`first_name`, T1.`last_name` FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.`professional_id` = T2.`professional_id` WHERE T2.`cost_of_treatment` < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "repair_result": 0
    },
    {
        "idx": 946,
        "db_id": "dog_kennels",
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "evidence": "",
        "gold": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "pred": "SELECT T1.`date_of_treatment`, T2.`first_name` FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.`professional_id` = T2.`professional_id`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`date_of_treatment`, T2.`first_name` FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.`professional_id` = T2.`professional_id`",
        "repair_result": 1
    },
    {
        "idx": 947,
        "db_id": "dog_kennels",
        "question": "What are the date and the operating professional's first name of each treatment?",
        "evidence": "",
        "gold": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "pred": "SELECT T1.`date_of_treatment`, T2.`first_name` FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.`professional_id` = T2.`professional_id`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`date_of_treatment`, T2.`first_name` FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.`professional_id` = T2.`professional_id`",
        "repair_result": 1
    },
    {
        "idx": 948,
        "db_id": "dog_kennels",
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "evidence": "",
        "gold": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "pred": "SELECT T1.`cost_of_treatment`, T2.`treatment_type_description` FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.`treatment_type_code` = T2.`treatment_type_code`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`cost_of_treatment`, T2.`treatment_type_description` FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.`treatment_type_code` = T2.`treatment_type_code`",
        "repair_result": 1
    },
    {
        "idx": 949,
        "db_id": "dog_kennels",
        "question": "What are the cost and treatment type description of each treatment?",
        "evidence": "",
        "gold": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "pred": "SELECT T1.`cost_of_treatment`, T2.`treatment_type_description` FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.`treatment_type_code` = T2.`treatment_type_code`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`cost_of_treatment`, T2.`treatment_type_description` FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.`treatment_type_code` = T2.`treatment_type_code`",
        "repair_result": 1
    },
    {
        "idx": 950,
        "db_id": "dog_kennels",
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "pred": "SELECT O.first_name, O.last_name, S.size_description FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id JOIN Sizes AS S ON D.size_code = S.size_code",
        "pred_result": 0,
        "repair_sql": "SELECT O.first_name, O.last_name, S.size_description FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id JOIN Sizes AS S ON D.size_code = S.size_code",
        "repair_result": 0
    },
    {
        "idx": 951,
        "db_id": "dog_kennels",
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "pred": "SELECT O.`first_name`, O.`last_name`, S.`size_description` FROM Owners AS O JOIN Dogs AS D ON O.`owner_id` = D.`owner_id` JOIN Sizes AS S ON D.`size_code` = S.`size_code`",
        "pred_result": 0,
        "repair_sql": "SELECT O.`first_name`, O.`last_name`, S.`size_description` FROM Owners AS O JOIN Dogs AS D ON O.`owner_id` = D.`owner_id` JOIN Sizes AS S ON D.`size_code` = S.`size_code`",
        "repair_result": 0
    },
    {
        "idx": 952,
        "db_id": "dog_kennels",
        "question": "List pairs of the owner's first name and the dogs's name.",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "pred": "SELECT O.first_name, D.name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id",
        "pred_result": 1,
        "repair_sql": "SELECT O.first_name, D.name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id",
        "repair_result": 1
    },
    {
        "idx": 953,
        "db_id": "dog_kennels",
        "question": "What are each owner's first name and their dogs's name?",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "pred": "SELECT O.`first_name`, D.`name` FROM Owners AS O JOIN Dogs AS D ON O.`owner_id` = D.`owner_id`",
        "pred_result": 1,
        "repair_sql": "SELECT O.`first_name`, D.`name` FROM Owners AS O JOIN Dogs AS D ON O.`owner_id` = D.`owner_id`",
        "repair_result": 1
    },
    {
        "idx": 954,
        "db_id": "dog_kennels",
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "evidence": "",
        "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "pred": "SELECT D.`name`, T.`date_of_treatment` FROM Dogs AS D JOIN Breeds AS B ON D.`breed_code` = B.`breed_code` JOIN Treatments AS T ON D.`dog_id` = T.`dog_id` WHERE B.`breed_name` = ( SELECT breed_name FROM Breeds WHERE breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 ) )",
        "pred_result": 1,
        "repair_sql": "SELECT D.`name`, T.`date_of_treatment` FROM Dogs AS D JOIN Breeds AS B ON D.`breed_code` = B.`breed_code` JOIN Treatments AS T ON D.`dog_id` = T.`dog_id` WHERE B.`breed_name` = ( SELECT breed_name FROM Breeds WHERE breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 ) )",
        "repair_result": 1
    },
    {
        "idx": 955,
        "db_id": "dog_kennels",
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "evidence": "",
        "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "pred": "SELECT D.`name`, T.`date_of_treatment` FROM Dogs AS D JOIN Breeds AS B ON D.`breed_code` = B.`breed_code` JOIN Treatments AS T ON D.`dog_id` = T.`dog_id` WHERE B.`breed_name` = (SELECT breed_name FROM Breeds ORDER BY breed_name LIMIT 1)",
        "pred_result": 0,
        "repair_sql": "SELECT D.`name`, T.`date_of_treatment` FROM Dogs AS D JOIN Breeds AS B ON D.`breed_code` = B.`breed_code` JOIN Treatments AS T ON D.`dog_id` = T.`dog_id` WHERE B.`breed_name` = (SELECT breed_name FROM Breeds ORDER BY breed_name LIMIT 1)",
        "repair_result": 0
    },
    {
        "idx": 956,
        "db_id": "dog_kennels",
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "pred": "SELECT O.first_name, D.name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia'",
        "pred_result": 1,
        "repair_sql": "SELECT O.first_name, D.name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia'",
        "repair_result": 1
    },
    {
        "idx": 957,
        "db_id": "dog_kennels",
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "pred": "SELECT O.first_name, D.name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia'",
        "pred_result": 1,
        "repair_sql": "SELECT O.first_name, D.name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia'",
        "repair_result": 1
    },
    {
        "idx": 958,
        "db_id": "dog_kennels",
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "pred": "SELECT `date_arrived`, `date_departed` FROM Dogs WHERE `dog_id` IN (SELECT DISTINCT `dog_id` FROM Treatments)",
        "pred_result": 1,
        "repair_sql": "SELECT `date_arrived`, `date_departed` FROM Dogs WHERE `dog_id` IN (SELECT DISTINCT `dog_id` FROM Treatments)",
        "repair_result": 1
    },
    {
        "idx": 959,
        "db_id": "dog_kennels",
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "pred": "SELECT D.`date_arrived`, D.`date_departed` FROM Dogs AS D JOIN Treatments AS T ON D.`dog_id` = T.`dog_id`",
        "pred_result": 1,
        "repair_sql": "SELECT D.`date_arrived`, D.`date_departed` FROM Dogs AS D JOIN Treatments AS T ON D.`dog_id` = T.`dog_id`",
        "repair_result": 1
    },
    {
        "idx": 960,
        "db_id": "dog_kennels",
        "question": "List the last name of the owner owning the youngest dog.",
        "evidence": "",
        "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "pred": "SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE age = (SELECT MIN(age) FROM Dogs))",
        "pred_result": 0,
        "repair_sql": "SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE age = (SELECT MIN(age) FROM Dogs))",
        "repair_result": 0
    },
    {
        "idx": 961,
        "db_id": "dog_kennels",
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "evidence": "",
        "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "pred": "SELECT O.`last_name` FROM Owners AS O JOIN Dogs AS D ON O.`owner_id` = D.`owner_id` WHERE D.`dog_id` IN (SELECT D2.`dog_id` FROM Dogs AS D2 WHERE D2.`age` = (SELECT MIN(age) FROM Dogs))",
        "pred_result": 0,
        "repair_sql": "SELECT O.`last_name` FROM Owners AS O JOIN Dogs AS D ON O.`owner_id` = D.`owner_id` WHERE D.`dog_id` IN (SELECT D2.`dog_id` FROM Dogs AS D2 WHERE D2.`age` = (SELECT MIN(age) FROM Dogs))",
        "repair_result": 0
    },
    {
        "idx": 962,
        "db_id": "dog_kennels",
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "evidence": "",
        "gold": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "pred": "SELECT `email_address` FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
        "pred_result": 1,
        "repair_sql": "SELECT `email_address` FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
        "repair_result": 1
    },
    {
        "idx": 963,
        "db_id": "dog_kennels",
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "evidence": "",
        "gold": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "pred": "SELECT `email_address` FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
        "pred_result": 1,
        "repair_sql": "SELECT `email_address` FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
        "repair_result": 1
    },
    {
        "idx": 964,
        "db_id": "dog_kennels",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "evidence": "",
        "gold": "SELECT date_arrived ,  date_departed FROM Dogs",
        "pred": "SELECT `name`, `date_arrived`, `date_departed` FROM Dogs",
        "pred_result": 0,
        "repair_sql": "SELECT `name`, `date_arrived`, `date_departed` FROM Dogs",
        "repair_result": 0
    },
    {
        "idx": 965,
        "db_id": "dog_kennels",
        "question": "List the arrival date and the departure date for all the dogs.",
        "evidence": "",
        "gold": "SELECT date_arrived ,  date_departed FROM Dogs",
        "pred": "SELECT `name`, `date_arrived`, `date_departed` FROM Dogs",
        "pred_result": 0,
        "repair_sql": "SELECT `name`, `date_arrived`, `date_departed` FROM Dogs",
        "repair_result": 0
    },
    {
        "idx": 966,
        "db_id": "dog_kennels",
        "question": "How many dogs went through any treatments?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "pred": "SELECT COUNT(DISTINCT dog_id) FROM Treatments",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT dog_id) FROM Treatments",
        "repair_result": 1
    },
    {
        "idx": 967,
        "db_id": "dog_kennels",
        "question": "Count the number of dogs that went through a treatment.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "pred": "SELECT COUNT(DISTINCT T1.`dog_id`) FROM Treatments AS T1",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`dog_id`) FROM Treatments AS T1",
        "repair_result": 1
    },
    {
        "idx": 968,
        "db_id": "dog_kennels",
        "question": "How many professionals have performed any treatment to dogs?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "pred": "SELECT COUNT(DISTINCT professional_id) FROM Treatments",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT professional_id) FROM Treatments",
        "repair_result": 1
    },
    {
        "idx": 969,
        "db_id": "dog_kennels",
        "question": "Find the number of professionals who have ever treated dogs.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "pred": "SELECT COUNT(DISTINCT professional_id) FROM Treatments",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT professional_id) FROM Treatments",
        "repair_result": 1
    },
    {
        "idx": 970,
        "db_id": "dog_kennels",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "evidence": "",
        "gold": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "pred": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'",
        "pred_result": 1,
        "repair_sql": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'",
        "repair_result": 1
    },
    {
        "idx": 971,
        "db_id": "dog_kennels",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "evidence": "",
        "gold": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "pred": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'",
        "pred_result": 1,
        "repair_sql": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'",
        "repair_result": 1
    },
    {
        "idx": 972,
        "db_id": "dog_kennels",
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "evidence": "",
        "gold": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "pred": "SELECT `first_name`, `last_name`, `email_address` FROM Owners WHERE `state` LIKE '%North%'",
        "pred_result": 1,
        "repair_sql": "SELECT `first_name`, `last_name`, `email_address` FROM Owners WHERE `state` LIKE '%North%'",
        "repair_result": 1
    },
    {
        "idx": 973,
        "db_id": "dog_kennels",
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "evidence": "",
        "gold": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "pred": "SELECT `first_name`, `last_name`, `email_address` FROM Owners WHERE `state` LIKE '%North%'",
        "pred_result": 1,
        "repair_sql": "SELECT `first_name`, `last_name`, `email_address` FROM Owners WHERE `state` LIKE '%North%'",
        "repair_result": 1
    },
    {
        "idx": 974,
        "db_id": "dog_kennels",
        "question": "How many dogs have an age below the average?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "pred": "SELECT COUNT(*) FROM Dogs WHERE Age < (SELECT AVG(Age) FROM Dogs)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Dogs WHERE Age < (SELECT AVG(Age) FROM Dogs)",
        "repair_result": 1
    },
    {
        "idx": 975,
        "db_id": "dog_kennels",
        "question": "Count the number of dogs of an age below the average.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "pred": "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)",
        "repair_result": 1
    },
    {
        "idx": 976,
        "db_id": "dog_kennels",
        "question": "How much does the most recent treatment cost?",
        "evidence": "",
        "gold": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "pred": "SELECT MAX(cost_of_treatment) FROM Treatments",
        "pred_result": 0,
        "repair_sql": "SELECT MAX(cost_of_treatment) FROM Treatments",
        "repair_result": 0
    },
    {
        "idx": 977,
        "db_id": "dog_kennels",
        "question": "Show me the cost of the most recently performed treatment.",
        "evidence": "",
        "gold": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "pred": "SELECT MAX(date_of_treatment) FROM Treatments",
        "pred_result": 0,
        "repair_sql": "SELECT MAX(date_of_treatment) FROM Treatments",
        "repair_result": 0
    },
    {
        "idx": 978,
        "db_id": "dog_kennels",
        "question": "How many dogs have not gone through any treatment?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "pred": "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments)",
        "repair_result": 1
    },
    {
        "idx": 979,
        "db_id": "dog_kennels",
        "question": "Tell me the number of dogs that have not received any treatment .",
        "evidence": "",
        "gold": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "pred": "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments)",
        "repair_result": 1
    },
    {
        "idx": 980,
        "db_id": "dog_kennels",
        "question": "How many owners temporarily do not have any dogs?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "pred": "SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE date_departed IS NOT NULL)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE date_departed IS NOT NULL)",
        "repair_result": 1
    },
    {
        "idx": 981,
        "db_id": "dog_kennels",
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "pred": "SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs)",
        "repair_result": 1
    },
    {
        "idx": 982,
        "db_id": "dog_kennels",
        "question": "How many professionals did not operate any treatment on dogs?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "pred": "SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)",
        "repair_result": 1
    },
    {
        "idx": 983,
        "db_id": "dog_kennels",
        "question": "Find the number of professionals who have not treated any dogs.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "pred": "SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)",
        "repair_result": 1
    },
    {
        "idx": 984,
        "db_id": "dog_kennels",
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "evidence": "",
        "gold": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "pred": "SELECT `name`, `age`, `weight` FROM Dogs WHERE `abandoned_yn` = '1'",
        "pred_result": 1,
        "repair_sql": "SELECT `name`, `age`, `weight` FROM Dogs WHERE `abandoned_yn` = '1'",
        "repair_result": 1
    },
    {
        "idx": 985,
        "db_id": "dog_kennels",
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "evidence": "",
        "gold": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "pred": "SELECT `name`, `age`, `weight` FROM Dogs WHERE `abandoned_yn` = '1'",
        "pred_result": 1,
        "repair_sql": "SELECT `name`, `age`, `weight` FROM Dogs WHERE `abandoned_yn` = '1'",
        "repair_result": 1
    },
    {
        "idx": 986,
        "db_id": "dog_kennels",
        "question": "What is the average age of all the dogs?",
        "evidence": "",
        "gold": "SELECT avg(age) FROM Dogs",
        "pred": "SELECT AVG(age) FROM Dogs",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(age) FROM Dogs",
        "repair_result": 1
    },
    {
        "idx": 987,
        "db_id": "dog_kennels",
        "question": "Compute the average age of all the dogs.",
        "evidence": "",
        "gold": "SELECT avg(age) FROM Dogs",
        "pred": "SELECT AVG(age) FROM Dogs",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(age) FROM Dogs",
        "repair_result": 1
    },
    {
        "idx": 988,
        "db_id": "dog_kennels",
        "question": "What is the age of the oldest dog?",
        "evidence": "",
        "gold": "SELECT max(age) FROM Dogs",
        "pred": "SELECT MAX(age) FROM Dogs",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(age) FROM Dogs",
        "repair_result": 1
    },
    {
        "idx": 989,
        "db_id": "dog_kennels",
        "question": "Tell me the age of the oldest dog.",
        "evidence": "",
        "gold": "SELECT max(age) FROM Dogs",
        "pred": "SELECT MAX(age) FROM Dogs",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(age) FROM Dogs",
        "repair_result": 1
    },
    {
        "idx": 990,
        "db_id": "dog_kennels",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "evidence": "",
        "gold": "SELECT charge_type ,  charge_amount FROM Charges",
        "pred": "SELECT `charge_type`, `charge_amount` FROM Charges",
        "pred_result": 1,
        "repair_sql": "SELECT `charge_type`, `charge_amount` FROM Charges",
        "repair_result": 1
    },
    {
        "idx": 991,
        "db_id": "dog_kennels",
        "question": "List each charge type and its amount.",
        "evidence": "",
        "gold": "SELECT charge_type ,  charge_amount FROM Charges",
        "pred": "SELECT `charge_type`, `charge_amount` FROM Charges",
        "pred_result": 1,
        "repair_sql": "SELECT `charge_type`, `charge_amount` FROM Charges",
        "repair_result": 1
    },
    {
        "idx": 992,
        "db_id": "dog_kennels",
        "question": "How much does the most expensive charge type costs?",
        "evidence": "",
        "gold": "SELECT max(charge_amount) FROM Charges",
        "pred": "SELECT MAX(charge_amount) FROM Charges",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(charge_amount) FROM Charges",
        "repair_result": 1
    },
    {
        "idx": 993,
        "db_id": "dog_kennels",
        "question": "What is the charge amount of the most expensive charge type?",
        "evidence": "",
        "gold": "SELECT max(charge_amount) FROM Charges",
        "pred": "SELECT MAX(charge_amount) FROM Charges",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(charge_amount) FROM Charges",
        "repair_result": 1
    },
    {
        "idx": 994,
        "db_id": "dog_kennels",
        "question": "List the email, cell phone and home phone of all the professionals.",
        "evidence": "",
        "gold": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "pred": "SELECT `email_address`, `cell_number`, `home_phone` FROM Professionals",
        "pred_result": 1,
        "repair_sql": "SELECT `email_address`, `cell_number`, `home_phone` FROM Professionals",
        "repair_result": 1
    },
    {
        "idx": 995,
        "db_id": "dog_kennels",
        "question": "What are the email, cell phone and home phone of each professional?",
        "evidence": "",
        "gold": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "pred": "SELECT `email_address`, `cell_number`, `home_phone` FROM Professionals",
        "pred_result": 1,
        "repair_sql": "SELECT `email_address`, `cell_number`, `home_phone` FROM Professionals",
        "repair_result": 1
    },
    {
        "idx": 996,
        "db_id": "dog_kennels",
        "question": "What are all the possible breed type and size type combinations?",
        "evidence": "",
        "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "pred": "SELECT breed_name, size_description FROM Breeds, Sizes",
        "pred_result": 0,
        "repair_sql": "SELECT breed_name, size_description FROM Breeds, Sizes",
        "repair_result": 0
    },
    {
        "idx": 997,
        "db_id": "dog_kennels",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "evidence": "",
        "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "pred": "SELECT DISTINCT Dogs.`breed_code`, Dogs.`size_code` FROM Dogs",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT Dogs.`breed_code`, Dogs.`size_code` FROM Dogs",
        "repair_result": 1
    },
    {
        "idx": 998,
        "db_id": "dog_kennels",
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "pred": "SELECT P.`first_name`, TT.`treatment_type_description` FROM Professionals AS P JOIN Treatments AS T ON P.`professional_id` = T.`professional_id` JOIN Treatment_Types AS TT ON T.`treatment_type_code` = TT.`treatment_type_code`",
        "pred_result": 1,
        "repair_sql": "SELECT P.`first_name`, TT.`treatment_type_description` FROM Professionals AS P JOIN Treatments AS T ON P.`professional_id` = T.`professional_id` JOIN Treatment_Types AS TT ON T.`treatment_type_code` = TT.`treatment_type_code`",
        "repair_result": 1
    },
    {
        "idx": 999,
        "db_id": "dog_kennels",
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "pred": "SELECT P.`first_name`, TT.`treatment_type_description` FROM Professionals AS P JOIN Treatments AS T ON P.`professional_id` = T.`professional_id` JOIN Treatment_Types AS TT ON T.`treatment_type_code` = TT.`treatment_type_code`",
        "pred_result": 1,
        "repair_sql": "SELECT P.`first_name`, TT.`treatment_type_description` FROM Professionals AS P JOIN Treatments AS T ON P.`professional_id` = T.`professional_id` JOIN Treatment_Types AS TT ON T.`treatment_type_code` = TT.`treatment_type_code`",
        "repair_result": 1
    },
    {
        "idx": 1000,
        "db_id": "singer",
        "question": "How many singers are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM singer",
        "pred": "SELECT COUNT(*) FROM singer",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM singer",
        "repair_result": 1
    },
    {
        "idx": 1001,
        "db_id": "singer",
        "question": "What is the count of singers?",
        "evidence": "",
        "gold": "SELECT count(*) FROM singer",
        "pred": "SELECT COUNT(*) FROM singer",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM singer",
        "repair_result": 1
    },
    {
        "idx": 1002,
        "db_id": "singer",
        "question": "List the name of singers in ascending order of net worth.",
        "evidence": "",
        "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "pred": "SELECT `Name` FROM singer ORDER BY `Net_Worth_Millions` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM singer ORDER BY `Net_Worth_Millions` ASC",
        "repair_result": 1
    },
    {
        "idx": 1003,
        "db_id": "singer",
        "question": "What are the names of singers ordered by ascending net worth?",
        "evidence": "",
        "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "pred": "SELECT `Name` FROM singer ORDER BY `Net_Worth_Millions` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM singer ORDER BY `Net_Worth_Millions` ASC",
        "repair_result": 1
    },
    {
        "idx": 1004,
        "db_id": "singer",
        "question": "What are the birth year and citizenship of singers?",
        "evidence": "",
        "gold": "SELECT Birth_Year ,  Citizenship FROM singer",
        "pred": "SELECT `Birth_Year`, `Citizenship` FROM singer",
        "pred_result": 1,
        "repair_sql": "SELECT `Birth_Year`, `Citizenship` FROM singer",
        "repair_result": 1
    },
    {
        "idx": 1005,
        "db_id": "singer",
        "question": "What are the birth years and citizenships of the singers?",
        "evidence": "",
        "gold": "SELECT Birth_Year ,  Citizenship FROM singer",
        "pred": "SELECT `Birth_Year`, `Citizenship` FROM singer",
        "pred_result": 1,
        "repair_sql": "SELECT `Birth_Year`, `Citizenship` FROM singer",
        "repair_result": 1
    },
    {
        "idx": 1006,
        "db_id": "singer",
        "question": "List the name of singers whose citizenship is not \"France\".",
        "evidence": "",
        "gold": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "pred": "SELECT `Name` FROM singer WHERE Citizenship != 'France'",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM singer WHERE Citizenship != 'France'",
        "repair_result": 1
    },
    {
        "idx": 1007,
        "db_id": "singer",
        "question": "What are the names of the singers who are not French citizens?",
        "evidence": "",
        "gold": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "pred": "SELECT DISTINCT `Name` FROM singer WHERE Citizenship != 'France'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Name` FROM singer WHERE Citizenship != 'France'",
        "repair_result": 1
    },
    {
        "idx": 1008,
        "db_id": "singer",
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "evidence": "",
        "gold": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "pred": "SELECT `Name` FROM singer WHERE Birth_Year IN (1948.0, 1949.0)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM singer WHERE Birth_Year IN (1948.0, 1949.0)",
        "repair_result": 1
    },
    {
        "idx": 1009,
        "db_id": "singer",
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "evidence": "",
        "gold": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "pred": "SELECT `Name` FROM singer WHERE Birth_Year IN (1948.0, 1949.0)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM singer WHERE Birth_Year IN (1948.0, 1949.0)",
        "repair_result": 1
    },
    {
        "idx": 1010,
        "db_id": "singer",
        "question": "What is the name of the singer with the largest net worth?",
        "evidence": "",
        "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "pred": "SELECT `Name` FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)",
        "repair_result": 1
    },
    {
        "idx": 1011,
        "db_id": "singer",
        "question": "What is the name of the singer who is worth the most?",
        "evidence": "",
        "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "pred": "SELECT `Name` FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)",
        "repair_result": 1
    },
    {
        "idx": 1012,
        "db_id": "singer",
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "evidence": "",
        "gold": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "pred": "SELECT `Citizenship`, COUNT(DISTINCT `Singer_ID`) FROM singer GROUP BY `Citizenship`",
        "pred_result": 1,
        "repair_sql": "SELECT `Citizenship`, COUNT(DISTINCT `Singer_ID`) FROM singer GROUP BY `Citizenship`",
        "repair_result": 1
    },
    {
        "idx": 1013,
        "db_id": "singer",
        "question": "For each citizenship, how many singers are from that country?",
        "evidence": "",
        "gold": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "pred": "SELECT `Citizenship`, COUNT(*) FROM singer GROUP BY `Citizenship`",
        "pred_result": 1,
        "repair_sql": "SELECT `Citizenship`, COUNT(*) FROM singer GROUP BY `Citizenship`",
        "repair_result": 1
    },
    {
        "idx": 1014,
        "db_id": "singer",
        "question": "Please show the most common citizenship of singers.",
        "evidence": "",
        "gold": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT `Citizenship`, COUNT(*) AS `Count` FROM singer GROUP BY `Citizenship` ORDER BY `Count` DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Citizenship`, COUNT(*) AS `Count` FROM singer GROUP BY `Citizenship` ORDER BY `Count` DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 1015,
        "db_id": "singer",
        "question": "What is the most common singer citizenship ?",
        "evidence": "",
        "gold": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "pred": "SELECT `Citizenship`, COUNT(*) AS count FROM singer GROUP BY `Citizenship` ORDER BY count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Citizenship`, COUNT(*) AS count FROM singer GROUP BY `Citizenship` ORDER BY count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 1016,
        "db_id": "singer",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "evidence": "",
        "gold": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "pred": "SELECT `Citizenship`, MAX(`Net_Worth_Millions`) FROM singer GROUP BY `Citizenship`",
        "pred_result": 1,
        "repair_sql": "SELECT `Citizenship`, MAX(`Net_Worth_Millions`) FROM singer GROUP BY `Citizenship`",
        "repair_result": 1
    },
    {
        "idx": 1017,
        "db_id": "singer",
        "question": "For each citizenship, what is the maximum net worth?",
        "evidence": "",
        "gold": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "pred": "SELECT `Citizenship`, MAX(`Net_Worth_Millions`) FROM singer GROUP BY `Citizenship`",
        "pred_result": 1,
        "repair_sql": "SELECT `Citizenship`, MAX(`Net_Worth_Millions`) FROM singer GROUP BY `Citizenship`",
        "repair_result": 1
    },
    {
        "idx": 1018,
        "db_id": "singer",
        "question": "Show titles of songs and names of singers.",
        "evidence": "",
        "gold": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "pred": "SELECT T2.`Title`, T1.`Name` FROM singer AS T1 JOIN song AS T2 ON T1.`Singer_ID` = T2.`Singer_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Title`, T1.`Name` FROM singer AS T1 JOIN song AS T2 ON T1.`Singer_ID` = T2.`Singer_ID`",
        "repair_result": 1
    },
    {
        "idx": 1019,
        "db_id": "singer",
        "question": "What are the song titles and singer names?",
        "evidence": "",
        "gold": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "pred": "SELECT T2.`Title`, T1.`Name` FROM singer AS T1 JOIN song AS T2 ON T1.`Singer_ID` = T2.`Singer_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Title`, T1.`Name` FROM singer AS T1 JOIN song AS T2 ON T1.`Singer_ID` = T2.`Singer_ID`",
        "repair_result": 1
    },
    {
        "idx": 1020,
        "db_id": "singer",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "pred": "SELECT DISTINCT T1.`Name` FROM singer AS T1 JOIN song AS T2 ON T1.`Singer_ID` = T2.`Singer_ID` WHERE T2.`Sales` > 300000",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`Name` FROM singer AS T1 JOIN song AS T2 ON T1.`Singer_ID` = T2.`Singer_ID` WHERE T2.`Sales` > 300000",
        "repair_result": 1
    },
    {
        "idx": 1021,
        "db_id": "singer",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "pred": "SELECT DISTINCT T1.`Name` FROM singer AS T1 JOIN song AS T2 ON T1.`Singer_ID` = T2.`Singer_ID` WHERE T2.`Sales` > 300000",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`Name` FROM singer AS T1 JOIN song AS T2 ON T1.`Singer_ID` = T2.`Singer_ID` WHERE T2.`Sales` > 300000",
        "repair_result": 1
    },
    {
        "idx": 1022,
        "db_id": "singer",
        "question": "Show the names of singers that have more than one song.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "pred": "SELECT DISTINCT T1.`Name` FROM singer AS T1 JOIN song AS T2 ON T1.`Singer_ID` = T2.`Singer_ID` GROUP BY T1.`Singer_ID` HAVING COUNT(T2.`Singer_ID`) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`Name` FROM singer AS T1 JOIN song AS T2 ON T1.`Singer_ID` = T2.`Singer_ID` GROUP BY T1.`Singer_ID` HAVING COUNT(T2.`Singer_ID`) > 1",
        "repair_result": 1
    },
    {
        "idx": 1023,
        "db_id": "singer",
        "question": "What are the names of the singers that have more than one songs?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "pred": "SELECT DISTINCT s.`Name` FROM singer s JOIN song so ON s.`Singer_ID` = so.`Singer_ID` GROUP BY s.`Singer_ID` HAVING COUNT(so.`Song_ID`) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT s.`Name` FROM singer s JOIN song so ON s.`Singer_ID` = so.`Singer_ID` GROUP BY s.`Singer_ID` HAVING COUNT(so.`Song_ID`) > 1",
        "repair_result": 1
    },
    {
        "idx": 1024,
        "db_id": "singer",
        "question": "Show the names of singers and the total sales of their songs.",
        "evidence": "",
        "gold": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "pred": "SELECT s.`Name`, SUM(song.`Sales`) AS Total_Sales FROM singer AS s JOIN song ON s.`Singer_ID` = song.`Singer_ID` GROUP BY s.`Name`",
        "pred_result": 1,
        "repair_sql": "SELECT s.`Name`, SUM(song.`Sales`) AS Total_Sales FROM singer AS s JOIN song ON s.`Singer_ID` = song.`Singer_ID` GROUP BY s.`Name`",
        "repair_result": 1
    },
    {
        "idx": 1025,
        "db_id": "singer",
        "question": "For each singer name, what is the total sales for their songs?",
        "evidence": "",
        "gold": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "pred": "SELECT s.`Name`, SUM(song.`Sales`) AS Total_Sales FROM singer s JOIN song ON s.`Singer_ID` = song.`Singer_ID` GROUP BY s.`Name`",
        "pred_result": 1,
        "repair_sql": "SELECT s.`Name`, SUM(song.`Sales`) AS Total_Sales FROM singer s JOIN song ON s.`Singer_ID` = song.`Singer_ID` GROUP BY s.`Name`",
        "repair_result": 1
    },
    {
        "idx": 1026,
        "db_id": "singer",
        "question": "List the name of singers that do not have any song.",
        "evidence": "",
        "gold": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "pred": "SELECT `Name` FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)",
        "repair_result": 1
    },
    {
        "idx": 1027,
        "db_id": "singer",
        "question": "What is the sname of every sing that does not have any song?",
        "evidence": "",
        "gold": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "pred": "SELECT `Name` FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)",
        "repair_result": 1
    },
    {
        "idx": 1028,
        "db_id": "singer",
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "evidence": "",
        "gold": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "pred": "SELECT DISTINCT `Citizenship` FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT `Citizenship` FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955",
        "repair_result": 0
    },
    {
        "idx": 1029,
        "db_id": "singer",
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "evidence": "",
        "gold": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "pred": "SELECT DISTINCT `Citizenship` FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT `Citizenship` FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955",
        "repair_result": 0
    },
    {
        "idx": 1030,
        "db_id": "real_estate_properties",
        "question": "How many available features are there in total?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Other_Available_Features",
        "pred": "SELECT COUNT(*) FROM Other_Available_Features",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Other_Available_Features",
        "repair_result": 1
    },
    {
        "idx": 1031,
        "db_id": "real_estate_properties",
        "question": "What is the feature type name of feature AirCon?",
        "evidence": "",
        "gold": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "pred": "SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = ( SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon' )",
        "pred_result": 1,
        "repair_sql": "SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = ( SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon' )",
        "repair_result": 1
    },
    {
        "idx": 1032,
        "db_id": "real_estate_properties",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "evidence": "",
        "gold": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "pred": "SELECT DISTINCT T2.`property_type_description` FROM Ref_Property_Types AS T2 JOIN Properties AS T1 ON T1.`property_type_code` = T2.`property_type_code`",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.`property_type_description` FROM Ref_Property_Types AS T2 JOIN Properties AS T1 ON T1.`property_type_code` = T2.`property_type_code`",
        "repair_result": 1
    },
    {
        "idx": 1033,
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "evidence": "",
        "gold": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "pred": "SELECT `property_name` FROM Properties WHERE `property_type_code` IN ('House', 'Apartment') AND `room_count` > 1",
        "pred_result": 0,
        "repair_sql": "SELECT `property_name` FROM Properties WHERE `property_type_code` IN ('House', 'Apartment') AND `room_count` > 1",
        "repair_result": 0
    }
]