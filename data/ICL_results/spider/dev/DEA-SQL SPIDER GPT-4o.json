[
    {
        "idx": 0,
        "db_id": "concert_singer",
        "question": "How many singers do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM singer",
        "pred": "SELECT count(*) FROM SINGER",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM SINGER;",
        "repair_result": 1
    },
    {
        "idx": 1,
        "db_id": "concert_singer",
        "question": "What is the total number of singers?",
        "evidence": "",
        "gold": "SELECT count(*) FROM singer",
        "pred": "SELECT count(*) FROM singer",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM singer",
        "repair_result": 1
    },
    {
        "idx": 2,
        "db_id": "concert_singer",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "evidence": "",
        "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "pred": "SELECT name, country, age FROM SINGER ORDER BY age DESC",
        "pred_result": 1,
        "repair_sql": "SELECT name, country, age FROM SINGER ORDER BY age DESC;",
        "repair_result": 1
    },
    {
        "idx": 3,
        "db_id": "concert_singer",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "evidence": "",
        "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "pred": "SELECT name, country, age FROM singer ORDER BY age DESC",
        "pred_result": 1,
        "repair_sql": "SELECT name,        country,        age FROM singer ORDER BY age DESC;",
        "repair_result": 1
    },
    {
        "idx": 4,
        "db_id": "concert_singer",
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "evidence": "",
        "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "pred": "SELECT avg(age), min(age), max(age) FROM SINGER WHERE country = 'France'",
        "pred_result": 1,
        "repair_sql": "SELECT avg(age),        min(age),        max(age) FROM SINGER WHERE country = 'France';",
        "repair_result": 1
    },
    {
        "idx": 5,
        "db_id": "concert_singer",
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "evidence": "",
        "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "pred": "SELECT avg(age), min(age), max(age) FROM singer WHERE country = 'France'",
        "pred_result": 1,
        "repair_sql": "SELECT avg(age), min(age), max(age) FROM singer WHERE country = 'France';",
        "repair_result": 1
    },
    {
        "idx": 6,
        "db_id": "concert_singer",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "evidence": "",
        "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "pred": "SELECT name, song_release_year FROM SINGER WHERE age = (SELECT MIN(age) FROM SINGER)",
        "pred_result": 0,
        "repair_sql": "SELECT name, song_release_year FROM SINGER ORDER BY age ASC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 7,
        "db_id": "concert_singer",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "evidence": "",
        "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "pred": "SELECT song_name, song_release_year FROM SINGER WHERE age = (SELECT MIN(age) FROM SINGER)",
        "pred_result": 1,
        "repair_sql": "SELECT name, song_name, song_release_year FROM SINGER ORDER BY age ASC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 8,
        "db_id": "concert_singer",
        "question": "What are all distinct countries where singers above age 20 are from?",
        "evidence": "",
        "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "pred": "SELECT DISTINCT country FROM singer WHERE age > 20",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT country FROM singer WHERE age > 20",
        "repair_result": 1
    },
    {
        "idx": 9,
        "db_id": "concert_singer",
        "question": "What are  the different countries with singers above age 20?",
        "evidence": "",
        "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "pred": "SELECT DISTINCT country FROM singer WHERE age > 20",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT country FROM singer WHERE age > 20;",
        "repair_result": 1
    },
    {
        "idx": 10,
        "db_id": "concert_singer",
        "question": "Show all countries and the number of singers in each country.",
        "evidence": "",
        "gold": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "pred": "SELECT country, COUNT(*) FROM SINGER GROUP BY country",
        "pred_result": 1,
        "repair_sql": "SELECT country, COUNT(*) FROM SINGER GROUP BY country;",
        "repair_result": 1
    },
    {
        "idx": 11,
        "db_id": "concert_singer",
        "question": "How many singers are from each country?",
        "evidence": "",
        "gold": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "pred": "SELECT country, count(*) FROM singer GROUP BY country",
        "pred_result": 1,
        "repair_sql": "SELECT country, count(*) FROM singer GROUP BY country;",
        "repair_result": 1
    },
    {
        "idx": 12,
        "db_id": "concert_singer",
        "question": "List all song names by singers above the average age.",
        "evidence": "",
        "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "pred": "SELECT song_name FROM SINGER WHERE age > (SELECT avg(age) FROM SINGER)",
        "pred_result": 1,
        "repair_sql": "SELECT song_name FROM SINGER WHERE age > (SELECT avg(age) FROM SINGER);",
        "repair_result": 1
    },
    {
        "idx": 13,
        "db_id": "concert_singer",
        "question": "What are all the song names by singers who are older than average?",
        "evidence": "",
        "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "pred": "SELECT song_name FROM SINGER WHERE age > (SELECT avg(age) FROM SINGER)",
        "pred_result": 1,
        "repair_sql": "SELECT song_name FROM SINGER WHERE age > (SELECT avg(age) FROM SINGER);",
        "repair_result": 1
    },
    {
        "idx": 14,
        "db_id": "concert_singer",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "evidence": "",
        "gold": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "pred": "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "pred_result": 1,
        "repair_sql": "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
        "repair_result": 1
    },
    {
        "idx": 15,
        "db_id": "concert_singer",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "evidence": "",
        "gold": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "pred": "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "pred_result": 1,
        "repair_sql": "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
        "repair_result": 1
    },
    {
        "idx": 16,
        "db_id": "concert_singer",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "evidence": "",
        "gold": "select max(capacity), average from stadium",
        "pred": "SELECT max(capacity), avg(average) FROM stadium",
        "pred_result": 0,
        "repair_sql": "SELECT max(capacity), avg(average) FROM stadium;",
        "repair_result": 0
    },
    {
        "idx": 17,
        "db_id": "concert_singer",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "evidence": "",
        "gold": "select avg(capacity) ,  max(capacity) from stadium",
        "pred": "SELECT avg(capacity), max(capacity) FROM stadium",
        "pred_result": 1,
        "repair_sql": "SELECT avg(capacity), max(capacity) FROM stadium;",
        "repair_result": 1
    },
    {
        "idx": 18,
        "db_id": "concert_singer",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "evidence": "",
        "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "pred": "SELECT name, capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT name, capacity FROM stadium ORDER BY average DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 19,
        "db_id": "concert_singer",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "evidence": "",
        "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "pred": "SELECT name, capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT name, capacity FROM stadium ORDER BY average DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 20,
        "db_id": "concert_singer",
        "question": "How many concerts are there in year 2014 or 2015?",
        "evidence": "",
        "gold": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "pred": "SELECT count(*) FROM concert WHERE year IN ('2014', '2015')",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM concert WHERE year IN ('2014', '2015');",
        "repair_result": 1
    },
    {
        "idx": 21,
        "db_id": "concert_singer",
        "question": "How many concerts occurred in 2014 or 2015?",
        "evidence": "",
        "gold": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "pred": "SELECT count(*) FROM concert WHERE year IN ('2014', '2015')",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM concert WHERE year IN ('2014', '2015')",
        "repair_result": 1
    },
    {
        "idx": 22,
        "db_id": "concert_singer",
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "evidence": "",
        "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "pred": "SELECT S.name, COUNT(C.concert_id) AS number_of_concerts FROM STADIUM AS S JOIN CONCERT AS C ON S.stadium_id = C.stadium_id GROUP BY S.stadium_id",
        "pred_result": 1,
        "repair_sql": "SELECT S.name, COUNT(C.concert_id) AS number_of_concerts FROM STADIUM AS S JOIN CONCERT AS C ON S.stadium_id = C.stadium_id GROUP BY S.stadium_id;",
        "repair_result": 1
    },
    {
        "idx": 23,
        "db_id": "concert_singer",
        "question": "For each stadium, how many concerts play there?",
        "evidence": "",
        "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "pred": "SELECT S.name, COUNT(C.concert_id) AS concert_count FROM STADIUM AS S LEFT JOIN CONCERT AS C ON S.stadium_id = C.stadium_id GROUP BY S.stadium_id",
        "pred_result": 0,
        "repair_sql": "SELECT S.name, COUNT(C.concert_id) AS concert_count FROM STADIUM AS S LEFT JOIN CONCERT AS C ON S.stadium_id = C.stadium_id GROUP BY S.stadium_id;",
        "repair_result": 0
    },
    {
        "idx": 24,
        "db_id": "concert_singer",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "evidence": "",
        "gold": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T2.name, T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T1.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T2.name, T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T1.stadium_id, T2.name, T2.capacity ORDER BY count(*) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 25,
        "db_id": "concert_singer",
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "evidence": "",
        "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "pred": "SELECT S.name, S.capacity FROM STADIUM AS S JOIN CONCERT AS C ON S.stadium_id = C.stadium_id WHERE C.year > 2013 GROUP BY S.stadium_id ORDER BY COUNT(C.concert_id) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT S.name, S.capacity FROM STADIUM AS S INNER JOIN CONCERT AS C ON S.stadium_id = C.stadium_id WHERE C.year > 2013 GROUP BY S.name, S.capacity ORDER BY COUNT(C.concert_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 26,
        "db_id": "concert_singer",
        "question": "Which year has most number of concerts?",
        "evidence": "",
        "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT year FROM CONCERT GROUP BY year ORDER BY count(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT year FROM CONCERT GROUP BY year ORDER BY COUNT(concert_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 27,
        "db_id": "concert_singer",
        "question": "What is the year that had the most concerts?",
        "evidence": "",
        "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT year FROM concert GROUP BY year ORDER BY count(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT year FROM concert GROUP BY year ORDER BY count(*) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 28,
        "db_id": "concert_singer",
        "question": "Show the stadium names without any concert.",
        "evidence": "",
        "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "pred": "SELECT name FROM STADIUM EXCEPT SELECT S.name FROM STADIUM AS S JOIN CONCERT AS C ON S.stadium_id = C.stadium_id",
        "pred_result": 1,
        "repair_sql": "SELECT S.name FROM STADIUM AS S LEFT JOIN CONCERT AS C ON S.stadium_id = C.stadium_id WHERE C.stadium_id IS NULL;",
        "repair_result": 1
    },
    {
        "idx": 29,
        "db_id": "concert_singer",
        "question": "What are the names of the stadiums without any concerts?",
        "evidence": "",
        "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "pred": "SELECT name FROM STADIUM EXCEPT SELECT DISTINCT S.name FROM STADIUM AS S JOIN CONCERT AS C ON S.stadium_id = C.stadium_id",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM STADIUM EXCEPT SELECT DISTINCT S.name FROM STADIUM AS S JOIN CONCERT AS C ON S.stadium_id = C.stadium_id",
        "repair_result": 1
    },
    {
        "idx": 30,
        "db_id": "concert_singer",
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "evidence": "",
        "gold": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "pred": "SELECT country FROM SINGER WHERE age > 40 INTERSECT SELECT country FROM SINGER WHERE age < 30",
        "pred_result": 1,
        "repair_sql": "SELECT country FROM SINGER WHERE age > 40 INTERSECT SELECT country FROM SINGER WHERE age < 30;",
        "repair_result": 1
    },
    {
        "idx": 31,
        "db_id": "concert_singer",
        "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "evidence": "",
        "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "pred": "SELECT name FROM STADIUM EXCEPT SELECT S.name FROM STADIUM AS S JOIN CONCERT AS C ON S.stadium_id = C.stadium_id WHERE C.year = 2014",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM STADIUM EXCEPT SELECT S.name FROM STADIUM AS S JOIN CONCERT AS C ON S.stadium_id = C.stadium_id WHERE C.year = 2014;",
        "repair_result": 1
    },
    {
        "idx": 32,
        "db_id": "concert_singer",
        "question": "What are the names of all stadiums that did not have a concert in 2014?",
        "evidence": "",
        "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "pred": "SELECT name FROM stadium EXCEPT SELECT S.name FROM stadium AS S JOIN concert AS C ON S.stadium_id = C.stadium_id WHERE C.year = '2014'",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM stadium EXCEPT SELECT S.name FROM stadium AS S JOIN concert AS C ON S.stadium_id = C.stadium_id WHERE C.year = '2014';",
        "repair_result": 1
    },
    {
        "idx": 33,
        "db_id": "concert_singer",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "evidence": "",
        "gold": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "pred": "SELECT C.concert_name, C.theme, COUNT(SIC.singer_id) AS number_of_singers FROM CONCERT AS C LEFT JOIN SINGER_IN_CONCERT AS SIC ON C.concert_id = SIC.concert_id GROUP BY C.concert_id",
        "pred_result": 1,
        "repair_sql": "SELECT C.concert_name, C.theme, COUNT(SIC.singer_id) AS number_of_singers FROM CONCERT AS C LEFT JOIN SINGER_IN_CONCERT AS SIC ON C.concert_id = SIC.concert_id GROUP BY C.concert_id, C.concert_name, C.theme;",
        "repair_result": 1
    },
    {
        "idx": 34,
        "db_id": "concert_singer",
        "question": "What are the names , themes , and number of singers for every concert ?",
        "evidence": "",
        "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "pred": "SELECT C.concert_name, C.theme, COUNT(SC.singer_id) AS number_of_singers FROM CONCERT AS C JOIN SINGER_IN_CONCERT AS SC ON C.concert_id = SC.concert_id GROUP BY C.concert_id",
        "pred_result": 1,
        "repair_sql": "SELECT C.concert_name, C.theme, COUNT(SC.singer_id) AS number_of_singers FROM CONCERT AS C JOIN SINGER_IN_CONCERT AS SC ON C.concert_id = SC.concert_id GROUP BY C.concert_name, C.theme;",
        "repair_result": 1
    },
    {
        "idx": 35,
        "db_id": "concert_singer",
        "question": "List singer names and number of concerts for each singer.",
        "evidence": "",
        "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "pred": "SELECT S.name, COUNT(SC.concert_id) AS number_of_concerts FROM SINGER AS S JOIN SINGER_IN_CONCERT AS SC ON S.singer_id = SC.singer_id GROUP BY S.singer_id",
        "pred_result": 1,
        "repair_sql": "SELECT S.name, COUNT(SC.concert_id) AS number_of_concerts FROM SINGER AS S JOIN SINGER_IN_CONCERT AS SC ON S.singer_id = SC.singer_id GROUP BY S.singer_id, S.name;",
        "repair_result": 1
    },
    {
        "idx": 36,
        "db_id": "concert_singer",
        "question": "What are the names of the singers and number of concerts for each person?",
        "evidence": "",
        "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "pred": "SELECT S.name, COUNT(SC.concert_id) AS number_of_concerts FROM SINGER AS S LEFT JOIN SINGER_IN_CONCERT AS SC ON S.singer_id = SC.singer_id GROUP BY S.singer_id",
        "pred_result": 0,
        "repair_sql": "SELECT S.name, COUNT(SC.concert_id) AS number_of_concerts FROM SINGER AS S LEFT JOIN SINGER_IN_CONCERT AS SC ON S.singer_id = SC.singer_id GROUP BY S.singer_id;",
        "repair_result": 0
    },
    {
        "idx": 37,
        "db_id": "concert_singer",
        "question": "List all singer names in concerts in year 2014.",
        "evidence": "",
        "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "pred": "SELECT S.name FROM SINGER AS S JOIN SINGER_IN_CONCERT AS SIC ON S.singer_id = SIC.singer_id JOIN CONCERT AS C ON SIC.concert_id = C.concert_id WHERE C.year = '2014'",
        "pred_result": 1,
        "repair_sql": "SELECT S.name FROM SINGER AS S JOIN SINGER_IN_CONCERT AS SIC ON S.singer_id = SIC.singer_id JOIN CONCERT AS C ON SIC.concert_id = C.concert_id WHERE C.year = '2014'",
        "repair_result": 1
    },
    {
        "idx": 38,
        "db_id": "concert_singer",
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "evidence": "",
        "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "pred": "SELECT S.name FROM SINGER AS S JOIN SINGER_IN_CONCERT AS SIC ON S.singer_id = SIC.singer_id JOIN CONCERT AS C ON SIC.concert_id = C.concert_id WHERE C.year = '2014'",
        "pred_result": 1,
        "repair_sql": "SELECT S.name FROM SINGER AS S JOIN SINGER_IN_CONCERT AS SIC ON S.singer_id = SIC.singer_id JOIN CONCERT AS C ON SIC.concert_id = C.concert_id WHERE C.year = '2014'",
        "repair_result": 1
    },
    {
        "idx": 39,
        "db_id": "concert_singer",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "evidence": "",
        "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "pred": "SELECT name, country FROM SINGER WHERE song_name LIKE '%Hey%';",
        "pred_result": 1,
        "repair_sql": "SELECT name, country FROM SINGER WHERE song_name LIKE '%Hey%';",
        "repair_result": 1
    },
    {
        "idx": 40,
        "db_id": "concert_singer",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "evidence": "",
        "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "pred": "SELECT name, country FROM singer WHERE song_name LIKE '%Hey%';",
        "pred_result": 1,
        "repair_sql": "SELECT name,        country FROM singer WHERE song_name LIKE '%Hey%';",
        "repair_result": 1
    },
    {
        "idx": 41,
        "db_id": "concert_singer",
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "evidence": "",
        "gold": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "pred": "SELECT name, location FROM STADIUM WHERE stadium_id IN (     SELECT stadium_id     FROM CONCERT     WHERE year = '2014'     INTERSECT     SELECT stadium_id     FROM CONCERT     WHERE year = '2015' )",
        "pred_result": 1,
        "repair_sql": "SELECT name, location FROM STADIUM WHERE stadium_id IN (     SELECT stadium_id     FROM CONCERT     WHERE year = '2014'     INTERSECT     SELECT stadium_id     FROM CONCERT     WHERE year = '2015' )",
        "repair_result": 1
    },
    {
        "idx": 42,
        "db_id": "concert_singer",
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "evidence": "",
        "gold": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "pred": "SELECT name, location FROM STADIUM WHERE stadium_id IN (     SELECT stadium_id     FROM CONCERT     WHERE year = '2014'     INTERSECT     SELECT stadium_id     FROM CONCERT     WHERE year = '2015' )",
        "pred_result": 1,
        "repair_sql": "SELECT name, location FROM STADIUM WHERE stadium_id IN (     SELECT stadium_id     FROM CONCERT     WHERE year = '2014'     INTERSECT     SELECT stadium_id     FROM CONCERT     WHERE year = '2015' )",
        "repair_result": 1
    },
    {
        "idx": 43,
        "db_id": "concert_singer",
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "evidence": "",
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "pred": "SELECT count(*) FROM concert WHERE stadium_id = (     SELECT stadium_id     FROM stadium     ORDER BY capacity DESC     LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM concert WHERE stadium_id = (     SELECT stadium_id     FROM stadium     ORDER BY capacity DESC     LIMIT 1 );",
        "repair_result": 1
    },
    {
        "idx": 44,
        "db_id": "concert_singer",
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "evidence": "",
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "pred": "SELECT count(*) FROM concert WHERE stadium_id = (     SELECT stadium_id     FROM stadium     ORDER BY capacity DESC     LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM concert WHERE stadium_id = (     SELECT stadium_id     FROM stadium     ORDER BY capacity DESC     LIMIT 1 );",
        "repair_result": 1
    },
    {
        "idx": 45,
        "db_id": "pets_1",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "evidence": "",
        "gold": "SELECT count(*) FROM pets WHERE weight  >  10",
        "pred": "SELECT COUNT(*) FROM PETS WHERE weight > 10",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM PETS WHERE weight > 10",
        "repair_result": 1
    },
    {
        "idx": 46,
        "db_id": "pets_1",
        "question": "How many pets have a greater weight than 10?",
        "evidence": "",
        "gold": "SELECT count(*) FROM pets WHERE weight  >  10",
        "pred": "SELECT count(*) FROM pets WHERE weight > 10",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM pets WHERE weight > 10;",
        "repair_result": 1
    },
    {
        "idx": 47,
        "db_id": "pets_1",
        "question": "Find the weight of the youngest dog.",
        "evidence": "",
        "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "pred": "SELECT weight FROM PETS WHERE pettype = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM PETS WHERE pettype = 'dog')",
        "pred_result": 1,
        "repair_sql": "SELECT weight  FROM PETS  WHERE pettype = 'dog'  ORDER BY pet_age ASC  LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 48,
        "db_id": "pets_1",
        "question": "How much does the youngest dog weigh?",
        "evidence": "",
        "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "pred": "SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = 'dog') INTERSECT SELECT weight FROM pets WHERE pettype = 'dog';",
        "pred_result": 1,
        "repair_sql": "SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = 'dog') AND pettype = 'dog' LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 49,
        "db_id": "pets_1",
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "evidence": "",
        "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "pred": "SELECT pettype, max(weight) as max_weight FROM PETS GROUP BY pettype",
        "pred_result": 0,
        "repair_sql": "SELECT pettype, max(weight) as max_weight FROM PETS GROUP BY pettype;",
        "repair_result": 0
    },
    {
        "idx": 50,
        "db_id": "pets_1",
        "question": "List the maximum weight and type for each type of pet.",
        "evidence": "",
        "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "pred": "SELECT pettype, MAX(weight) as max_weight FROM PETS GROUP BY pettype",
        "pred_result": 0,
        "repair_sql": "SELECT pettype, MAX(weight) as max_weight FROM PETS GROUP BY pettype;",
        "repair_result": 0
    },
    {
        "idx": 51,
        "db_id": "pets_1",
        "question": "Find number of pets owned by students who are older than 20.",
        "evidence": "",
        "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "pred": "SELECT COUNT(DISTINCT T2.petid) AS num_pets FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T2.petid) AS num_pets FROM STUDENT AS T1 JOIN HAS_PET AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20;",
        "repair_result": 1
    },
    {
        "idx": 52,
        "db_id": "pets_1",
        "question": "How many pets are owned by students that have an age greater than 20?",
        "evidence": "",
        "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "pred": "SELECT COUNT(DISTINCT t2.petid) FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid WHERE t1.age > 20",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT t2.petid) FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid WHERE t1.age > 20;",
        "repair_result": 1
    },
    {
        "idx": 53,
        "db_id": "pets_1",
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "evidence": "",
        "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "pred": "SELECT COUNT(*) FROM PETS AS P JOIN HAS_PET AS HP ON P.petid = HP.petid JOIN STUDENT AS S ON HP.stuid = S.stuid WHERE P.pettype = 'dog' AND S.sex = 'F'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM PETS AS P JOIN HAS_PET AS HP ON P.petid = HP.petid JOIN STUDENT AS S ON HP.stuid = S.stuid WHERE P.pettype = 'dog' AND S.sex = 'F'",
        "repair_result": 1
    },
    {
        "idx": 54,
        "db_id": "pets_1",
        "question": "How many dog pets are raised by female students?",
        "evidence": "",
        "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "pred": "SELECT count(DISTINCT pets.petid) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'dog' AND student.sex = 'F'",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT pets.petid) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'dog' AND student.sex = 'F'",
        "repair_result": 1
    },
    {
        "idx": 55,
        "db_id": "pets_1",
        "question": "Find the number of distinct type of pets.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT pettype) FROM pets",
        "pred": "SELECT count(DISTINCT pettype) FROM PETS",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT pettype) FROM PETS;",
        "repair_result": 1
    },
    {
        "idx": 56,
        "db_id": "pets_1",
        "question": "How many different types of pet are there?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT pettype) FROM pets",
        "pred": "SELECT count(DISTINCT pettype) FROM PETS",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT pettype) FROM PETS;",
        "repair_result": 1
    },
    {
        "idx": 57,
        "db_id": "pets_1",
        "question": "Find the first name of students who have cat or dog pet.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "pred": "SELECT S.fname FROM STUDENT AS S JOIN HAS_PET AS HP ON S.stuid = HP.stuid JOIN PETS AS P ON HP.petid = P.petid WHERE P.pettype IN ('cat', 'dog')",
        "pred_result": 1,
        "repair_sql": "SELECT S.fname FROM STUDENT AS S JOIN HAS_PET AS HP ON S.stuid = HP.stuid JOIN PETS AS P ON HP.petid = P.petid WHERE P.pettype IN ('cat', 'dog')",
        "repair_result": 1
    },
    {
        "idx": 58,
        "db_id": "pets_1",
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "pred": "SELECT S.fname FROM STUDENT AS S JOIN HAS_PET AS HP ON S.stuid = HP.stuid JOIN PETS AS P ON HP.petid = P.petid WHERE P.pettype IN ('cat', 'dog')",
        "pred_result": 1,
        "repair_sql": "SELECT S.fname FROM STUDENT AS S JOIN HAS_PET AS HP ON S.stuid = HP.stuid JOIN PETS AS P ON HP.petid = P.petid WHERE P.pettype IN ('cat', 'dog')",
        "repair_result": 1
    },
    {
        "idx": 59,
        "db_id": "pets_1",
        "question": "Find the first name of students who have both cat and dog pets .",
        "evidence": "",
        "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "pred": "SELECT fname FROM STUDENT WHERE stuid IN (     SELECT stuid     FROM HAS_PET     WHERE petid IN (         SELECT petid         FROM PETS         WHERE pettype = 'cat'     )     INTERSECT     SELECT stuid     FROM HAS_PET     WHERE petid IN (         SELECT petid         FROM PETS         WHERE pettype = 'dog'     ) )",
        "pred_result": 1,
        "repair_sql": "SELECT fname FROM STUDENT WHERE stuid IN (     SELECT stuid     FROM HAS_PET     WHERE petid IN (         SELECT petid         FROM PETS         WHERE pettype = 'cat'     )     INTERSECT     SELECT stuid     FROM HAS_PET     WHERE petid IN (         SELECT petid         FROM PETS         WHERE pettype = 'dog'     ) )",
        "repair_result": 1
    },
    {
        "idx": 60,
        "db_id": "pets_1",
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "evidence": "",
        "gold": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "pred": "SELECT fname FROM STUDENT AS S JOIN HAS_PET AS HP1 ON S.stuid = HP1.stuid JOIN PETS AS P1 ON HP1.petid = P1.petid WHERE P1.pettype = 'cat' INTERSECT SELECT fname FROM STUDENT AS S JOIN HAS_PET AS HP2 ON S.stuid = HP2.stuid JOIN PETS AS P2 ON HP2.petid = P2.petid WHERE P2.pettype = 'dog'",
        "pred_result": 1,
        "repair_sql": "SELECT S.fname FROM STUDENT AS S JOIN HAS_PET AS HP1 ON S.stuid = HP1.stuid JOIN PETS AS P1 ON HP1.petid = P1.petid WHERE P1.pettype = 'cat' INTERSECT SELECT S.fname FROM STUDENT AS S JOIN HAS_PET AS HP2 ON S.stuid = HP2.stuid JOIN PETS AS P2 ON HP2.petid = P2.petid WHERE P2.pettype = 'dog';",
        "repair_result": 1
    },
    {
        "idx": 61,
        "db_id": "pets_1",
        "question": "Find the major and age of students who do not have a cat pet.",
        "evidence": "",
        "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "pred": "SELECT major, age FROM STUDENT WHERE stuid NOT IN (     SELECT stuid     FROM HAS_PET     WHERE petid IN (         SELECT petid         FROM PETS         WHERE pettype = 'cat'     ) )",
        "pred_result": 1,
        "repair_sql": "SELECT major, age FROM STUDENT WHERE stuid NOT IN (     SELECT stuid     FROM HAS_PET     WHERE petid IN (         SELECT petid         FROM PETS         WHERE pettype = 'cat'     ) )",
        "repair_result": 1
    },
    {
        "idx": 62,
        "db_id": "pets_1",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "evidence": "",
        "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "pred": "SELECT major, age FROM STUDENT WHERE stuid NOT IN (     SELECT stuid     FROM HAS_PET     WHERE petid IN (         SELECT petid         FROM PETS         WHERE pettype = 'cat'     ) )",
        "pred_result": 1,
        "repair_sql": "SELECT major, age FROM STUDENT WHERE stuid NOT IN (     SELECT stuid     FROM HAS_PET     WHERE petid IN (         SELECT petid         FROM PETS         WHERE pettype = 'cat'     ) )",
        "repair_result": 1
    },
    {
        "idx": 63,
        "db_id": "pets_1",
        "question": "Find the id of students who do not have a cat pet.",
        "evidence": "",
        "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "pred": "SELECT stuid FROM STUDENT EXCEPT SELECT T1.stuid FROM HAS_PET AS T1 JOIN PETS AS T2 ON T1.petid = T2.petid WHERE T2.pettype = 'cat'",
        "pred_result": 1,
        "repair_sql": "SELECT stuid FROM STUDENT EXCEPT SELECT T1.stuid FROM HAS_PET AS T1 JOIN PETS AS T2 ON T1.petid = T2.petid WHERE T2.pettype = 'cat';",
        "repair_result": 1
    },
    {
        "idx": 64,
        "db_id": "pets_1",
        "question": "What are the ids of the students who do not own cats as pets?",
        "evidence": "",
        "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "pred": "SELECT stuid FROM STUDENT EXCEPT SELECT T1.stuid FROM HAS_PET AS T1 JOIN PETS AS T2 ON T1.petid = T2.petid WHERE T2.pettype = 'cat'",
        "pred_result": 1,
        "repair_sql": "SELECT stuid FROM STUDENT EXCEPT SELECT T1.stuid FROM HAS_PET AS T1 JOIN PETS AS T2 ON T1.petid = T2.petid WHERE T2.pettype = 'cat'",
        "repair_result": 1
    },
    {
        "idx": 65,
        "db_id": "pets_1",
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "evidence": "",
        "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "pred": "SELECT fname, age FROM STUDENT WHERE stuid IN (     SELECT stuid     FROM HAS_PET     WHERE petid IN (         SELECT petid         FROM PETS         WHERE pettype = 'dog'     )     EXCEPT     SELECT stuid     FROM HAS_PET     WHERE petid IN (         SELECT petid         FROM PETS         WHERE pettype = 'cat'     ) )",
        "pred_result": 1,
        "repair_sql": "SELECT fname, age FROM STUDENT WHERE stuid IN (     SELECT stuid     FROM HAS_PET     WHERE petid IN (         SELECT petid         FROM PETS         WHERE pettype = 'dog'     )     EXCEPT     SELECT stuid     FROM HAS_PET     WHERE petid IN (         SELECT petid         FROM PETS         WHERE pettype = 'cat'     ) )",
        "repair_result": 1
    },
    {
        "idx": 66,
        "db_id": "pets_1",
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "evidence": "",
        "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "pred": "SELECT fname FROM STUDENT WHERE stuid IN (     SELECT stuid     FROM HAS_PET     WHERE petid IN (         SELECT petid         FROM PETS         WHERE pettype = 'dog'     )     EXCEPT     SELECT stuid     FROM HAS_PET     WHERE petid IN (         SELECT petid         FROM PETS         WHERE pettype = 'cat'     ) )",
        "pred_result": 0,
        "repair_sql": "SELECT fname FROM STUDENT WHERE stuid IN (     SELECT stuid     FROM HAS_PET     WHERE petid IN (         SELECT petid         FROM PETS         WHERE pettype = 'dog'     )     EXCEPT     SELECT stuid     FROM HAS_PET     WHERE petid IN (         SELECT petid         FROM PETS         WHERE pettype = 'cat'     ) )",
        "repair_result": 0
    },
    {
        "idx": 67,
        "db_id": "pets_1",
        "question": "Find the type and weight of the youngest pet.",
        "evidence": "",
        "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "pred": "SELECT pettype, weight FROM PETS ORDER BY pet_age ASC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT pettype, weight FROM PETS ORDER BY pet_age ASC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 68,
        "db_id": "pets_1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "evidence": "",
        "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "pred": "SELECT pettype, weight FROM PETS ORDER BY pet_age ASC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT pettype, weight FROM PETS ORDER BY pet_age ASC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 69,
        "db_id": "pets_1",
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "evidence": "",
        "gold": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "pred": "SELECT petid, weight FROM pets WHERE pet_age > 1",
        "pred_result": 1,
        "repair_sql": "SELECT petid, weight FROM pets WHERE pet_age > 1;",
        "repair_result": 1
    },
    {
        "idx": 70,
        "db_id": "pets_1",
        "question": "What is the id and weight of every pet who is older than 1?",
        "evidence": "",
        "gold": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "pred": "SELECT petid, weight FROM PETS WHERE pet_age > 1",
        "pred_result": 1,
        "repair_sql": "SELECT petid, weight FROM PETS WHERE pet_age > 1;",
        "repair_result": 1
    },
    {
        "idx": 71,
        "db_id": "pets_1",
        "question": "Find the average and maximum age for each type of pet.",
        "evidence": "",
        "gold": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "pred": "SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM PETS GROUP BY pettype",
        "pred_result": 0,
        "repair_sql": "SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM PETS GROUP BY pettype;",
        "repair_result": 0
    },
    {
        "idx": 72,
        "db_id": "pets_1",
        "question": "What is the average and maximum age for each pet type?",
        "evidence": "",
        "gold": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "pred": "SELECT pettype, avg(pet_age), max(pet_age) FROM PETS GROUP BY pettype",
        "pred_result": 0,
        "repair_sql": "SELECT pettype, avg(pet_age), max(pet_age) FROM PETS GROUP BY pettype;",
        "repair_result": 0
    },
    {
        "idx": 73,
        "db_id": "pets_1",
        "question": "Find the average weight for each pet type.",
        "evidence": "",
        "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "pred": "SELECT pettype, avg(weight) as average_weight FROM PETS GROUP BY pettype",
        "pred_result": 0,
        "repair_sql": "SELECT pettype, avg(weight) as average_weight FROM PETS GROUP BY pettype;",
        "repair_result": 0
    },
    {
        "idx": 74,
        "db_id": "pets_1",
        "question": "What is the average weight for each type of pet?",
        "evidence": "",
        "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "pred": "SELECT pettype, avg(weight) FROM PETS GROUP BY pettype",
        "pred_result": 0,
        "repair_sql": "SELECT pettype,        avg(weight) FROM PETS GROUP BY pettype;",
        "repair_result": 0
    },
    {
        "idx": 75,
        "db_id": "pets_1",
        "question": "Find the first name and age of students who have a pet.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "pred": "SELECT S.fname, S.age FROM STUDENT AS S JOIN HAS_PET AS HP ON S.stuid = HP.stuid",
        "pred_result": 1,
        "repair_sql": "SELECT S.fname, S.age FROM STUDENT AS S JOIN HAS_PET AS HP ON S.stuid = HP.stuid;",
        "repair_result": 1
    },
    {
        "idx": 76,
        "db_id": "pets_1",
        "question": "What are the different first names and ages of the students who do have pets?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "pred": "SELECT DISTINCT student.fname, student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT student.fname, student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid;",
        "repair_result": 1
    },
    {
        "idx": 77,
        "db_id": "pets_1",
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "evidence": "",
        "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "pred": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.lname = 'Smith'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.lname = 'Smith'",
        "repair_result": 1
    },
    {
        "idx": 78,
        "db_id": "pets_1",
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "evidence": "",
        "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "pred": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.lname = 'Smith'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.lname = 'Smith'",
        "repair_result": 1
    },
    {
        "idx": 79,
        "db_id": "pets_1",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "evidence": "",
        "gold": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "pred": "SELECT stuid, COUNT(petid) AS number_of_pets FROM HAS_PET GROUP BY stuid",
        "pred_result": 0,
        "repair_sql": "SELECT stuid, COUNT(petid) AS number_of_pets FROM HAS_PET GROUP BY stuid;",
        "repair_result": 0
    },
    {
        "idx": 80,
        "db_id": "pets_1",
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "evidence": "",
        "gold": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "pred": "SELECT stuid, COUNT(petid) AS pet_count FROM HAS_PET GROUP BY stuid",
        "pred_result": 0,
        "repair_sql": "SELECT stuid, COUNT(petid) AS pet_count FROM HAS_PET GROUP BY stuid;",
        "repair_result": 0
    },
    {
        "idx": 81,
        "db_id": "pets_1",
        "question": "Find the first name and gender of student who have more than one pet.",
        "evidence": "",
        "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "pred": "SELECT fname, sex FROM STUDENT WHERE stuid IN (     SELECT stuid     FROM HAS_PET     GROUP BY stuid     HAVING COUNT(petid) > 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT fname, sex FROM STUDENT WHERE stuid IN (     SELECT stuid     FROM HAS_PET     GROUP BY stuid     HAVING COUNT(petid) > 1 )",
        "repair_result": 1
    },
    {
        "idx": 82,
        "db_id": "pets_1",
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "evidence": "",
        "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "pred": "SELECT fname, sex FROM STUDENT WHERE stuid IN (     SELECT stuid     FROM HAS_PET     GROUP BY stuid     HAVING COUNT(petid) > 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT fname, sex FROM STUDENT WHERE stuid IN (     SELECT stuid     FROM HAS_PET     GROUP BY stuid     HAVING COUNT(petid) > 1 )",
        "repair_result": 1
    },
    {
        "idx": 83,
        "db_id": "pets_1",
        "question": "Find the last name of the student who has a cat that is age 3.",
        "evidence": "",
        "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "pred": "SELECT S.lname FROM STUDENT AS S JOIN HAS_PET AS HP ON S.stuid = HP.stuid JOIN PETS AS P ON HP.petid = P.petid WHERE P.pettype = 'cat' AND P.pet_age = 3",
        "pred_result": 1,
        "repair_sql": "SELECT S.lname FROM STUDENT AS S JOIN HAS_PET AS HP ON S.stuid = HP.stuid JOIN PETS AS P ON HP.petid = P.petid WHERE P.pettype = 'cat' AND P.pet_age = 3;",
        "repair_result": 1
    },
    {
        "idx": 84,
        "db_id": "pets_1",
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "evidence": "",
        "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "pred": "SELECT t2.lname FROM has_pet AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t1.petid = t3.petid WHERE t3.pettype = 'cat' AND t3.pet_age = 3",
        "pred_result": 1,
        "repair_sql": "SELECT t2.lname FROM has_pet AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t1.petid = t3.petid WHERE t3.pettype = 'cat' AND t3.pet_age = 3;",
        "repair_result": 1
    },
    {
        "idx": 85,
        "db_id": "pets_1",
        "question": "Find the average age of students who do not have any pet .",
        "evidence": "",
        "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "pred": "SELECT AVG(age) AS average_age FROM STUDENT WHERE stuid NOT IN (     SELECT stuid     FROM HAS_PET )",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(age) AS average_age FROM STUDENT WHERE stuid NOT IN (     SELECT stuid     FROM HAS_PET );",
        "repair_result": 1
    },
    {
        "idx": 86,
        "db_id": "pets_1",
        "question": "What is the average age for all students who do not own any pets ?",
        "evidence": "",
        "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "pred": "SELECT AVG(age) AS average_age FROM STUDENT WHERE stuid NOT IN (     SELECT stuid     FROM HAS_PET )",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(age) AS average_age FROM STUDENT WHERE stuid NOT IN (     SELECT stuid     FROM HAS_PET )",
        "repair_result": 1
    },
    {
        "idx": 87,
        "db_id": "car_1",
        "question": "How many continents are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CONTINENTS;",
        "pred": "SELECT count(*) FROM CONTINENTS",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM CONTINENTS",
        "repair_result": 1
    },
    {
        "idx": 88,
        "db_id": "car_1",
        "question": "What is the number of continents?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CONTINENTS;",
        "pred": "SELECT count(*) FROM CONTINENTS",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM CONTINENTS",
        "repair_result": 1
    },
    {
        "idx": 89,
        "db_id": "car_1",
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "evidence": "",
        "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "pred": "SELECT CONTINENTS.contid, CONTINENTS.continent, COUNT(COUNTRIES.countryid) AS number_of_countries FROM CONTINENTS JOIN COUNTRIES ON CONTINENTS.contid = COUNTRIES.continent GROUP BY CONTINENTS.contid, CONTINENTS.continent",
        "pred_result": 1,
        "repair_sql": "SELECT CONTINENTS.contid, CONTINENTS.continent, COUNT(COUNTRIES.countryid) AS number_of_countries FROM CONTINENTS JOIN COUNTRIES ON CONTINENTS.contid = COUNTRIES.continent GROUP BY CONTINENTS.contid, CONTINENTS.continent;",
        "repair_result": 1
    },
    {
        "idx": 90,
        "db_id": "car_1",
        "question": "For each continent, list its id, name, and how many countries it has?",
        "evidence": "",
        "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "pred": "SELECT CONTINENTS.contid, CONTINENTS.continent, COUNT(COUNTRIES.countryid) AS country_count FROM CONTINENTS LEFT JOIN COUNTRIES ON CONTINENTS.contid = COUNTRIES.continent GROUP BY CONTINENTS.contid, CONTINENTS.continent",
        "pred_result": 1,
        "repair_sql": "SELECT CONTINENTS.contid, CONTINENTS.continent, COUNT(COUNTRIES.countryid) AS country_count FROM CONTINENTS LEFT JOIN COUNTRIES ON CONTINENTS.contid = COUNTRIES.continent GROUP BY CONTINENTS.contid, CONTINENTS.continent;",
        "repair_result": 1
    },
    {
        "idx": 91,
        "db_id": "car_1",
        "question": "How many countries are listed?",
        "evidence": "",
        "gold": "SELECT count(*) FROM COUNTRIES;",
        "pred": "SELECT count(*) FROM COUNTRIES",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM COUNTRIES",
        "repair_result": 1
    },
    {
        "idx": 92,
        "db_id": "car_1",
        "question": "How many countries exist?",
        "evidence": "",
        "gold": "SELECT count(*) FROM COUNTRIES;",
        "pred": "SELECT count(*) FROM COUNTRIES",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM COUNTRIES;",
        "repair_result": 1
    },
    {
        "idx": 93,
        "db_id": "car_1",
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "evidence": "",
        "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "pred": "SELECT CM.fullname, CM.id, COUNT(ML.modelid) AS number_of_models FROM CAR_MAKERS AS CM JOIN MODEL_LIST AS ML ON CM.id = ML.maker GROUP BY CM.id",
        "pred_result": 1,
        "repair_sql": "SELECT CM.fullname, CM.id, COUNT(ML.modelid) AS number_of_models FROM CAR_MAKERS AS CM JOIN MODEL_LIST AS ML ON CM.id = ML.maker GROUP BY CM.id;",
        "repair_result": 1
    },
    {
        "idx": 94,
        "db_id": "car_1",
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "evidence": "",
        "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "pred": "SELECT T2.id, T2.fullname, COUNT(T1.modelid) AS model_count FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.maker = T2.id GROUP BY T2.id, T2.fullname",
        "pred_result": 0,
        "repair_sql": "SELECT T2.id, T2.fullname, COUNT(T1.modelid) AS model_count FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.maker = T2.id GROUP BY T2.id, T2.fullname",
        "repair_result": 0
    },
    {
        "idx": 95,
        "db_id": "car_1",
        "question": "Which model of the car has the minimum horsepower?",
        "evidence": "",
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "pred": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.makeid = T2.id ORDER BY CAST(T2.horsepower AS INTEGER) ASC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.makeid = T2.id ORDER BY CAST(T2.horsepower AS INTEGER) ASC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 96,
        "db_id": "car_1",
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "evidence": "",
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "pred": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.makeid = T2.id ORDER BY CAST(T2.horsepower AS INTEGER) ASC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.makeid = T2.id ORDER BY CAST(T2.horsepower AS INTEGER) ASC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 97,
        "db_id": "car_1",
        "question": "Find the model of the car whose weight is below the average weight.",
        "evidence": "",
        "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "pred": "SELECT model FROM CAR_NAMES WHERE makeid IN (     SELECT id     FROM CARS_DATA     WHERE weight < (         SELECT avg(weight)         FROM CARS_DATA     ) )",
        "pred_result": 1,
        "repair_sql": "SELECT cn.model FROM CAR_NAMES cn JOIN CARS_DATA cd ON cn.makeid = cd.id WHERE cd.weight < (     SELECT avg(weight)     FROM CARS_DATA )",
        "repair_result": 1
    },
    {
        "idx": 98,
        "db_id": "car_1",
        "question": "What is the model for the car with a weight smaller than the average?",
        "evidence": "",
        "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "pred": "SELECT model FROM CAR_NAMES WHERE makeid IN (   SELECT id   FROM CARS_DATA   WHERE weight < (     SELECT avg(weight)     FROM CARS_DATA   ) )",
        "pred_result": 1,
        "repair_sql": "SELECT model FROM CAR_NAMES WHERE makeid IN (   SELECT id   FROM CARS_DATA   WHERE weight < (     SELECT avg(weight)     FROM CARS_DATA   ) )",
        "repair_result": 1
    },
    {
        "idx": 99,
        "db_id": "car_1",
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "pred": "SELECT DISTINCT T4.maker FROM CAR_MAKERS AS T4 JOIN MODEL_LIST AS T3 ON T4.id = T3.maker JOIN CAR_NAMES AS T1 ON T3.model = T1.model JOIN CARS_DATA AS T2 ON T1.makeid = T2.id WHERE T2.year = 1970",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T4.maker FROM CAR_MAKERS AS T4 JOIN MODEL_LIST AS T3 ON T4.id = T3.maker JOIN CAR_NAMES AS T1 ON T3.model = T1.model JOIN CARS_DATA AS T2 ON T1.makeid = T2.id WHERE T2.year = 1970;",
        "repair_result": 1
    },
    {
        "idx": 100,
        "db_id": "car_1",
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "pred": "SELECT DISTINCT CM.maker FROM CAR_MAKERS AS CM JOIN MODEL_LIST AS ML ON CM.id = ML.maker JOIN CAR_NAMES AS CN ON ML.model = CN.model JOIN CARS_DATA AS CD ON CN.makeid = CD.id WHERE CD.year = 1970",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT CM.maker FROM CAR_MAKERS AS CM JOIN MODEL_LIST AS ML ON CM.id = ML.maker JOIN CAR_NAMES AS CN ON ML.model = CN.model JOIN CARS_DATA AS CD ON CN.makeid = CD.id WHERE CD.year = 1970;",
        "repair_result": 1
    },
    {
        "idx": 101,
        "db_id": "car_1",
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "evidence": "",
        "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "pred": "SELECT make, year FROM CAR_NAMES JOIN CARS_DATA ON CAR_NAMES.makeid = CARS_DATA.id WHERE year = (SELECT min(year) FROM CARS_DATA)",
        "pred_result": 1,
        "repair_sql": "SELECT make, year FROM CAR_NAMES JOIN CARS_DATA ON CAR_NAMES.makeid = CARS_DATA.id ORDER BY year ASC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 102,
        "db_id": "car_1",
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "evidence": "",
        "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "pred": "SELECT maker, year FROM CAR_MAKERS JOIN MODEL_LIST ON CAR_MAKERS.id = MODEL_LIST.maker JOIN CAR_NAMES ON MODEL_LIST.model = CAR_NAMES.model JOIN CARS_DATA ON CAR_NAMES.makeid = CARS_DATA.id WHERE year = (SELECT MIN(year) FROM CARS_DATA)",
        "pred_result": "ambiguous column name: maker",
        "repair_sql": "SELECT CAR_MAKERS.maker, CARS_DATA.year FROM CAR_MAKERS JOIN MODEL_LIST ON CAR_MAKERS.id = MODEL_LIST.maker JOIN CAR_NAMES ON MODEL_LIST.model = CAR_NAMES.model JOIN CARS_DATA ON CAR_NAMES.makeid = CARS_DATA.id ORDER BY CARS_DATA.year ASC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 103,
        "db_id": "car_1",
        "question": "Which distinct car models are the produced after 1980?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "pred": "SELECT DISTINCT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.makeid = T2.id WHERE T2.year > 1980",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.makeid = T2.id WHERE T2.year > 1980;",
        "repair_result": 1
    },
    {
        "idx": 104,
        "db_id": "car_1",
        "question": "What are the different models for the cards produced after 1980?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "pred": "SELECT DISTINCT T2.model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.id = T2.makeid WHERE T1.year > 1980",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.id = T2.makeid WHERE T1.year > 1980",
        "repair_result": 1
    },
    {
        "idx": 105,
        "db_id": "car_1",
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "evidence": "",
        "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "pred": "SELECT CONTINENTS.continent, COUNT(CAR_MAKERS.id) AS maker_count FROM CAR_MAKERS JOIN COUNTRIES ON CAR_MAKERS.country = COUNTRIES.countryid JOIN CONTINENTS ON COUNTRIES.continent = CONTINENTS.contid GROUP BY CONTINENTS.continent",
        "pred_result": 1,
        "repair_sql": "SELECT CONTINENTS.continent, COUNT(CAR_MAKERS.id) AS maker_count FROM CAR_MAKERS JOIN COUNTRIES ON CAR_MAKERS.country = COUNTRIES.countryid JOIN CONTINENTS ON COUNTRIES.continent = CONTINENTS.contid GROUP BY CONTINENTS.continent;",
        "repair_result": 1
    },
    {
        "idx": 106,
        "db_id": "car_1",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "evidence": "",
        "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "pred": "SELECT CONTINENTS.continent, COUNT(CAR_MAKERS.id) AS car_maker_count FROM CONTINENTS JOIN COUNTRIES ON CONTINENTS.contid = COUNTRIES.continent JOIN CAR_MAKERS ON COUNTRIES.countryid = CAR_MAKERS.country GROUP BY CONTINENTS.continent",
        "pred_result": 1,
        "repair_sql": "SELECT CONTINENTS.continent, COUNT(CAR_MAKERS.id) AS car_maker_count FROM CONTINENTS JOIN COUNTRIES ON CONTINENTS.contid = COUNTRIES.continent JOIN CAR_MAKERS ON COUNTRIES.countryid = CAR_MAKERS.country GROUP BY CONTINENTS.continent;",
        "repair_result": 1
    },
    {
        "idx": 107,
        "db_id": "car_1",
        "question": "Which of the countries has the most car makers? List the country name.",
        "evidence": "",
        "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "pred": "SELECT T1.countryname FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryid = T2.country GROUP BY T1.countryname ORDER BY count(*) DESC LIMIT 1;",
        "pred_result": 1,
        "repair_sql": "SELECT T1.countryname FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryid = T2.country GROUP BY T1.countryname ORDER BY count(*) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 108,
        "db_id": "car_1",
        "question": "What is the name of the country with the most car makers?",
        "evidence": "",
        "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "pred": "SELECT countryname FROM COUNTRIES WHERE countryid = (   SELECT country   FROM CAR_MAKERS   GROUP BY country   ORDER BY count(*) DESC   LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT countryname FROM COUNTRIES WHERE countryid = (   SELECT country   FROM CAR_MAKERS   GROUP BY country   ORDER BY count(*) DESC   LIMIT 1 );",
        "repair_result": 1
    },
    {
        "idx": 109,
        "db_id": "car_1",
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "evidence": "",
        "gold": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "pred": "SELECT COUNT(ml.modelid) AS model_count, cm.fullname FROM MODEL_LIST AS ml JOIN CAR_MAKERS AS cm ON ml.maker = cm.id GROUP BY cm.fullname",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(ml.modelid) AS model_count, cm.fullname FROM MODEL_LIST AS ml JOIN CAR_MAKERS AS cm ON ml.maker = cm.id GROUP BY cm.fullname;",
        "repair_result": 1
    },
    {
        "idx": 110,
        "db_id": "car_1",
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "evidence": "",
        "gold": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "pred": "SELECT T2.id, T2.fullname, COUNT(T1.modelid) AS number_of_models FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.maker = T2.id GROUP BY T2.id, T2.fullname",
        "pred_result": 0,
        "repair_sql": "SELECT T2.id, T2.fullname, COUNT(T1.modelid) AS number_of_models FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.maker = T2.id GROUP BY T2.id, T2.fullname;",
        "repair_result": 0
    },
    {
        "idx": 111,
        "db_id": "car_1",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "evidence": "",
        "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "pred": "SELECT T2.accelerate FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.makeid = T2.id WHERE T1.make = 'amc hornet sportabout (sw)';",
        "pred_result": 1,
        "repair_sql": "SELECT T2.accelerate FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.makeid = T2.id WHERE T1.model = 'amc hornet sportabout (sw)';",
        "repair_result": 0
    },
    {
        "idx": 112,
        "db_id": "car_1",
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "evidence": "",
        "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "pred": "SELECT T2.accelerate FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.makeid = T2.id WHERE T1.make = \"amc hornet sportabout (sw)\";",
        "pred_result": 1,
        "repair_sql": "SELECT T2.accelerate FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.makeid = T2.id WHERE T1.model = \"amc hornet sportabout (sw)\";",
        "repair_result": 0
    },
    {
        "idx": 113,
        "db_id": "car_1",
        "question": "How many car makers are there in france?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "pred": "SELECT COUNT(*) FROM CAR_MAKERS AS cm JOIN COUNTRIES AS c ON cm.country = c.countryid WHERE c.countryname = 'france'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM CAR_MAKERS AS cm JOIN COUNTRIES AS c ON cm.country = c.countryid WHERE c.countryname = 'france'",
        "repair_result": 1
    },
    {
        "idx": 114,
        "db_id": "car_1",
        "question": "What is the number of makers of care in France?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "pred": "SELECT COUNT(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.country = T2.countryid WHERE T2.countryname = 'france'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.country = T2.countryid WHERE T2.countryname = 'france'",
        "repair_result": 1
    },
    {
        "idx": 115,
        "db_id": "car_1",
        "question": "How many car models are produced in the usa?",
        "evidence": "",
        "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "pred": "SELECT COUNT(*) FROM MODEL_LIST AS ml JOIN CAR_MAKERS AS cm ON ml.maker = cm.id JOIN COUNTRIES AS c ON cm.country = c.countryid WHERE c.countryname = 'usa'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM MODEL_LIST AS ml JOIN CAR_MAKERS AS cm ON ml.maker = cm.id JOIN COUNTRIES AS c ON cm.country = c.countryid WHERE c.countryname = 'usa'",
        "repair_result": 1
    },
    {
        "idx": 116,
        "db_id": "car_1",
        "question": "What is the count of the car models produced in the United States?",
        "evidence": "",
        "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "pred": "SELECT COUNT(*) FROM MODEL_LIST AS ml JOIN CAR_MAKERS AS cm ON ml.maker = cm.id JOIN COUNTRIES AS c ON cm.country = c.countryid WHERE c.countryname = 'usa'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM MODEL_LIST AS ml JOIN CAR_MAKERS AS cm ON ml.maker = cm.id JOIN COUNTRIES AS c ON cm.country = c.countryid WHERE c.countryname = 'usa'",
        "repair_result": 1
    },
    {
        "idx": 117,
        "db_id": "car_1",
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "evidence": "",
        "gold": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "pred": "SELECT avg(mpg) FROM CARS_DATA WHERE cylinders = 4",
        "pred_result": 1,
        "repair_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE cylinders = 4;",
        "repair_result": 1
    },
    {
        "idx": 118,
        "db_id": "car_1",
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "evidence": "",
        "gold": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "pred": "SELECT avg(mpg) FROM CARS_DATA WHERE cylinders = 4",
        "pred_result": 1,
        "repair_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE cylinders = 4;",
        "repair_result": 1
    },
    {
        "idx": 119,
        "db_id": "car_1",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "evidence": "",
        "gold": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "pred": "SELECT min(weight) FROM CARS_DATA WHERE cylinders = 8 AND year = 1974",
        "pred_result": 1,
        "repair_sql": "SELECT weight  FROM CARS_DATA  WHERE cylinders = 8 AND year = 1974  ORDER BY weight ASC  LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 120,
        "db_id": "car_1",
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "evidence": "",
        "gold": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "pred": "SELECT MIN(weight)  FROM CARS_DATA  WHERE cylinders = 8  AND year = 1974",
        "pred_result": 1,
        "repair_sql": "SELECT MIN(weight)  FROM CARS_DATA  WHERE cylinders = 8  AND year = 1974;",
        "repair_result": 1
    },
    {
        "idx": 121,
        "db_id": "car_1",
        "question": "What are all the makers and models?",
        "evidence": "",
        "gold": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "pred": "SELECT CAR_MAKERS.maker, MODEL_LIST.model FROM MODEL_LIST JOIN CAR_MAKERS ON MODEL_LIST.maker = CAR_MAKERS.id",
        "pred_result": 0,
        "repair_sql": "SELECT CAR_MAKERS.maker, MODEL_LIST.model FROM MODEL_LIST JOIN CAR_MAKERS ON MODEL_LIST.maker = CAR_MAKERS.id",
        "repair_result": 0
    },
    {
        "idx": 122,
        "db_id": "car_1",
        "question": "What are the makers and models?",
        "evidence": "",
        "gold": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "pred": "SELECT CAR_MAKERS.maker, MODEL_LIST.model FROM MODEL_LIST JOIN CAR_MAKERS ON MODEL_LIST.maker = CAR_MAKERS.id",
        "pred_result": 0,
        "repair_sql": "SELECT CAR_MAKERS.maker, MODEL_LIST.model FROM MODEL_LIST JOIN CAR_MAKERS ON MODEL_LIST.maker = CAR_MAKERS.id;",
        "repair_result": 0
    },
    {
        "idx": 123,
        "db_id": "car_1",
        "question": "What are the countries having at least one car maker? List name and id.",
        "evidence": "",
        "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "pred": "SELECT DISTINCT C.countryid, C.countryname FROM COUNTRIES AS C JOIN CAR_MAKERS AS CM ON C.countryid = CM.country",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT C.countryid, C.countryname FROM COUNTRIES AS C JOIN CAR_MAKERS AS CM ON C.countryid = CM.country;",
        "repair_result": 0
    },
    {
        "idx": 124,
        "db_id": "car_1",
        "question": "What are the names and ids of all countries with at least one car maker?",
        "evidence": "",
        "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "pred": "SELECT DISTINCT C.countryid, C.countryname FROM COUNTRIES AS C JOIN CAR_MAKERS AS CM ON C.countryid = CM.country",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT C.countryid, C.countryname FROM COUNTRIES AS C JOIN CAR_MAKERS AS CM ON C.countryid = CM.country",
        "repair_result": 0
    },
    {
        "idx": 125,
        "db_id": "car_1",
        "question": "What is the number of the cars with horsepower more than 150?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "pred": "SELECT COUNT(*) FROM CARS_DATA WHERE horsepower > 150",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE horsepower > 150;",
        "repair_result": 1
    },
    {
        "idx": 126,
        "db_id": "car_1",
        "question": "What is the number of cars with a horsepower greater than 150?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "pred": "SELECT count(*) FROM CARS_DATA WHERE horsepower > 150",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower > 150;",
        "repair_result": 1
    },
    {
        "idx": 127,
        "db_id": "car_1",
        "question": "What is the average weight of cars each year?",
        "evidence": "",
        "gold": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "pred": "SELECT year, avg(weight) FROM CARS_DATA GROUP BY year",
        "pred_result": 0,
        "repair_sql": "SELECT year, avg(weight) FROM CARS_DATA GROUP BY year;",
        "repair_result": 0
    },
    {
        "idx": 128,
        "db_id": "car_1",
        "question": "What is the average weight and year for each year?",
        "evidence": "",
        "gold": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "pred": "SELECT year, avg(weight) as average_weight FROM CARS_DATA GROUP BY year",
        "pred_result": 0,
        "repair_sql": "SELECT year, avg(weight) as average_weight FROM CARS_DATA GROUP BY year",
        "repair_result": 0
    },
    {
        "idx": 129,
        "db_id": "car_1",
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "evidence": "",
        "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "pred": "SELECT T1.countryname FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryid = T2.country WHERE T1.continent = 2 GROUP BY T1.countryname HAVING COUNT(T2.id) >= 3",
        "pred_result": 1,
        "repair_sql": "SELECT T1.countryname FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryid = T2.country WHERE T1.continent = 2 GROUP BY T1.countryname HAVING COUNT(T2.id) >= 3",
        "repair_result": 1
    },
    {
        "idx": 130,
        "db_id": "car_1",
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "evidence": "",
        "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "pred": "SELECT countryname FROM COUNTRIES WHERE continent = (SELECT contid FROM CONTINENTS WHERE continent = 'europe') AND countryid IN (     SELECT country     FROM CAR_MAKERS     GROUP BY country     HAVING COUNT(id) >= 3 )",
        "pred_result": 1,
        "repair_sql": "SELECT countryname FROM COUNTRIES WHERE continent = (SELECT contid FROM CONTINENTS WHERE continent = 'europe') AND countryid IN (     SELECT country     FROM CAR_MAKERS     GROUP BY country     HAVING COUNT(id) >= 3 )",
        "repair_result": 1
    },
    {
        "idx": 131,
        "db_id": "car_1",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "evidence": "",
        "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "pred": "SELECT T1.make, MAX(T2.horsepower) AS max_horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.makeid = T2.id WHERE T2.cylinders = 3 GROUP BY T1.make",
        "pred_result": 0,
        "repair_sql": "SELECT T1.make, T2.horsepower AS max_horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.makeid = T2.id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 132,
        "db_id": "car_1",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "evidence": "",
        "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "pred": "SELECT T1.make, MAX(T2.horsepower) AS max_horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.makeid = T2.id WHERE T2.cylinders = 3 GROUP BY T1.make ORDER BY max_horsepower DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.make, T2.horsepower AS max_horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.makeid = T2.id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 133,
        "db_id": "car_1",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "evidence": "",
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "pred": "SELECT t1.model FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id ORDER BY CAST(t2.mpg AS INTEGER) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT t1.model FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id ORDER BY CAST(t2.mpg AS INTEGER) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 134,
        "db_id": "car_1",
        "question": "What is the car model with the highest mpg ?",
        "evidence": "",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "pred": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.makeid = T2.id ORDER BY CAST(T2.mpg AS INTEGER) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.makeid = T2.id ORDER BY CAST(T2.mpg AS INTEGER) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 135,
        "db_id": "car_1",
        "question": "What is the average horsepower of the cars before 1980?",
        "evidence": "",
        "gold": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
        "pred": "SELECT AVG(CAST(horsepower AS INTEGER)) FROM CARS_DATA WHERE year < 1980",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(CAST(horsepower AS INTEGER)) FROM CARS_DATA WHERE year < 1980",
        "repair_result": 1
    },
    {
        "idx": 136,
        "db_id": "car_1",
        "question": "What is the average horsepower for all cars produced before 1980 ?",
        "evidence": "",
        "gold": "select avg(horsepower) from cars_data where year  <  1980;",
        "pred": "SELECT avg(horsepower) FROM CARS_DATA WHERE year < 1980",
        "pred_result": 1,
        "repair_sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE year < 1980;",
        "repair_result": 1
    },
    {
        "idx": 137,
        "db_id": "car_1",
        "question": "What is the average edispl of the cars of model volvo?",
        "evidence": "",
        "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "pred": "SELECT AVG(T3.edispl) FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T1.makeid = T3.id WHERE T2.model = 'volvo'",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(T3.edispl) FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T1.makeid = T3.id WHERE T1.model = 'volvo';",
        "repair_result": 1
    },
    {
        "idx": 138,
        "db_id": "car_1",
        "question": "What is the average edispl for all volvos?",
        "evidence": "",
        "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "pred": "SELECT AVG(CD.edispl) AS average_edispl FROM CARS_DATA AS CD JOIN CAR_NAMES AS CN ON CD.id = CN.makeid JOIN MODEL_LIST AS ML ON CN.model = ML.model JOIN CAR_MAKERS AS CM ON ML.maker = CM.id WHERE CM.maker = 'volvo'",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(CD.edispl) AS average_edispl FROM CARS_DATA AS CD JOIN CAR_NAMES AS CN ON CD.id = CN.makeid JOIN MODEL_LIST AS ML ON CN.model = ML.model JOIN CAR_MAKERS AS CM ON ML.maker = CM.id WHERE CM.maker = 'volvo'",
        "repair_result": 1
    },
    {
        "idx": 139,
        "db_id": "car_1",
        "question": "What is the maximum accelerate for different number of cylinders?",
        "evidence": "",
        "gold": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "pred": "SELECT cylinders, max(accelerate) FROM CARS_DATA GROUP BY cylinders",
        "pred_result": 0,
        "repair_sql": "SELECT cylinders, MAX(accelerate) FROM CARS_DATA GROUP BY cylinders;",
        "repair_result": 0
    },
    {
        "idx": 140,
        "db_id": "car_1",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "evidence": "",
        "gold": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "pred": "SELECT cylinders, max(accelerate) FROM CARS_DATA GROUP BY cylinders",
        "pred_result": 0,
        "repair_sql": "SELECT cylinders, MAX(accelerate) FROM CARS_DATA GROUP BY cylinders;",
        "repair_result": 0
    },
    {
        "idx": 141,
        "db_id": "car_1",
        "question": "Which model has the most version(make) of cars?",
        "evidence": "",
        "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "pred": "SELECT model FROM CAR_NAMES GROUP BY model ORDER BY count(make) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT model FROM CAR_NAMES GROUP BY model ORDER BY COUNT(make) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 142,
        "db_id": "car_1",
        "question": "What model has the most different versions?",
        "evidence": "",
        "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "pred": "SELECT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model GROUP BY T1.model ORDER BY count(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model GROUP BY T1.model ORDER BY count(*) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 143,
        "db_id": "car_1",
        "question": "How many cars have more than 4 cylinders?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "pred": "SELECT count(*) FROM CARS_DATA WHERE cylinders > 4",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM CARS_DATA WHERE cylinders > 4;",
        "repair_result": 1
    },
    {
        "idx": 144,
        "db_id": "car_1",
        "question": "What is the number of cars with more than 4 cylinders?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "pred": "SELECT count(*) FROM CARS_DATA WHERE cylinders > 4",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM CARS_DATA WHERE cylinders > 4;",
        "repair_result": 1
    },
    {
        "idx": 145,
        "db_id": "car_1",
        "question": "how many cars were produced in 1980?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "pred": "SELECT count(*) FROM CARS_DATA WHERE year = 1980",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM CARS_DATA WHERE year = 1980;",
        "repair_result": 1
    },
    {
        "idx": 146,
        "db_id": "car_1",
        "question": "In 1980, how many cars were made?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "pred": "SELECT count(*) FROM CARS_DATA WHERE year = 1980",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM CARS_DATA WHERE year = 1980;",
        "repair_result": 1
    },
    {
        "idx": 147,
        "db_id": "car_1",
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "pred": "SELECT COUNT(*) FROM MODEL_LIST AS ml JOIN CAR_MAKERS AS cm ON ml.maker = cm.id WHERE cm.fullname = 'American Motor Company'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM MODEL_LIST AS ml JOIN CAR_MAKERS AS cm ON ml.maker = cm.id WHERE cm.fullname = 'American Motor Company'",
        "repair_result": 1
    },
    {
        "idx": 148,
        "db_id": "car_1",
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "evidence": "",
        "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "pred": "SELECT COUNT(*) FROM MODEL_LIST AS ml JOIN CAR_MAKERS AS cm ON ml.maker = cm.id WHERE cm.fullname = 'American Motor Company'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM MODEL_LIST AS ml JOIN CAR_MAKERS AS cm ON ml.maker = cm.id WHERE cm.fullname = 'American Motor Company';",
        "repair_result": 1
    },
    {
        "idx": 149,
        "db_id": "car_1",
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "evidence": "",
        "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "pred": "SELECT T2.fullname, T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.maker = T2.id GROUP BY T2.id HAVING COUNT(T1.modelid) > 3",
        "pred_result": 1,
        "repair_sql": "SELECT T2.fullname, T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.maker = T2.id GROUP BY T2.id, T2.fullname HAVING COUNT(T1.modelid) > 3",
        "repair_result": 1
    },
    {
        "idx": 150,
        "db_id": "car_1",
        "question": "What are the names and ids of all makers with more than 3 models?",
        "evidence": "",
        "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "pred": "SELECT T2.maker, T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.maker = T2.id GROUP BY T2.id HAVING COUNT(T1.modelid) > 3",
        "pred_result": 0,
        "repair_sql": "SELECT T2.maker, T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.maker = T2.id GROUP BY T2.id, T2.maker HAVING COUNT(T1.modelid) > 3;",
        "repair_result": 0
    },
    {
        "idx": 151,
        "db_id": "car_1",
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "pred": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.maker = T2.id JOIN CARS_DATA AS T3 ON T1.modelid = T3.id WHERE T2.fullname = 'General Motors' OR T3.weight > 3500",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.maker = T2.id JOIN CARS_DATA AS T3 ON T1.modelid = T3.id WHERE T2.fullname = 'General Motors' OR T3.weight > 3500;",
        "repair_result": 0
    },
    {
        "idx": 152,
        "db_id": "car_1",
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "pred": "SELECT DISTINCT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.makeid = T2.id JOIN MODEL_LIST AS T3 ON T1.model = T3.model JOIN CAR_MAKERS AS T4 ON T3.maker = T4.id WHERE T4.fullname = 'General Motors' OR T2.weight > 3500",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.makeid = T2.id JOIN MODEL_LIST AS T3 ON T1.model = T3.model JOIN CAR_MAKERS AS T4 ON T3.maker = T4.id WHERE T4.fullname = 'American Motor Company' OR T2.weight > 3500;",
        "repair_result": 1
    },
    {
        "idx": 153,
        "db_id": "car_1",
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "evidence": "",
        "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
        "pred": "SELECT DISTINCT year FROM CARS_DATA WHERE weight >= 3000 AND weight <= 4000",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT year FROM CARS_DATA WHERE weight >= 3000 AND weight <= 4000;",
        "repair_result": 1
    },
    {
        "idx": 154,
        "db_id": "car_1",
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "evidence": "",
        "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
        "pred": "SELECT DISTINCT year FROM CARS_DATA WHERE weight < 4000 INTERSECT SELECT DISTINCT year FROM CARS_DATA WHERE weight > 3000",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT year FROM CARS_DATA WHERE weight < 4000 INTERSECT SELECT DISTINCT year FROM CARS_DATA WHERE weight > 3000;",
        "repair_result": 1
    },
    {
        "idx": 155,
        "db_id": "car_1",
        "question": "What is the horsepower of the car with the largest accelerate?",
        "evidence": "",
        "gold": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "pred": "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data)",
        "pred_result": 1,
        "repair_sql": "SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 156,
        "db_id": "car_1",
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "evidence": "",
        "gold": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "pred": "SELECT horsepower FROM CARS_DATA WHERE accelerate = (SELECT MAX(accelerate) FROM CARS_DATA)",
        "pred_result": 1,
        "repair_sql": "SELECT horsepower FROM CARS_DATA ORDER BY accelerate DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 157,
        "db_id": "car_1",
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "evidence": "",
        "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "pred": "SELECT cylinders FROM cars_data WHERE id = (     SELECT id     FROM cars_data     WHERE accelerate = (         SELECT min(accelerate)         FROM cars_data         WHERE id IN (             SELECT makeid             FROM car_names             WHERE model = 'volvo'         )     ) )",
        "pred_result": 0,
        "repair_sql": "SELECT cylinders FROM cars_data WHERE id = (     SELECT id     FROM cars_data     WHERE id IN (         SELECT makeid         FROM car_names         WHERE model = 'volvo'     )     ORDER BY accelerate ASC     LIMIT 1 );",
        "repair_result": 1
    },
    {
        "idx": 158,
        "db_id": "car_1",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "evidence": "",
        "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "pred": "SELECT cylinders FROM cars_data WHERE id = (     SELECT id     FROM cars_data     WHERE id IN (         SELECT makeid         FROM car_names         WHERE model IN (             SELECT model             FROM model_list             WHERE maker = (                 SELECT id                 FROM car_makers                 WHERE maker = 'volvo'             )         )     )     ORDER BY accelerate ASC     LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT cylinders FROM cars_data WHERE id = (     SELECT id     FROM cars_data     WHERE id IN (         SELECT makeid         FROM car_names         WHERE model IN (             SELECT model             FROM model_list             WHERE maker = (                 SELECT id                 FROM car_makers                 WHERE maker = 'volvo'             )         )     )     ORDER BY accelerate ASC     LIMIT 1 );",
        "repair_result": 1
    },
    {
        "idx": 159,
        "db_id": "car_1",
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "pred": "SELECT COUNT(*) FROM CARS_DATA WHERE accelerate > (     SELECT accelerate     FROM CARS_DATA     WHERE horsepower = (         SELECT MAX(CAST(horsepower AS INTEGER))         FROM CARS_DATA     ) )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE accelerate > (     SELECT accelerate     FROM CARS_DATA     WHERE horsepower = (         SELECT MAX(CAST(horsepower AS INTEGER))         FROM CARS_DATA     ) )",
        "repair_result": 0
    },
    {
        "idx": 160,
        "db_id": "car_1",
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "pred": "SELECT COUNT(*) FROM CARS_DATA WHERE accelerate > (     SELECT accelerate     FROM CARS_DATA     WHERE horsepower = (         SELECT MAX(CAST(horsepower AS INTEGER))         FROM CARS_DATA     ) )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE accelerate > (     SELECT accelerate     FROM CARS_DATA     WHERE horsepower = (         SELECT MAX(CAST(horsepower AS INTEGER))         FROM CARS_DATA     ) )",
        "repair_result": 0
    },
    {
        "idx": 161,
        "db_id": "car_1",
        "question": "How many countries has more than 2 car makers ?",
        "evidence": "",
        "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "pred": "SELECT COUNT(DISTINCT country)  FROM (SELECT country        FROM CAR_MAKERS        GROUP BY country        HAVING COUNT(id) > 2) AS subquery;",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT country)  FROM (SELECT country        FROM CAR_MAKERS        GROUP BY country        HAVING COUNT(id) > 2) AS subquery;",
        "repair_result": 0
    },
    {
        "idx": 162,
        "db_id": "car_1",
        "question": "What is the number of countries with more than 2 car makers ?",
        "evidence": "",
        "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "pred": "SELECT COUNT(DISTINCT country)  FROM CAR_MAKERS  GROUP BY country  HAVING COUNT(id) > 2",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*)  FROM (     SELECT country      FROM CAR_MAKERS      GROUP BY country      HAVING COUNT(id) > 2 ) AS subquery;",
        "repair_result": 0
    },
    {
        "idx": 163,
        "db_id": "car_1",
        "question": "How many cars has over 6 cylinders?",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "pred": "SELECT count(*) FROM CARS_DATA WHERE cylinders > 6",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM CARS_DATA WHERE cylinders > 6;",
        "repair_result": 1
    },
    {
        "idx": 164,
        "db_id": "car_1",
        "question": "What is the number of carsw ith over 6 cylinders?",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "pred": "SELECT count(*) FROM CARS_DATA WHERE cylinders > 6",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM CARS_DATA WHERE cylinders > 6;",
        "repair_result": 1
    },
    {
        "idx": 165,
        "db_id": "car_1",
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "evidence": "",
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "pred": "SELECT model FROM CARS_DATA AS CD JOIN CAR_NAMES AS CN ON CD.id = CN.makeid WHERE CD.cylinders = 4 ORDER BY CAST(CD.horsepower AS INTEGER) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT model FROM CARS_DATA AS CD JOIN CAR_NAMES AS CN ON CD.id = CN.makeid WHERE CD.cylinders = 4 ORDER BY CAST(CD.horsepower AS INTEGER) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 166,
        "db_id": "car_1",
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "evidence": "",
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "pred": "SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cylinders = 4 ORDER BY CAST(horsepower AS INTEGER) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cylinders = 4 ORDER BY CAST(horsepower AS INTEGER) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 167,
        "db_id": "car_1",
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "evidence": "",
        "gold": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "pred": "SELECT makeid, make FROM CAR_NAMES WHERE makeid IN (     SELECT id     FROM CARS_DATA     WHERE horsepower > (         SELECT MIN(horsepower)         FROM CARS_DATA     )     EXCEPT     SELECT id     FROM CARS_DATA     WHERE cylinders > 3 )",
        "pred_result": 1,
        "repair_sql": "SELECT makeid, make FROM CAR_NAMES WHERE makeid IN (     SELECT id     FROM CARS_DATA     WHERE horsepower > (         SELECT MIN(horsepower)         FROM CARS_DATA     )     AND cylinders <= 3 )",
        "repair_result": 1
    },
    {
        "idx": 168,
        "db_id": "car_1",
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "evidence": "",
        "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "pred": "SELECT makeid, make FROM CAR_NAMES WHERE makeid IN (   SELECT id   FROM CARS_DATA   WHERE cylinders < 4   EXCEPT   SELECT id   FROM CARS_DATA   WHERE horsepower = (     SELECT MIN(CAST(horsepower AS INTEGER))     FROM CARS_DATA   ) )",
        "pred_result": 0,
        "repair_sql": "SELECT makeid, make FROM CAR_NAMES WHERE makeid IN (   SELECT id   FROM CARS_DATA   WHERE cylinders < 4   EXCEPT   SELECT id   FROM CARS_DATA   WHERE horsepower = (     SELECT MIN(CAST(horsepower AS INTEGER))     FROM CARS_DATA   ) )",
        "repair_result": 0
    },
    {
        "idx": 169,
        "db_id": "car_1",
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "evidence": "",
        "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "pred": "SELECT max(mpg) FROM CARS_DATA WHERE cylinders = 8 OR year < 1980",
        "pred_result": 1,
        "repair_sql": "SELECT max(mpg) FROM CARS_DATA WHERE cylinders = 8 OR year < 1980;",
        "repair_result": 1
    },
    {
        "idx": 170,
        "db_id": "car_1",
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "evidence": "",
        "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "pred": "SELECT max(mpg) FROM CARS_DATA WHERE cylinders = 8 OR year < 1980",
        "pred_result": 1,
        "repair_sql": "SELECT max(mpg) FROM CARS_DATA WHERE cylinders = 8 OR year < 1980;",
        "repair_result": 1
    },
    {
        "idx": 171,
        "db_id": "car_1",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "pred": "SELECT model FROM car_names WHERE makeid IN (     SELECT id     FROM cars_data     WHERE weight < 3500 ) EXCEPT SELECT model FROM car_names WHERE model IN (     SELECT model     FROM model_list     WHERE maker = (         SELECT id         FROM car_makers         WHERE fullname = 'Ford Motor Company'     ) )",
        "pred_result": 0,
        "repair_sql": "SELECT cn.model FROM car_names cn WHERE cn.makeid IN (     SELECT cd.id     FROM cars_data cd     WHERE cd.weight < 3500 ) AND cn.model NOT IN (     SELECT ml.model     FROM model_list ml     JOIN car_makers cm ON ml.maker = cm.id     WHERE cm.fullname = 'Ford Motor Company' )",
        "repair_result": 0
    },
    {
        "idx": 172,
        "db_id": "car_1",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "pred": "SELECT model FROM car_names WHERE makeid IN (     SELECT id     FROM cars_data     WHERE weight < 3500 ) EXCEPT SELECT model FROM car_names WHERE makeid IN (     SELECT modelid     FROM model_list     WHERE maker = (         SELECT id         FROM car_makers         WHERE maker = 'ford'     ) )",
        "pred_result": 0,
        "repair_sql": "SELECT cn.model FROM car_names cn JOIN cars_data cd ON cn.makeid = cd.id WHERE cd.weight < 3500 AND cn.model NOT IN (     SELECT ml.model     FROM model_list ml     JOIN car_makers cm ON ml.maker = cm.id     WHERE cm.maker = 'ford' );",
        "repair_result": 0
    },
    {
        "idx": 173,
        "db_id": "car_1",
        "question": "What are the name of the countries where there is not a single car maker?",
        "evidence": "",
        "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "pred": "SELECT countryname FROM COUNTRIES EXCEPT SELECT DISTINCT T1.countryname FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryid = T2.country",
        "pred_result": 1,
        "repair_sql": "SELECT countryname FROM COUNTRIES WHERE countryid NOT IN (     SELECT DISTINCT country     FROM CAR_MAKERS );",
        "repair_result": 1
    },
    {
        "idx": 174,
        "db_id": "car_1",
        "question": "What are the names of the countries with no car makers?",
        "evidence": "",
        "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "pred": "SELECT countryname FROM COUNTRIES EXCEPT SELECT DISTINCT T1.countryname FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryid = T2.country",
        "pred_result": 1,
        "repair_sql": "SELECT countryname FROM COUNTRIES EXCEPT SELECT T1.countryname FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryid = T2.country;",
        "repair_result": 1
    },
    {
        "idx": 175,
        "db_id": "car_1",
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "evidence": "",
        "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "pred": "SELECT id, maker FROM CAR_MAKERS WHERE id IN (     SELECT maker     FROM MODEL_LIST     GROUP BY maker     HAVING COUNT(modelid) >= 2 ) AND id IN (     SELECT maker     FROM CAR_MAKERS     GROUP BY maker     HAVING COUNT(id) > 3 )",
        "pred_result": 0,
        "repair_sql": "SELECT id, maker FROM CAR_MAKERS WHERE id IN (     SELECT maker     FROM MODEL_LIST     GROUP BY maker     HAVING COUNT(modelid) >= 2 ) AND (SELECT COUNT(DISTINCT id) FROM CAR_MAKERS) > 3;",
        "repair_result": 0
    },
    {
        "idx": 176,
        "db_id": "car_1",
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "evidence": "",
        "gold": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "pred": "SELECT T1.id, T1.maker FROM CAR_MAKERS AS T1 WHERE T1.id IN (     SELECT maker     FROM MODEL_LIST     GROUP BY maker     HAVING COUNT(model) >= 2 ) INTERSECT SELECT T1.id, T1.maker FROM CAR_MAKERS AS T1 WHERE T1.id IN (     SELECT maker     FROM MODEL_LIST AS ML     JOIN CAR_NAMES AS CN ON ML.model = CN.model     JOIN CARS_DATA AS CD ON CN.makeid = CD.id     GROUP BY maker     HAVING COUNT(CD.id) > 3 )",
        "pred_result": 1,
        "repair_sql": "SELECT T1.id, T1.maker FROM CAR_MAKERS AS T1 WHERE T1.id IN (     SELECT maker     FROM MODEL_LIST     GROUP BY maker     HAVING COUNT(model) >= 2 ) INTERSECT SELECT T1.id, T1.maker FROM CAR_MAKERS AS T1 WHERE T1.id IN (     SELECT ML.maker     FROM MODEL_LIST AS ML     JOIN CAR_NAMES AS CN ON ML.model = CN.model     JOIN CARS_DATA AS CD ON CN.makeid = CD.id     GROUP BY ML.maker     HAVING COUNT(CD.id) > 3 );",
        "repair_result": 1
    },
    {
        "idx": 177,
        "db_id": "car_1",
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "evidence": "",
        "gold": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
        "pred": "SELECT countryid, countryname FROM COUNTRIES WHERE countryid IN (     SELECT country     FROM CAR_MAKERS     GROUP BY country     HAVING COUNT(id) > 3 ) UNION SELECT countryid, countryname FROM COUNTRIES WHERE countryid IN (     SELECT country     FROM CAR_MAKERS     WHERE id IN (         SELECT maker         FROM MODEL_LIST         WHERE model = 'fiat'     ) )",
        "pred_result": 1,
        "repair_sql": "SELECT countryid, countryname FROM COUNTRIES WHERE countryid IN (     SELECT country     FROM CAR_MAKERS     GROUP BY country     HAVING COUNT(id) > 3 ) UNION SELECT countryid, countryname FROM COUNTRIES WHERE countryid IN (     SELECT country     FROM CAR_MAKERS     WHERE id IN (         SELECT maker         FROM MODEL_LIST         WHERE model = 'fiat'     ) );",
        "repair_result": 1
    },
    {
        "idx": 178,
        "db_id": "car_1",
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "evidence": "",
        "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "pred": "SELECT countryid, countryname FROM COUNTRIES WHERE countryid IN (     SELECT country     FROM CAR_MAKERS     GROUP BY country     HAVING COUNT(*) > 3 ) OR countryid IN (     SELECT country     FROM CAR_MAKERS     JOIN MODEL_LIST ON CAR_MAKERS.id = MODEL_LIST.maker     WHERE MODEL_LIST.model = 'fiat' )",
        "pred_result": 1,
        "repair_sql": "SELECT countryid, countryname FROM COUNTRIES WHERE countryid IN (     SELECT country     FROM CAR_MAKERS     GROUP BY country     HAVING COUNT(*) > 3 ) OR countryid IN (     SELECT country     FROM CAR_MAKERS     JOIN MODEL_LIST ON CAR_MAKERS.id = MODEL_LIST.maker     WHERE MODEL_LIST.model = 'fiat' )",
        "repair_result": 1
    },
    {
        "idx": 179,
        "db_id": "flight_2",
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "evidence": "",
        "gold": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "pred": "SELECT country FROM airlines WHERE airline = 'JetBlue Airways'",
        "pred_result": 1,
        "repair_sql": "SELECT country FROM airlines WHERE airline = 'JetBlue Airways'",
        "repair_result": 1
    },
    {
        "idx": 180,
        "db_id": "flight_2",
        "question": "What country is Jetblue Airways affiliated with?",
        "evidence": "",
        "gold": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "pred": "SELECT country FROM airlines WHERE airline = 'Jetblue Airways'",
        "pred_result": 0,
        "repair_sql": "SELECT country FROM airlines WHERE airline = 'Jetblue Airways';",
        "repair_result": 0
    },
    {
        "idx": 181,
        "db_id": "flight_2",
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "evidence": "",
        "gold": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "pred": "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'",
        "pred_result": 1,
        "repair_sql": "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'",
        "repair_result": 1
    },
    {
        "idx": 182,
        "db_id": "flight_2",
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "evidence": "",
        "gold": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "pred": "SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways'",
        "pred_result": 0,
        "repair_sql": "SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways';",
        "repair_result": 0
    },
    {
        "idx": 183,
        "db_id": "flight_2",
        "question": "List all airline names and their abbreviations in \"USA\".",
        "evidence": "",
        "gold": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "pred": "SELECT airline, abbreviation FROM airlines WHERE country = 'USA';",
        "pred_result": 1,
        "repair_sql": "SELECT airline, abbreviation FROM airlines WHERE country = 'USA';",
        "repair_result": 1
    },
    {
        "idx": 184,
        "db_id": "flight_2",
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "evidence": "",
        "gold": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "pred": "SELECT airline, abbreviation FROM airlines WHERE country = 'USA'",
        "pred_result": 1,
        "repair_sql": "SELECT airline, abbreviation FROM airlines WHERE country = 'USA';",
        "repair_result": 1
    },
    {
        "idx": 185,
        "db_id": "flight_2",
        "question": "List the airport code and name in the city of Anthony.",
        "evidence": "",
        "gold": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "pred": "SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';",
        "pred_result": 1,
        "repair_sql": "SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';",
        "repair_result": 1
    },
    {
        "idx": 186,
        "db_id": "flight_2",
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "evidence": "",
        "gold": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "pred": "SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'",
        "pred_result": 1,
        "repair_sql": "SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';",
        "repair_result": 1
    },
    {
        "idx": 187,
        "db_id": "flight_2",
        "question": "How many airlines do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRLINES",
        "pred": "SELECT count(*) FROM AIRLINES",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM AIRLINES;",
        "repair_result": 1
    },
    {
        "idx": 188,
        "db_id": "flight_2",
        "question": "What is the total number of airlines?",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRLINES",
        "pred": "SELECT count(*) FROM airlines",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM airlines",
        "repair_result": 1
    },
    {
        "idx": 189,
        "db_id": "flight_2",
        "question": "How many airports do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRPORTS",
        "pred": "SELECT count(*) FROM airports",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM airports;",
        "repair_result": 1
    },
    {
        "idx": 190,
        "db_id": "flight_2",
        "question": "Return the number of  airports.",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRPORTS",
        "pred": "SELECT count(*) FROM airports",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM airports;",
        "repair_result": 1
    },
    {
        "idx": 191,
        "db_id": "flight_2",
        "question": "How many flights do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS",
        "pred": "SELECT count(*) FROM FLIGHTS",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM FLIGHTS;",
        "repair_result": 1
    },
    {
        "idx": 192,
        "db_id": "flight_2",
        "question": "Return the number of flights.",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS",
        "pred": "SELECT count(*) FROM FLIGHTS",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM FLIGHTS",
        "repair_result": 1
    },
    {
        "idx": 193,
        "db_id": "flight_2",
        "question": "Which airline has abbreviation 'UAL'?",
        "evidence": "",
        "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "pred": "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
        "pred_result": 1,
        "repair_sql": "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
        "repair_result": 1
    },
    {
        "idx": 194,
        "db_id": "flight_2",
        "question": "Give the airline with abbreviation 'UAL'.",
        "evidence": "",
        "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "pred": "SELECT airline FROM airlines WHERE abbreviation = 'UAL';",
        "pred_result": 1,
        "repair_sql": "SELECT airline FROM airlines WHERE abbreviation = 'UAL';",
        "repair_result": 1
    },
    {
        "idx": 195,
        "db_id": "flight_2",
        "question": "How many airlines are from USA?",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "pred": "SELECT count(*) FROM airlines WHERE country = 'USA'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM airlines WHERE country = 'USA'",
        "repair_result": 1
    },
    {
        "idx": 196,
        "db_id": "flight_2",
        "question": "Return the number of airlines in the USA.",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "pred": "SELECT count(*) FROM airlines WHERE country = 'USA'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM airlines WHERE country = 'USA';",
        "repair_result": 1
    },
    {
        "idx": 197,
        "db_id": "flight_2",
        "question": "Which city and country is the Alton airport at?",
        "evidence": "",
        "gold": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "pred": "SELECT city, country FROM airports WHERE airportname = \"Alton\";",
        "pred_result": 1,
        "repair_sql": "SELECT city, country FROM airports WHERE airportname = \"Alton\";",
        "repair_result": 1
    },
    {
        "idx": 198,
        "db_id": "flight_2",
        "question": "Give the city and country for the Alton airport.",
        "evidence": "",
        "gold": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "pred": "SELECT city, country FROM airports WHERE airportname = 'Alton'",
        "pred_result": 1,
        "repair_sql": "SELECT city, country FROM airports WHERE airportname = 'Alton';",
        "repair_result": 1
    },
    {
        "idx": 199,
        "db_id": "flight_2",
        "question": "What is the airport name for airport 'AKO'?",
        "evidence": "",
        "gold": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "pred": "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
        "pred_result": 1,
        "repair_sql": "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
        "repair_result": 1
    },
    {
        "idx": 200,
        "db_id": "flight_2",
        "question": "Return the name of the airport with code 'AKO'.",
        "evidence": "",
        "gold": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "pred": "SELECT airportname FROM airports WHERE airportcode = 'AKO';",
        "pred_result": 1,
        "repair_sql": "SELECT airportname FROM airports WHERE airportcode = 'AKO';",
        "repair_result": 1
    },
    {
        "idx": 201,
        "db_id": "flight_2",
        "question": "What are airport names at City 'Aberdeen'?",
        "evidence": "",
        "gold": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "pred": "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
        "repair_result": 1
    },
    {
        "idx": 202,
        "db_id": "flight_2",
        "question": "What are the names of airports in Aberdeen?",
        "evidence": "",
        "gold": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "pred": "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
        "repair_result": 1
    },
    {
        "idx": 203,
        "db_id": "flight_2",
        "question": "How many flights depart from 'APG'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "pred": "SELECT count(*) FROM flights WHERE sourceairport = 'APG'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM flights WHERE sourceairport = 'APG';",
        "repair_result": 1
    },
    {
        "idx": 204,
        "db_id": "flight_2",
        "question": "Count the number of flights departing from 'APG'.",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "pred": "SELECT count(*) FROM flights WHERE sourceairport = 'APG'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM flights WHERE sourceairport = 'APG';",
        "repair_result": 1
    },
    {
        "idx": 205,
        "db_id": "flight_2",
        "question": "How many flights have destination ATO?",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "pred": "SELECT count(*) FROM FLIGHTS WHERE destairport = 'ATO'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM FLIGHTS WHERE destairport = 'ATO'",
        "repair_result": 1
    },
    {
        "idx": 206,
        "db_id": "flight_2",
        "question": "Count the number of flights into ATO.",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "pred": "SELECT count(*) FROM flights WHERE destairport = 'ATO'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM flights WHERE destairport = 'ATO';",
        "repair_result": 1
    },
    {
        "idx": 207,
        "db_id": "flight_2",
        "question": "How many flights depart from City Aberdeen?",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "pred": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.sourceairport = A.airportcode WHERE A.city = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.sourceairport = A.airportcode WHERE TRIM(A.city) = 'Aberdeen'",
        "repair_result": 1
    },
    {
        "idx": 208,
        "db_id": "flight_2",
        "question": "Return the number of flights departing from Aberdeen.",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "pred": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.sourceairport = A.airportcode WHERE A.city = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.sourceairport = A.airportcode WHERE A.city = 'Aberdeen'",
        "repair_result": 1
    },
    {
        "idx": 209,
        "db_id": "flight_2",
        "question": "How many flights arriving in Aberdeen city?",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "pred": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.destairport = A.airportcode WHERE A.city = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.destairport = A.airportcode WHERE TRIM(A.city) = 'Aberdeen'",
        "repair_result": 1
    },
    {
        "idx": 210,
        "db_id": "flight_2",
        "question": "Return the number of flights arriving in Aberdeen.",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "pred": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.destairport = A.airportcode WHERE A.city = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(1) FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.destairport = A.airportcode WHERE A.city = 'Aberdeen'",
        "repair_result": 1
    },
    {
        "idx": 211,
        "db_id": "flight_2",
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "pred": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRPORTS AS A1 ON F.sourceairport = A1.airportcode JOIN AIRPORTS AS A2 ON F.destairport = A2.airportcode WHERE A1.city = 'Aberdeen' AND A2.city = 'Ashley'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRPORTS AS A1 ON F.sourceairport = A1.airportcode JOIN AIRPORTS AS A2 ON F.destairport = A2.airportcode WHERE A1.city = 'Aberdeen' AND A2.city = 'Ashley'",
        "repair_result": 1
    },
    {
        "idx": 212,
        "db_id": "flight_2",
        "question": "How many flights fly from Aberdeen to Ashley?",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "pred": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRPORTS AS A1 ON F.sourceairport = A1.airportcode JOIN AIRPORTS AS A2 ON F.destairport = A2.airportcode WHERE A1.city = 'Aberdeen' AND A2.city = 'Ashley'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRPORTS AS A1 ON F.sourceairport = A1.airportcode JOIN AIRPORTS AS A2 ON F.destairport = A2.airportcode WHERE A1.city = 'Aberdeen' AND A2.city = 'Ashley';",
        "repair_result": 1
    },
    {
        "idx": 213,
        "db_id": "flight_2",
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "pred": "SELECT count(*) FROM FLIGHTS AS F JOIN AIRLINES AS A ON F.airline = A.uid WHERE A.airline = 'JetBlue Airways'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM FLIGHTS AS F JOIN AIRLINES AS A ON F.airline = A.uid WHERE A.airline = 'JetBlue Airways'",
        "repair_result": 1
    },
    {
        "idx": 214,
        "db_id": "flight_2",
        "question": "Give the number of Jetblue Airways flights.",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "pred": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRLINES AS A ON F.airline = A.uid WHERE A.airline = 'Jetblue Airways'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRLINES AS A ON F.airline = A.uid WHERE A.airline = 'Jetblue Airways'",
        "repair_result": 0
    },
    {
        "idx": 215,
        "db_id": "flight_2",
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "pred": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.airline = T2.uid WHERE T2.airline = 'United Airlines' AND T1.destairport = 'ASY'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.airline = T2.uid WHERE T2.airline = 'United Airlines' AND T1.destairport = 'ASY'",
        "repair_result": 1
    },
    {
        "idx": 216,
        "db_id": "flight_2",
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "pred": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRLINES AS A ON F.airline = A.uid WHERE A.airline = 'United Airlines' AND F.destairport = 'ASY'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRLINES AS A ON F.airline = A.uid WHERE A.airline = 'United Airlines' AND F.destairport = 'ASY';",
        "repair_result": 1
    },
    {
        "idx": 217,
        "db_id": "flight_2",
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "pred": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRLINES AS A ON F.airline = A.uid WHERE A.airline = 'United Airlines' AND F.sourceairport = 'AHD'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRLINES AS A ON F.airline = A.uid WHERE A.airline = 'United Airlines' AND F.sourceairport = 'AHD';",
        "repair_result": 1
    },
    {
        "idx": 218,
        "db_id": "flight_2",
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "evidence": "",
        "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "pred": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRLINES AS A ON F.airline = A.uid WHERE A.airline = 'United Airlines' AND F.sourceairport = 'AHD'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRLINES AS A ON F.airline = A.uid WHERE A.airline = 'United Airlines' AND F.sourceairport = 'AHD';",
        "repair_result": 1
    },
    {
        "idx": 219,
        "db_id": "flight_2",
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "pred": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.destairport = A.airportcode JOIN AIRLINES AS AL ON F.airline = AL.uid WHERE AL.airline = 'United Airlines' AND A.city = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.destairport = A.airportcode JOIN AIRLINES AS AL ON F.airline = AL.uid WHERE AL.airline = 'United Airlines' AND A.city = 'Aberdeen'",
        "repair_result": 1
    },
    {
        "idx": 220,
        "db_id": "flight_2",
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "evidence": "",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "pred": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRLINES AS A ON F.airline = A.uid JOIN AIRPORTS AS AP ON F.destairport = AP.airportcode WHERE A.airline = 'United Airlines' AND AP.city = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRLINES AS A ON F.airline = A.uid JOIN AIRPORTS AS AP ON F.destairport = AP.airportcode WHERE A.airline = 'United Airlines' AND AP.city = 'Aberdeen'",
        "repair_result": 1
    },
    {
        "idx": 221,
        "db_id": "flight_2",
        "question": "Which city has most number of arriving flights?",
        "evidence": "",
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT A.city FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.destairport = A.airportcode GROUP BY A.city ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT A.city FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.destairport = A.airportcode GROUP BY A.city ORDER BY COUNT(*) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 222,
        "db_id": "flight_2",
        "question": "Which city has the most frequent destination airport?",
        "evidence": "",
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT A.city FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.destairport = A.airportcode GROUP BY A.city ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT A.city FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.destairport = A.airportcode GROUP BY A.city ORDER BY COUNT(F.destairport) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 223,
        "db_id": "flight_2",
        "question": "Which city has most number of departing flights?",
        "evidence": "",
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT A.city FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.sourceairport = A.airportcode GROUP BY A.city ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT A.city FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.sourceairport = A.airportcode GROUP BY A.city ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 224,
        "db_id": "flight_2",
        "question": "Which city is the most frequent source airport?",
        "evidence": "",
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT A.city FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.sourceairport = A.airportcode GROUP BY A.city ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT A.city FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.sourceairport = A.airportcode GROUP BY A.city ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 225,
        "db_id": "flight_2",
        "question": "What is the code of airport that has the highest number of flights?",
        "evidence": "",
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT airportcode FROM AIRPORTS WHERE airportcode = (   SELECT sourceairport   FROM FLIGHTS   GROUP BY sourceairport   ORDER BY COUNT(*) DESC   LIMIT 1 ) INTERSECT SELECT airportcode FROM AIRPORTS WHERE airportcode = (   SELECT destairport   FROM FLIGHTS   GROUP BY destairport   ORDER BY COUNT(*) DESC   LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT airportcode FROM (   SELECT sourceairport AS airportcode, COUNT(*) AS flight_count   FROM FLIGHTS   GROUP BY sourceairport   UNION ALL   SELECT destairport AS airportcode, COUNT(*) AS flight_count   FROM FLIGHTS   GROUP BY destairport ) AS combined_flights GROUP BY airportcode ORDER BY SUM(flight_count) DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 226,
        "db_id": "flight_2",
        "question": "What is the airport code of the airport with the most flights?",
        "evidence": "",
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT airportcode FROM (     SELECT sourceairport AS airportcode     FROM flights     UNION ALL     SELECT destairport AS airportcode     FROM flights ) AS all_airports GROUP BY airportcode ORDER BY count(*) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT airportcode FROM (     SELECT sourceairport AS airportcode     FROM flights     UNION ALL     SELECT destairport AS airportcode     FROM flights ) AS all_airports GROUP BY airportcode ORDER BY COUNT(*) DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 227,
        "db_id": "flight_2",
        "question": "What is the code of airport that has fewest number of flights?",
        "evidence": "",
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "pred": "SELECT airportcode FROM AIRPORTS WHERE airportcode = (   SELECT sourceairport   FROM FLIGHTS   GROUP BY sourceairport   ORDER BY COUNT(*) ASC   LIMIT 1 ) INTERSECT SELECT airportcode FROM AIRPORTS WHERE airportcode = (   SELECT destairport   FROM FLIGHTS   GROUP BY destairport   ORDER BY COUNT(*) ASC   LIMIT 1 );",
        "pred_result": 1,
        "repair_sql": "SELECT airportcode FROM (   SELECT sourceairport AS airportcode, COUNT(*) AS flight_count   FROM FLIGHTS   GROUP BY sourceairport   UNION ALL   SELECT destairport AS airportcode, COUNT(*) AS flight_count   FROM FLIGHTS   GROUP BY destairport ) AS combined_flights GROUP BY airportcode ORDER BY SUM(flight_count) ASC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 228,
        "db_id": "flight_2",
        "question": "Give the code of the airport with the least flights.",
        "evidence": "",
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "pred": "SELECT airportcode FROM AIRPORTS EXCEPT SELECT sourceairport FROM FLIGHTS GROUP BY sourceairport ORDER BY count(*) DESC LIMIT 1 INTERSECT SELECT destairport FROM FLIGHTS GROUP BY destairport ORDER BY count(*) DESC LIMIT 1",
        "pred_result": "ORDER BY clause should come after INTERSECT not before",
        "repair_sql": "SELECT airportcode FROM AIRPORTS ORDER BY (     SELECT COUNT(*)     FROM FLIGHTS     WHERE FLIGHTS.sourceairport = AIRPORTS.airportcode OR FLIGHTS.destairport = AIRPORTS.airportcode ) ASC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 229,
        "db_id": "flight_2",
        "question": "Which airline has most number of flights?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT A.airline FROM AIRLINES AS A JOIN FLIGHTS AS F ON A.uid = F.airline GROUP BY A.uid ORDER BY count(*) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT A.airline FROM AIRLINES AS A JOIN FLIGHTS AS F ON A.uid = F.airline GROUP BY A.uid ORDER BY COUNT(F.flightno) DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 230,
        "db_id": "flight_2",
        "question": "What airline serves the most flights?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT A.airline FROM FLIGHTS AS F JOIN AIRLINES AS A ON F.airline = A.uid GROUP BY A.airline ORDER BY count(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT A.airline FROM FLIGHTS AS F JOIN AIRLINES AS A ON F.airline = A.uid GROUP BY A.airline ORDER BY COUNT(F.flightno) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 231,
        "db_id": "flight_2",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "evidence": "",
        "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "pred": "SELECT abbreviation, country FROM AIRLINES WHERE uid = (     SELECT airline     FROM FLIGHTS     GROUP BY airline     ORDER BY count(*) ASC     LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT abbreviation, country FROM AIRLINES WHERE uid = (     SELECT airline     FROM FLIGHTS     GROUP BY airline     ORDER BY count(*) ASC     LIMIT 1 );",
        "repair_result": 0
    },
    {
        "idx": 232,
        "db_id": "flight_2",
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "evidence": "",
        "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "pred": "SELECT abbreviation, country FROM airlines WHERE uid = (     SELECT airline     FROM flights     GROUP BY airline     ORDER BY count(*) ASC     LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT abbreviation, country FROM airlines WHERE uid = (     SELECT airline     FROM flights     GROUP BY airline     ORDER BY count(*) ASC     LIMIT 1 );",
        "repair_result": 0
    },
    {
        "idx": 233,
        "db_id": "flight_2",
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "pred": "SELECT DISTINCT a.airline FROM AIRLINES AS a JOIN FLIGHTS AS f ON a.uid = f.airline WHERE f.sourceairport = 'AHD'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT a.airline FROM AIRLINES AS a JOIN FLIGHTS AS f ON a.uid = f.airline WHERE f.sourceairport = 'AHD'",
        "repair_result": 1
    },
    {
        "idx": 234,
        "db_id": "flight_2",
        "question": "Which airlines have a flight with source airport AHD?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "pred": "SELECT DISTINCT a.airline FROM AIRLINES AS a JOIN FLIGHTS AS f ON a.uid = f.airline WHERE f.sourceairport = 'AHD'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT a.airline FROM AIRLINES AS a JOIN FLIGHTS AS f ON a.uid = f.airline WHERE f.sourceairport = 'AHD'",
        "repair_result": 1
    },
    {
        "idx": 235,
        "db_id": "flight_2",
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "pred": "SELECT DISTINCT A.airline FROM AIRLINES AS A JOIN FLIGHTS AS F ON A.uid = F.airline WHERE F.destairport = 'AHD'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT A.airline FROM AIRLINES AS A JOIN FLIGHTS AS F ON A.uid = F.airline WHERE F.destairport = 'AHD'",
        "repair_result": 1
    },
    {
        "idx": 236,
        "db_id": "flight_2",
        "question": "Which airlines have a flight with destination airport AHD?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "pred": "SELECT A.airline FROM AIRLINES AS A JOIN FLIGHTS AS F ON A.uid = F.airline WHERE F.destairport = 'AHD'",
        "pred_result": 1,
        "repair_sql": "SELECT A.airline FROM AIRLINES AS A JOIN FLIGHTS AS F ON A.uid = F.airline WHERE F.destairport = 'AHD'",
        "repair_result": 1
    },
    {
        "idx": 237,
        "db_id": "flight_2",
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "pred": "SELECT airline FROM FLIGHTS WHERE sourceairport = 'APG' INTERSECT SELECT airline FROM FLIGHTS WHERE sourceairport = 'CVO'",
        "pred_result": 1,
        "repair_sql": "SELECT airline FROM FLIGHTS WHERE sourceairport = 'APG' INTERSECT SELECT airline FROM FLIGHTS WHERE sourceairport = 'CVO';",
        "repair_result": 1
    },
    {
        "idx": 238,
        "db_id": "flight_2",
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "pred": "SELECT airline FROM FLIGHTS WHERE sourceairport = 'APG' INTERSECT SELECT airline FROM FLIGHTS WHERE sourceairport = 'CVO'",
        "pred_result": 1,
        "repair_sql": "SELECT airline FROM FLIGHTS WHERE sourceairport = 'APG' INTERSECT SELECT airline FROM FLIGHTS WHERE sourceairport = 'CVO';",
        "repair_result": 1
    },
    {
        "idx": 239,
        "db_id": "flight_2",
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "pred": "SELECT airline FROM AIRLINES WHERE uid IN (     SELECT airline     FROM FLIGHTS     WHERE sourceairport = 'CVO' ) EXCEPT SELECT airline FROM FLIGHTS WHERE sourceairport = 'APG'",
        "pred_result": 1,
        "repair_sql": "SELECT airline FROM AIRLINES WHERE uid IN (     SELECT airline     FROM FLIGHTS     WHERE sourceairport = 'CVO' ) AND uid NOT IN (     SELECT airline     FROM FLIGHTS     WHERE sourceairport = 'APG' )",
        "repair_result": 1
    },
    {
        "idx": 240,
        "db_id": "flight_2",
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "pred": "SELECT DISTINCT A.airline FROM AIRLINES AS A JOIN FLIGHTS AS F1 ON A.uid = F1.airline WHERE F1.sourceairport = 'CVO' EXCEPT SELECT DISTINCT A.airline FROM AIRLINES AS A JOIN FLIGHTS AS F2 ON A.uid = F2.airline WHERE F2.sourceairport = 'APG'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT A.airline FROM AIRLINES AS A JOIN FLIGHTS AS F1 ON A.uid = F1.airline WHERE F1.sourceairport = 'CVO' EXCEPT SELECT DISTINCT A.airline FROM AIRLINES AS A JOIN FLIGHTS AS F2 ON A.uid = F2.airline WHERE F2.sourceairport = 'APG'",
        "repair_result": 1
    },
    {
        "idx": 241,
        "db_id": "flight_2",
        "question": "Find all airlines that have at least 10 flights.",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "pred": "SELECT A.airline FROM AIRLINES AS A JOIN FLIGHTS AS F ON A.uid = F.airline GROUP BY A.uid HAVING COUNT(F.flightno) >= 10",
        "pred_result": 1,
        "repair_sql": "SELECT A.airline FROM AIRLINES AS A JOIN FLIGHTS AS F ON A.uid = F.airline GROUP BY A.airline HAVING COUNT(F.flightno) >= 10;",
        "repair_result": 1
    },
    {
        "idx": 242,
        "db_id": "flight_2",
        "question": "Which airlines have at least 10 flights?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "pred": "SELECT a.airline FROM airlines AS a JOIN flights AS f ON a.uid = f.airline GROUP BY a.airline HAVING COUNT(f.flightno) >= 10",
        "pred_result": 1,
        "repair_sql": "SELECT a.airline FROM airlines AS a JOIN flights AS f ON a.uid = f.airline GROUP BY a.airline HAVING COUNT(f.flightno) >= 10",
        "repair_result": 1
    },
    {
        "idx": 243,
        "db_id": "flight_2",
        "question": "Find all airlines that have fewer than 200 flights.",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "pred": "SELECT A.airline FROM AIRLINES AS A JOIN FLIGHTS AS F ON A.uid = F.airline GROUP BY A.uid HAVING count(F.flightno) < 200",
        "pred_result": 1,
        "repair_sql": "SELECT A.airline FROM AIRLINES AS A JOIN FLIGHTS AS F ON A.uid = F.airline GROUP BY A.uid, A.airline HAVING count(F.flightno) < 200",
        "repair_result": 1
    },
    {
        "idx": 244,
        "db_id": "flight_2",
        "question": "Which airlines have less than 200 flights?",
        "evidence": "",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "pred": "SELECT A.airline FROM AIRLINES AS A JOIN FLIGHTS AS F ON A.uid = F.airline GROUP BY A.uid HAVING count(F.flightno) < 200",
        "pred_result": 1,
        "repair_sql": "SELECT A.airline FROM AIRLINES AS A JOIN FLIGHTS AS F ON A.uid = F.airline GROUP BY A.uid, A.airline HAVING count(F.flightno) < 200",
        "repair_result": 1
    },
    {
        "idx": 245,
        "db_id": "flight_2",
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "evidence": "",
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "pred": "SELECT T2.flightno FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.airline WHERE T1.airline = 'United Airlines'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.flightno FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.airline WHERE T1.airline = 'United Airlines'",
        "repair_result": 1
    },
    {
        "idx": 246,
        "db_id": "flight_2",
        "question": "Which flight numbers correspond to United Airlines flights?",
        "evidence": "",
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "pred": "SELECT T2.flightno FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.airline WHERE T1.airline = 'United Airlines'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.flightno FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.airline WHERE T1.airline = 'United Airlines';",
        "repair_result": 1
    },
    {
        "idx": 247,
        "db_id": "flight_2",
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "evidence": "",
        "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "pred": "SELECT flightno FROM FLIGHTS WHERE sourceairport = 'APG'",
        "pred_result": 1,
        "repair_sql": "SELECT flightno FROM FLIGHTS WHERE sourceairport = 'APG';",
        "repair_result": 1
    },
    {
        "idx": 248,
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights leaving from APG.",
        "evidence": "",
        "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "pred": "SELECT flightno FROM FLIGHTS WHERE sourceairport = 'APG'",
        "pred_result": 1,
        "repair_sql": "SELECT flightno FROM FLIGHTS WHERE sourceairport = 'APG'",
        "repair_result": 1
    },
    {
        "idx": 249,
        "db_id": "flight_2",
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "evidence": "",
        "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "pred": "SELECT flightno FROM FLIGHTS WHERE destairport = 'APG'",
        "pred_result": 1,
        "repair_sql": "SELECT flightno FROM FLIGHTS WHERE destairport = 'APG'",
        "repair_result": 1
    },
    {
        "idx": 250,
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights landing at APG.",
        "evidence": "",
        "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "pred": "SELECT flightno FROM FLIGHTS WHERE destairport = 'APG'",
        "pred_result": 1,
        "repair_sql": "SELECT flightno FROM FLIGHTS WHERE destairport = 'APG';",
        "repair_result": 1
    },
    {
        "idx": 251,
        "db_id": "flight_2",
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "evidence": "",
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "pred": "SELECT F.flightno FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.sourceairport = A.airportcode WHERE A.city = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT F.flightno FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.sourceairport = A.airportcode WHERE A.city = 'Aberdeen '",
        "repair_result": 1
    },
    {
        "idx": 252,
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "evidence": "",
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "pred": "SELECT F.flightno FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.sourceairport = A.airportcode WHERE A.city = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT F.flightno FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.sourceairport = A.airportcode WHERE A.city = 'Aberdeen'",
        "repair_result": 1
    },
    {
        "idx": 253,
        "db_id": "flight_2",
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "evidence": "",
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "pred": "SELECT F.flightno FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.destairport = A.airportcode WHERE A.city = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT F.flightno FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.destairport = A.airportcode WHERE A.city = 'Aberdeen'",
        "repair_result": 1
    },
    {
        "idx": 254,
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "evidence": "",
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "pred": "SELECT F.flightno FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.destairport = A.airportcode WHERE A.city = 'Aberdeen'",
        "pred_result": 1,
        "repair_sql": "SELECT F.flightno FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.destairport = A.airportcode WHERE A.city = 'Aberdeen'",
        "repair_result": 1
    },
    {
        "idx": 255,
        "db_id": "flight_2",
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "pred": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.destairport = A.airportcode WHERE A.city IN ('Aberdeen', 'Abilene')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM FLIGHTS AS F JOIN AIRPORTS AS A ON F.destairport = A.airportcode WHERE A.city IN ('Aberdeen', 'Abilene')",
        "repair_result": 1
    },
    {
        "idx": 256,
        "db_id": "flight_2",
        "question": "How many flights land in Aberdeen or Abilene?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "pred": "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city IN ('Aberdeen', 'Abilene')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city IN ('Aberdeen', 'Abilene')",
        "repair_result": 1
    },
    {
        "idx": 257,
        "db_id": "flight_2",
        "question": "Find the name of airports which do not have any flight in and out.",
        "evidence": "",
        "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "pred": "SELECT airportname FROM AIRPORTS EXCEPT SELECT airportname FROM AIRPORTS AS A JOIN FLIGHTS AS F ON A.airportcode = F.sourceairport UNION SELECT airportname FROM AIRPORTS AS A JOIN FLIGHTS AS F ON A.airportcode = F.destairport",
        "pred_result": 1,
        "repair_sql": "SELECT airportname FROM AIRPORTS EXCEPT SELECT airportname FROM AIRPORTS AS A JOIN FLIGHTS AS F ON A.airportcode = F.sourceairport UNION SELECT airportname FROM AIRPORTS AS A JOIN FLIGHTS AS F ON A.airportcode = F.destairport;",
        "repair_result": 1
    },
    {
        "idx": 258,
        "db_id": "flight_2",
        "question": "Which airports do not have departing or arriving flights?",
        "evidence": "",
        "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "pred": "SELECT airportcode FROM AIRPORTS EXCEPT SELECT sourceairport FROM FLIGHTS UNION SELECT destairport FROM FLIGHTS",
        "pred_result": 0,
        "repair_sql": "SELECT airportcode FROM AIRPORTS EXCEPT SELECT sourceairport FROM FLIGHTS EXCEPT SELECT destairport FROM FLIGHTS;",
        "repair_result": 0
    },
    {
        "idx": 259,
        "db_id": "employee_hire_evaluation",
        "question": "How many employees are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM employee",
        "pred": "SELECT count(*) FROM EMPLOYEE",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM EMPLOYEE;",
        "repair_result": 1
    },
    {
        "idx": 260,
        "db_id": "employee_hire_evaluation",
        "question": "Count the number of employees",
        "evidence": "",
        "gold": "SELECT count(*) FROM employee",
        "pred": "SELECT count(*) FROM employee",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM employee;",
        "repair_result": 1
    },
    {
        "idx": 261,
        "db_id": "employee_hire_evaluation",
        "question": "Sort employee names by their age in ascending order.",
        "evidence": "",
        "gold": "SELECT name FROM employee ORDER BY age",
        "pred": "SELECT name FROM employee ORDER BY age ASC",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM employee ORDER BY age ASC;",
        "repair_result": 1
    },
    {
        "idx": 262,
        "db_id": "employee_hire_evaluation",
        "question": "List the names of employees and sort in ascending order of age.",
        "evidence": "",
        "gold": "SELECT name FROM employee ORDER BY age",
        "pred": "SELECT name FROM employee ORDER BY age ASC",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM employee ORDER BY age ASC;",
        "repair_result": 1
    },
    {
        "idx": 263,
        "db_id": "employee_hire_evaluation",
        "question": "What is the number of employees from each city?",
        "evidence": "",
        "gold": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "pred": "SELECT city, COUNT(*) as number_of_employees FROM EMPLOYEE GROUP BY city",
        "pred_result": 0,
        "repair_sql": "SELECT city, COUNT(*) as number_of_employees FROM EMPLOYEE GROUP BY city;",
        "repair_result": 0
    },
    {
        "idx": 264,
        "db_id": "employee_hire_evaluation",
        "question": "Count the number of employees for each city.",
        "evidence": "",
        "gold": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "pred": "SELECT city, COUNT(employee_id) as employee_count FROM EMPLOYEE GROUP BY city",
        "pred_result": 0,
        "repair_sql": "SELECT city, COUNT(employee_id) as employee_count FROM EMPLOYEE GROUP BY city;",
        "repair_result": 0
    },
    {
        "idx": 265,
        "db_id": "employee_hire_evaluation",
        "question": "Which cities do more than one employee under age 30 come from?",
        "evidence": "",
        "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "pred": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(employee_id) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(employee_id) > 1;",
        "repair_result": 1
    },
    {
        "idx": 266,
        "db_id": "employee_hire_evaluation",
        "question": "Find the cities that have more than one employee under age 30.",
        "evidence": "",
        "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "pred": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
        "repair_result": 1
    },
    {
        "idx": 267,
        "db_id": "employee_hire_evaluation",
        "question": "Find the number of shops in each location.",
        "evidence": "",
        "gold": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "pred": "SELECT location, count(shop_id) as number_of_shops FROM shop GROUP BY location",
        "pred_result": 0,
        "repair_sql": "SELECT location, count(shop_id) as number_of_shops FROM shop GROUP BY location;",
        "repair_result": 0
    },
    {
        "idx": 268,
        "db_id": "employee_hire_evaluation",
        "question": "How many shops are there in each location?",
        "evidence": "",
        "gold": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "pred": "SELECT location, count(*) FROM shop GROUP BY location",
        "pred_result": 0,
        "repair_sql": "SELECT location, count(*) FROM shop GROUP BY location;",
        "repair_result": 0
    },
    {
        "idx": 269,
        "db_id": "employee_hire_evaluation",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "evidence": "",
        "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "pred": "SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 270,
        "db_id": "employee_hire_evaluation",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "evidence": "",
        "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "pred": "SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 271,
        "db_id": "employee_hire_evaluation",
        "question": "find the minimum and maximum number of products of all stores.",
        "evidence": "",
        "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "pred": "SELECT min(number_products), max(number_products) FROM SHOP",
        "pred_result": 1,
        "repair_sql": "SELECT min(number_products), max(number_products) FROM SHOP;",
        "repair_result": 1
    },
    {
        "idx": 272,
        "db_id": "employee_hire_evaluation",
        "question": "What are the minimum and maximum number of products across all the shops?",
        "evidence": "",
        "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "pred": "SELECT min(number_products), max(number_products) FROM SHOP",
        "pred_result": 1,
        "repair_sql": "SELECT MIN(number_products) AS min_products, MAX(number_products) AS max_products FROM SHOP;",
        "repair_result": 1
    },
    {
        "idx": 273,
        "db_id": "employee_hire_evaluation",
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "evidence": "",
        "gold": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "pred": "SELECT name, location, district FROM shop ORDER BY number_products DESC",
        "pred_result": 1,
        "repair_sql": "SELECT name, location, district FROM shop ORDER BY number_products DESC;",
        "repair_result": 1
    },
    {
        "idx": 274,
        "db_id": "employee_hire_evaluation",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "evidence": "",
        "gold": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "pred": "SELECT name, location, district FROM shop ORDER BY number_products DESC",
        "pred_result": 1,
        "repair_sql": "SELECT name,        location,        district FROM shop ORDER BY number_products DESC;",
        "repair_result": 1
    },
    {
        "idx": 275,
        "db_id": "employee_hire_evaluation",
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "evidence": "",
        "gold": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "pred": "SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM shop WHERE number_products >  (SELECT avg(number_products)  FROM shop);",
        "repair_result": 1
    },
    {
        "idx": 276,
        "db_id": "employee_hire_evaluation",
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "evidence": "",
        "gold": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "pred": "SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop);",
        "repair_result": 1
    },
    {
        "idx": 277,
        "db_id": "employee_hire_evaluation",
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "evidence": "",
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT name FROM employee WHERE employee_id = (     SELECT employee_id     FROM evaluation     GROUP BY employee_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM employee WHERE employee_id = (     SELECT employee_id     FROM evaluation     GROUP BY employee_id     ORDER BY COUNT(*) DESC     LIMIT 1 );",
        "repair_result": 1
    },
    {
        "idx": 278,
        "db_id": "employee_hire_evaluation",
        "question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "evidence": "",
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT e.name FROM EMPLOYEE AS e JOIN EVALUATION AS ev ON e.employee_id = ev.employee_id GROUP BY e.employee_id ORDER BY COUNT(ev.year_awarded) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT e.name FROM EMPLOYEE AS e JOIN EVALUATION AS ev ON e.employee_id = ev.employee_id GROUP BY e.employee_id, e.name ORDER BY COUNT(ev.year_awarded) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 279,
        "db_id": "employee_hire_evaluation",
        "question": "Find the name of the employee who got the highest one time bonus.",
        "evidence": "",
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "pred": "SELECT name FROM employee WHERE employee_id = (   SELECT employee_id   FROM evaluation   WHERE bonus = (     SELECT max(bonus)     FROM evaluation   ) )",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM employee WHERE employee_id = (   SELECT employee_id   FROM evaluation   ORDER BY bonus DESC   LIMIT 1 );",
        "repair_result": 1
    },
    {
        "idx": 280,
        "db_id": "employee_hire_evaluation",
        "question": "Which employee received the biggest bonus? Give me the employee name.",
        "evidence": "",
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "pred": "SELECT e.name FROM EMPLOYEE AS e JOIN EVALUATION AS ev ON e.employee_id = ev.employee_id ORDER BY ev.bonus DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT e.name FROM EMPLOYEE AS e JOIN EVALUATION AS ev ON e.employee_id = ev.employee_id ORDER BY ev.bonus DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 281,
        "db_id": "employee_hire_evaluation",
        "question": "Find the names of employees who never won any award in the evaluation.",
        "evidence": "",
        "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "pred": "SELECT name FROM EMPLOYEE EXCEPT SELECT E.name FROM EMPLOYEE AS E JOIN EVALUATION AS EV ON E.employee_id = EV.employee_id",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM EMPLOYEE EXCEPT SELECT E.name FROM EMPLOYEE AS E JOIN EVALUATION AS EV ON E.employee_id = EV.employee_id",
        "repair_result": 1
    },
    {
        "idx": 282,
        "db_id": "employee_hire_evaluation",
        "question": "What are the names of the employees who never received any evaluation?",
        "evidence": "",
        "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "pred": "SELECT name FROM EMPLOYEE EXCEPT SELECT E1.name FROM EMPLOYEE AS E1 JOIN EVALUATION AS E2 ON E1.employee_id = E2.employee_id",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM EMPLOYEE EXCEPT SELECT E1.name FROM EMPLOYEE AS E1 JOIN EVALUATION AS E2 ON E1.employee_id = E2.employee_id;",
        "repair_result": 1
    },
    {
        "idx": 283,
        "db_id": "employee_hire_evaluation",
        "question": "What is the name of the shop that is hiring the largest number of employees?",
        "evidence": "",
        "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT S.name FROM HIRING AS H JOIN SHOP AS S ON H.shop_id = S.shop_id GROUP BY S.shop_id ORDER BY COUNT(H.employee_id) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT S.name FROM HIRING AS H JOIN SHOP AS S ON H.shop_id = S.shop_id GROUP BY S.shop_id, S.name ORDER BY COUNT(H.employee_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 284,
        "db_id": "employee_hire_evaluation",
        "question": "Which shop has the most employees? Give me the shop name.",
        "evidence": "",
        "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT S.name FROM SHOP AS S JOIN HIRING AS H ON S.shop_id = H.shop_id GROUP BY S.name ORDER BY COUNT(H.employee_id) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT S.name FROM SHOP AS S JOIN HIRING AS H ON S.shop_id = H.shop_id GROUP BY S.shop_id, S.name ORDER BY COUNT(H.employee_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 285,
        "db_id": "employee_hire_evaluation",
        "question": "Find the name of the shops that do not hire any employee.",
        "evidence": "",
        "gold": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "pred": "SELECT name FROM SHOP EXCEPT SELECT S.name FROM SHOP AS S JOIN HIRING AS H ON S.shop_id = H.shop_id",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM SHOP EXCEPT SELECT S.name FROM SHOP AS S JOIN HIRING AS H ON S.shop_id = H.shop_id;",
        "repair_result": 1
    },
    {
        "idx": 286,
        "db_id": "employee_hire_evaluation",
        "question": "Which shops run with no employees? Find the shop names",
        "evidence": "",
        "gold": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "pred": "SELECT name FROM SHOP EXCEPT SELECT S.name FROM SHOP AS S JOIN HIRING AS H ON S.shop_id = H.shop_id",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM SHOP EXCEPT SELECT S.name FROM SHOP AS S JOIN HIRING AS H ON S.shop_id = H.shop_id;",
        "repair_result": 1
    },
    {
        "idx": 287,
        "db_id": "employee_hire_evaluation",
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "evidence": "",
        "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "pred": "SELECT S.name, COUNT(H.employee_id) AS number_of_employees FROM SHOP AS S JOIN HIRING AS H ON S.shop_id = H.shop_id GROUP BY S.name",
        "pred_result": 0,
        "repair_sql": "SELECT S.name, COUNT(H.employee_id) AS number_of_employees FROM SHOP AS S JOIN HIRING AS H ON S.shop_id = H.shop_id GROUP BY S.name;",
        "repair_result": 0
    },
    {
        "idx": 288,
        "db_id": "employee_hire_evaluation",
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "evidence": "",
        "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "pred": "SELECT S.name, COUNT(H.employee_id) AS number_of_employees FROM SHOP AS S LEFT JOIN HIRING AS H ON S.shop_id = H.shop_id GROUP BY S.name",
        "pred_result": 0,
        "repair_sql": "SELECT S.name, COUNT(H.employee_id) AS number_of_employees FROM SHOP AS S LEFT JOIN HIRING AS H ON S.shop_id = H.shop_id GROUP BY S.shop_id, S.name",
        "repair_result": 0
    },
    {
        "idx": 289,
        "db_id": "employee_hire_evaluation",
        "question": "What is total bonus given in all evaluations?",
        "evidence": "",
        "gold": "SELECT sum(bonus) FROM evaluation",
        "pred": "SELECT sum(bonus) FROM EVALUATION",
        "pred_result": 1,
        "repair_sql": "SELECT sum(bonus) FROM EVALUATION;",
        "repair_result": 1
    },
    {
        "idx": 290,
        "db_id": "employee_hire_evaluation",
        "question": "Find the total amount of bonus given in all the evaluations.",
        "evidence": "",
        "gold": "SELECT sum(bonus) FROM evaluation",
        "pred": "SELECT SUM(bonus) AS total_bonus FROM EVALUATION",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(bonus) AS total_bonus FROM EVALUATION;",
        "repair_result": 1
    },
    {
        "idx": 291,
        "db_id": "employee_hire_evaluation",
        "question": "Give me all the information about hiring.",
        "evidence": "",
        "gold": "SELECT * FROM hiring",
        "pred": "SELECT shop_id, employee_id, start_from, is_full_time FROM HIRING",
        "pred_result": 1,
        "repair_sql": "SELECT shop_id,        employee_id,        start_from,        is_full_time FROM HIRING;",
        "repair_result": 1
    },
    {
        "idx": 292,
        "db_id": "employee_hire_evaluation",
        "question": "What is all the information about hiring?",
        "evidence": "",
        "gold": "SELECT * FROM hiring",
        "pred": "SELECT shop_id, employee_id, start_from, is_full_time FROM HIRING",
        "pred_result": 1,
        "repair_sql": "SELECT shop_id,        employee_id,        start_from,        is_full_time FROM HIRING;",
        "repair_result": 1
    },
    {
        "idx": 293,
        "db_id": "employee_hire_evaluation",
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "evidence": "",
        "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "pred": "SELECT district FROM shop WHERE number_products < 3000 INTERSECT SELECT district FROM shop WHERE number_products > 10000",
        "pred_result": 1,
        "repair_sql": "SELECT district FROM shop WHERE number_products < 3000 INTERSECT SELECT district FROM shop WHERE number_products > 10000;",
        "repair_result": 1
    },
    {
        "idx": 294,
        "db_id": "employee_hire_evaluation",
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "evidence": "",
        "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "pred": "SELECT district FROM shop WHERE number_products < 3000 INTERSECT SELECT district FROM shop WHERE number_products > 10000",
        "pred_result": 1,
        "repair_sql": "SELECT district FROM shop WHERE number_products < 3000 INTERSECT SELECT district FROM shop WHERE number_products > 10000;",
        "repair_result": 1
    },
    {
        "idx": 295,
        "db_id": "employee_hire_evaluation",
        "question": "How many different store locations are there?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT LOCATION) FROM shop",
        "pred": "SELECT count(DISTINCT location) FROM shop",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT location) FROM shop;",
        "repair_result": 1
    },
    {
        "idx": 296,
        "db_id": "employee_hire_evaluation",
        "question": "Count the number of distinct store locations.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT LOCATION) FROM shop",
        "pred": "SELECT count(DISTINCT location) FROM shop",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT location) FROM shop;",
        "repair_result": 1
    },
    {
        "idx": 297,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many documents do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Documents",
        "pred": "SELECT count(*) FROM DOCUMENTS",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM DOCUMENTS",
        "repair_result": 1
    },
    {
        "idx": 298,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of documents.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Documents",
        "pred": "SELECT count(*) FROM DOCUMENTS",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM DOCUMENTS",
        "repair_result": 1
    },
    {
        "idx": 299,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "evidence": "",
        "gold": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "pred": "SELECT document_id, document_name, document_description FROM DOCUMENTS",
        "pred_result": 1,
        "repair_sql": "SELECT document_id,        document_name,        document_description FROM DOCUMENTS;",
        "repair_result": 1
    },
    {
        "idx": 300,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids, names, and descriptions for all documents?",
        "evidence": "",
        "gold": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "pred": "SELECT document_id, document_name, document_description FROM DOCUMENTS",
        "pred_result": 1,
        "repair_sql": "SELECT document_id,        document_name,        document_description FROM DOCUMENTS;",
        "repair_result": 1
    },
    {
        "idx": 301,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "evidence": "",
        "gold": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "pred": "SELECT document_name, template_id FROM documents WHERE document_description LIKE \"%w%\"",
        "pred_result": 1,
        "repair_sql": "SELECT document_name, template_id FROM documents WHERE document_description LIKE \"%w%\"",
        "repair_result": 1
    },
    {
        "idx": 302,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "evidence": "",
        "gold": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "pred": "SELECT document_name, template_id FROM DOCUMENTS WHERE document_description LIKE \"%w%\"",
        "pred_result": 1,
        "repair_sql": "SELECT document_name, template_id FROM DOCUMENTS WHERE document_description LIKE \"%w%\"",
        "repair_result": 1
    },
    {
        "idx": 303,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "evidence": "",
        "gold": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "pred": "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'",
        "pred_result": 1,
        "repair_sql": "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV';",
        "repair_result": 1
    },
    {
        "idx": 304,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "evidence": "",
        "gold": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "pred": "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'",
        "pred_result": 1,
        "repair_sql": "SELECT document_id, template_id, document_description  FROM documents  WHERE document_name = 'Robbin CV';",
        "repair_result": 1
    },
    {
        "idx": 305,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many different templates do all document use?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT template_id) FROM Documents",
        "pred": "SELECT count(DISTINCT template_id) FROM documents",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT template_id) FROM documents;",
        "repair_result": 1
    },
    {
        "idx": 306,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of different templates used for documents.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT template_id) FROM Documents",
        "pred": "SELECT count(DISTINCT template_id) FROM documents",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT template_id) FROM documents;",
        "repair_result": 1
    },
    {
        "idx": 307,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many documents are using the template with type code 'PPT'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "pred": "SELECT COUNT(DISTINCT d.document_id) FROM documents AS d JOIN templates AS t ON d.template_id = t.template_id JOIN ref_template_types AS rtt ON t.template_type_code = rtt.template_type_code WHERE rtt.template_type_code = 'PPT';",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(d.document_id) FROM documents AS d JOIN templates AS t ON d.template_id = t.template_id JOIN ref_template_types AS rtt ON t.template_type_code = rtt.template_type_code WHERE rtt.template_type_code = 'PP';",
        "repair_result": 0
    },
    {
        "idx": 308,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of documents that use the PPT template type.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "pred": "SELECT count(*) FROM DOCUMENTS AS D JOIN TEMPLATES AS T ON D.template_id = T.template_id JOIN REF_TEMPLATE_TYPES AS R ON T.template_type_code = R.template_type_code WHERE R.template_type_code = 'PPT'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM DOCUMENTS AS D JOIN TEMPLATES AS T ON D.template_id = T.template_id JOIN REF_TEMPLATE_TYPES AS R ON T.template_type_code = R.template_type_code WHERE R.template_type_code = 'PPT'",
        "repair_result": 1
    },
    {
        "idx": 309,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template ids and number of documents using each template.",
        "evidence": "",
        "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "pred": "SELECT template_id, count(document_id) as document_count FROM DOCUMENTS GROUP BY template_id",
        "pred_result": 1,
        "repair_sql": "SELECT template_id, count(document_id) as document_count FROM DOCUMENTS GROUP BY template_id",
        "repair_result": 1
    },
    {
        "idx": 310,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "evidence": "",
        "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "pred": "SELECT template_id, count(*) FROM documents GROUP BY template_id",
        "pred_result": 1,
        "repair_sql": "SELECT template_id, count(*) FROM documents GROUP BY template_id;",
        "repair_result": 1
    },
    {
        "idx": 311,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the id and type code for the template used by the most documents?",
        "evidence": "",
        "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT template_id, template_type_code FROM TEMPLATES WHERE template_id = (     SELECT template_id     FROM DOCUMENTS     GROUP BY template_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT t.template_id, t.template_type_code FROM TEMPLATES t JOIN (     SELECT d.template_id     FROM DOCUMENTS d     GROUP BY d.template_id     ORDER BY COUNT(*) DESC     LIMIT 1 ) AS most_used_template ON t.template_id = most_used_template.template_id;",
        "repair_result": 1
    },
    {
        "idx": 312,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "evidence": "",
        "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT t1.template_id, t1.template_type_code FROM TEMPLATES AS t1 JOIN DOCUMENTS AS t2 ON t1.template_id = t2.template_id GROUP BY t1.template_id ORDER BY count(t2.document_id) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT t1.template_id, t1.template_type_code FROM TEMPLATES AS t1 JOIN DOCUMENTS AS t2 ON t1.template_id = t2.template_id GROUP BY t1.template_id, t1.template_type_code ORDER BY count(t2.document_id) DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 313,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show ids for all templates that are used by more than one document.",
        "evidence": "",
        "gold": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "pred": "SELECT T1.template_id FROM TEMPLATES AS T1 JOIN DOCUMENTS AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id HAVING COUNT(T2.document_id) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.template_id FROM TEMPLATES AS T1 JOIN DOCUMENTS AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id HAVING COUNT(T2.document_id) > 1",
        "repair_result": 1
    },
    {
        "idx": 314,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the template ids of any templates used in more than a single document?",
        "evidence": "",
        "gold": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "pred": "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(*) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(*) > 1",
        "repair_result": 1
    },
    {
        "idx": 315,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show ids for all templates not used by any document.",
        "evidence": "",
        "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "pred": "SELECT template_id FROM TEMPLATES EXCEPT SELECT template_id FROM DOCUMENTS",
        "pred_result": 1,
        "repair_sql": "SELECT template_id FROM TEMPLATES EXCEPT SELECT template_id FROM DOCUMENTS;",
        "repair_result": 1
    },
    {
        "idx": 316,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids for templates that are not used in any documents?",
        "evidence": "",
        "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "pred": "SELECT template_id FROM TEMPLATES EXCEPT SELECT template_id FROM DOCUMENTS",
        "pred_result": 1,
        "repair_sql": "SELECT template_id FROM TEMPLATES EXCEPT SELECT template_id FROM DOCUMENTS;",
        "repair_result": 1
    },
    {
        "idx": 317,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many templates do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Templates",
        "pred": "SELECT count(*) FROM TEMPLATES",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM TEMPLATES",
        "repair_result": 1
    },
    {
        "idx": 318,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of templates.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Templates",
        "pred": "SELECT count(*) FROM templates",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM templates;",
        "repair_result": 1
    },
    {
        "idx": 319,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "evidence": "",
        "gold": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "pred": "SELECT template_id, version_number, template_type_code FROM TEMPLATES",
        "pred_result": 1,
        "repair_sql": "SELECT template_id,        version_number,        template_type_code FROM TEMPLATES;",
        "repair_result": 1
    },
    {
        "idx": 320,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids, version numbers, and type codes for each template?",
        "evidence": "",
        "gold": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "pred": "SELECT template_id, version_number, template_type_code FROM TEMPLATES",
        "pred_result": 1,
        "repair_sql": "SELECT template_id, version_number, template_type_code FROM TEMPLATES;",
        "repair_result": 1
    },
    {
        "idx": 321,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all distinct template type codes for all templates.",
        "evidence": "",
        "gold": "SELECT DISTINCT template_type_code FROM Templates",
        "pred": "SELECT DISTINCT template_type_code FROM TEMPLATES",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT template_type_code FROM TEMPLATES;",
        "repair_result": 1
    },
    {
        "idx": 322,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the different template type codes?",
        "evidence": "",
        "gold": "SELECT DISTINCT template_type_code FROM Templates",
        "pred": "SELECT template_type_code FROM REF_TEMPLATE_TYPES",
        "pred_result": 1,
        "repair_sql": "SELECT template_type_code FROM REF_TEMPLATE_TYPES;",
        "repair_result": 1
    },
    {
        "idx": 323,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids of templates with template type code PP or PPT?",
        "evidence": "",
        "gold": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "pred": "SELECT template_id FROM templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
        "pred_result": 1,
        "repair_sql": "SELECT template_id FROM templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\";",
        "repair_result": 1
    },
    {
        "idx": 324,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the ids of templates that have the code PP or PPT.",
        "evidence": "",
        "gold": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "pred": "SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT')",
        "pred_result": 1,
        "repair_sql": "SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT')",
        "repair_result": 1
    },
    {
        "idx": 325,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many templates have template type code CV?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "pred": "SELECT count(*) FROM TEMPLATES WHERE template_type_code = 'CV'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM TEMPLATES WHERE template_type_code = 'CV'",
        "repair_result": 1
    },
    {
        "idx": 326,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of templates of the type CV.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "pred": "SELECT count(*) FROM templates WHERE template_type_code = 'CV'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM templates WHERE template_type_code = 'CV'",
        "repair_result": 1
    },
    {
        "idx": 327,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "evidence": "",
        "gold": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "pred": "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
        "pred_result": 1,
        "repair_sql": "SELECT version_number, template_type_code FROM templates WHERE version_number > 5;",
        "repair_result": 1
    },
    {
        "idx": 328,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "evidence": "",
        "gold": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "pred": "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
        "pred_result": 1,
        "repair_sql": "SELECT version_number, template_type_code FROM templates WHERE version_number > 5;",
        "repair_result": 1
    },
    {
        "idx": 329,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes and number of templates for each.",
        "evidence": "",
        "gold": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "pred": "SELECT template_type_code, COUNT(*) FROM TEMPLATES GROUP BY template_type_code",
        "pred_result": 1,
        "repair_sql": "SELECT template_type_code, COUNT(*) FROM TEMPLATES GROUP BY template_type_code;",
        "repair_result": 1
    },
    {
        "idx": 330,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "evidence": "",
        "gold": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "pred": "SELECT T1.template_type_code, COUNT(*) FROM TEMPLATES AS T1 GROUP BY T1.template_type_code",
        "pred_result": 1,
        "repair_sql": "SELECT T1.template_type_code, T2.template_type_description, COUNT(T1.template_id) AS template_count FROM TEMPLATES AS T1 JOIN REF_TEMPLATE_TYPES AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code, T2.template_type_description",
        "repair_result": 0
    },
    {
        "idx": 331,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Which template type code has most number of templates?",
        "evidence": "",
        "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT template_type_code FROM TEMPLATES GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT template_type_code FROM TEMPLATES GROUP BY template_type_code ORDER BY COUNT(template_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 332,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the type code of the template type that the most templates belong to.",
        "evidence": "",
        "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT template_type_code FROM TEMPLATES GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT template_type_code FROM TEMPLATES GROUP BY template_type_code ORDER BY COUNT(template_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 333,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes with less than three templates.",
        "evidence": "",
        "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "pred": "SELECT T1.template_type_code FROM REF_TEMPLATE_TYPES AS T1 JOIN TEMPLATES AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code HAVING COUNT(T2.template_id) < 3",
        "pred_result": 1,
        "repair_sql": "SELECT T1.template_type_code FROM REF_TEMPLATE_TYPES AS T1 JOIN TEMPLATES AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code HAVING COUNT(T2.template_id) < 3",
        "repair_result": 1
    },
    {
        "idx": 334,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "evidence": "",
        "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "pred": "SELECT T1.template_type_code FROM REF_TEMPLATE_TYPES AS T1 JOIN TEMPLATES AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code HAVING count(*) < 3",
        "pred_result": 1,
        "repair_sql": "SELECT T1.template_type_code FROM REF_TEMPLATE_TYPES AS T1 JOIN TEMPLATES AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code HAVING count(T2.template_id) < 3;",
        "repair_result": 1
    },
    {
        "idx": 335,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What the smallest version number and its template type code?",
        "evidence": "",
        "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "pred": "SELECT template_type_code, min(version_number) as smallest_version_number FROM TEMPLATES",
        "pred_result": 0,
        "repair_sql": "SELECT template_type_code, version_number as smallest_version_number  FROM TEMPLATES ORDER BY version_number ASC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 336,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "evidence": "",
        "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "pred": "SELECT version_number, template_type_code FROM TEMPLATES ORDER BY version_number ASC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT version_number, template_type_code FROM TEMPLATES ORDER BY version_number ASC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 337,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "evidence": "",
        "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "pred": "SELECT T2.template_type_code FROM documents AS T1 JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T1.document_name = 'Data base'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.template_type_code FROM documents AS T1 JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T1.document_name = 'Data base'",
        "repair_result": 1
    },
    {
        "idx": 338,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "evidence": "",
        "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "pred": "SELECT t2.template_type_code FROM documents AS t1 JOIN templates AS t2 ON t1.template_id = t2.template_id WHERE t1.document_name = 'Data base'",
        "pred_result": 1,
        "repair_sql": "SELECT t2.template_type_code FROM documents AS t1 JOIN templates AS t2 ON t1.template_id = t2.template_id WHERE t1.document_name = 'Data base'",
        "repair_result": 1
    },
    {
        "idx": 339,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all document names using templates with template type code BK.",
        "evidence": "",
        "gold": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "pred": "SELECT D.document_name FROM DOCUMENTS AS D JOIN TEMPLATES AS T ON D.template_id = T.template_id WHERE T.template_type_code = 'BK'",
        "pred_result": 1,
        "repair_sql": "SELECT D.document_name FROM DOCUMENTS AS D JOIN TEMPLATES AS T ON D.template_id = T.template_id WHERE T.template_type_code = 'BK'",
        "repair_result": 1
    },
    {
        "idx": 340,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the names of documents that use templates with the code BK?",
        "evidence": "",
        "gold": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "pred": "SELECT d.document_name FROM documents AS d JOIN templates AS t ON d.template_id = t.template_id WHERE t.template_type_code = 'BK'",
        "pred_result": 1,
        "repair_sql": "SELECT d.document_name FROM documents AS d JOIN templates AS t ON d.template_id = t.template_id WHERE t.template_type_code = 'BK'",
        "repair_result": 1
    },
    {
        "idx": 341,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes and the number of documents using each type.",
        "evidence": "",
        "gold": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "pred": "SELECT T1.template_type_code, COUNT(T3.document_id) AS document_count FROM TEMPLATES AS T1 LEFT JOIN DOCUMENTS AS T3 ON T1.template_id = T3.template_id GROUP BY T1.template_type_code",
        "pred_result": 0,
        "repair_sql": "SELECT T1.template_type_code, COUNT(T3.document_id) AS document_count FROM TEMPLATES AS T1 LEFT JOIN DOCUMENTS AS T3 ON T1.template_id = T3.template_id GROUP BY T1.template_type_code",
        "repair_result": 0
    },
    {
        "idx": 342,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the different template type codes, and how many documents use each type?",
        "evidence": "",
        "gold": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "pred": "SELECT T1.template_type_code, COUNT(*) AS document_count FROM TEMPLATES AS T1 JOIN DOCUMENTS AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
        "pred_result": 1,
        "repair_sql": "SELECT T1.template_type_code, COUNT(*) AS document_count FROM TEMPLATES AS T1 JOIN DOCUMENTS AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code;",
        "repair_result": 1
    },
    {
        "idx": 343,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Which template type code is used by most number of documents?",
        "evidence": "",
        "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT t1.template_type_code FROM TEMPLATES AS t1 JOIN DOCUMENTS AS t2 ON t1.template_id = t2.template_id GROUP BY t1.template_type_code ORDER BY COUNT(t2.document_id) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT t1.template_type_code FROM TEMPLATES AS t1 JOIN DOCUMENTS AS t2 ON t1.template_id = t2.template_id GROUP BY t1.template_type_code ORDER BY COUNT(t2.document_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 344,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the code of the template type that is most commonly used in documents.",
        "evidence": "",
        "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT t1.template_type_code FROM TEMPLATES AS t1 JOIN DOCUMENTS AS t2 ON t1.template_id = t2.template_id GROUP BY t1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT t1.template_type_code FROM TEMPLATES AS t1 JOIN DOCUMENTS AS t2 ON t1.template_id = t2.template_id GROUP BY t1.template_type_code ORDER BY count(*) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 345,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes that are not used by any document.",
        "evidence": "",
        "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "pred": "SELECT template_type_code FROM REF_TEMPLATE_TYPES EXCEPT SELECT T2.template_type_code FROM DOCUMENTS AS T1 JOIN TEMPLATES AS T2 ON T1.template_id = T2.template_id",
        "pred_result": 1,
        "repair_sql": "SELECT template_type_code FROM REF_TEMPLATE_TYPES EXCEPT SELECT T2.template_type_code FROM DOCUMENTS AS T1 JOIN TEMPLATES AS T2 ON T1.template_id = T2.template_id;",
        "repair_result": 1
    },
    {
        "idx": 346,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the codes of template types that are not used for any document?",
        "evidence": "",
        "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "pred": "SELECT template_type_code FROM REF_TEMPLATE_TYPES EXCEPT SELECT T1.template_type_code FROM TEMPLATES AS T1 JOIN DOCUMENTS AS T2 ON T1.template_id = T2.template_id",
        "pred_result": 1,
        "repair_sql": "SELECT template_type_code FROM REF_TEMPLATE_TYPES EXCEPT SELECT T1.template_type_code FROM TEMPLATES AS T1 JOIN DOCUMENTS AS T2 ON T1.template_id = T2.template_id",
        "repair_result": 1
    },
    {
        "idx": 347,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes and descriptions.",
        "evidence": "",
        "gold": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "pred": "SELECT template_type_code, template_type_description FROM REF_TEMPLATE_TYPES",
        "pred_result": 1,
        "repair_sql": "SELECT template_type_code, template_type_description FROM REF_TEMPLATE_TYPES;",
        "repair_result": 1
    },
    {
        "idx": 348,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the type codes and descriptions for all template types?",
        "evidence": "",
        "gold": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "pred": "SELECT template_type_code, template_type_description FROM ref_template_types",
        "pred_result": 1,
        "repair_sql": "SELECT template_type_code, template_type_description FROM ref_template_types;",
        "repair_result": 1
    },
    {
        "idx": 349,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the template type descriptions for template type code \"AD\".",
        "evidence": "",
        "gold": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "pred": "SELECT template_type_description FROM REF_TEMPLATE_TYPES WHERE template_type_code = \"AD\"",
        "pred_result": 1,
        "repair_sql": "SELECT template_type_description FROM REF_TEMPLATE_TYPES WHERE template_type_code = \"AD\"",
        "repair_result": 1
    },
    {
        "idx": 350,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the template type description of the template type with the code AD.",
        "evidence": "",
        "gold": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "pred": "SELECT template_type_description FROM REF_TEMPLATE_TYPES WHERE template_type_code = \"AD\"",
        "pred_result": 1,
        "repair_sql": "SELECT template_type_description FROM REF_TEMPLATE_TYPES WHERE template_type_code = \"AD\"",
        "repair_result": 1
    },
    {
        "idx": 351,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the template type code for template type description \"Book\".",
        "evidence": "",
        "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "pred": "SELECT template_type_code FROM ref_template_types WHERE template_type_description = \"Book\"",
        "pred_result": 1,
        "repair_sql": "SELECT template_type_code FROM ref_template_types WHERE template_type_description = \"Book\";",
        "repair_result": 1
    },
    {
        "idx": 352,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the type code of the template type with the description \"Book\".",
        "evidence": "",
        "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "pred": "SELECT template_type_code FROM REF_TEMPLATE_TYPES WHERE template_type_description = \"Book\"",
        "pred_result": 1,
        "repair_sql": "SELECT template_type_code FROM REF_TEMPLATE_TYPES WHERE template_type_description = \"Book\"",
        "repair_result": 1
    },
    {
        "idx": 353,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "pred": "SELECT DISTINCT RTT.template_type_description FROM DOCUMENTS AS D JOIN TEMPLATES AS T ON D.template_id = T.template_id JOIN REF_TEMPLATE_TYPES AS RTT ON T.template_type_code = RTT.template_type_code",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT RTT.template_type_description FROM DOCUMENTS AS D JOIN TEMPLATES AS T ON D.template_id = T.template_id JOIN REF_TEMPLATE_TYPES AS RTT ON T.template_type_code = RTT.template_type_code",
        "repair_result": 1
    },
    {
        "idx": 354,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the different descriptions for templates that have been used in a document.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "pred": "SELECT DISTINCT T2.template_type_description FROM TEMPLATES AS T1 JOIN REF_TEMPLATE_TYPES AS T2 ON T1.template_type_code = T2.template_type_code JOIN DOCUMENTS AS T3 ON T1.template_id = T3.template_id",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.template_type_description FROM TEMPLATES AS T1 JOIN REF_TEMPLATE_TYPES AS T2 ON T1.template_type_code = T2.template_type_code JOIN DOCUMENTS AS T3 ON T1.template_id = T3.template_id;",
        "repair_result": 1
    },
    {
        "idx": 355,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the template ids with template type description \"Presentation\".",
        "evidence": "",
        "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "pred": "SELECT T1.template_id FROM TEMPLATES AS T1 JOIN REF_TEMPLATE_TYPES AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_type_description = 'Presentation'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.template_id FROM TEMPLATES AS T1 JOIN REF_TEMPLATE_TYPES AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_type_description = 'Presentation'",
        "repair_result": 1
    },
    {
        "idx": 356,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "evidence": "",
        "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "pred": "SELECT T1.template_id FROM TEMPLATES AS T1 JOIN REF_TEMPLATE_TYPES AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_type_description = 'Presentation'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.template_id FROM TEMPLATES AS T1 JOIN REF_TEMPLATE_TYPES AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_type_description = 'Presentation'",
        "repair_result": 1
    },
    {
        "idx": 357,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many paragraphs in total?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Paragraphs",
        "pred": "SELECT count(*) FROM PARAGRAPHS",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM PARAGRAPHS",
        "repair_result": 1
    },
    {
        "idx": 358,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of paragraphs.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Paragraphs",
        "pred": "SELECT count(*) FROM paragraphs",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM paragraphs",
        "repair_result": 1
    },
    {
        "idx": 359,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "pred": "SELECT COUNT(*) FROM PARAGRAPHS AS P JOIN DOCUMENTS AS D ON P.document_id = D.document_id WHERE D.document_name = 'Summer Show'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM PARAGRAPHS AS P JOIN DOCUMENTS AS D ON P.document_id = D.document_id WHERE D.document_name = 'Summer Show'",
        "repair_result": 1
    },
    {
        "idx": 360,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "pred": "SELECT COUNT(*) FROM PARAGRAPHS AS P JOIN DOCUMENTS AS D ON P.document_id = D.document_id WHERE D.document_name = 'Summer Show'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM PARAGRAPHS AS P JOIN DOCUMENTS AS D ON P.document_id = D.document_id WHERE D.document_name = 'Summer Show'",
        "repair_result": 1
    },
    {
        "idx": 361,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "evidence": "",
        "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
        "pred": "SELECT paragraph_text, other_details FROM PARAGRAPHS WHERE paragraph_text = 'Korea'",
        "pred_result": 0,
        "repair_sql": "SELECT paragraph_text, other_details FROM PARAGRAPHS WHERE paragraph_text = 'Korea'",
        "repair_result": 0
    },
    {
        "idx": 362,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "evidence": "",
        "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
        "pred": "SELECT paragraph_text, other_details FROM PARAGRAPHS WHERE paragraph_text LIKE '%Korea%';",
        "pred_result": 0,
        "repair_sql": "SELECT paragraph_text, other_details FROM PARAGRAPHS WHERE paragraph_text LIKE '%Korea%';",
        "repair_result": 0
    },
    {
        "idx": 363,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "evidence": "",
        "gold": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "pred": "SELECT P.paragraph_id, P.paragraph_text FROM PARAGRAPHS AS P JOIN DOCUMENTS AS D ON P.document_id = D.document_id WHERE D.document_name = 'Welcome to NY'",
        "pred_result": 1,
        "repair_sql": "SELECT P.paragraph_id, P.paragraph_text FROM PARAGRAPHS AS P JOIN DOCUMENTS AS D ON P.document_id = D.document_id WHERE D.document_name = 'Welcome to NY'",
        "repair_result": 1
    },
    {
        "idx": 364,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "evidence": "",
        "gold": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "pred": "SELECT p.paragraph_id, p.paragraph_text FROM PARAGRAPHS AS p JOIN DOCUMENTS AS d ON p.document_id = d.document_id WHERE d.document_name = 'Welcome to NY'",
        "pred_result": 1,
        "repair_sql": "SELECT p.paragraph_id, p.paragraph_text FROM PARAGRAPHS AS p JOIN DOCUMENTS AS d ON p.document_id = d.document_id WHERE d.document_name = 'Welcome to NY'",
        "repair_result": 1
    },
    {
        "idx": 365,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "evidence": "",
        "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "pred": "SELECT P.paragraph_text FROM PARAGRAPHS AS P JOIN DOCUMENTS AS D ON P.document_id = D.document_id WHERE D.document_name = 'Customer reviews'",
        "pred_result": 1,
        "repair_sql": "SELECT P.paragraph_text FROM PARAGRAPHS AS P JOIN DOCUMENTS AS D ON P.document_id = D.document_id WHERE D.document_name = 'Customer reviews'",
        "repair_result": 1
    },
    {
        "idx": 366,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "evidence": "",
        "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "pred": "SELECT p.paragraph_text FROM PARAGRAPHS AS p JOIN DOCUMENTS AS d ON p.document_id = d.document_id WHERE d.document_name = 'Customer reviews'",
        "pred_result": 1,
        "repair_sql": "SELECT p.paragraph_text FROM PARAGRAPHS AS p JOIN DOCUMENTS AS d ON p.document_id = d.document_id WHERE d.document_name = 'Customer reviews'",
        "repair_result": 1
    },
    {
        "idx": 367,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "evidence": "",
        "gold": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "pred": "SELECT D.document_id, COUNT(P.paragraph_id) AS paragraph_count FROM DOCUMENTS AS D LEFT JOIN PARAGRAPHS AS P ON D.document_id = P.document_id GROUP BY D.document_id ORDER BY D.document_id",
        "pred_result": 0,
        "repair_sql": "SELECT D.document_id, COUNT(P.paragraph_id) AS paragraph_count FROM DOCUMENTS AS D LEFT JOIN PARAGRAPHS AS P ON D.document_id = P.document_id GROUP BY D.document_id ORDER BY D.document_id",
        "repair_result": 0
    },
    {
        "idx": 368,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "evidence": "",
        "gold": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "pred": "SELECT document_id, COUNT(paragraph_id) AS paragraph_count FROM PARAGRAPHS GROUP BY document_id ORDER BY document_id",
        "pred_result": 1,
        "repair_sql": "SELECT document_id, COUNT(paragraph_id) AS paragraph_count FROM PARAGRAPHS GROUP BY document_id ORDER BY document_id",
        "repair_result": 1
    },
    {
        "idx": 369,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "evidence": "",
        "gold": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "pred": "SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) AS paragraph_count FROM DOCUMENTS AS d LEFT JOIN PARAGRAPHS AS p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name",
        "pred_result": 0,
        "repair_sql": "SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) AS paragraph_count FROM DOCUMENTS AS d LEFT JOIN PARAGRAPHS AS p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name;",
        "repair_result": 0
    },
    {
        "idx": 370,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "evidence": "",
        "gold": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "pred": "SELECT D.document_id, D.document_name, COUNT(P.paragraph_id) AS paragraph_count FROM DOCUMENTS AS D LEFT JOIN PARAGRAPHS AS P ON D.document_id = P.document_id GROUP BY D.document_id, D.document_name",
        "pred_result": 0,
        "repair_sql": "SELECT D.document_id, D.document_name, COUNT(P.paragraph_id) AS paragraph_count FROM DOCUMENTS AS D JOIN PARAGRAPHS AS P ON D.document_id = P.document_id GROUP BY D.document_id, D.document_name;",
        "repair_result": 1
    },
    {
        "idx": 371,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "List all document ids with at least two paragraphs.",
        "evidence": "",
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "pred": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
        "repair_result": 1
    },
    {
        "idx": 372,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "evidence": "",
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "pred": "SELECT document_id FROM PARAGRAPHS GROUP BY document_id HAVING COUNT(paragraph_id) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT document_id FROM PARAGRAPHS GROUP BY document_id HAVING COUNT(paragraph_id) >= 2",
        "repair_result": 1
    },
    {
        "idx": 373,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document id and name with greatest number of paragraphs?",
        "evidence": "",
        "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT d.document_id, d.document_name FROM DOCUMENTS AS d JOIN PARAGRAPHS AS p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name ORDER BY COUNT(p.paragraph_id) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT d.document_id, d.document_name FROM DOCUMENTS AS d JOIN PARAGRAPHS AS p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name ORDER BY COUNT(p.paragraph_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 374,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the id and name of the document with the most paragraphs.",
        "evidence": "",
        "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT d.document_id, d.document_name FROM DOCUMENTS AS d JOIN PARAGRAPHS AS p ON d.document_id = p.document_id GROUP BY d.document_id ORDER BY COUNT(p.paragraph_id) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT d.document_id, d.document_name FROM DOCUMENTS AS d JOIN PARAGRAPHS AS p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name ORDER BY COUNT(p.paragraph_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 375,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document id with least number of paragraphs?",
        "evidence": "",
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "pred": "SELECT document_id FROM PARAGRAPHS GROUP BY document_id ORDER BY count(paragraph_id) LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT document_id FROM PARAGRAPHS GROUP BY document_id ORDER BY COUNT(paragraph_id) ASC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 376,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the id of the document with the fewest paragraphs.",
        "evidence": "",
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "pred": "SELECT document_id FROM PARAGRAPHS GROUP BY document_id ORDER BY count(paragraph_id) ASC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT document_id FROM PARAGRAPHS GROUP BY document_id ORDER BY COUNT(paragraph_id) ASC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 377,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document id with 1 to 2 paragraphs?",
        "evidence": "",
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "pred": "SELECT document_id FROM PARAGRAPHS GROUP BY document_id HAVING COUNT(paragraph_id) BETWEEN 1 AND 2",
        "pred_result": 1,
        "repair_sql": "SELECT document_id FROM PARAGRAPHS GROUP BY document_id HAVING COUNT(paragraph_id) BETWEEN 1 AND 2;",
        "repair_result": 1
    },
    {
        "idx": 378,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Give the ids of documents that have between one and two paragraphs.",
        "evidence": "",
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "pred": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) BETWEEN 1 AND 2",
        "pred_result": 1,
        "repair_sql": "SELECT d.document_id FROM documents d JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id HAVING COUNT(p.paragraph_id) BETWEEN 1 AND 2;",
        "repair_result": 1
    },
    {
        "idx": 379,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "evidence": "",
        "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "pred": "SELECT document_id FROM PARAGRAPHS WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM PARAGRAPHS WHERE paragraph_text = 'Ireland'",
        "pred_result": 1,
        "repair_sql": "SELECT document_id FROM PARAGRAPHS WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM PARAGRAPHS WHERE paragraph_text = 'Ireland'",
        "repair_result": 1
    },
    {
        "idx": 380,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "evidence": "",
        "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "pred": "SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland'",
        "pred_result": 1,
        "repair_sql": "SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland';",
        "repair_result": 1
    },
    {
        "idx": 381,
        "db_id": "course_teach",
        "question": "How many teachers are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM teacher",
        "pred": "SELECT count(*) FROM teacher",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM teacher;",
        "repair_result": 1
    },
    {
        "idx": 382,
        "db_id": "course_teach",
        "question": "What is the total count of teachers?",
        "evidence": "",
        "gold": "SELECT count(*) FROM teacher",
        "pred": "SELECT count(*) FROM teacher",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM teacher",
        "repair_result": 1
    },
    {
        "idx": 383,
        "db_id": "course_teach",
        "question": "List the names of teachers in ascending order of age.",
        "evidence": "",
        "gold": "SELECT Name FROM teacher ORDER BY Age ASC",
        "pred": "SELECT name FROM TEACHER ORDER BY age ASC",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM TEACHER ORDER BY age ASC;",
        "repair_result": 1
    },
    {
        "idx": 384,
        "db_id": "course_teach",
        "question": "What are the names of the teachers ordered by ascending age?",
        "evidence": "",
        "gold": "SELECT Name FROM teacher ORDER BY Age ASC",
        "pred": "SELECT name FROM teacher ORDER BY age ASC",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM teacher ORDER BY age ASC;",
        "repair_result": 1
    },
    {
        "idx": 385,
        "db_id": "course_teach",
        "question": "What are the age and hometown of teachers?",
        "evidence": "",
        "gold": "SELECT Age ,  Hometown FROM teacher",
        "pred": "SELECT age, hometown FROM teacher",
        "pred_result": 1,
        "repair_sql": "SELECT age, hometown FROM teacher;",
        "repair_result": 1
    },
    {
        "idx": 386,
        "db_id": "course_teach",
        "question": "What is the age and hometown of every teacher?",
        "evidence": "",
        "gold": "SELECT Age ,  Hometown FROM teacher",
        "pred": "SELECT age, hometown FROM teacher",
        "pred_result": 1,
        "repair_sql": "SELECT age, hometown FROM teacher;",
        "repair_result": 1
    },
    {
        "idx": 387,
        "db_id": "course_teach",
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "evidence": "",
        "gold": "select name from teacher where hometown != \"little lever urban district\"",
        "pred": "SELECT name FROM TEACHER WHERE hometown != 'Little Lever Urban District'",
        "pred_result": 0,
        "repair_sql": "SELECT name FROM TEACHER WHERE hometown != 'Little Lever Urban District'",
        "repair_result": 0
    },
    {
        "idx": 388,
        "db_id": "course_teach",
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "evidence": "",
        "gold": "select name from teacher where hometown != \"little lever urban district\"",
        "pred": "SELECT name FROM TEACHER WHERE hometown != 'Little Lever Urban District'",
        "pred_result": 0,
        "repair_sql": "SELECT name FROM TEACHER WHERE hometown != 'Little Lever Urban District'",
        "repair_result": 0
    },
    {
        "idx": 389,
        "db_id": "course_teach",
        "question": "Show the name of teachers aged either 32 or 33?",
        "evidence": "",
        "gold": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "pred": "SELECT name FROM teacher WHERE age IN (32, 33)",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM teacher WHERE age IN (32, 33);",
        "repair_result": 1
    },
    {
        "idx": 390,
        "db_id": "course_teach",
        "question": "What are the names of the teachers who are aged either 32 or 33?",
        "evidence": "",
        "gold": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "pred": "SELECT name FROM teacher WHERE age IN (32, 33)",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM teacher WHERE age IN (32, 33);",
        "repair_result": 1
    },
    {
        "idx": 391,
        "db_id": "course_teach",
        "question": "What is the hometown of the youngest teacher?",
        "evidence": "",
        "gold": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "pred": "SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher)",
        "pred_result": 1,
        "repair_sql": "SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher)",
        "repair_result": 1
    },
    {
        "idx": 392,
        "db_id": "course_teach",
        "question": "Where is the youngest teacher from?",
        "evidence": "",
        "gold": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "pred": "SELECT hometown FROM teacher ORDER BY CAST(age AS INTEGER) ASC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT hometown FROM teacher ORDER BY CAST(age AS INTEGER) ASC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 393,
        "db_id": "course_teach",
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "evidence": "",
        "gold": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "pred": "SELECT hometown, COUNT(*) FROM TEACHER GROUP BY hometown",
        "pred_result": 1,
        "repair_sql": "SELECT hometown, COUNT(*) FROM TEACHER GROUP BY hometown;",
        "repair_result": 1
    },
    {
        "idx": 394,
        "db_id": "course_teach",
        "question": "For each hometown, how many teachers are there?",
        "evidence": "",
        "gold": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "pred": "SELECT hometown, count(*) as teacher_count FROM teacher GROUP BY hometown",
        "pred_result": 1,
        "repair_sql": "SELECT hometown, count(*) as teacher_count FROM teacher GROUP BY hometown",
        "repair_result": 1
    },
    {
        "idx": 395,
        "db_id": "course_teach",
        "question": "List the most common hometown of teachers.",
        "evidence": "",
        "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT hometown FROM TEACHER GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT hometown FROM TEACHER GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 396,
        "db_id": "course_teach",
        "question": "What is the most commmon hometowns for teachers?",
        "evidence": "",
        "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT hometown FROM TEACHER GROUP BY hometown ORDER BY count(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT hometown FROM TEACHER GROUP BY hometown ORDER BY count(*) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 397,
        "db_id": "course_teach",
        "question": "Show the hometowns shared by at least two teachers.",
        "evidence": "",
        "gold": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "pred": "SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2",
        "repair_result": 1
    },
    {
        "idx": 398,
        "db_id": "course_teach",
        "question": "What are the towns from which at least two teachers come from?",
        "evidence": "",
        "gold": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "pred": "SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2",
        "repair_result": 1
    },
    {
        "idx": 399,
        "db_id": "course_teach",
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "evidence": "",
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "pred": "SELECT T1.name, T2.course FROM TEACHER AS T1 JOIN COURSE_ARRANGE AS T3 ON T1.teacher_id = T3.teacher_id JOIN COURSE AS T2 ON T3.course_id = T2.course_id",
        "pred_result": 1,
        "repair_sql": "SELECT T1.name, T2.course FROM TEACHER AS T1 JOIN COURSE_ARRANGE AS T3 ON T1.teacher_id = T3.teacher_id JOIN COURSE AS T2 ON T3.course_id = T2.course_id;",
        "repair_result": 1
    },
    {
        "idx": 400,
        "db_id": "course_teach",
        "question": "What is the name of each teacher and what course they teach?",
        "evidence": "",
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "pred": "SELECT T1.name, T2.course FROM TEACHER AS T1 JOIN COURSE_ARRANGE AS T3 ON T1.teacher_id = T3.teacher_id JOIN COURSE AS T2 ON T3.course_id = T2.course_id",
        "pred_result": 1,
        "repair_sql": "SELECT T1.name, T2.course FROM TEACHER AS T1 JOIN COURSE_ARRANGE AS T3 ON T1.teacher_id = T3.teacher_id JOIN COURSE AS T2 ON T3.course_id = T2.course_id;",
        "repair_result": 1
    },
    {
        "idx": 401,
        "db_id": "course_teach",
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "evidence": "",
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "pred": "SELECT T.name, C.course FROM TEACHER AS T JOIN COURSE_ARRANGE AS CA ON T.teacher_id = CA.teacher_id JOIN COURSE AS C ON CA.course_id = C.course_id ORDER BY T.name ASC",
        "pred_result": 1,
        "repair_sql": "SELECT T.name, C.course FROM TEACHER AS T JOIN COURSE_ARRANGE AS CA ON T.teacher_id = CA.teacher_id JOIN COURSE AS C ON CA.course_id = C.course_id ORDER BY T.name ASC;",
        "repair_result": 1
    },
    {
        "idx": 402,
        "db_id": "course_teach",
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "evidence": "",
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "pred": "SELECT T2.name, T1.course FROM COURSE AS T1 JOIN COURSE_ARRANGE AS T3 ON T1.course_id = T3.course_id JOIN TEACHER AS T2 ON T3.teacher_id = T2.teacher_id ORDER BY T2.name ASC",
        "pred_result": 1,
        "repair_sql": "SELECT T2.name, T1.course FROM COURSE AS T1 JOIN COURSE_ARRANGE AS T3 ON T1.course_id = T3.course_id JOIN TEACHER AS T2 ON T3.teacher_id = T2.teacher_id ORDER BY T2.name ASC;",
        "repair_result": 1
    },
    {
        "idx": 403,
        "db_id": "course_teach",
        "question": "Show the name of the teacher for the math course.",
        "evidence": "",
        "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "pred": "SELECT T.name FROM TEACHER AS T JOIN COURSE_ARRANGE AS CA ON T.teacher_id = CA.teacher_id JOIN COURSE AS C ON CA.course_id = C.course_id WHERE C.course = 'Math'",
        "pred_result": 1,
        "repair_sql": "SELECT T.name FROM TEACHER AS T JOIN COURSE_ARRANGE AS CA ON T.teacher_id = CA.teacher_id JOIN COURSE AS C ON CA.course_id = C.course_id WHERE C.course = 'Math'",
        "repair_result": 1
    },
    {
        "idx": 404,
        "db_id": "course_teach",
        "question": "What are the names of the people who teach math courses?",
        "evidence": "",
        "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "pred": "SELECT T2.name FROM COURSE_ARRANGE AS T1 JOIN TEACHER AS T2 ON T1.teacher_id = T2.teacher_id JOIN COURSE AS T3 ON T1.course_id = T3.course_id WHERE T3.course = 'Math'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.name FROM COURSE_ARRANGE AS T1 JOIN TEACHER AS T2 ON T1.teacher_id = T2.teacher_id JOIN COURSE AS T3 ON T1.course_id = T3.course_id WHERE T3.course = 'Math'",
        "repair_result": 1
    },
    {
        "idx": 405,
        "db_id": "course_teach",
        "question": "Show names of teachers and the number of courses they teach.",
        "evidence": "",
        "gold": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "pred": "SELECT T.name, COUNT(CA.course_id) AS course_count FROM TEACHER AS T JOIN COURSE_ARRANGE AS CA ON T.teacher_id = CA.teacher_id GROUP BY T.teacher_id",
        "pred_result": 1,
        "repair_sql": "SELECT T.name, COUNT(CA.course_id) AS course_count FROM TEACHER AS T JOIN COURSE_ARRANGE AS CA ON T.teacher_id = CA.teacher_id GROUP BY T.teacher_id",
        "repair_result": 1
    },
    {
        "idx": 406,
        "db_id": "course_teach",
        "question": "What are the names of the teachers and how many courses do they teach?",
        "evidence": "",
        "gold": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "pred": "SELECT T1.name, COUNT(T2.course_id) AS course_count FROM TEACHER AS T1 LEFT JOIN COURSE_ARRANGE AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id",
        "pred_result": 0,
        "repair_sql": "SELECT T1.name, COUNT(T2.course_id) AS course_count FROM TEACHER AS T1 LEFT JOIN COURSE_ARRANGE AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.name",
        "repair_result": 0
    },
    {
        "idx": 407,
        "db_id": "course_teach",
        "question": "Show names of teachers that teach at least two courses.",
        "evidence": "",
        "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "pred": "SELECT name FROM TEACHER WHERE teacher_id IN (     SELECT teacher_id     FROM COURSE_ARRANGE     GROUP BY teacher_id     HAVING COUNT(course_id) >= 2 )",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM TEACHER WHERE teacher_id IN (     SELECT teacher_id     FROM COURSE_ARRANGE     GROUP BY teacher_id     HAVING COUNT(course_id) >= 2 );",
        "repair_result": 1
    },
    {
        "idx": 408,
        "db_id": "course_teach",
        "question": "What are the names of the teachers who teach at least two courses?",
        "evidence": "",
        "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "pred": "SELECT T.name FROM TEACHER AS T JOIN COURSE_ARRANGE AS CA ON T.teacher_id = CA.teacher_id GROUP BY T.name HAVING COUNT(CA.course_id) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT T.name FROM TEACHER AS T JOIN COURSE_ARRANGE AS CA ON T.teacher_id = CA.teacher_id GROUP BY T.teacher_id HAVING COUNT(CA.course_id) >= 2;",
        "repair_result": 1
    },
    {
        "idx": 409,
        "db_id": "course_teach",
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "evidence": "",
        "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "pred": "SELECT name FROM TEACHER EXCEPT SELECT T1.name FROM TEACHER AS T1 JOIN COURSE_ARRANGE AS T2 ON T1.teacher_id = T2.teacher_id",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM TEACHER EXCEPT SELECT name FROM TEACHER JOIN COURSE_ARRANGE ON TEACHER.teacher_id = COURSE_ARRANGE.teacher_id;",
        "repair_result": 1
    },
    {
        "idx": 410,
        "db_id": "course_teach",
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "evidence": "",
        "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "pred": "SELECT name FROM teacher EXCEPT SELECT T1.name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM teacher EXCEPT SELECT T1.name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id;",
        "repair_result": 1
    },
    {
        "idx": 411,
        "db_id": "museum_visit",
        "question": "How many visitors below age 30 are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM visitor WHERE age  <  30",
        "pred": "SELECT count(*) FROM VISITOR WHERE age < 30",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM VISITOR WHERE age < 30",
        "repair_result": 1
    },
    {
        "idx": 412,
        "db_id": "museum_visit",
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "evidence": "",
        "gold": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "pred": "SELECT name FROM VISITOR WHERE level_of_membership > 4 ORDER BY level_of_membership DESC",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM VISITOR WHERE level_of_membership > 4 ORDER BY level_of_membership DESC;",
        "repair_result": 1
    },
    {
        "idx": 413,
        "db_id": "museum_visit",
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "evidence": "",
        "gold": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "pred": "SELECT avg(age) FROM visitor WHERE level_of_membership <= 4",
        "pred_result": 1,
        "repair_sql": "SELECT avg(age) FROM visitor WHERE level_of_membership <= 4;",
        "repair_result": 1
    },
    {
        "idx": 414,
        "db_id": "museum_visit",
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "evidence": "",
        "gold": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "pred": "SELECT name, level_of_membership FROM VISITOR WHERE level_of_membership > 4 ORDER BY age DESC",
        "pred_result": 1,
        "repair_sql": "SELECT name, level_of_membership FROM VISITOR WHERE level_of_membership > 4 ORDER BY age DESC;",
        "repair_result": 1
    },
    {
        "idx": 415,
        "db_id": "museum_visit",
        "question": "Find the id and name of the museum that has the most staff members?",
        "evidence": "",
        "gold": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "pred": "SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 416,
        "db_id": "museum_visit",
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "evidence": "",
        "gold": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "pred": "SELECT AVG(num_of_staff) AS avg_num_of_staff FROM museum WHERE open_year < 2009",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(num_of_staff) AS avg_num_of_staff FROM museum WHERE open_year < 2009;",
        "repair_result": 1
    },
    {
        "idx": 417,
        "db_id": "museum_visit",
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "evidence": "",
        "gold": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "pred": "SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum';",
        "pred_result": 0,
        "repair_sql": "SELECT open_year,        num_of_staff FROM museum WHERE name = 'Plaza Museum';",
        "repair_result": 0
    },
    {
        "idx": 418,
        "db_id": "museum_visit",
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "evidence": "",
        "gold": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
        "pred": "SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff)                       FROM museum                       WHERE open_year > 2010);",
        "repair_result": 1
    },
    {
        "idx": 419,
        "db_id": "museum_visit",
        "question": "find the id, name and age for visitors who visited some museums more than once.",
        "evidence": "",
        "gold": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
        "pred": "SELECT id, name, age FROM VISITOR WHERE id IN (     SELECT visitor_id     FROM VISIT     GROUP BY visitor_id, museum_id     HAVING COUNT(*) > 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT id, name, age FROM VISITOR WHERE id IN (     SELECT visitor_id     FROM VISIT     GROUP BY visitor_id     HAVING COUNT(*) > 1 )",
        "repair_result": 1
    },
    {
        "idx": 420,
        "db_id": "museum_visit",
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "evidence": "",
        "gold": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "pred": "SELECT id, name, level_of_membership FROM VISITOR WHERE id = (     SELECT visitor_id     FROM VISIT     GROUP BY visitor_id     ORDER BY sum(total_spent) DESC     LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT id, name, level_of_membership FROM VISITOR WHERE id = (     SELECT visitor_id     FROM VISIT     GROUP BY visitor_id     ORDER BY sum(total_spent) DESC     LIMIT 1 );",
        "repair_result": 0
    },
    {
        "idx": 421,
        "db_id": "museum_visit",
        "question": "What are the id and name of the museum visited most times?",
        "evidence": "",
        "gold": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT M.museum_id, M.name FROM MUSEUM AS M JOIN VISIT AS V ON M.museum_id = V.museum_id GROUP BY M.museum_id ORDER BY COUNT(V.num_of_ticket) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT M.museum_id, M.name FROM MUSEUM AS M JOIN VISIT AS V ON M.museum_id = V.museum_id GROUP BY M.museum_id, M.name ORDER BY COUNT(V.museum_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 422,
        "db_id": "museum_visit",
        "question": "What is the name of the museum that had no visitor yet?",
        "evidence": "",
        "gold": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "pred": "SELECT name FROM MUSEUM WHERE museum_id NOT IN (     SELECT museum_id     FROM VISIT )",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM MUSEUM WHERE museum_id NOT IN (     SELECT museum_id     FROM VISIT )",
        "repair_result": 1
    },
    {
        "idx": 423,
        "db_id": "museum_visit",
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "evidence": "",
        "gold": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "pred": "SELECT V.name, V.age FROM VISITOR AS V JOIN VISIT AS VI ON V.id = VI.visitor_id ORDER BY VI.num_of_ticket DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT V.name, V.age FROM VISITOR AS V JOIN VISIT AS VI ON V.id = VI.visitor_id ORDER BY VI.num_of_ticket DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 424,
        "db_id": "museum_visit",
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "evidence": "",
        "gold": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "pred": "SELECT avg(num_of_ticket), max(num_of_ticket) FROM VISIT",
        "pred_result": 1,
        "repair_sql": "SELECT avg(num_of_ticket),        max(num_of_ticket) FROM VISIT;",
        "repair_result": 1
    },
    {
        "idx": 425,
        "db_id": "museum_visit",
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "evidence": "",
        "gold": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "pred": "SELECT SUM(T2.total_spent)  FROM VISITOR AS T1  JOIN VISIT AS T2 ON T1.id = T2.visitor_id  WHERE T1.level_of_membership = 1",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(T2.total_spent)  FROM VISITOR AS T1  JOIN VISIT AS T2 ON T1.id = T2.visitor_id  WHERE T1.level_of_membership = 1;",
        "repair_result": 1
    },
    {
        "idx": 426,
        "db_id": "museum_visit",
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "evidence": "",
        "gold": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
        "pred": "SELECT name FROM visitor WHERE id IN (     SELECT visitor_id     FROM visit     WHERE museum_id IN (         SELECT museum_id         FROM museum         WHERE open_year < 2009     )     INTERSECT     SELECT visitor_id     FROM visit     WHERE museum_id IN (         SELECT museum_id         FROM museum         WHERE open_year > 2011     ) )",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM visitor WHERE id IN (     SELECT visitor_id     FROM visit     WHERE museum_id IN (         SELECT museum_id         FROM museum         WHERE open_year < 2009     )     INTERSECT     SELECT visitor_id     FROM visit     WHERE museum_id IN (         SELECT museum_id         FROM museum         WHERE open_year > 2011     ) )",
        "repair_result": 1
    },
    {
        "idx": 427,
        "db_id": "museum_visit",
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "evidence": "",
        "gold": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
        "pred": "SELECT count(*) FROM VISITOR WHERE id NOT IN (   SELECT visitor_id   FROM VISIT   WHERE museum_id IN (     SELECT museum_id     FROM MUSEUM     WHERE open_year > 2010   ) )",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM VISITOR WHERE id NOT IN (   SELECT visitor_id   FROM VISIT   WHERE museum_id IN (     SELECT museum_id     FROM MUSEUM     WHERE open_year > 2010   ) );",
        "repair_result": 1
    },
    {
        "idx": 428,
        "db_id": "museum_visit",
        "question": "How many museums were opened after 2013 or before 2008?",
        "evidence": "",
        "gold": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "pred": "SELECT count(*) FROM MUSEUM WHERE open_year > 2013 OR open_year < 2008",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM MUSEUM WHERE open_year > 2013 OR open_year < 2008;",
        "repair_result": 1
    },
    {
        "idx": 429,
        "db_id": "wta_1",
        "question": "Find the total number of players.",
        "evidence": "",
        "gold": "SELECT count(*) FROM players",
        "pred": "SELECT count(*) FROM PLAYERS",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM PLAYERS;",
        "repair_result": 1
    },
    {
        "idx": 430,
        "db_id": "wta_1",
        "question": "How many players are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM players",
        "pred": "SELECT count(*) FROM players",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM players;",
        "repair_result": 1
    },
    {
        "idx": 431,
        "db_id": "wta_1",
        "question": "Find the total number of matches.",
        "evidence": "",
        "gold": "SELECT count(*) FROM matches",
        "pred": "SELECT count(*) FROM MATCHES",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM MATCHES;",
        "repair_result": 1
    },
    {
        "idx": 432,
        "db_id": "wta_1",
        "question": "Count the number of matches.",
        "evidence": "",
        "gold": "SELECT count(*) FROM matches",
        "pred": "SELECT count(*) FROM matches",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM matches;",
        "repair_result": 1
    },
    {
        "idx": 433,
        "db_id": "wta_1",
        "question": "List the first name and birth date of all players from the country with code USA.",
        "evidence": "",
        "gold": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "pred": "SELECT first_name, birth_date FROM PLAYERS WHERE country_code = 'USA';",
        "pred_result": 1,
        "repair_sql": "SELECT first_name,        birth_date FROM PLAYERS WHERE country_code = 'USA';",
        "repair_result": 1
    },
    {
        "idx": 434,
        "db_id": "wta_1",
        "question": "What are the first names and birth dates of players from the USA?",
        "evidence": "",
        "gold": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "pred": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA';",
        "pred_result": 1,
        "repair_sql": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA';",
        "repair_result": 1
    },
    {
        "idx": 435,
        "db_id": "wta_1",
        "question": "Find the average age of losers and winners of all matches.",
        "evidence": "",
        "gold": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "pred": "SELECT avg(loser_age) AS avg_loser_age, avg(winner_age) AS avg_winner_age FROM matches",
        "pred_result": 1,
        "repair_sql": "SELECT avg(loser_age) AS avg_loser_age, avg(winner_age) AS avg_winner_age FROM matches;",
        "repair_result": 1
    },
    {
        "idx": 436,
        "db_id": "wta_1",
        "question": "What are the average ages of losers and winners across matches?",
        "evidence": "",
        "gold": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "pred": "SELECT avg(loser_age) AS avg_loser_age, avg(winner_age) AS avg_winner_age FROM matches",
        "pred_result": 1,
        "repair_sql": "SELECT avg(loser_age) AS avg_loser_age, avg(winner_age) AS avg_winner_age FROM matches;",
        "repair_result": 1
    },
    {
        "idx": 437,
        "db_id": "wta_1",
        "question": "Find the average rank of winners in all matches.",
        "evidence": "",
        "gold": "SELECT avg(winner_rank) FROM matches",
        "pred": "SELECT avg(winner_rank) FROM MATCHES",
        "pred_result": 1,
        "repair_sql": "SELECT avg(winner_rank) FROM MATCHES;",
        "repair_result": 1
    },
    {
        "idx": 438,
        "db_id": "wta_1",
        "question": "What is the average rank for winners in all matches?",
        "evidence": "",
        "gold": "SELECT avg(winner_rank) FROM matches",
        "pred": "SELECT avg(winner_rank) as average_winner_rank FROM MATCHES",
        "pred_result": 1,
        "repair_sql": "SELECT avg(winner_rank) as average_winner_rank FROM MATCHES;",
        "repair_result": 1
    },
    {
        "idx": 439,
        "db_id": "wta_1",
        "question": "Find the highest rank of losers in all matches.",
        "evidence": "",
        "gold": "SELECT min(loser_rank) FROM matches",
        "pred": "SELECT MAX(loser_rank) AS highest_loser_rank FROM matches",
        "pred_result": 0,
        "repair_sql": "SELECT loser_rank AS highest_loser_rank  FROM matches  ORDER BY loser_rank DESC  LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 440,
        "db_id": "wta_1",
        "question": "What is the best rank of losers across all matches?",
        "evidence": "",
        "gold": "SELECT min(loser_rank) FROM matches",
        "pred": "SELECT MIN(loser_rank) AS best_rank_of_losers FROM matches",
        "pred_result": 1,
        "repair_sql": "SELECT loser_rank AS best_rank_of_losers  FROM matches  ORDER BY loser_rank ASC  LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 441,
        "db_id": "wta_1",
        "question": "find the number of distinct country codes of all players.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT country_code) FROM players",
        "pred": "SELECT count(DISTINCT country_code) FROM PLAYERS",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT country_code) FROM PLAYERS;",
        "repair_result": 1
    },
    {
        "idx": 442,
        "db_id": "wta_1",
        "question": "How many distinct countries do players come from?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT country_code) FROM players",
        "pred": "SELECT count(DISTINCT country_code) FROM PLAYERS",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT country_code) FROM PLAYERS;",
        "repair_result": 1
    },
    {
        "idx": 443,
        "db_id": "wta_1",
        "question": "Find the number of distinct name of losers.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT loser_name) FROM matches",
        "pred": "SELECT count(DISTINCT loser_name) FROM matches",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT loser_name) FROM matches;",
        "repair_result": 1
    },
    {
        "idx": 444,
        "db_id": "wta_1",
        "question": "How many different loser names are there?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT loser_name) FROM matches",
        "pred": "SELECT count(DISTINCT loser_name) FROM matches",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT loser_name) FROM matches;",
        "repair_result": 1
    },
    {
        "idx": 445,
        "db_id": "wta_1",
        "question": "Find the name of tourney that has more than 10 matches.",
        "evidence": "",
        "gold": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "pred": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
        "pred_result": 1,
        "repair_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
        "repair_result": 1
    },
    {
        "idx": 446,
        "db_id": "wta_1",
        "question": "What are the names of tournaments that have more than 10 matches?",
        "evidence": "",
        "gold": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "pred": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
        "pred_result": 1,
        "repair_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
        "repair_result": 1
    },
    {
        "idx": 447,
        "db_id": "wta_1",
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "evidence": "",
        "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "pred": "SELECT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT winner_name FROM matches WHERE year = 2016",
        "pred_result": 1,
        "repair_sql": "SELECT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT winner_name FROM matches WHERE year = 2016;",
        "repair_result": 1
    },
    {
        "idx": 448,
        "db_id": "wta_1",
        "question": "What are the names of players who won in both 2013 and 2016?",
        "evidence": "",
        "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "pred": "SELECT winner_name FROM MATCHES WHERE year = 2013 INTERSECT SELECT winner_name FROM MATCHES WHERE year = 2016",
        "pred_result": 1,
        "repair_sql": "SELECT winner_name FROM MATCHES WHERE year = 2013 INTERSECT SELECT winner_name FROM MATCHES WHERE year = 2016;",
        "repair_result": 1
    },
    {
        "idx": 449,
        "db_id": "wta_1",
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "evidence": "",
        "gold": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "pred": "SELECT COUNT(*) FROM MATCHES WHERE year IN (2013, 2016)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM MATCHES WHERE year IN (2013, 2016);",
        "repair_result": 1
    },
    {
        "idx": 450,
        "db_id": "wta_1",
        "question": "How many matches were played in 2013 or 2016?",
        "evidence": "",
        "gold": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "pred": "SELECT COUNT(*) FROM MATCHES WHERE year IN (2013, 2016)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM MATCHES WHERE year IN (2013, 2016)",
        "repair_result": 1
    },
    {
        "idx": 451,
        "db_id": "wta_1",
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "evidence": "",
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "pred": "SELECT country_code, first_name FROM PLAYERS WHERE player_id IN (     SELECT winner_id     FROM MATCHES     WHERE tourney_name = 'WTA Championships'     INTERSECT     SELECT winner_id     FROM MATCHES     WHERE tourney_name = 'Australian Open' )",
        "pred_result": 1,
        "repair_sql": "SELECT country_code, first_name FROM PLAYERS WHERE player_id IN (     SELECT winner_id     FROM MATCHES     WHERE tourney_name = 'WTA Championships'     INTERSECT     SELECT winner_id     FROM MATCHES     WHERE tourney_name = 'Australian Open' )",
        "repair_result": 1
    },
    {
        "idx": 452,
        "db_id": "wta_1",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "evidence": "",
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "pred": "SELECT first_name, country_code FROM PLAYERS WHERE player_id IN (     SELECT winner_id     FROM MATCHES     WHERE tourney_name = 'WTA Championships'     INTERSECT     SELECT winner_id     FROM MATCHES     WHERE tourney_name = 'Australian Open' )",
        "pred_result": 0,
        "repair_sql": "SELECT first_name, country_code FROM PLAYERS WHERE player_id IN (     SELECT winner_id     FROM MATCHES     WHERE tourney_name = 'WTA Championships'     INTERSECT     SELECT winner_id     FROM MATCHES     WHERE tourney_name = 'Australian Open' )",
        "repair_result": 0
    },
    {
        "idx": 453,
        "db_id": "wta_1",
        "question": "Find the first name and country code of the oldest player.",
        "evidence": "",
        "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "pred": "SELECT first_name, country_code FROM PLAYERS ORDER BY birth_date ASC LIMIT 1;",
        "pred_result": 1,
        "repair_sql": "SELECT first_name, country_code FROM PLAYERS ORDER BY birth_date ASC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 454,
        "db_id": "wta_1",
        "question": "What is the first name and country code of the oldest player?",
        "evidence": "",
        "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "pred": "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;",
        "pred_result": 1,
        "repair_sql": "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 455,
        "db_id": "wta_1",
        "question": "List the first and last name of all players in the order of birth date.",
        "evidence": "",
        "gold": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "pred": "SELECT first_name, last_name FROM PLAYERS ORDER BY birth_date",
        "pred_result": "Could not decode to UTF-8 column 'last_name' with text 'Treyes Albarrac\ufffd\ufffdN'",
        "repair_sql": "SELECT first_name,        last_name FROM PLAYERS ORDER BY birth_date;",
        "repair_result": "Could not decode to UTF-8 column 'last_name' with text 'Treyes Albarrac\ufffd\ufffdN'"
    },
    {
        "idx": 456,
        "db_id": "wta_1",
        "question": "What are the full names of all players, sorted by birth date?",
        "evidence": "",
        "gold": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "pred": "SELECT first_name || ' ' || last_name AS full_name FROM PLAYERS ORDER BY birth_date ASC",
        "pred_result": "Could not decode to UTF-8 column 'full_name' with text 'Joselyn Margarita Treyes Albarrac\ufffd\ufffdN'",
        "repair_sql": "SELECT first_name || ' ' || last_name AS full_name FROM PLAYERS ORDER BY birth_date ASC;",
        "repair_result": "Could not decode to UTF-8 column 'full_name' with text 'Joselyn Margarita Treyes Albarrac\ufffd\ufffdN'"
    },
    {
        "idx": 457,
        "db_id": "wta_1",
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "evidence": "",
        "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "pred": "SELECT first_name, last_name FROM PLAYERS WHERE hand = 'L' ORDER BY birth_date",
        "pred_result": 1,
        "repair_sql": "SELECT first_name,        last_name FROM PLAYERS WHERE hand = 'L' ORDER BY birth_date;",
        "repair_result": 1
    },
    {
        "idx": 458,
        "db_id": "wta_1",
        "question": "What are the full names of all left handed players, in order of birth date?",
        "evidence": "",
        "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "pred": "SELECT first_name || ' ' || last_name AS full_name FROM PLAYERS WHERE hand = 'L' ORDER BY birth_date ASC",
        "pred_result": 0,
        "repair_sql": "SELECT first_name || ' ' || last_name AS full_name FROM PLAYERS WHERE hand = 'R' ORDER BY birth_date ASC;",
        "repair_result": 0
    },
    {
        "idx": 459,
        "db_id": "wta_1",
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "evidence": "",
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "pred": "SELECT P.first_name, P.country_code FROM PLAYERS AS P JOIN RANKINGS AS R ON P.player_id = R.player_id GROUP BY P.player_id ORDER BY SUM(R.tours) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT P.first_name, P.country_code FROM PLAYERS AS P JOIN RANKINGS AS R ON P.player_id = R.player_id GROUP BY P.first_name, P.country_code ORDER BY SUM(R.tours) DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 460,
        "db_id": "wta_1",
        "question": "What is the first name and country code of the player with the most tours?",
        "evidence": "",
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "pred": "SELECT P.first_name, P.country_code FROM PLAYERS AS P JOIN RANKINGS AS R ON P.player_id = R.player_id GROUP BY P.player_id ORDER BY R.tours DESC LIMIT 1;",
        "pred_result": 0,
        "repair_sql": "SELECT P.first_name, P.country_code FROM PLAYERS AS P JOIN RANKINGS AS R ON P.player_id = R.player_id ORDER BY R.tours DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 461,
        "db_id": "wta_1",
        "question": "Find the year that has the most number of matches.",
        "evidence": "",
        "gold": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 462,
        "db_id": "wta_1",
        "question": "Which year had the most matches?",
        "evidence": "",
        "gold": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 463,
        "db_id": "wta_1",
        "question": "Find the name and rank points of the winner who won the most times.",
        "evidence": "",
        "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_id ORDER BY COUNT(winner_id) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_id, winner_name, winner_rank_points ORDER BY COUNT(winner_id) DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 464,
        "db_id": "wta_1",
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "evidence": "",
        "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT p.winner_name, r.ranking_points FROM (     SELECT winner_id, winner_name, COUNT(*) AS win_count     FROM matches     GROUP BY winner_id, winner_name     ORDER BY win_count DESC     LIMIT 1 ) AS p JOIN rankings AS r ON p.winner_id = r.player_id",
        "pred_result": 0,
        "repair_sql": "SELECT p.winner_name, r.ranking_points FROM (     SELECT winner_id, winner_name, COUNT(*) AS win_count     FROM matches     GROUP BY winner_id, winner_name     ORDER BY win_count DESC     LIMIT 1 ) AS p JOIN rankings AS r ON p.winner_id = r.player_id;",
        "repair_result": 0
    },
    {
        "idx": 465,
        "db_id": "wta_1",
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "evidence": "",
        "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "pred": "SELECT winner_name FROM matches WHERE winner_rank_points = (   SELECT MAX(winner_rank_points)   FROM matches   WHERE tourney_name = 'Australian Open' ) AND tourney_name = 'Australian Open'",
        "pred_result": 1,
        "repair_sql": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 466,
        "db_id": "wta_1",
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "evidence": "",
        "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "pred": "SELECT winner_name FROM matches WHERE winner_rank_points = (     SELECT max(winner_rank_points)     FROM matches     WHERE tourney_name = 'Australian Open' ) AND tourney_name = 'Australian Open'",
        "pred_result": 1,
        "repair_sql": "SELECT p.first_name || ' ' || p.last_name AS winner_name FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_name = 'Australian Open' ORDER BY m.winner_rank_points DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 467,
        "db_id": "wta_1",
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "evidence": "",
        "gold": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "pred": "SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
        "pred_result": 0,
        "repair_sql": "SELECT loser_name, winner_name FROM matches ORDER BY minutes DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 468,
        "db_id": "wta_1",
        "question": "What are the names of the winner and loser who played in the longest match?",
        "evidence": "",
        "gold": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "pred": "SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 469,
        "db_id": "wta_1",
        "question": "Find the average ranking for each player and their first name.",
        "evidence": "",
        "gold": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "pred": "SELECT P.first_name, AVG(R.ranking) AS average_ranking FROM PLAYERS AS P JOIN RANKINGS AS R ON P.player_id = R.player_id GROUP BY P.player_id",
        "pred_result": 0,
        "repair_sql": "SELECT P.first_name, AVG(R.ranking) AS average_ranking FROM PLAYERS AS P JOIN RANKINGS AS R ON P.player_id = R.player_id GROUP BY P.player_id;",
        "repair_result": 0
    },
    {
        "idx": 470,
        "db_id": "wta_1",
        "question": "What are the first names of all players, and their average rankings?",
        "evidence": "",
        "gold": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "pred": "SELECT P.first_name, AVG(R.ranking) AS average_ranking FROM PLAYERS AS P JOIN RANKINGS AS R ON P.player_id = R.player_id GROUP BY P.first_name",
        "pred_result": 0,
        "repair_sql": "SELECT P.first_name, AVG(R.ranking) AS average_ranking FROM PLAYERS AS P JOIN RANKINGS AS R ON P.player_id = R.player_id GROUP BY P.first_name;",
        "repair_result": 0
    },
    {
        "idx": 471,
        "db_id": "wta_1",
        "question": "Find the total ranking points for each player and their first name.",
        "evidence": "",
        "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "pred": "SELECT P.first_name, SUM(R.ranking_points) AS total_ranking_points FROM PLAYERS AS P JOIN RANKINGS AS R ON P.player_id = R.player_id GROUP BY P.player_id",
        "pred_result": 0,
        "repair_sql": "SELECT P.first_name, SUM(R.ranking_points) AS total_ranking_points FROM PLAYERS AS P JOIN RANKINGS AS R ON P.player_id = R.player_id GROUP BY P.player_id, P.first_name",
        "repair_result": 0
    },
    {
        "idx": 472,
        "db_id": "wta_1",
        "question": "What are the first names of all players, and their total ranking points?",
        "evidence": "",
        "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "pred": "SELECT P.first_name, SUM(R.ranking_points) AS total_ranking_points FROM PLAYERS AS P JOIN RANKINGS AS R ON P.player_id = R.player_id GROUP BY P.player_id",
        "pred_result": 0,
        "repair_sql": "SELECT P.first_name, SUM(R.ranking_points) AS total_ranking_points FROM PLAYERS AS P JOIN RANKINGS AS R ON P.player_id = R.player_id GROUP BY P.first_name",
        "repair_result": 0
    },
    {
        "idx": 473,
        "db_id": "wta_1",
        "question": "find the number of players for each country.",
        "evidence": "",
        "gold": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "pred": "SELECT country_code, count(player_id) as player_count FROM PLAYERS GROUP BY country_code",
        "pred_result": 0,
        "repair_sql": "SELECT country_code, count(player_id) as player_count FROM PLAYERS GROUP BY country_code;",
        "repair_result": 0
    },
    {
        "idx": 474,
        "db_id": "wta_1",
        "question": "How many players are from each country?",
        "evidence": "",
        "gold": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "pred": "SELECT country_code, count(*) FROM PLAYERS GROUP BY country_code",
        "pred_result": 0,
        "repair_sql": "SELECT country_code, count(*) FROM PLAYERS GROUP BY country_code;",
        "repair_result": 0
    },
    {
        "idx": 475,
        "db_id": "wta_1",
        "question": "find the code of the country where has the greatest number of players.",
        "evidence": "",
        "gold": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT country_code FROM PLAYERS GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT country_code FROM PLAYERS GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 476,
        "db_id": "wta_1",
        "question": "What is the code of the country with the most players?",
        "evidence": "",
        "gold": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT country_code FROM PLAYERS GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT country_code FROM PLAYERS GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 477,
        "db_id": "wta_1",
        "question": "Find the codes of countries that have more than 50 players.",
        "evidence": "",
        "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "pred": "SELECT country_code FROM players GROUP BY country_code HAVING count(player_id) > 50",
        "pred_result": 1,
        "repair_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(player_id) > 50",
        "repair_result": 1
    },
    {
        "idx": 478,
        "db_id": "wta_1",
        "question": "What are the codes of countries with more than 50 players?",
        "evidence": "",
        "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "pred": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50",
        "pred_result": 1,
        "repair_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50;",
        "repair_result": 1
    },
    {
        "idx": 479,
        "db_id": "wta_1",
        "question": "Find the total number of tours for each ranking date.",
        "evidence": "",
        "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "pred": "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
        "pred_result": 0,
        "repair_sql": "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;",
        "repair_result": 0
    },
    {
        "idx": 480,
        "db_id": "wta_1",
        "question": "How many total tours were there for each ranking date?",
        "evidence": "",
        "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "pred": "SELECT ranking_date, SUM(tours) as total_tours FROM rankings GROUP BY ranking_date",
        "pred_result": 0,
        "repair_sql": "SELECT ranking_date, SUM(tours) as total_tours FROM rankings GROUP BY ranking_date;",
        "repair_result": 0
    },
    {
        "idx": 481,
        "db_id": "wta_1",
        "question": "Find the number of matches happened in each year.",
        "evidence": "",
        "gold": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "pred": "SELECT year, count(*) as match_count FROM matches GROUP BY year",
        "pred_result": 0,
        "repair_sql": "SELECT year, count(*) as match_count FROM matches GROUP BY year",
        "repair_result": 0
    },
    {
        "idx": 482,
        "db_id": "wta_1",
        "question": "How many matches were played in each year?",
        "evidence": "",
        "gold": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "pred": "SELECT year, COUNT(*) as match_count FROM MATCHES GROUP BY year",
        "pred_result": 0,
        "repair_sql": "SELECT year, COUNT(*) as match_count FROM MATCHES GROUP BY year",
        "repair_result": 0
    },
    {
        "idx": 483,
        "db_id": "wta_1",
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "evidence": "",
        "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "pred": "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3",
        "pred_result": 1,
        "repair_sql": "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;",
        "repair_result": 1
    },
    {
        "idx": 484,
        "db_id": "wta_1",
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "evidence": "",
        "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "pred": "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3",
        "pred_result": 1,
        "repair_sql": "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;",
        "repair_result": 1
    },
    {
        "idx": 485,
        "db_id": "wta_1",
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "pred": "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
        "repair_result": 1
    },
    {
        "idx": 486,
        "db_id": "wta_1",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "pred": "SELECT count(DISTINCT winner_id) FROM MATCHES WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships'",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT winner_id) FROM MATCHES WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships'",
        "repair_result": 1
    },
    {
        "idx": 487,
        "db_id": "wta_1",
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "pred": "SELECT P.first_name, P.country_code, P.birth_date FROM PLAYERS AS P JOIN MATCHES AS M ON P.player_id = M.winner_id ORDER BY M.winner_rank_points DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT P.first_name, P.country_code, P.birth_date FROM PLAYERS AS P JOIN MATCHES AS M ON P.player_id = M.winner_id ORDER BY M.winner_rank_points DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 488,
        "db_id": "wta_1",
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "pred": "SELECT first_name, country_code, birth_date FROM PLAYERS WHERE player_id = (   SELECT winner_id   FROM MATCHES   GROUP BY winner_id   ORDER BY SUM(winner_rank_points) DESC   LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT first_name, country_code, birth_date FROM PLAYERS WHERE player_id = (   SELECT winner_id   FROM MATCHES   GROUP BY winner_id   ORDER BY SUM(winner_rank_points) DESC   LIMIT 1 );",
        "repair_result": 1
    },
    {
        "idx": 489,
        "db_id": "wta_1",
        "question": "Find the number of players for each hand type.",
        "evidence": "",
        "gold": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "pred": "SELECT hand, count(player_id) as player_count FROM players GROUP BY hand",
        "pred_result": 0,
        "repair_sql": "SELECT hand, count(player_id) as player_count FROM players GROUP BY hand",
        "repair_result": 0
    },
    {
        "idx": 490,
        "db_id": "wta_1",
        "question": "How many players are there for each hand type?",
        "evidence": "",
        "gold": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "pred": "SELECT hand, count(*) FROM PLAYERS GROUP BY hand",
        "pred_result": 0,
        "repair_sql": "SELECT hand, count(*) FROM PLAYERS GROUP BY hand",
        "repair_result": 0
    },
    {
        "idx": 491,
        "db_id": "battle_death",
        "question": "How many ships ended up being 'Captured'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "pred": "SELECT count(*) FROM SHIP WHERE disposition_of_ship = 'Captured'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM SHIP WHERE disposition_of_ship = 'Captured'",
        "repair_result": 1
    },
    {
        "idx": 492,
        "db_id": "battle_death",
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "evidence": "",
        "gold": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
        "pred": "SELECT name, tonnage FROM SHIP ORDER BY name DESC",
        "pred_result": 1,
        "repair_sql": "SELECT name, tonnage FROM SHIP ORDER BY name DESC;",
        "repair_result": 1
    },
    {
        "idx": 493,
        "db_id": "battle_death",
        "question": "List the name, date and result of each battle.",
        "evidence": "",
        "gold": "SELECT name ,  date FROM battle",
        "pred": "SELECT name, date, result FROM battle;",
        "pred_result": 0,
        "repair_sql": "SELECT name,        date,        result FROM battle;",
        "repair_result": 0
    },
    {
        "idx": 494,
        "db_id": "battle_death",
        "question": "What is maximum and minimum death toll caused each time?",
        "evidence": "",
        "gold": "SELECT max(killed) ,  min(killed) FROM death",
        "pred": "SELECT max(killed), min(killed) FROM DEATH",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(killed) AS max_killed, MIN(killed) AS min_killed FROM DEATH;",
        "repair_result": 1
    },
    {
        "idx": 495,
        "db_id": "battle_death",
        "question": "What is the average number of injuries caused each time?",
        "evidence": "",
        "gold": "SELECT avg(injured) FROM death",
        "pred": "SELECT avg(injured) FROM DEATH",
        "pred_result": 1,
        "repair_sql": "SELECT avg(injured) FROM DEATH;",
        "repair_result": 1
    },
    {
        "idx": 496,
        "db_id": "battle_death",
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "evidence": "",
        "gold": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "pred": "SELECT D.killed, D.injured FROM DEATH AS D JOIN SHIP AS S ON D.caused_by_ship_id = S.id WHERE S.tonnage = 't'",
        "pred_result": 1,
        "repair_sql": "SELECT D.killed, D.injured FROM DEATH AS D JOIN SHIP AS S ON D.caused_by_ship_id = S.id WHERE S.tonnage = 't'",
        "repair_result": 1
    },
    {
        "idx": 497,
        "db_id": "battle_death",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "evidence": "",
        "gold": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "pred": "SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'",
        "pred_result": 1,
        "repair_sql": "SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'",
        "repair_result": 1
    },
    {
        "idx": 498,
        "db_id": "battle_death",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "pred": "SELECT DISTINCT B.id, B.name FROM BATTLE AS B JOIN SHIP AS S ON B.id = S.lost_in_battle WHERE S.ship_type = 'Brig'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT B.id, B.name FROM BATTLE AS B JOIN SHIP AS S ON B.id = S.lost_in_battle WHERE S.ship_type = 'Brig'",
        "repair_result": 1
    },
    {
        "idx": 499,
        "db_id": "battle_death",
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "evidence": "",
        "gold": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "pred": "SELECT B.id, B.name FROM BATTLE AS B JOIN SHIP AS S ON B.id = S.lost_in_battle JOIN DEATH AS D ON S.id = D.caused_by_ship_id GROUP BY B.id HAVING SUM(D.killed) > 10",
        "pred_result": 1,
        "repair_sql": "SELECT B.id, B.name FROM BATTLE AS B JOIN SHIP AS S ON B.id = S.lost_in_battle JOIN DEATH AS D ON S.id = D.caused_by_ship_id GROUP BY B.id, B.name HAVING SUM(D.killed) > 10",
        "repair_result": 1
    },
    {
        "idx": 500,
        "db_id": "battle_death",
        "question": "What is the ship id and name that caused most total injuries?",
        "evidence": "",
        "gold": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.id, T1.name FROM SHIP AS T1 JOIN DEATH AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id, T1.name ORDER BY SUM(T2.injured) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.id, T1.name FROM SHIP AS T1 JOIN DEATH AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id, T1.name ORDER BY SUM(T2.injured) DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 501,
        "db_id": "battle_death",
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "evidence": "",
        "gold": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "pred": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';",
        "repair_result": 1
    },
    {
        "idx": 502,
        "db_id": "battle_death",
        "question": "How many different results are there for the battles?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT RESULT) FROM battle",
        "pred": "SELECT count(DISTINCT result) FROM battle",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT result) FROM battle;",
        "repair_result": 1
    },
    {
        "idx": 503,
        "db_id": "battle_death",
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "pred": "SELECT COUNT(*) FROM BATTLE WHERE id NOT IN (     SELECT lost_in_battle     FROM SHIP     WHERE tonnage = '225' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM BATTLE WHERE id NOT IN (     SELECT lost_in_battle     FROM SHIP     WHERE tonnage = '225' )",
        "repair_result": 1
    },
    {
        "idx": 504,
        "db_id": "battle_death",
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "evidence": "",
        "gold": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
        "pred": "SELECT B.name, B.date FROM BATTLE B JOIN SHIP S ON B.id = S.lost_in_battle WHERE S.name = 'Lettice' INTERSECT SELECT B.name, B.date FROM BATTLE B JOIN SHIP S ON B.id = S.lost_in_battle WHERE S.name = 'HMS Atalanta'",
        "pred_result": 1,
        "repair_sql": "SELECT B.name, B.date FROM BATTLE B JOIN SHIP S ON B.id = S.lost_in_battle WHERE S.name = 'Lettice' INTERSECT SELECT B.name, B.date FROM BATTLE B JOIN SHIP S ON B.id = S.lost_in_battle WHERE S.name = 'HMS Atalanta';",
        "repair_result": 1
    },
    {
        "idx": 505,
        "db_id": "battle_death",
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "evidence": "",
        "gold": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "pred": "SELECT name, result, bulgarian_commander FROM BATTLE EXCEPT SELECT B.name, B.result, B.bulgarian_commander FROM BATTLE AS B JOIN SHIP AS S ON B.id = S.lost_in_battle WHERE S.location = 'English Channel'",
        "pred_result": 1,
        "repair_sql": "SELECT name, result, bulgarian_commander FROM BATTLE EXCEPT SELECT B.name, B.result, B.bulgarian_commander FROM BATTLE AS B JOIN SHIP AS S ON B.id = S.lost_in_battle WHERE S.location = 'English Channel'",
        "repair_result": 1
    },
    {
        "idx": 506,
        "db_id": "battle_death",
        "question": "What are the notes of the death events which has substring 'East'?",
        "evidence": "",
        "gold": "SELECT note FROM death WHERE note LIKE '%East%'",
        "pred": "SELECT note FROM DEATH WHERE note LIKE \"%East%\"",
        "pred_result": 1,
        "repair_sql": "SELECT note FROM DEATH WHERE note LIKE \"%East%\"",
        "repair_result": 1
    },
    {
        "idx": 507,
        "db_id": "student_transcripts_tracking",
        "question": "what are all the addresses including line 1 and line 2?",
        "evidence": "",
        "gold": "SELECT line_1 ,  line_2 FROM addresses",
        "pred": "SELECT line_1, line_2 FROM ADDRESSES;",
        "pred_result": 1,
        "repair_sql": "SELECT line_1, line_2 FROM ADDRESSES;",
        "repair_result": 1
    },
    {
        "idx": 508,
        "db_id": "student_transcripts_tracking",
        "question": "What is the first and second line for all addresses?",
        "evidence": "",
        "gold": "SELECT line_1 ,  line_2 FROM addresses",
        "pred": "SELECT line_1, line_2 FROM addresses;",
        "pred_result": 1,
        "repair_sql": "SELECT line_1,        line_2 FROM addresses;",
        "repair_result": 1
    },
    {
        "idx": 509,
        "db_id": "student_transcripts_tracking",
        "question": "How many courses in total are listed?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Courses",
        "pred": "SELECT count(*) FROM COURSES",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM COURSES",
        "repair_result": 1
    },
    {
        "idx": 510,
        "db_id": "student_transcripts_tracking",
        "question": "How many courses are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Courses",
        "pred": "SELECT count(*) FROM courses",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM courses",
        "repair_result": 1
    },
    {
        "idx": 511,
        "db_id": "student_transcripts_tracking",
        "question": "How is the math course described?",
        "evidence": "",
        "gold": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "pred": "SELECT course_description FROM COURSES WHERE course_name = 'math'",
        "pred_result": 1,
        "repair_sql": "SELECT course_description FROM COURSES WHERE course_name = 'math'",
        "repair_result": 1
    },
    {
        "idx": 512,
        "db_id": "student_transcripts_tracking",
        "question": "What are the descriptions for all the math courses?",
        "evidence": "",
        "gold": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "pred": "SELECT course_description FROM COURSES WHERE course_name = 'math'",
        "pred_result": 1,
        "repair_sql": "SELECT course_description FROM COURSES WHERE course_name = 'math';",
        "repair_result": 1
    },
    {
        "idx": 513,
        "db_id": "student_transcripts_tracking",
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "evidence": "",
        "gold": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "pred": "SELECT zip_postcode FROM addresses WHERE city = \"Port Chelsea\";",
        "pred_result": 1,
        "repair_sql": "SELECT zip_postcode FROM addresses WHERE city = \"Port Chelsea\";",
        "repair_result": 1
    },
    {
        "idx": 514,
        "db_id": "student_transcripts_tracking",
        "question": "What is the zip code for Port Chelsea?",
        "evidence": "",
        "gold": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "pred": "SELECT zip_postcode FROM ADDRESSES WHERE city = \"Port Chelsea\";",
        "pred_result": 1,
        "repair_sql": "SELECT zip_postcode FROM ADDRESSES WHERE city = \"Port Chelsea\";",
        "repair_result": 1
    },
    {
        "idx": 515,
        "db_id": "student_transcripts_tracking",
        "question": "Which department offers the most number of degrees? List department name and id.",
        "evidence": "",
        "gold": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT D.department_name, D.department_id FROM DEPARTMENTS AS D JOIN DEGREE_PROGRAMS AS DP ON D.department_id = DP.department_id GROUP BY D.department_id ORDER BY COUNT(DP.degree_program_id) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT D.department_name, D.department_id FROM DEPARTMENTS AS D JOIN DEGREE_PROGRAMS AS DP ON D.department_id = DP.department_id GROUP BY D.department_id, D.department_name ORDER BY COUNT(DP.degree_program_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 516,
        "db_id": "student_transcripts_tracking",
        "question": "What is the name and id of the department with the most number of degrees ?",
        "evidence": "",
        "gold": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "pred": "SELECT department_id, department_name FROM DEPARTMENTS WHERE department_id = (     SELECT department_id     FROM DEGREE_PROGRAMS     GROUP BY department_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT department_id, department_name FROM DEPARTMENTS WHERE department_id = (     SELECT department_id     FROM DEGREE_PROGRAMS     GROUP BY department_id     ORDER BY COUNT(degree_program_id) DESC     LIMIT 1 );",
        "repair_result": 0
    },
    {
        "idx": 517,
        "db_id": "student_transcripts_tracking",
        "question": "How many departments offer any degree?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "pred": "SELECT count(DISTINCT d.department_id) FROM DEPARTMENTS AS d JOIN DEGREE_PROGRAMS AS dp ON d.department_id = dp.department_id",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT d.department_id) FROM DEPARTMENTS AS d JOIN DEGREE_PROGRAMS AS dp ON d.department_id = dp.department_id",
        "repair_result": 1
    },
    {
        "idx": 518,
        "db_id": "student_transcripts_tracking",
        "question": "How many different departments offer degrees?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "pred": "SELECT count(DISTINCT department_id) FROM degree_programs",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT department_id) FROM degree_programs;",
        "repair_result": 1
    },
    {
        "idx": 519,
        "db_id": "student_transcripts_tracking",
        "question": "How many different degree names are offered?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "pred": "SELECT COUNT(DISTINCT degree_summary_name) FROM DEGREE_PROGRAMS",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT degree_summary_name) FROM DEGREE_PROGRAMS;",
        "repair_result": 1
    },
    {
        "idx": 520,
        "db_id": "student_transcripts_tracking",
        "question": "How many different degrees are offered?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "pred": "SELECT COUNT(DISTINCT degree_summary_name) AS different_degrees FROM DEGREE_PROGRAMS",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT degree_summary_name) AS different_degrees FROM DEGREE_PROGRAMS;",
        "repair_result": 1
    },
    {
        "idx": 521,
        "db_id": "student_transcripts_tracking",
        "question": "How many degrees does the engineering department offer?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "pred": "SELECT COUNT(*) FROM DEGREE_PROGRAMS AS dp JOIN DEPARTMENTS AS d ON dp.department_id = d.department_id WHERE d.department_name = 'engineering'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM DEGREE_PROGRAMS AS dp JOIN DEPARTMENTS AS d ON dp.department_id = d.department_id WHERE d.department_name = 'engineering'",
        "repair_result": 1
    },
    {
        "idx": 522,
        "db_id": "student_transcripts_tracking",
        "question": "How many degrees does the engineering department have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "pred": "SELECT COUNT(*) FROM DEGREE_PROGRAMS AS dp JOIN DEPARTMENTS AS d ON dp.department_id = d.department_id WHERE d.department_name = 'engineering'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM DEGREE_PROGRAMS AS dp JOIN DEPARTMENTS AS d ON dp.department_id = d.department_id WHERE d.department_name = 'engineering'",
        "repair_result": 1
    },
    {
        "idx": 523,
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and descriptions of all the sections?",
        "evidence": "",
        "gold": "SELECT section_name ,  section_description FROM Sections",
        "pred": "SELECT section_name, section_description FROM sections",
        "pred_result": 1,
        "repair_sql": "SELECT section_name,        section_description FROM sections;",
        "repair_result": 1
    },
    {
        "idx": 524,
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and descriptions for all the sections?",
        "evidence": "",
        "gold": "SELECT section_name ,  section_description FROM Sections",
        "pred": "SELECT section_name, section_description FROM sections",
        "pred_result": 1,
        "repair_sql": "SELECT section_name,        section_description FROM sections;",
        "repair_result": 1
    },
    {
        "idx": 525,
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and id of courses having at most 2 sections?",
        "evidence": "",
        "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "pred": "SELECT course_id, course_name FROM COURSES WHERE course_id IN (     SELECT course_id     FROM SECTIONS     GROUP BY course_id     HAVING COUNT(section_id) <= 2 )",
        "pred_result": 0,
        "repair_sql": "SELECT course_id, course_name FROM COURSES WHERE course_id IN (     SELECT course_id     FROM SECTIONS     GROUP BY course_id     HAVING COUNT(section_id) <= 2 )",
        "repair_result": 0
    },
    {
        "idx": 526,
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and ids of every course with less than 2 sections?",
        "evidence": "",
        "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "pred": "SELECT course_id, course_name FROM COURSES WHERE course_id IN (   SELECT course_id   FROM SECTIONS   GROUP BY course_id   HAVING COUNT(section_id) < 2 )",
        "pred_result": 0,
        "repair_sql": "SELECT course_id, course_name FROM COURSES WHERE course_id IN (   SELECT course_id   FROM SECTIONS   GROUP BY course_id   HAVING COUNT(section_id) < 2 )",
        "repair_result": 0
    },
    {
        "idx": 527,
        "db_id": "student_transcripts_tracking",
        "question": "List the section_name in reversed lexicographical order.",
        "evidence": "",
        "gold": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "pred": "SELECT section_name FROM SECTIONS ORDER BY section_name DESC",
        "pred_result": 1,
        "repair_sql": "SELECT section_name FROM SECTIONS ORDER BY section_name DESC;",
        "repair_result": 1
    },
    {
        "idx": 528,
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of the sections in reverse alphabetical order?",
        "evidence": "",
        "gold": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "pred": "SELECT section_name FROM SECTIONS ORDER BY section_name DESC",
        "pred_result": 1,
        "repair_sql": "SELECT section_name FROM SECTIONS ORDER BY section_name DESC;",
        "repair_result": 1
    },
    {
        "idx": 529,
        "db_id": "student_transcripts_tracking",
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "evidence": "",
        "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T2.semester_name, T2.semester_id FROM STUDENT_ENROLMENT AS T1 JOIN SEMESTERS AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.semester_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T2.semester_name, T2.semester_id FROM STUDENT_ENROLMENT AS T1 JOIN SEMESTERS AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.semester_id, T2.semester_name ORDER BY COUNT(T1.student_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 530,
        "db_id": "student_transcripts_tracking",
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "evidence": "",
        "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT semester_name, semester_id FROM SEMESTERS WHERE semester_id = (     SELECT semester_id     FROM STUDENT_ENROLMENT     GROUP BY semester_id     ORDER BY COUNT(student_id) DESC     LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT s.semester_name, s.semester_id FROM SEMESTERS s JOIN (     SELECT semester_id, COUNT(student_id) AS student_count     FROM STUDENT_ENROLMENT     GROUP BY semester_id     ORDER BY student_count DESC     LIMIT 1 ) AS max_enrollment ON s.semester_id = max_enrollment.semester_id;",
        "repair_result": 1
    },
    {
        "idx": 531,
        "db_id": "student_transcripts_tracking",
        "question": "What is the description of the department whose name has the substring the computer?",
        "evidence": "",
        "gold": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "pred": "SELECT department_description FROM departments WHERE department_name LIKE \"%computer%\"",
        "pred_result": 1,
        "repair_sql": "SELECT department_description FROM departments WHERE department_name LIKE \"%computer%\"",
        "repair_result": 1
    },
    {
        "idx": 532,
        "db_id": "student_transcripts_tracking",
        "question": "What is the department description for the one whose name has the word computer?",
        "evidence": "",
        "gold": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "pred": "SELECT department_description FROM departments WHERE department_name LIKE '%computer%'",
        "pred_result": 1,
        "repair_sql": "SELECT department_description FROM departments WHERE department_name LIKE '%computer%'",
        "repair_result": 1
    },
    {
        "idx": 533,
        "db_id": "student_transcripts_tracking",
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "pred": "SELECT S.first_name, S.middle_name, S.last_name, S.student_id FROM STUDENTS AS S JOIN STUDENT_ENROLMENT AS SE1 ON S.student_id = SE1.student_id JOIN STUDENT_ENROLMENT AS SE2 ON S.student_id = SE2.student_id WHERE SE1.degree_program_id <> SE2.degree_program_id AND SE1.semester_id = SE2.semester_id GROUP BY S.first_name, S.middle_name, S.last_name, S.student_id",
        "pred_result": 0,
        "repair_sql": "SELECT S.first_name, S.middle_name, S.last_name, S.student_id FROM STUDENTS AS S JOIN STUDENT_ENROLMENT AS SE1 ON S.student_id = SE1.student_id JOIN STUDENT_ENROLMENT AS SE2 ON S.student_id = SE2.student_id WHERE SE1.degree_program_id <> SE2.degree_program_id AND SE1.semester_id = SE2.semester_id;",
        "repair_result": 0
    },
    {
        "idx": 534,
        "db_id": "student_transcripts_tracking",
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "pred": "SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM STUDENTS s JOIN STUDENT_ENROLMENT se1 ON s.student_id = se1.student_id JOIN STUDENT_ENROLMENT se2 ON s.student_id = se2.student_id WHERE se1.degree_program_id != se2.degree_program_id AND se1.semester_id = se2.semester_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT se1.degree_program_id) = 2",
        "pred_result": 0,
        "repair_sql": "SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM STUDENTS s JOIN STUDENT_ENROLMENT se1 ON s.student_id = se1.student_id JOIN STUDENT_ENROLMENT se2 ON s.student_id = se2.student_id WHERE se1.degree_program_id != se2.degree_program_id AND se1.semester_id = se2.semester_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT se1.degree_program_id) = 2",
        "repair_result": 0
    },
    {
        "idx": 535,
        "db_id": "student_transcripts_tracking",
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "pred": "SELECT S.first_name, S.middle_name, S.last_name FROM STUDENTS AS S JOIN STUDENT_ENROLMENT AS SE ON S.student_id = SE.student_id JOIN DEGREE_PROGRAMS AS DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelor'",
        "pred_result": 1,
        "repair_sql": "SELECT S.first_name, S.middle_name, S.last_name FROM STUDENTS AS S JOIN STUDENT_ENROLMENT AS SE ON S.student_id = SE.student_id JOIN DEGREE_PROGRAMS AS DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelor'",
        "repair_result": 1
    },
    {
        "idx": 536,
        "db_id": "student_transcripts_tracking",
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "pred": "SELECT S.first_name, S.middle_name, S.last_name FROM STUDENTS AS S JOIN STUDENT_ENROLMENT AS SE ON S.student_id = SE.student_id JOIN DEGREE_PROGRAMS AS DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelors'",
        "pred_result": 0,
        "repair_sql": "SELECT S.first_name, S.middle_name, S.last_name FROM STUDENTS AS S JOIN STUDENT_ENROLMENT AS SE ON S.student_id = SE.student_id JOIN DEGREE_PROGRAMS AS DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelors'",
        "repair_result": 0
    },
    {
        "idx": 537,
        "db_id": "student_transcripts_tracking",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "evidence": "",
        "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT DP.degree_summary_name FROM STUDENT_ENROLMENT AS SE JOIN DEGREE_PROGRAMS AS DP ON SE.degree_program_id = DP.degree_program_id GROUP BY DP.degree_summary_name ORDER BY count(SE.student_id) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT DP.degree_summary_name FROM STUDENT_ENROLMENT AS SE JOIN DEGREE_PROGRAMS AS DP ON SE.degree_program_id = DP.degree_program_id GROUP BY DP.degree_summary_name ORDER BY count(SE.student_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 538,
        "db_id": "student_transcripts_tracking",
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "evidence": "",
        "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT DP.degree_summary_name FROM STUDENT_ENROLMENT AS SE JOIN DEGREE_PROGRAMS AS DP ON SE.degree_program_id = DP.degree_program_id GROUP BY DP.degree_summary_name ORDER BY COUNT(SE.student_id) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT DP.degree_summary_name FROM STUDENT_ENROLMENT AS SE JOIN DEGREE_PROGRAMS AS DP ON SE.degree_program_id = DP.degree_program_id GROUP BY DP.degree_summary_name ORDER BY COUNT(SE.student_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 539,
        "db_id": "student_transcripts_tracking",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "evidence": "",
        "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.degree_program_id, T1.degree_summary_name FROM DEGREE_PROGRAMS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.degree_program_id, T1.degree_summary_name FROM DEGREE_PROGRAMS AS T1 JOIN STUDENT_ENROLMENT AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id, T1.degree_summary_name ORDER BY COUNT(T2.student_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 540,
        "db_id": "student_transcripts_tracking",
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "evidence": "",
        "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT degree_program_id, degree_summary_name FROM DEGREE_PROGRAMS WHERE degree_program_id = (   SELECT degree_program_id   FROM STUDENT_ENROLMENT   GROUP BY degree_program_id   ORDER BY COUNT(student_id) DESC   LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT dp.degree_program_id, dp.degree_summary_name FROM DEGREE_PROGRAMS dp JOIN (   SELECT se.degree_program_id   FROM STUDENT_ENROLMENT se   GROUP BY se.degree_program_id   ORDER BY COUNT(se.student_id) DESC   LIMIT 1 ) AS most_enrolled ON dp.degree_program_id = most_enrolled.degree_program_id;",
        "repair_result": 1
    },
    {
        "idx": 541,
        "db_id": "student_transcripts_tracking",
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "evidence": "",
        "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT S.student_id, S.first_name, S.middle_name, S.last_name, COUNT(SE.student_enrolment_id) AS number_of_enrollments FROM STUDENTS AS S JOIN STUDENT_ENROLMENT AS SE ON S.student_id = SE.student_id GROUP BY S.student_id ORDER BY number_of_enrollments DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT S.student_id, S.first_name, S.middle_name, S.last_name, COUNT(SE.student_enrolment_id) AS number_of_enrollments FROM STUDENTS AS S JOIN STUDENT_ENROLMENT AS SE ON S.student_id = SE.student_id GROUP BY S.student_id ORDER BY number_of_enrollments DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 542,
        "db_id": "student_transcripts_tracking",
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "evidence": "",
        "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT S.first_name, S.middle_name, S.last_name, S.student_id, COUNT(SE.student_enrolment_id) AS number_of_enrollments FROM STUDENTS AS S JOIN STUDENT_ENROLMENT AS SE ON S.student_id = SE.student_id GROUP BY S.student_id ORDER BY number_of_enrollments DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT S.first_name, S.middle_name, S.last_name, S.student_id, COUNT(SE.student_enrolment_id) AS number_of_enrollments FROM STUDENTS AS S JOIN STUDENT_ENROLMENT AS SE ON S.student_id = SE.student_id GROUP BY S.student_id ORDER BY number_of_enrollments DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 543,
        "db_id": "student_transcripts_tracking",
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "evidence": "",
        "gold": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "pred": "SELECT semester_name FROM SEMESTERS EXCEPT SELECT S.semester_name FROM SEMESTERS AS S JOIN STUDENT_ENROLMENT AS SE ON S.semester_id = SE.semester_id",
        "pred_result": 1,
        "repair_sql": "SELECT semester_name FROM SEMESTERS EXCEPT SELECT S.semester_name FROM SEMESTERS AS S JOIN STUDENT_ENROLMENT AS SE ON S.semester_id = SE.semester_id;",
        "repair_result": 1
    },
    {
        "idx": 544,
        "db_id": "student_transcripts_tracking",
        "question": "What is the name of the semester with no students enrolled?",
        "evidence": "",
        "gold": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "pred": "SELECT semester_name FROM SEMESTERS EXCEPT SELECT DISTINCT S.semester_name FROM SEMESTERS AS S JOIN STUDENT_ENROLMENT AS SE ON S.semester_id = SE.semester_id",
        "pred_result": 1,
        "repair_sql": "SELECT semester_name FROM SEMESTERS WHERE semester_id NOT IN (     SELECT DISTINCT semester_id     FROM STUDENT_ENROLMENT );",
        "repair_result": 1
    },
    {
        "idx": 545,
        "db_id": "student_transcripts_tracking",
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "pred": "SELECT DISTINCT C.course_name FROM COURSES AS C JOIN STUDENT_ENROLMENT_COURSES AS SEC ON C.course_id = SEC.course_id",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT C.course_name FROM COURSES AS C JOIN STUDENT_ENROLMENT_COURSES AS SEC ON C.course_id = SEC.course_id",
        "repair_result": 1
    },
    {
        "idx": 546,
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of all courses that have some students enrolled?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "pred": "SELECT DISTINCT C.course_name FROM COURSES AS C JOIN STUDENT_ENROLMENT_COURSES AS SEC ON C.course_id = SEC.course_id",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT C.course_name FROM COURSES AS C JOIN STUDENT_ENROLMENT_COURSES AS SEC ON C.course_id = SEC.course_id",
        "repair_result": 1
    },
    {
        "idx": 547,
        "db_id": "student_transcripts_tracking",
        "question": "What's the name of the course with most number of enrollments?",
        "evidence": "",
        "gold": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT C.course_name FROM COURSES AS C JOIN STUDENT_ENROLMENT_COURSES AS SEC ON C.course_id = SEC.course_id GROUP BY C.course_id ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT C.course_name FROM COURSES AS C JOIN STUDENT_ENROLMENT_COURSES AS SEC ON C.course_id = SEC.course_id GROUP BY C.course_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 548,
        "db_id": "student_transcripts_tracking",
        "question": "What is the name of the course with the most students enrolled?",
        "evidence": "",
        "gold": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT C.course_name FROM COURSES AS C JOIN STUDENT_ENROLMENT_COURSES AS SEC ON C.course_id = SEC.course_id GROUP BY C.course_id ORDER BY COUNT(SEC.student_course_id) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT C.course_name FROM COURSES AS C JOIN STUDENT_ENROLMENT_COURSES AS SEC ON C.course_id = SEC.course_id GROUP BY C.course_id ORDER BY COUNT(SEC.student_course_id) DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 549,
        "db_id": "student_transcripts_tracking",
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "evidence": "",
        "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "pred": "SELECT last_name FROM STUDENTS WHERE current_address_id IN (     SELECT address_id     FROM ADDRESSES     WHERE state_province_county = 'North Carolina' ) EXCEPT SELECT S.last_name FROM STUDENTS AS S JOIN STUDENT_ENROLMENT AS SE ON S.student_id = SE.student_id",
        "pred_result": 0,
        "repair_sql": "SELECT last_name FROM STUDENTS WHERE current_address_id IN (     SELECT address_id     FROM ADDRESSES     WHERE state_province_county = 'North Carolina' ) EXCEPT SELECT S.last_name FROM STUDENTS AS S JOIN STUDENT_ENROLMENT AS SE ON S.student_id = SE.student_id;",
        "repair_result": 0
    },
    {
        "idx": 550,
        "db_id": "student_transcripts_tracking",
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "evidence": "",
        "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "pred": "SELECT last_name FROM STUDENTS WHERE current_address_id IN (     SELECT address_id     FROM ADDRESSES     WHERE state_province_county = 'North Carolina' ) EXCEPT SELECT last_name FROM STUDENTS WHERE student_id IN (     SELECT student_id     FROM STUDENT_ENROLMENT )",
        "pred_result": 0,
        "repair_sql": "SELECT last_name FROM STUDENTS WHERE current_address_id IN (     SELECT address_id     FROM ADDRESSES     WHERE state_province_county = 'North Carolina' ) EXCEPT SELECT last_name FROM STUDENTS WHERE student_id IN (     SELECT student_id     FROM STUDENT_ENROLMENT )",
        "repair_result": 0
    },
    {
        "idx": 551,
        "db_id": "student_transcripts_tracking",
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "evidence": "",
        "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "pred": "SELECT T1.transcript_date, T1.transcript_id FROM TRANSCRIPTS AS T1 JOIN TRANSCRIPT_CONTENTS AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(T2.student_course_id) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT T1.transcript_date, T1.transcript_id FROM TRANSCRIPTS AS T1 JOIN TRANSCRIPT_CONTENTS AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date HAVING COUNT(T2.student_course_id) >= 2;",
        "repair_result": 1
    },
    {
        "idx": 552,
        "db_id": "student_transcripts_tracking",
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "evidence": "",
        "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "pred": "SELECT T1.transcript_date, T1.transcript_id FROM TRANSCRIPTS AS T1 JOIN TRANSCRIPT_CONTENTS AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(T2.student_course_id) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT T1.transcript_date, T1.transcript_id FROM TRANSCRIPTS AS T1 JOIN TRANSCRIPT_CONTENTS AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date HAVING COUNT(T2.student_course_id) >= 2;",
        "repair_result": 1
    },
    {
        "idx": 553,
        "db_id": "student_transcripts_tracking",
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "evidence": "",
        "gold": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "pred": "SELECT cell_mobile_number FROM students WHERE first_name = \"Timmothy\" AND last_name = \"Ward\";",
        "pred_result": 1,
        "repair_sql": "SELECT cell_mobile_number FROM students WHERE first_name = \"Timmothy\" AND last_name = \"Ward\";",
        "repair_result": 1
    },
    {
        "idx": 554,
        "db_id": "student_transcripts_tracking",
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "evidence": "",
        "gold": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "pred": "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';",
        "pred_result": 0,
        "repair_sql": "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';",
        "repair_result": 0
    },
    {
        "idx": 555,
        "db_id": "student_transcripts_tracking",
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "evidence": "",
        "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "pred": "SELECT first_name, middle_name, last_name FROM STUDENTS ORDER BY date_first_registered ASC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT first_name, middle_name, last_name FROM STUDENTS ORDER BY date_first_registered ASC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 556,
        "db_id": "student_transcripts_tracking",
        "question": "What is the first, middle, and last name of the first student to register?",
        "evidence": "",
        "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "pred": "SELECT first_name, middle_name, last_name FROM STUDENTS ORDER BY date_first_registered ASC LIMIT 1;",
        "pred_result": 1,
        "repair_sql": "SELECT first_name, middle_name, last_name FROM STUDENTS ORDER BY date_first_registered ASC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 557,
        "db_id": "student_transcripts_tracking",
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "evidence": "",
        "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "pred": "SELECT first_name, middle_name, last_name FROM STUDENTS ORDER BY date_left ASC LIMIT 1;",
        "pred_result": 1,
        "repair_sql": "SELECT first_name, middle_name, last_name FROM STUDENTS ORDER BY date_left ASC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 558,
        "db_id": "student_transcripts_tracking",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "evidence": "",
        "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "pred": "SELECT first_name, middle_name, last_name FROM STUDENTS ORDER BY date_left ASC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT first_name, middle_name, last_name FROM STUDENTS ORDER BY date_left ASC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 559,
        "db_id": "student_transcripts_tracking",
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "evidence": "",
        "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "pred": "SELECT first_name FROM STUDENTS WHERE current_address_id != permanent_address_id",
        "pred_result": 1,
        "repair_sql": "SELECT first_name FROM STUDENTS WHERE current_address_id != permanent_address_id;",
        "repair_result": 1
    },
    {
        "idx": 560,
        "db_id": "student_transcripts_tracking",
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "evidence": "",
        "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "pred": "SELECT first_name FROM STUDENTS WHERE current_address_id != permanent_address_id",
        "pred_result": 1,
        "repair_sql": "SELECT first_name FROM STUDENTS WHERE current_address_id != permanent_address_id;",
        "repair_result": 1
    },
    {
        "idx": 561,
        "db_id": "student_transcripts_tracking",
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "evidence": "",
        "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT A.address_id, A.line_1, A.line_2, A.line_3 FROM STUDENTS S JOIN ADDRESSES A ON S.current_address_id = A.address_id GROUP BY A.address_id ORDER BY COUNT(S.student_id) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT A.address_id, A.line_1, A.line_2, A.line_3 FROM STUDENTS S JOIN ADDRESSES A ON S.current_address_id = A.address_id GROUP BY A.address_id, A.line_1, A.line_2, A.line_3 ORDER BY COUNT(S.student_id) DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 562,
        "db_id": "student_transcripts_tracking",
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "evidence": "",
        "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT address_id, line_1, line_2 FROM ADDRESSES WHERE address_id = (   SELECT current_address_id   FROM STUDENTS   GROUP BY current_address_id   ORDER BY COUNT(student_id) DESC   LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT address_id, line_1, line_2 FROM ADDRESSES WHERE address_id = (   SELECT current_address_id   FROM STUDENTS   GROUP BY current_address_id   ORDER BY COUNT(student_id) DESC   LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 563,
        "db_id": "student_transcripts_tracking",
        "question": "On average, when were the transcripts printed?",
        "evidence": "",
        "gold": "SELECT avg(transcript_date) FROM Transcripts",
        "pred": "SELECT datetime(AVG(strftime('%s', transcript_date)), 'unixepoch') AS average_transcript_date FROM TRANSCRIPTS",
        "pred_result": 0,
        "repair_sql": "SELECT datetime(AVG(strftime('%s', transcript_date)), 'unixepoch') AS average_transcript_date FROM TRANSCRIPTS;",
        "repair_result": 0
    },
    {
        "idx": 564,
        "db_id": "student_transcripts_tracking",
        "question": "What is the average transcript date?",
        "evidence": "",
        "gold": "SELECT avg(transcript_date) FROM Transcripts",
        "pred": "SELECT datetime(avg(strftime('%s', transcript_date)), 'unixepoch') as average_transcript_date FROM TRANSCRIPTS",
        "pred_result": 0,
        "repair_sql": "SELECT datetime(avg(strftime('%s', transcript_date)), 'unixepoch') as average_transcript_date FROM TRANSCRIPTS;",
        "repair_result": 0
    },
    {
        "idx": 565,
        "db_id": "student_transcripts_tracking",
        "question": "When is the first transcript released? List the date and details.",
        "evidence": "",
        "gold": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "pred": "SELECT transcript_date, other_details FROM TRANSCRIPTS ORDER BY transcript_date ASC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT transcript_date, other_details FROM TRANSCRIPTS ORDER BY transcript_date ASC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 566,
        "db_id": "student_transcripts_tracking",
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "evidence": "",
        "gold": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "pred": "SELECT transcript_date, other_details FROM TRANSCRIPTS ORDER BY transcript_date ASC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT transcript_date, other_details FROM TRANSCRIPTS ORDER BY transcript_date ASC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 567,
        "db_id": "student_transcripts_tracking",
        "question": "How many transcripts are released?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Transcripts",
        "pred": "SELECT count(*) FROM transcripts",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM transcripts;",
        "repair_result": 1
    },
    {
        "idx": 568,
        "db_id": "student_transcripts_tracking",
        "question": "How many transcripts are listed?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Transcripts",
        "pred": "SELECT count(*) FROM transcripts",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM transcripts",
        "repair_result": 1
    },
    {
        "idx": 569,
        "db_id": "student_transcripts_tracking",
        "question": "What is the last transcript release date?",
        "evidence": "",
        "gold": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "pred": "SELECT MAX(transcript_date) AS last_transcript_release_date FROM TRANSCRIPTS",
        "pred_result": 1,
        "repair_sql": "SELECT transcript_date AS last_transcript_release_date  FROM TRANSCRIPTS  ORDER BY transcript_date DESC  LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 570,
        "db_id": "student_transcripts_tracking",
        "question": "When was the last transcript released?",
        "evidence": "",
        "gold": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "pred": "SELECT transcript_date FROM TRANSCRIPTS ORDER BY transcript_date DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT transcript_date FROM TRANSCRIPTS ORDER BY transcript_date DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 571,
        "db_id": "student_transcripts_tracking",
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "evidence": "",
        "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT student_course_id, COUNT(transcript_id) as count FROM TRANSCRIPT_CONTENTS GROUP BY student_course_id ORDER BY count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT student_course_id, COUNT(transcript_id) as count FROM TRANSCRIPT_CONTENTS GROUP BY student_course_id ORDER BY count DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 572,
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "evidence": "",
        "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.course_id, COUNT(T2.transcript_id) AS transcript_count FROM STUDENT_ENROLMENT_COURSES AS T1 JOIN TRANSCRIPT_CONTENTS AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.course_id ORDER BY transcript_count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.course_id, T1.student_enrolment_id, COUNT(T2.transcript_id) AS transcript_count FROM STUDENT_ENROLMENT_COURSES AS T1 JOIN TRANSCRIPT_CONTENTS AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.course_id, T1.student_enrolment_id ORDER BY transcript_count DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 573,
        "db_id": "student_transcripts_tracking",
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "evidence": "",
        "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "pred": "SELECT transcript_id, transcript_date FROM TRANSCRIPTS WHERE transcript_id = (   SELECT transcript_id   FROM TRANSCRIPT_CONTENTS   GROUP BY transcript_id   ORDER BY COUNT(student_course_id) ASC   LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT transcript_id, transcript_date FROM TRANSCRIPTS ORDER BY (   SELECT COUNT(student_course_id)   FROM TRANSCRIPT_CONTENTS   WHERE TRANSCRIPT_CONTENTS.transcript_id = TRANSCRIPTS.transcript_id ) ASC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 574,
        "db_id": "student_transcripts_tracking",
        "question": "What is the date and id of the transcript with the least number of results?",
        "evidence": "",
        "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "pred": "SELECT T1.transcript_date, T1.transcript_id FROM TRANSCRIPTS AS T1 JOIN TRANSCRIPT_CONTENTS AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY COUNT(T2.student_course_id) ASC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.transcript_date, T1.transcript_id FROM TRANSCRIPTS AS T1 LEFT JOIN TRANSCRIPT_CONTENTS AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date ORDER BY COUNT(T2.student_course_id) ASC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 575,
        "db_id": "student_transcripts_tracking",
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "pred": "SELECT semester_name FROM semesters WHERE semester_id IN (   SELECT semester_id   FROM student_enrolment   WHERE degree_program_id IN (     SELECT degree_program_id     FROM degree_programs     WHERE degree_summary_name = 'Master'   )   INTERSECT   SELECT semester_id   FROM student_enrolment   WHERE degree_program_id IN (     SELECT degree_program_id     FROM degree_programs     WHERE degree_summary_name = 'Bachelor'   ) )",
        "pred_result": 0,
        "repair_sql": "SELECT semester_name FROM semesters WHERE semester_id IN (   SELECT semester_id   FROM student_enrolment   WHERE degree_program_id IN (     SELECT degree_program_id     FROM degree_programs     WHERE degree_summary_name = 'Master'   )   INTERSECT   SELECT semester_id   FROM student_enrolment   WHERE degree_program_id IN (     SELECT degree_program_id     FROM degree_programs     WHERE degree_summary_name = 'Bachelor'   ) )",
        "repair_result": 0
    },
    {
        "idx": 576,
        "db_id": "student_transcripts_tracking",
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "pred": "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Master') INTERSECT SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelor')",
        "pred_result": 1,
        "repair_sql": "SELECT se.semester_id FROM student_enrolment se JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Master' INTERSECT SELECT se.semester_id FROM student_enrolment se JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor';",
        "repair_result": 1
    },
    {
        "idx": 577,
        "db_id": "student_transcripts_tracking",
        "question": "How many different addresses do the students currently live?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT current_address_id) FROM Students",
        "pred": "SELECT count(DISTINCT current_address_id) FROM STUDENTS",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT current_address_id) FROM STUDENTS;",
        "repair_result": 1
    },
    {
        "idx": 578,
        "db_id": "student_transcripts_tracking",
        "question": "What are the different addresses that have students living there?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT current_address_id) FROM Students",
        "pred": "SELECT DISTINCT A.line_1, A.line_2, A.line_3, A.city, A.zip_postcode, A.state_province_county, A.country, A.other_address_details FROM ADDRESSES AS A JOIN STUDENTS AS S ON A.address_id = S.current_address_id OR A.address_id = S.permanent_address_id;",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT A.line_1, A.line_2, A.line_3, A.city, A.zip_postcode, A.state_province_county, A.country, A.other_address_details FROM ADDRESSES AS A JOIN STUDENTS AS S ON A.address_id = S.current_address_id OR A.address_id = S.permanent_address_id;",
        "repair_result": 0
    },
    {
        "idx": 579,
        "db_id": "student_transcripts_tracking",
        "question": "List all the student details in reversed lexicographical order.",
        "evidence": "",
        "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "pred": "SELECT student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM STUDENTS ORDER BY first_name DESC",
        "pred_result": 0,
        "repair_sql": "SELECT student_id,        current_address_id,        permanent_address_id,        first_name,        middle_name,        last_name,        cell_mobile_number,        email_address,        ssn,        date_first_registered,        date_left,        other_student_details FROM STUDENTS ORDER BY first_name DESC;",
        "repair_result": 0
    },
    {
        "idx": 580,
        "db_id": "student_transcripts_tracking",
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "evidence": "",
        "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "pred": "SELECT other_student_details FROM STUDENTS ORDER BY last_name DESC",
        "pred_result": 1,
        "repair_sql": "SELECT last_name, other_student_details FROM STUDENTS ORDER BY last_name DESC;",
        "repair_result": 0
    },
    {
        "idx": 581,
        "db_id": "student_transcripts_tracking",
        "question": "Describe the section h.",
        "evidence": "",
        "gold": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "pred": "SELECT section_description FROM SECTIONS WHERE section_name = 'h'",
        "pred_result": 1,
        "repair_sql": "SELECT section_description FROM SECTIONS WHERE section_name = 'h'",
        "repair_result": 1
    },
    {
        "idx": 582,
        "db_id": "student_transcripts_tracking",
        "question": "What is the description for the section named h?",
        "evidence": "",
        "gold": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "pred": "SELECT section_description FROM SECTIONS WHERE section_name = 'h'",
        "pred_result": 1,
        "repair_sql": "SELECT section_description FROM SECTIONS WHERE section_name = 'h'",
        "repair_result": 1
    },
    {
        "idx": 583,
        "db_id": "student_transcripts_tracking",
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "evidence": "",
        "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "pred": "SELECT S.first_name FROM STUDENTS AS S JOIN ADDRESSES AS A ON S.permanent_address_id = A.address_id WHERE A.country = 'Haiti' OR S.cell_mobile_number = '09700166582'",
        "pred_result": 0,
        "repair_sql": "SELECT S.first_name FROM STUDENTS AS S JOIN ADDRESSES AS A ON S.permanent_address_id = A.address_id WHERE A.country = 'Haiti' OR S.cell_mobile_number = '09700166582'",
        "repair_result": 0
    },
    {
        "idx": 584,
        "db_id": "student_transcripts_tracking",
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "evidence": "",
        "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "pred": "SELECT S.first_name FROM STUDENTS AS S JOIN ADDRESSES AS A ON S.permanent_address_id = A.address_id WHERE A.country = 'Haiti' OR S.cell_mobile_number = '09700166582'",
        "pred_result": 0,
        "repair_sql": "SELECT S.first_name FROM STUDENTS AS S JOIN ADDRESSES AS A ON S.permanent_address_id = A.address_id WHERE A.country = 'Haiti' OR S.cell_mobile_number = '09700166582'",
        "repair_result": 0
    },
    {
        "idx": 585,
        "db_id": "tvshow",
        "question": "List the title of all cartoons in alphabetical order.",
        "evidence": "",
        "gold": "SELECT Title FROM Cartoon ORDER BY title",
        "pred": "SELECT title FROM cartoon ORDER BY title ASC",
        "pred_result": 1,
        "repair_sql": "SELECT title FROM cartoon ORDER BY title ASC;",
        "repair_result": 1
    },
    {
        "idx": 586,
        "db_id": "tvshow",
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "evidence": "",
        "gold": "SELECT Title FROM Cartoon ORDER BY title",
        "pred": "SELECT title FROM CARTOON ORDER BY title ASC",
        "pred_result": 1,
        "repair_sql": "SELECT title FROM CARTOON ORDER BY title ASC;",
        "repair_result": 1
    },
    {
        "idx": 587,
        "db_id": "tvshow",
        "question": "List all cartoon directed by \"Ben Jones\".",
        "evidence": "",
        "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "pred": "SELECT title FROM CARTOON WHERE directed_by = 'Ben Jones'",
        "pred_result": 1,
        "repair_sql": "SELECT title FROM CARTOON WHERE directed_by = 'Ben Jones'",
        "repair_result": 1
    },
    {
        "idx": 588,
        "db_id": "tvshow",
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "evidence": "",
        "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "pred": "SELECT title FROM CARTOON WHERE directed_by = 'Ben Jones'",
        "pred_result": 1,
        "repair_sql": "SELECT title FROM CARTOON WHERE directed_by = 'Ben Jones'",
        "repair_result": 1
    },
    {
        "idx": 589,
        "db_id": "tvshow",
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "pred": "SELECT count(*) FROM CARTOON WHERE written_by = 'Joseph Kuhr'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM CARTOON WHERE written_by = 'Joseph Kuhr'",
        "repair_result": 1
    },
    {
        "idx": 590,
        "db_id": "tvshow",
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "pred": "SELECT count(*) FROM CARTOON WHERE written_by = 'Joseph Kuhr'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM CARTOON WHERE written_by = 'Joseph Kuhr'",
        "repair_result": 1
    },
    {
        "idx": 591,
        "db_id": "tvshow",
        "question": "list all cartoon titles and their directors ordered by their air date",
        "evidence": "",
        "gold": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "pred": "SELECT title, directed_by FROM cartoon ORDER BY original_air_date",
        "pred_result": 1,
        "repair_sql": "SELECT title, directed_by FROM cartoon ORDER BY original_air_date",
        "repair_result": 1
    },
    {
        "idx": 592,
        "db_id": "tvshow",
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "evidence": "",
        "gold": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "pred": "SELECT title, directed_by FROM CARTOON ORDER BY original_air_date",
        "pred_result": 1,
        "repair_sql": "SELECT title, directed_by FROM CARTOON ORDER BY original_air_date",
        "repair_result": 1
    },
    {
        "idx": 593,
        "db_id": "tvshow",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "evidence": "",
        "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "pred": "SELECT title FROM CARTOON WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti';",
        "pred_result": 1,
        "repair_sql": "SELECT title FROM CARTOON WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti';",
        "repair_result": 1
    },
    {
        "idx": 594,
        "db_id": "tvshow",
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "evidence": "",
        "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "pred": "SELECT title FROM CARTOON WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
        "pred_result": 1,
        "repair_sql": "SELECT title FROM CARTOON WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
        "repair_result": 1
    },
    {
        "idx": 595,
        "db_id": "tvshow",
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "evidence": "",
        "gold": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "pred": "SELECT country, COUNT(*) as num_channels FROM TV_CHANNEL GROUP BY country ORDER BY num_channels DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT country, COUNT(*) as num_channels FROM TV_CHANNEL GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 596,
        "db_id": "tvshow",
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "evidence": "",
        "gold": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "pred": "SELECT country, count(*) as channel_count FROM TV_CHANNEL GROUP BY country ORDER BY channel_count DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT country, count(*) as channel_count FROM TV_CHANNEL GROUP BY country ORDER BY channel_count DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 597,
        "db_id": "tvshow",
        "question": "List the number of different series names and contents in the TV Channel table.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "pred": "SELECT COUNT(DISTINCT series_name) AS series_name_count, COUNT(DISTINCT content) AS content_count FROM TV_CHANNEL",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT series_name) AS series_name_count, COUNT(DISTINCT content) AS content_count FROM TV_CHANNEL;",
        "repair_result": 1
    },
    {
        "idx": 598,
        "db_id": "tvshow",
        "question": "How many different series and contents are listed in the TV Channel table?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "pred": "SELECT count(DISTINCT series_name || content) FROM TV_CHANNEL",
        "pred_result": 0,
        "repair_sql": "SELECT count(DISTINCT series_name || content) FROM TV_CHANNEL;",
        "repair_result": 0
    },
    {
        "idx": 599,
        "db_id": "tvshow",
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "evidence": "",
        "gold": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "pred": "SELECT content FROM TV_CHANNEL WHERE series_name = 'Sky Radio'",
        "pred_result": 1,
        "repair_sql": "SELECT content FROM TV_CHANNEL WHERE series_name = 'Sky Radio'",
        "repair_result": 1
    },
    {
        "idx": 600,
        "db_id": "tvshow",
        "question": "What is the content of the series Sky Radio?",
        "evidence": "",
        "gold": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "pred": "SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'",
        "pred_result": 1,
        "repair_sql": "SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'",
        "repair_result": 1
    },
    {
        "idx": 601,
        "db_id": "tvshow",
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "evidence": "",
        "gold": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "pred": "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
        "pred_result": 1,
        "repair_sql": "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
        "repair_result": 1
    },
    {
        "idx": 602,
        "db_id": "tvshow",
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "evidence": "",
        "gold": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "pred": "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
        "pred_result": 1,
        "repair_sql": "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
        "repair_result": 1
    },
    {
        "idx": 603,
        "db_id": "tvshow",
        "question": "How many TV Channel using language English?",
        "evidence": "",
        "gold": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "pred": "SELECT count(*) FROM tv_channel WHERE language = 'English'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM tv_channel WHERE language = 'English'",
        "repair_result": 1
    },
    {
        "idx": 604,
        "db_id": "tvshow",
        "question": "How many TV Channels use the English language?",
        "evidence": "",
        "gold": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "pred": "SELECT count(*) FROM TV_CHANNEL WHERE language = 'English'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM TV_CHANNEL WHERE language = 'English'",
        "repair_result": 1
    },
    {
        "idx": 605,
        "db_id": "tvshow",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "evidence": "",
        "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "pred": "SELECT language, COUNT(*) as num_channels FROM TV_CHANNEL GROUP BY language ORDER BY num_channels ASC LIMIT 1;",
        "pred_result": 1,
        "repair_sql": "SELECT language, COUNT(*) as num_channels FROM TV_CHANNEL GROUP BY language ORDER BY num_channels ASC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 606,
        "db_id": "tvshow",
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "evidence": "",
        "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "pred": "SELECT language, COUNT(*) as channel_count FROM TV_CHANNEL GROUP BY language HAVING channel_count = (     SELECT MIN(channel_count)     FROM (         SELECT COUNT(*) as channel_count         FROM TV_CHANNEL         GROUP BY language     ) )",
        "pred_result": 1,
        "repair_sql": "SELECT language, COUNT(*) as channel_count FROM TV_CHANNEL GROUP BY language ORDER BY channel_count ASC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 607,
        "db_id": "tvshow",
        "question": "List each language and the number of TV Channels using it.",
        "evidence": "",
        "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "pred": "SELECT language, count(*) FROM tv_channel GROUP BY language",
        "pred_result": 1,
        "repair_sql": "SELECT language, count(*) FROM tv_channel GROUP BY language",
        "repair_result": 1
    },
    {
        "idx": 608,
        "db_id": "tvshow",
        "question": "For each language, list the number of TV Channels that use it.",
        "evidence": "",
        "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "pred": "SELECT language, count(*) FROM tv_channel GROUP BY language",
        "pred_result": 1,
        "repair_sql": "SELECT language, count(*) FROM tv_channel GROUP BY language;",
        "repair_result": 1
    },
    {
        "idx": 609,
        "db_id": "tvshow",
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "evidence": "",
        "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "pred": "SELECT T1.series_name FROM TV_CHANNEL AS T1 JOIN CARTOON AS T2 ON T1.id = T2.channel WHERE T2.title = 'The Rise of the Blue Beetle!'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.series_name FROM TV_CHANNEL AS T1 JOIN CARTOON AS T2 ON T1.id = T2.channel WHERE T2.title = 'The Rise of the Blue Beetle!';",
        "repair_result": 1
    },
    {
        "idx": 610,
        "db_id": "tvshow",
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "evidence": "",
        "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "pred": "SELECT T1.series_name FROM TV_CHANNEL AS T1 JOIN CARTOON AS T2 ON T1.id = T2.channel WHERE T2.title = 'The Rise of the Blue Beetle!'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.series_name FROM TV_CHANNEL AS T1 JOIN CARTOON AS T2 ON T1.id = T2.channel WHERE T2.title = 'The Rise of the Blue Beetle!';",
        "repair_result": 1
    },
    {
        "idx": 611,
        "db_id": "tvshow",
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "evidence": "",
        "gold": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "pred": "SELECT C.title FROM CARTOON AS C JOIN TV_CHANNEL AS T ON C.channel = T.id WHERE T.series_name = 'Sky Radio'",
        "pred_result": 1,
        "repair_sql": "SELECT C.title FROM CARTOON AS C JOIN TV_CHANNEL AS T ON C.channel = T.id WHERE T.series_name = 'Sky Radio'",
        "repair_result": 1
    },
    {
        "idx": 612,
        "db_id": "tvshow",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "evidence": "",
        "gold": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "pred": "SELECT C.title FROM CARTOON AS C JOIN TV_CHANNEL AS T ON C.channel = T.id WHERE T.series_name = 'Sky Radio'",
        "pred_result": 1,
        "repair_sql": "SELECT C.title FROM CARTOON AS C JOIN TV_CHANNEL AS T ON C.channel = T.id WHERE T.series_name = 'Sky Radio'",
        "repair_result": 1
    },
    {
        "idx": 613,
        "db_id": "tvshow",
        "question": "List the Episode of all TV series sorted by rating.",
        "evidence": "",
        "gold": "SELECT Episode FROM TV_series ORDER BY rating",
        "pred": "SELECT episode FROM TV_SERIES ORDER BY rating DESC",
        "pred_result": 1,
        "repair_sql": "SELECT episode FROM TV_SERIES ORDER BY rating DESC;",
        "repair_result": 1
    },
    {
        "idx": 614,
        "db_id": "tvshow",
        "question": "What are all of the episodes ordered by ratings?",
        "evidence": "",
        "gold": "SELECT Episode FROM TV_series ORDER BY rating",
        "pred": "SELECT episode FROM TV_SERIES ORDER BY rating DESC",
        "pred_result": 1,
        "repair_sql": "SELECT episode FROM TV_SERIES ORDER BY rating DESC;",
        "repair_result": 1
    },
    {
        "idx": 615,
        "db_id": "tvshow",
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "evidence": "",
        "gold": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "pred": "SELECT episode, rating FROM TV_SERIES ORDER BY rating DESC LIMIT 3",
        "pred_result": 1,
        "repair_sql": "SELECT episode, rating FROM TV_SERIES ORDER BY rating DESC LIMIT 3",
        "repair_result": 1
    },
    {
        "idx": 616,
        "db_id": "tvshow",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "evidence": "",
        "gold": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "pred": "SELECT episode, rating FROM TV_SERIES ORDER BY rating DESC LIMIT 3",
        "pred_result": 1,
        "repair_sql": "SELECT episode, rating FROM TV_SERIES ORDER BY rating DESC LIMIT 3",
        "repair_result": 1
    },
    {
        "idx": 617,
        "db_id": "tvshow",
        "question": "What is minimum and maximum share of TV series?",
        "evidence": "",
        "gold": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "pred": "SELECT min(share), max(share) FROM TV_SERIES",
        "pred_result": 0,
        "repair_sql": "SELECT min(share), max(share) FROM TV_SERIES;",
        "repair_result": 0
    },
    {
        "idx": 618,
        "db_id": "tvshow",
        "question": "What is the maximum and minimum share for the TV series?",
        "evidence": "",
        "gold": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "pred": "SELECT max(share), min(share) FROM TV_SERIES",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(share) AS max_share, MIN(share) AS min_share FROM TV_SERIES;",
        "repair_result": 1
    },
    {
        "idx": 619,
        "db_id": "tvshow",
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "evidence": "",
        "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "pred": "SELECT air_date FROM TV_SERIES WHERE episode = 'A Love of a Lifetime'",
        "pred_result": 1,
        "repair_sql": "SELECT air_date FROM TV_SERIES WHERE episode = 'A Love of a Lifetime'",
        "repair_result": 1
    },
    {
        "idx": 620,
        "db_id": "tvshow",
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "evidence": "",
        "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "pred": "SELECT air_date FROM TV_SERIES WHERE episode = 'A Love of a Lifetime'",
        "pred_result": 1,
        "repair_sql": "SELECT air_date FROM TV_SERIES WHERE episode = 'A Love of a Lifetime'",
        "repair_result": 1
    },
    {
        "idx": 621,
        "db_id": "tvshow",
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "evidence": "",
        "gold": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "pred": "SELECT weekly_rank FROM TV_SERIES WHERE episode = 'A Love of a Lifetime'",
        "pred_result": 1,
        "repair_sql": "SELECT weekly_rank FROM TV_SERIES WHERE episode = 'A Love of a Lifetime'",
        "repair_result": 1
    },
    {
        "idx": 622,
        "db_id": "tvshow",
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "evidence": "",
        "gold": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "pred": "SELECT weekly_rank FROM TV_SERIES WHERE episode = 'A Love of a Lifetime'",
        "pred_result": 1,
        "repair_sql": "SELECT weekly_rank FROM TV_SERIES WHERE episode = 'A Love of a Lifetime';",
        "repair_result": 1
    },
    {
        "idx": 623,
        "db_id": "tvshow",
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "evidence": "",
        "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "pred": "SELECT T1.series_name FROM TV_CHANNEL AS T1 JOIN TV_SERIES AS T2 ON T1.id = T2.channel WHERE T2.episode = 'A Love of a Lifetime'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.series_name FROM TV_CHANNEL AS T1 JOIN TV_SERIES AS T2 ON T1.id = T2.channel WHERE T2.episode = 'A Love of a Lifetime'",
        "repair_result": 1
    },
    {
        "idx": 624,
        "db_id": "tvshow",
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "evidence": "",
        "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "pred": "SELECT t1.series_name FROM TV_CHANNEL AS t1 JOIN TV_SERIES AS t2 ON t1.id = t2.channel WHERE t2.episode = 'A Love of a Lifetime'",
        "pred_result": 1,
        "repair_sql": "SELECT t1.series_name FROM TV_CHANNEL AS t1 JOIN TV_SERIES AS t2 ON t1.id = t2.channel WHERE t2.episode = 'A Love of a Lifetime'",
        "repair_result": 1
    },
    {
        "idx": 625,
        "db_id": "tvshow",
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "evidence": "",
        "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "pred": "SELECT T2.episode FROM TV_CHANNEL AS T1 JOIN TV_SERIES AS T2 ON T1.id = T2.channel WHERE T1.series_name = 'Sky Radio'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.episode FROM TV_CHANNEL AS T1 JOIN TV_SERIES AS T2 ON T1.id = T2.channel WHERE T1.series_name = 'Sky Radio'",
        "repair_result": 1
    },
    {
        "idx": 626,
        "db_id": "tvshow",
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "evidence": "",
        "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "pred": "SELECT T2.episode FROM TV_CHANNEL AS T1 JOIN TV_SERIES AS T2 ON T1.id = T2.channel WHERE T1.series_name = 'Sky Radio'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.episode FROM TV_CHANNEL AS T1 JOIN TV_SERIES AS T2 ON T1.id = T2.channel WHERE T1.series_name = 'Sky Radio'",
        "repair_result": 1
    },
    {
        "idx": 627,
        "db_id": "tvshow",
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "evidence": "",
        "gold": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "pred": "SELECT directed_by, COUNT(*) as num_cartoons FROM cartoon GROUP BY directed_by",
        "pred_result": 0,
        "repair_sql": "SELECT directed_by, COUNT(*) as num_cartoons FROM cartoon GROUP BY directed_by",
        "repair_result": 0
    },
    {
        "idx": 628,
        "db_id": "tvshow",
        "question": "How many cartoons did each director create?",
        "evidence": "",
        "gold": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "pred": "SELECT directed_by, COUNT(*) as cartoon_count FROM CARTOON GROUP BY directed_by",
        "pred_result": 0,
        "repair_sql": "SELECT directed_by, COUNT(*) as cartoon_count FROM CARTOON GROUP BY directed_by;",
        "repair_result": 0
    },
    {
        "idx": 629,
        "db_id": "tvshow",
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "evidence": "",
        "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "pred": "SELECT production_code, channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT production_code, channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 630,
        "db_id": "tvshow",
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "evidence": "",
        "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "pred": "SELECT production_code, channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT production_code, channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 631,
        "db_id": "tvshow",
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "evidence": "",
        "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "pred": "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 'yes';",
        "pred_result": 1,
        "repair_sql": "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 'yes';",
        "repair_result": 1
    },
    {
        "idx": 632,
        "db_id": "tvshow",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "evidence": "",
        "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "pred": "SELECT package_option, series_name FROM TV_CHANNEL WHERE hight_definition_tv = 'yes'",
        "pred_result": 1,
        "repair_sql": "SELECT package_option,        series_name FROM TV_CHANNEL WHERE hight_definition_tv = 'yes';",
        "repair_result": 1
    },
    {
        "idx": 633,
        "db_id": "tvshow",
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "evidence": "",
        "gold": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "pred": "SELECT DISTINCT T1.country FROM TV_CHANNEL AS T1 JOIN CARTOON AS T2 ON T1.id = T2.channel WHERE T2.written_by = 'Todd Casey'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.country FROM TV_CHANNEL AS T1 JOIN CARTOON AS T2 ON T1.id = T2.channel WHERE T2.written_by = 'Todd Casey'",
        "repair_result": 1
    },
    {
        "idx": 634,
        "db_id": "tvshow",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "evidence": "",
        "gold": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "pred": "SELECT DISTINCT T2.country FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T1.written_by = 'Todd Casey'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.country FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T1.written_by = 'Todd Casey'",
        "repair_result": 1
    },
    {
        "idx": 635,
        "db_id": "tvshow",
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "evidence": "",
        "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "pred": "SELECT DISTINCT country FROM TV_CHANNEL EXCEPT SELECT DISTINCT T2.country FROM CARTOON AS T1 JOIN TV_CHANNEL AS T2 ON T1.channel = T2.id WHERE T1.written_by = 'Todd Casey'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT country FROM TV_CHANNEL EXCEPT SELECT DISTINCT T2.country FROM CARTOON AS T1 JOIN TV_CHANNEL AS T2 ON T1.channel = T2.id WHERE T1.written_by = 'Todd Casey'",
        "repair_result": 1
    },
    {
        "idx": 636,
        "db_id": "tvshow",
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "evidence": "",
        "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "pred": "SELECT DISTINCT country FROM TV_CHANNEL EXCEPT SELECT DISTINCT T2.country FROM CARTOON AS T1 JOIN TV_CHANNEL AS T2 ON T1.channel = T2.id WHERE T1.written_by = 'Todd Casey'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT country FROM TV_CHANNEL EXCEPT SELECT DISTINCT T2.country FROM CARTOON AS T1 JOIN TV_CHANNEL AS T2 ON T1.channel = T2.id WHERE T1.written_by = 'Todd Casey'",
        "repair_result": 1
    },
    {
        "idx": 637,
        "db_id": "tvshow",
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "evidence": "",
        "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "pred": "SELECT series_name, country FROM TV_CHANNEL WHERE id IN (     SELECT channel     FROM CARTOON     WHERE directed_by = 'Ben Jones'     INTERSECT     SELECT channel     FROM CARTOON     WHERE directed_by = 'Michael Chang' )",
        "pred_result": 1,
        "repair_sql": "SELECT series_name, country FROM TV_CHANNEL WHERE id IN (     SELECT channel     FROM CARTOON     WHERE directed_by = 'Ben Jones'     INTERSECT     SELECT channel     FROM CARTOON     WHERE directed_by = 'Michael Chang' );",
        "repair_result": 1
    },
    {
        "idx": 638,
        "db_id": "tvshow",
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "evidence": "",
        "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "pred": "SELECT series_name, country FROM TV_CHANNEL WHERE id IN (     SELECT channel     FROM CARTOON     WHERE directed_by = 'Ben Jones'     INTERSECT     SELECT channel     FROM CARTOON     WHERE directed_by = 'Michael Chang' )",
        "pred_result": 1,
        "repair_sql": "SELECT series_name, country FROM TV_CHANNEL WHERE id IN (     SELECT channel     FROM CARTOON     WHERE directed_by = 'Ben Jones'     INTERSECT     SELECT channel     FROM CARTOON     WHERE directed_by = 'Michael Chang' );",
        "repair_result": 1
    },
    {
        "idx": 639,
        "db_id": "tvshow",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "evidence": "",
        "gold": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "pred": "SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English'",
        "pred_result": 1,
        "repair_sql": "SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English'",
        "repair_result": 1
    },
    {
        "idx": 640,
        "db_id": "tvshow",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "evidence": "",
        "gold": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "pred": "SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English'",
        "pred_result": 1,
        "repair_sql": "SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English';",
        "repair_result": 1
    },
    {
        "idx": 641,
        "db_id": "tvshow",
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "evidence": "",
        "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "pred": "SELECT id FROM TV_CHANNEL WHERE country IN (     SELECT country     FROM TV_CHANNEL     GROUP BY country     HAVING COUNT(*) > 2 );",
        "pred_result": 0,
        "repair_sql": "SELECT id FROM TV_CHANNEL WHERE country IN (     SELECT country     FROM TV_CHANNEL     GROUP BY country     HAVING COUNT(*) > 2 );",
        "repair_result": 0
    },
    {
        "idx": 642,
        "db_id": "tvshow",
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "evidence": "",
        "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "pred": "SELECT id FROM TV_CHANNEL GROUP BY id HAVING count(id) > 2",
        "pred_result": 0,
        "repair_sql": "SELECT id FROM TV_CHANNEL GROUP BY id HAVING count(id) > 2",
        "repair_result": 0
    },
    {
        "idx": 643,
        "db_id": "tvshow",
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "evidence": "",
        "gold": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "pred": "SELECT id FROM TV_CHANNEL EXCEPT SELECT channel FROM CARTOON WHERE directed_by = 'Ben Jones'",
        "pred_result": 1,
        "repair_sql": "SELECT id FROM TV_CHANNEL EXCEPT SELECT channel FROM CARTOON WHERE directed_by = 'Ben Jones'",
        "repair_result": 1
    },
    {
        "idx": 644,
        "db_id": "tvshow",
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "evidence": "",
        "gold": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "pred": "SELECT id FROM TV_CHANNEL EXCEPT SELECT channel FROM CARTOON WHERE directed_by = 'Ben Jones'",
        "pred_result": 1,
        "repair_sql": "SELECT id FROM TV_CHANNEL WHERE id NOT IN (     SELECT channel     FROM CARTOON     WHERE directed_by = 'Ben Jones' );",
        "repair_result": 1
    },
    {
        "idx": 645,
        "db_id": "tvshow",
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "evidence": "",
        "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "pred": "SELECT package_option FROM TV_CHANNEL EXCEPT SELECT T2.package_option FROM CARTOON AS T1 JOIN TV_CHANNEL AS T2 ON T1.channel = T2.id WHERE T1.directed_by = 'Ben Jones'",
        "pred_result": 0,
        "repair_sql": "SELECT package_option FROM TV_CHANNEL EXCEPT SELECT T2.package_option FROM CARTOON AS T1 JOIN TV_CHANNEL AS T2 ON T1.channel = T2.id WHERE T1.directed_by = 'Ben Jones'",
        "repair_result": 0
    },
    {
        "idx": 646,
        "db_id": "tvshow",
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "evidence": "",
        "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "pred": "SELECT package_option FROM TV_CHANNEL EXCEPT SELECT package_option FROM TV_CHANNEL AS T1 JOIN CARTOON AS T2 ON T1.id = T2.channel WHERE T2.directed_by = 'Ben Jones'",
        "pred_result": 0,
        "repair_sql": "SELECT package_option FROM TV_CHANNEL EXCEPT SELECT package_option FROM TV_CHANNEL AS T1 JOIN CARTOON AS T2 ON T1.id = T2.channel WHERE T2.directed_by = 'Ben Jones'",
        "repair_result": 0
    },
    {
        "idx": 647,
        "db_id": "poker_player",
        "question": "How many poker players are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM poker_player",
        "pred": "SELECT count(*) FROM poker_player",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM poker_player",
        "repair_result": 1
    },
    {
        "idx": 648,
        "db_id": "poker_player",
        "question": "Count the number of poker players.",
        "evidence": "",
        "gold": "SELECT count(*) FROM poker_player",
        "pred": "SELECT count(*) FROM poker_player",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM poker_player",
        "repair_result": 1
    },
    {
        "idx": 649,
        "db_id": "poker_player",
        "question": "List the earnings of poker players in descending order.",
        "evidence": "",
        "gold": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "pred": "SELECT earnings FROM poker_player ORDER BY earnings DESC",
        "pred_result": 1,
        "repair_sql": "SELECT earnings FROM poker_player ORDER BY earnings DESC;",
        "repair_result": 1
    },
    {
        "idx": 650,
        "db_id": "poker_player",
        "question": "What are the earnings of poker players, ordered descending by value?",
        "evidence": "",
        "gold": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "pred": "SELECT earnings FROM poker_player ORDER BY earnings DESC",
        "pred_result": 1,
        "repair_sql": "SELECT earnings FROM poker_player ORDER BY earnings DESC;",
        "repair_result": 1
    },
    {
        "idx": 651,
        "db_id": "poker_player",
        "question": "List the final tables made and the best finishes of poker players.",
        "evidence": "",
        "gold": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "pred": "SELECT final_table_made, best_finish FROM poker_player",
        "pred_result": 1,
        "repair_sql": "SELECT final_table_made,        best_finish FROM poker_player;",
        "repair_result": 1
    },
    {
        "idx": 652,
        "db_id": "poker_player",
        "question": "What are the final tables made and best finishes for all poker players?",
        "evidence": "",
        "gold": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "pred": "SELECT final_table_made, best_finish FROM POKER_PLAYER",
        "pred_result": 1,
        "repair_sql": "SELECT final_table_made, best_finish FROM POKER_PLAYER;",
        "repair_result": 1
    },
    {
        "idx": 653,
        "db_id": "poker_player",
        "question": "What is the average earnings of poker players?",
        "evidence": "",
        "gold": "SELECT avg(Earnings) FROM poker_player",
        "pred": "SELECT avg(earnings) FROM poker_player",
        "pred_result": 1,
        "repair_sql": "SELECT avg(earnings) FROM poker_player;",
        "repair_result": 1
    },
    {
        "idx": 654,
        "db_id": "poker_player",
        "question": "Return the average earnings across all poker players.",
        "evidence": "",
        "gold": "SELECT avg(Earnings) FROM poker_player",
        "pred": "SELECT avg(earnings) FROM poker_player",
        "pred_result": 1,
        "repair_sql": "SELECT avg(earnings) FROM poker_player;",
        "repair_result": 1
    },
    {
        "idx": 655,
        "db_id": "poker_player",
        "question": "What is the money rank of the poker player with the highest earnings?",
        "evidence": "",
        "gold": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "pred": "SELECT money_rank FROM POKER_PLAYER ORDER BY earnings DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT money_rank FROM POKER_PLAYER ORDER BY earnings DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 656,
        "db_id": "poker_player",
        "question": "Return the money rank of the player with the greatest earnings.",
        "evidence": "",
        "gold": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "pred": "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 657,
        "db_id": "poker_player",
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "evidence": "",
        "gold": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "pred": "SELECT max(final_table_made) FROM POKER_PLAYER WHERE earnings < 200000",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(final_table_made)  FROM POKER_PLAYER  WHERE earnings < 200000;",
        "repair_result": 1
    },
    {
        "idx": 658,
        "db_id": "poker_player",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "evidence": "",
        "gold": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "pred": "SELECT MAX(final_table_made) AS max_final_table_made FROM poker_player WHERE earnings < 200000",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(final_table_made) AS max_final_table_made FROM poker_player WHERE earnings < 200000;",
        "repair_result": 1
    },
    {
        "idx": 659,
        "db_id": "poker_player",
        "question": "What are the names of poker players?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "pred": "SELECT P.name FROM POKER_PLAYER AS PP JOIN PEOPLE AS P ON PP.people_id = P.people_id",
        "pred_result": 1,
        "repair_sql": "SELECT P.name FROM POKER_PLAYER AS PP JOIN PEOPLE AS P ON PP.people_id = P.people_id;",
        "repair_result": 1
    },
    {
        "idx": 660,
        "db_id": "poker_player",
        "question": "Return the names of all the poker players.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "pred": "SELECT P.name FROM POKER_PLAYER AS PP JOIN PEOPLE AS P ON PP.people_id = P.people_id",
        "pred_result": 1,
        "repair_sql": "SELECT P.name FROM POKER_PLAYER AS PP JOIN PEOPLE AS P ON PP.people_id = P.people_id;",
        "repair_result": 1
    },
    {
        "idx": 661,
        "db_id": "poker_player",
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "pred": "SELECT p.name FROM POKER_PLAYER AS pp JOIN PEOPLE AS p ON pp.people_id = p.people_id WHERE pp.earnings > 300000",
        "pred_result": 1,
        "repair_sql": "SELECT p.name FROM POKER_PLAYER AS pp JOIN PEOPLE AS p ON pp.people_id = p.people_id WHERE pp.earnings > 300000",
        "repair_result": 1
    },
    {
        "idx": 662,
        "db_id": "poker_player",
        "question": "Give the names of poker players who have earnings above 300000.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "pred": "SELECT P.name FROM POKER_PLAYER AS PP JOIN PEOPLE AS P ON PP.people_id = P.people_id WHERE PP.earnings > 300000",
        "pred_result": 1,
        "repair_sql": "SELECT P.name FROM POKER_PLAYER AS PP JOIN PEOPLE AS P ON PP.people_id = P.people_id WHERE PP.earnings > 300000",
        "repair_result": 1
    },
    {
        "idx": 663,
        "db_id": "poker_player",
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "pred": "SELECT PEOPLE.name FROM POKER_PLAYER JOIN PEOPLE ON POKER_PLAYER.people_id = PEOPLE.people_id ORDER BY POKER_PLAYER.final_table_made ASC",
        "pred_result": 1,
        "repair_sql": "SELECT PEOPLE.name FROM POKER_PLAYER JOIN PEOPLE ON POKER_PLAYER.people_id = PEOPLE.people_id ORDER BY POKER_PLAYER.final_table_made ASC;",
        "repair_result": 1
    },
    {
        "idx": 664,
        "db_id": "poker_player",
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "pred": "SELECT T2.name FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.final_table_made ASC",
        "pred_result": 1,
        "repair_sql": "SELECT T2.name FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.final_table_made ASC;",
        "repair_result": 1
    },
    {
        "idx": 665,
        "db_id": "poker_player",
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "evidence": "",
        "gold": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "pred": "SELECT birth_date FROM PEOPLE WHERE people_id = (   SELECT people_id   FROM POKER_PLAYER   ORDER BY earnings ASC   LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT p.birth_date FROM PEOPLE p JOIN POKER_PLAYER pp ON p.people_id = pp.people_id ORDER BY pp.earnings ASC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 666,
        "db_id": "poker_player",
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "evidence": "",
        "gold": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "pred": "SELECT P.birth_date FROM POKER_PLAYER AS PP JOIN PEOPLE AS P ON PP.people_id = P.people_id ORDER BY PP.earnings ASC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT P.birth_date FROM POKER_PLAYER AS PP JOIN PEOPLE AS P ON PP.people_id = P.people_id ORDER BY PP.earnings ASC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 667,
        "db_id": "poker_player",
        "question": "What is the money rank of the tallest poker player?",
        "evidence": "",
        "gold": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "pred": "SELECT money_rank FROM POKER_PLAYER WHERE people_id = (     SELECT people_id     FROM PEOPLE     ORDER BY height DESC     LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT money_rank FROM POKER_PLAYER WHERE people_id = (     SELECT people_id     FROM PEOPLE     ORDER BY height DESC     LIMIT 1 );",
        "repair_result": 1
    },
    {
        "idx": 668,
        "db_id": "poker_player",
        "question": "Return the money rank of the poker player with the greatest height.",
        "evidence": "",
        "gold": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "pred": "SELECT money_rank FROM POKER_PLAYER WHERE people_id = (     SELECT people_id     FROM PEOPLE     ORDER BY height DESC     LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT POKER_PLAYER.money_rank FROM POKER_PLAYER JOIN PEOPLE ON POKER_PLAYER.people_id = PEOPLE.people_id ORDER BY PEOPLE.height DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 669,
        "db_id": "poker_player",
        "question": "What is the average earnings of poker players with height higher than 200?",
        "evidence": "",
        "gold": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "pred": "SELECT AVG(p1.earnings) AS average_earnings FROM POKER_PLAYER AS p1 JOIN PEOPLE AS p2 ON p1.people_id = p2.people_id WHERE p2.height > 200;",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(p1.earnings) AS average_earnings FROM POKER_PLAYER AS p1 JOIN PEOPLE AS p2 ON p1.people_id = p2.people_id WHERE p2.height > 200;",
        "repair_result": 1
    },
    {
        "idx": 670,
        "db_id": "poker_player",
        "question": "Give average earnings of poker players who are taller than 200.",
        "evidence": "",
        "gold": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "pred": "SELECT AVG(p1.earnings) AS average_earnings FROM POKER_PLAYER AS p1 JOIN PEOPLE AS p2 ON p1.people_id = p2.people_id WHERE p2.height > 200;",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(p1.earnings) AS average_earnings FROM POKER_PLAYER AS p1 JOIN PEOPLE AS p2 ON p1.people_id = p2.people_id WHERE p2.height > 200;",
        "repair_result": 1
    },
    {
        "idx": 671,
        "db_id": "poker_player",
        "question": "What are the names of poker players in descending order of earnings?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "pred": "SELECT T2.name FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.earnings DESC",
        "pred_result": 1,
        "repair_sql": "SELECT T2.name FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.earnings DESC",
        "repair_result": 1
    },
    {
        "idx": 672,
        "db_id": "poker_player",
        "question": "Return the names of poker players sorted by their earnings descending.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "pred": "SELECT T2.name FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.earnings DESC",
        "pred_result": 1,
        "repair_sql": "SELECT T2.name FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.earnings DESC;",
        "repair_result": 1
    },
    {
        "idx": 673,
        "db_id": "poker_player",
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "evidence": "",
        "gold": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "pred": "SELECT nationality, count(*) FROM people GROUP BY nationality",
        "pred_result": 1,
        "repair_sql": "SELECT nationality, count(*) FROM people GROUP BY nationality;",
        "repair_result": 1
    },
    {
        "idx": 674,
        "db_id": "poker_player",
        "question": "How many people are there of each nationality?",
        "evidence": "",
        "gold": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "pred": "SELECT nationality, count(*) FROM people GROUP BY nationality",
        "pred_result": 1,
        "repair_sql": "SELECT nationality, count(*) FROM people GROUP BY nationality;",
        "repair_result": 1
    },
    {
        "idx": 675,
        "db_id": "poker_player",
        "question": "What is the most common nationality of people?",
        "evidence": "",
        "gold": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT nationality FROM PEOPLE GROUP BY nationality ORDER BY count(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT nationality FROM PEOPLE GROUP BY nationality ORDER BY count(*) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 676,
        "db_id": "poker_player",
        "question": "Give the nationality that is most common across all people.",
        "evidence": "",
        "gold": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT nationality FROM PEOPLE GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT nationality FROM PEOPLE GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 677,
        "db_id": "poker_player",
        "question": "What are the nationalities that are shared by at least two people?",
        "evidence": "",
        "gold": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "pred": "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;",
        "repair_result": 1
    },
    {
        "idx": 678,
        "db_id": "poker_player",
        "question": "Return the nationalities for which there are two or more people.",
        "evidence": "",
        "gold": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "pred": "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2",
        "repair_result": 1
    },
    {
        "idx": 679,
        "db_id": "poker_player",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "evidence": "",
        "gold": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "pred": "SELECT name, birth_date FROM PEOPLE ORDER BY name ASC",
        "pred_result": 1,
        "repair_sql": "SELECT name,        birth_date FROM PEOPLE ORDER BY name ASC;",
        "repair_result": 1
    },
    {
        "idx": 680,
        "db_id": "poker_player",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "evidence": "",
        "gold": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "pred": "SELECT name, birth_date FROM PEOPLE ORDER BY name ASC",
        "pred_result": 1,
        "repair_sql": "SELECT name,        birth_date FROM PEOPLE ORDER BY name ASC;",
        "repair_result": 1
    },
    {
        "idx": 681,
        "db_id": "poker_player",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "evidence": "",
        "gold": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "pred": "SELECT name FROM PEOPLE WHERE nationality != 'Russia'",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM PEOPLE WHERE nationality != 'Russia'",
        "repair_result": 1
    },
    {
        "idx": 682,
        "db_id": "poker_player",
        "question": "What are the names of people who are not from Russia?",
        "evidence": "",
        "gold": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "pred": "SELECT name FROM PEOPLE WHERE nationality != 'Russia'",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM PEOPLE WHERE nationality != 'Russia'",
        "repair_result": 1
    },
    {
        "idx": 683,
        "db_id": "poker_player",
        "question": "List the names of people that are not poker players.",
        "evidence": "",
        "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "pred": "SELECT name FROM PEOPLE EXCEPT SELECT P.name FROM PEOPLE AS P JOIN POKER_PLAYER AS PP ON P.people_id = PP.people_id",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM PEOPLE EXCEPT SELECT name FROM PEOPLE JOIN POKER_PLAYER ON PEOPLE.people_id = POKER_PLAYER.people_id;",
        "repair_result": 1
    },
    {
        "idx": 684,
        "db_id": "poker_player",
        "question": "What are the names of people who do not play poker?",
        "evidence": "",
        "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "pred": "SELECT name FROM PEOPLE EXCEPT SELECT P.name FROM PEOPLE AS P JOIN POKER_PLAYER AS PP ON P.people_id = PP.people_id",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM PEOPLE EXCEPT SELECT PEOPLE.name FROM PEOPLE JOIN POKER_PLAYER ON PEOPLE.people_id = POKER_PLAYER.people_id;",
        "repair_result": 1
    },
    {
        "idx": 685,
        "db_id": "poker_player",
        "question": "How many distinct nationalities are there?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT Nationality) FROM people",
        "pred": "SELECT count(DISTINCT nationality) FROM PEOPLE",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT nationality) FROM PEOPLE;",
        "repair_result": 1
    },
    {
        "idx": 686,
        "db_id": "poker_player",
        "question": "Count the number of different nationalities.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT Nationality) FROM people",
        "pred": "SELECT count(DISTINCT nationality) FROM people",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT nationality) FROM people",
        "repair_result": 1
    },
    {
        "idx": 687,
        "db_id": "voter_1",
        "question": "How many states are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM area_code_state",
        "pred": "SELECT count(DISTINCT state) FROM AREA_CODE_STATE",
        "pred_result": 0,
        "repair_sql": "SELECT count(DISTINCT state) FROM AREA_CODE_STATE;",
        "repair_result": 0
    },
    {
        "idx": 688,
        "db_id": "voter_1",
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "evidence": "",
        "gold": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "pred": "SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC",
        "pred_result": 1,
        "repair_sql": "SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;",
        "repair_result": 1
    },
    {
        "idx": 689,
        "db_id": "voter_1",
        "question": "List the vote ids, phone numbers and states of all votes.",
        "evidence": "",
        "gold": "SELECT vote_id ,  phone_number ,  state FROM votes",
        "pred": "SELECT vote_id, phone_number, state FROM votes;",
        "pred_result": 1,
        "repair_sql": "SELECT vote_id,        phone_number,        state FROM votes;",
        "repair_result": 1
    },
    {
        "idx": 690,
        "db_id": "voter_1",
        "question": "What are the maximum and minimum values of area codes?",
        "evidence": "",
        "gold": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
        "pred": "SELECT max(area_code), min(area_code) FROM AREA_CODE_STATE",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;",
        "repair_result": 1
    },
    {
        "idx": 691,
        "db_id": "voter_1",
        "question": "What is last date created of votes from the state 'CA'?",
        "evidence": "",
        "gold": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "pred": "SELECT created FROM VOTES WHERE state = 'CA' ORDER BY created DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT created FROM VOTES WHERE state = 'CA' ORDER BY created DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 692,
        "db_id": "voter_1",
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "evidence": "",
        "gold": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "pred": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "pred_result": 1,
        "repair_sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "repair_result": 1
    },
    {
        "idx": 693,
        "db_id": "voter_1",
        "question": "What are the distinct states and create time of all votes?",
        "evidence": "",
        "gold": "SELECT DISTINCT state ,  created FROM votes",
        "pred": "SELECT DISTINCT state, created FROM VOTES",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT state, created FROM VOTES;",
        "repair_result": 1
    },
    {
        "idx": 694,
        "db_id": "voter_1",
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "evidence": "",
        "gold": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "pred": "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (     SELECT contestant_number     FROM VOTES     GROUP BY contestant_number     HAVING COUNT(vote_id) >= 2 )",
        "pred_result": 1,
        "repair_sql": "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (     SELECT contestant_number     FROM VOTES     GROUP BY contestant_number     HAVING COUNT(vote_id) >= 2 )",
        "repair_result": 1
    },
    {
        "idx": 695,
        "db_id": "voter_1",
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "evidence": "",
        "gold": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "pred": "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number = (     SELECT contestant_number     FROM VOTES     GROUP BY contestant_number     ORDER BY COUNT(*) ASC     LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN (     SELECT contestant_number     FROM VOTES     GROUP BY contestant_number     ORDER BY COUNT(*) ASC     LIMIT 1 ) v ON c.contestant_number = v.contestant_number;",
        "repair_result": 1
    },
    {
        "idx": 696,
        "db_id": "voter_1",
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "evidence": "",
        "gold": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "pred": "SELECT count(*) FROM VOTES WHERE state IN ('NY', 'CA')",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM VOTES WHERE state IN ('NY', 'CA');",
        "repair_result": 1
    },
    {
        "idx": 697,
        "db_id": "voter_1",
        "question": "How many contestants did not get voted?",
        "evidence": "",
        "gold": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "pred": "SELECT COUNT(*) FROM CONTESTANTS EXCEPT SELECT COUNT(DISTINCT contestant_number) FROM VOTES",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM CONTESTANTS c LEFT JOIN VOTES v ON c.contestant_number = v.contestant_number WHERE v.contestant_number IS NULL;",
        "repair_result": 1
    },
    {
        "idx": 698,
        "db_id": "voter_1",
        "question": "What is the area code in which the most voters voted?",
        "evidence": "",
        "gold": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT SUBSTR(phone_number, 1, 3) AS area_code FROM VOTES GROUP BY area_code ORDER BY count(*) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT SUBSTR(phone_number, 1, 3) AS area_code FROM VOTES GROUP BY area_code ORDER BY count(*) DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 699,
        "db_id": "voter_1",
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "evidence": "",
        "gold": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "pred": "SELECT V.created, V.state, V.phone_number FROM VOTES AS V JOIN CONTESTANTS AS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling'",
        "pred_result": 1,
        "repair_sql": "SELECT V.created, V.state, V.phone_number FROM VOTES AS V JOIN CONTESTANTS AS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling'",
        "repair_result": 1
    },
    {
        "idx": 700,
        "db_id": "voter_1",
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "evidence": "",
        "gold": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "pred": "SELECT area_code FROM AREA_CODE_STATE WHERE area_code IN (     SELECT SUBSTR(phone_number, 1, 3) AS area_code     FROM VOTES     WHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling')     INTERSECT     SELECT SUBSTR(phone_number, 1, 3) AS area_code     FROM VOTES     WHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Kelly Clauss') )",
        "pred_result": 0,
        "repair_sql": "SELECT area_code FROM AREA_CODE_STATE WHERE area_code IN (     SELECT SUBSTR(phone_number, 1, 3) AS area_code     FROM VOTES     WHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling')     INTERSECT     SELECT SUBSTR(phone_number, 1, 3) AS area_code     FROM VOTES     WHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Kelly Clauss') )",
        "repair_result": 0
    },
    {
        "idx": 701,
        "db_id": "voter_1",
        "question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "evidence": "",
        "gold": "select contestant_name from contestants where contestant_name like \"%al%\"",
        "pred": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'",
        "pred_result": 1,
        "repair_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'",
        "repair_result": 1
    },
    {
        "idx": 702,
        "db_id": "world_1",
        "question": "What are the names of all the countries that became independent after 1950?",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "pred": "SELECT name FROM country WHERE indepyear > 1950",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM country WHERE indepyear > 1950;",
        "repair_result": 1
    },
    {
        "idx": 703,
        "db_id": "world_1",
        "question": "Give the names of the nations that were founded after 1950.",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "pred": "SELECT name FROM country WHERE indepyear > 1950",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM country WHERE indepyear > 1950;",
        "repair_result": 1
    },
    {
        "idx": 704,
        "db_id": "world_1",
        "question": "How many countries have a republic as their form of government?",
        "evidence": "",
        "gold": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "pred": "SELECT count(*) FROM COUNTRY WHERE governmentform = 'Republic'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM COUNTRY WHERE governmentform = 'Republic'",
        "repair_result": 1
    },
    {
        "idx": 705,
        "db_id": "world_1",
        "question": "How many countries have governments that are republics?",
        "evidence": "",
        "gold": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "pred": "SELECT count(*) FROM country WHERE governmentform LIKE '%Republic%'",
        "pred_result": 0,
        "repair_sql": "SELECT count(*) FROM country WHERE governmentform LIKE '%Republic%'",
        "repair_result": 0
    },
    {
        "idx": 706,
        "db_id": "world_1",
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "evidence": "",
        "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "pred": "SELECT sum(surfacearea) FROM country WHERE region = 'Caribbean'",
        "pred_result": 1,
        "repair_sql": "SELECT sum(surfacearea) FROM country WHERE region = 'Caribbean';",
        "repair_result": 1
    },
    {
        "idx": 707,
        "db_id": "world_1",
        "question": "How much surface area do the countires in the Carribean cover together?",
        "evidence": "",
        "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "pred": "SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean'",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';",
        "repair_result": 1
    },
    {
        "idx": 708,
        "db_id": "world_1",
        "question": "Which continent is Anguilla in?",
        "evidence": "",
        "gold": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "pred": "SELECT continent FROM COUNTRY WHERE name = 'Anguilla'",
        "pred_result": 1,
        "repair_sql": "SELECT continent FROM COUNTRY WHERE name = 'Anguilla'",
        "repair_result": 1
    },
    {
        "idx": 709,
        "db_id": "world_1",
        "question": "What is the continent name which Anguilla belongs to?",
        "evidence": "",
        "gold": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "pred": "SELECT continent FROM COUNTRY WHERE name = 'Anguilla'",
        "pred_result": 1,
        "repair_sql": "SELECT continent FROM COUNTRY WHERE name = 'Anguilla'",
        "repair_result": 1
    },
    {
        "idx": 710,
        "db_id": "world_1",
        "question": "Which region is the city Kabul located in?",
        "evidence": "",
        "gold": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "pred": "SELECT T2.region FROM CITY AS T1 JOIN COUNTRY AS T2 ON T1.countrycode = T2.code WHERE T1.name = 'Kabul'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.region FROM CITY AS T1 JOIN COUNTRY AS T2 ON T1.countrycode = T2.code WHERE T1.name = 'Kabul'",
        "repair_result": 1
    },
    {
        "idx": 711,
        "db_id": "world_1",
        "question": "What region is Kabul in?",
        "evidence": "",
        "gold": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "pred": "SELECT T2.region FROM CITY AS T1 JOIN COUNTRY AS T2 ON T1.countrycode = T2.code WHERE T1.name = 'Kabul';",
        "pred_result": 1,
        "repair_sql": "SELECT T2.region FROM CITY AS T1 JOIN COUNTRY AS T2 ON T1.countrycode = T2.code WHERE T1.name = 'Kabul';",
        "repair_result": 1
    },
    {
        "idx": 712,
        "db_id": "world_1",
        "question": "Which language is the most popular in Aruba?",
        "evidence": "",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "pred": "SELECT language FROM COUNTRYLANGUAGE WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT language FROM COUNTRYLANGUAGE WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 713,
        "db_id": "world_1",
        "question": "What language is predominantly spoken in Aruba?",
        "evidence": "",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "pred": "SELECT language FROM COUNTRYLANGUAGE WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT language FROM COUNTRYLANGUAGE WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 714,
        "db_id": "world_1",
        "question": "What are the population and life expectancies in Brazil?",
        "evidence": "",
        "gold": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "pred": "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
        "pred_result": 1,
        "repair_sql": "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';",
        "repair_result": 1
    },
    {
        "idx": 715,
        "db_id": "world_1",
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "evidence": "",
        "gold": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "pred": "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
        "pred_result": 1,
        "repair_sql": "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
        "repair_result": 1
    },
    {
        "idx": 716,
        "db_id": "world_1",
        "question": "What are the region and population of Angola?",
        "evidence": "",
        "gold": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "pred": "SELECT region, population FROM country WHERE name = 'Angola'",
        "pred_result": 0,
        "repair_sql": "SELECT region, population FROM country WHERE name = 'Angola'",
        "repair_result": 0
    },
    {
        "idx": 717,
        "db_id": "world_1",
        "question": "What region does Angola belong to and what is its population?",
        "evidence": "",
        "gold": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "pred": "SELECT region, population FROM country WHERE name = 'Angola'",
        "pred_result": 0,
        "repair_sql": "SELECT region, population FROM country WHERE name = 'Angola'",
        "repair_result": 0
    },
    {
        "idx": 718,
        "db_id": "world_1",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "evidence": "",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "pred": "SELECT avg(lifeexpectancy) FROM country WHERE region = 'Central Africa'",
        "pred_result": 1,
        "repair_sql": "SELECT avg(lifeexpectancy) FROM country WHERE region = 'Central Africa';",
        "repair_result": 1
    },
    {
        "idx": 719,
        "db_id": "world_1",
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "evidence": "",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "pred": "SELECT avg(lifeexpectancy)  FROM country  WHERE region = 'Central Africa'",
        "pred_result": 1,
        "repair_sql": "SELECT avg(lifeexpectancy)  FROM country  WHERE region = 'Central Africa'",
        "repair_result": 1
    },
    {
        "idx": 720,
        "db_id": "world_1",
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "pred": "SELECT name FROM country WHERE lifeexpectancy = ( SELECT MIN(lifeexpectancy) FROM country WHERE continent = 'Asia' )",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 721,
        "db_id": "world_1",
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "pred": "SELECT name FROM country WHERE continent = 'Asia' AND lifeexpectancy = (   SELECT MIN(lifeexpectancy)   FROM country   WHERE continent = 'Asia' );",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 722,
        "db_id": "world_1",
        "question": "What is the total population and maximum GNP in Asia?",
        "evidence": "",
        "gold": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "pred": "SELECT sum(population) as total_population, max(gnp) as max_gnp FROM country WHERE continent = 'Asia'",
        "pred_result": 1,
        "repair_sql": "SELECT sum(population) as total_population, max(gnp) as max_gnp FROM country WHERE continent = 'Asia';",
        "repair_result": 1
    },
    {
        "idx": 723,
        "db_id": "world_1",
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "evidence": "",
        "gold": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "pred": "SELECT SUM(population) AS total_population, MAX(gnp) AS largest_gnp FROM COUNTRY WHERE continent = 'Asia'",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(population) AS total_population, MAX(gnp) AS largest_gnp  FROM COUNTRY  WHERE continent = 'Asia';",
        "repair_result": 1
    },
    {
        "idx": 724,
        "db_id": "world_1",
        "question": "What is the average life expectancy in African countries that are republics?",
        "evidence": "",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "pred": "SELECT avg(lifeexpectancy)  FROM country  WHERE continent = 'Africa'  AND governmentform = 'Republic'",
        "pred_result": 1,
        "repair_sql": "SELECT avg(lifeexpectancy)  FROM country  WHERE continent = 'Africa'  AND governmentform = 'Republic';",
        "repair_result": 1
    },
    {
        "idx": 725,
        "db_id": "world_1",
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "evidence": "",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "pred": "SELECT avg(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic'",
        "pred_result": 1,
        "repair_sql": "SELECT avg(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic';",
        "repair_result": 1
    },
    {
        "idx": 726,
        "db_id": "world_1",
        "question": "What is the total surface area of the continents Asia and Europe?",
        "evidence": "",
        "gold": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "pred": "SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe')",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe');",
        "repair_result": 1
    },
    {
        "idx": 727,
        "db_id": "world_1",
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "evidence": "",
        "gold": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "pred": "SELECT SUM(surfacearea) AS total_surface_area FROM country WHERE continent IN ('Asia', 'Europe');",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(surfacearea) AS total_surface_area FROM country WHERE continent IN ('Asia', 'Europe');",
        "repair_result": 1
    },
    {
        "idx": 728,
        "db_id": "world_1",
        "question": "How many people live in Gelderland district?",
        "evidence": "",
        "gold": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "pred": "SELECT SUM(population) AS total_population FROM city WHERE district = 'Gelderland'",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(population) AS total_population FROM city WHERE district = 'Gelderland';",
        "repair_result": 1
    },
    {
        "idx": 729,
        "db_id": "world_1",
        "question": "What is the total population of Gelderland district?",
        "evidence": "",
        "gold": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "pred": "SELECT sum(population) FROM city WHERE district = 'Gelderland'",
        "pred_result": 1,
        "repair_sql": "SELECT sum(population) FROM city WHERE district = 'Gelderland';",
        "repair_result": 1
    },
    {
        "idx": 730,
        "db_id": "world_1",
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "evidence": "",
        "gold": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "pred": "SELECT avg(gnp) AS average_gnp, sum(population) AS total_population FROM country WHERE governmentform = 'US territory'",
        "pred_result": 0,
        "repair_sql": "SELECT avg(gnp) AS average_gnp, sum(population) AS total_population FROM country WHERE governmentform = 'US territory';",
        "repair_result": 0
    },
    {
        "idx": 731,
        "db_id": "world_1",
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "evidence": "",
        "gold": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "pred": "SELECT avg(gnp) AS mean_gnp, sum(population) AS total_population FROM country WHERE governmentform LIKE '%US Territory%'",
        "pred_result": 1,
        "repair_sql": "SELECT avg(gnp) AS mean_gnp, sum(population) AS total_population FROM country WHERE governmentform LIKE '%US Territory%'",
        "repair_result": 1
    },
    {
        "idx": 732,
        "db_id": "world_1",
        "question": "How many unique languages are spoken in the world?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "pred": "SELECT count(DISTINCT language) FROM COUNTRYLANGUAGE",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT language) FROM COUNTRYLANGUAGE;",
        "repair_result": 1
    },
    {
        "idx": 733,
        "db_id": "world_1",
        "question": "What is the number of distinct languages used around the world?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "pred": "SELECT count(DISTINCT language) FROM COUNTRYLANGUAGE",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT language) FROM COUNTRYLANGUAGE;",
        "repair_result": 1
    },
    {
        "idx": 734,
        "db_id": "world_1",
        "question": "How many type of governments are in Africa?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "pred": "SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa';",
        "repair_result": 1
    },
    {
        "idx": 735,
        "db_id": "world_1",
        "question": "How many different forms of governments are there in Africa?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "pred": "SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa';",
        "repair_result": 1
    },
    {
        "idx": 736,
        "db_id": "world_1",
        "question": "What is the total number of languages used in Aruba?",
        "evidence": "",
        "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "pred": "SELECT count(*) FROM countrylanguage WHERE countrycode = 'ABW'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM countrylanguage WHERE countrycode = 'ABW'",
        "repair_result": 1
    },
    {
        "idx": 737,
        "db_id": "world_1",
        "question": "How many languages are spoken in Aruba?",
        "evidence": "",
        "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "pred": "SELECT count(*) FROM COUNTRYLANGUAGE WHERE countrycode = 'ABW'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM COUNTRYLANGUAGE WHERE countrycode = 'ABW'",
        "repair_result": 1
    },
    {
        "idx": 738,
        "db_id": "world_1",
        "question": "How many official languages does Afghanistan have?",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "pred": "SELECT count(*) FROM COUNTRYLANGUAGE WHERE countrycode = 'AFG' AND isofficial = 'T'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM COUNTRYLANGUAGE WHERE countrycode = 'AFG' AND isofficial = 'T'",
        "repair_result": 1
    },
    {
        "idx": 739,
        "db_id": "world_1",
        "question": "How many official languages are spoken in Afghanistan?",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "pred": "SELECT count(*) FROM COUNTRYLANGUAGE WHERE countrycode = 'AFG' AND isofficial = 'T'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM COUNTRYLANGUAGE WHERE countrycode = 'AFG' AND isofficial = 'T'",
        "repair_result": 1
    },
    {
        "idx": 740,
        "db_id": "world_1",
        "question": "What is name of the country that speaks the largest number of languages?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT name FROM country WHERE code = (   SELECT countrycode   FROM countrylanguage   GROUP BY countrycode   ORDER BY count(*) DESC   LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT name FROM country WHERE code = (   SELECT countrycode   FROM countrylanguage   GROUP BY countrycode   ORDER BY count(*) DESC   LIMIT 1 );",
        "repair_result": 0
    },
    {
        "idx": 741,
        "db_id": "world_1",
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT c.name FROM COUNTRY AS c JOIN COUNTRYLANGUAGE AS cl ON c.code = cl.countrycode GROUP BY c.name ORDER BY COUNT(cl.language) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT c.name FROM COUNTRY AS c JOIN COUNTRYLANGUAGE AS cl ON c.code = cl.countrycode GROUP BY c.name ORDER BY COUNT(cl.language) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 742,
        "db_id": "world_1",
        "question": "Which continent has the most diverse languages?",
        "evidence": "",
        "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT T2.continent FROM COUNTRYLANGUAGE AS T1 JOIN COUNTRY AS T2 ON T1.countrycode = T2.code GROUP BY T2.continent ORDER BY COUNT(DISTINCT T1.language) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T2.continent FROM COUNTRYLANGUAGE AS T1 JOIN COUNTRY AS T2 ON T1.countrycode = T2.code GROUP BY T2.continent ORDER BY COUNT(DISTINCT T1.language) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 743,
        "db_id": "world_1",
        "question": "Which continent speaks the most languages?",
        "evidence": "",
        "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT T2.continent FROM COUNTRYLANGUAGE AS T1 JOIN COUNTRY AS T2 ON T1.countrycode = T2.code GROUP BY T2.continent ORDER BY COUNT(DISTINCT T1.language) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T2.continent FROM COUNTRYLANGUAGE AS T1 JOIN COUNTRY AS T2 ON T1.countrycode = T2.code GROUP BY T2.continent ORDER BY COUNT(DISTINCT T1.language) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 744,
        "db_id": "world_1",
        "question": "How many countries speak both English and Dutch?",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "pred": "SELECT count(*) FROM (SELECT countrycode FROM countrylanguage WHERE language = 'English' INTERSECT SELECT countrycode FROM countrylanguage WHERE language = 'Dutch')",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English'     INTERSECT     SELECT countrycode     FROM countrylanguage     WHERE language = 'Dutch' )",
        "repair_result": 1
    },
    {
        "idx": 745,
        "db_id": "world_1",
        "question": "What is the number of nations that use English and Dutch?",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "pred": "SELECT COUNT(DISTINCT countrycode) AS num_nations FROM countrylanguage WHERE language = 'English' INTERSECT SELECT COUNT(DISTINCT countrycode) AS num_nations FROM countrylanguage WHERE language = 'Dutch'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT cl1.countrycode) AS num_nations FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.countrycode = cl2.countrycode WHERE cl1.language = 'English' AND cl2.language = 'Dutch';",
        "repair_result": 1
    },
    {
        "idx": 746,
        "db_id": "world_1",
        "question": "What are the names of nations speak both English and French?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "pred": "SELECT name FROM COUNTRY WHERE code IN (     SELECT countrycode     FROM COUNTRYLANGUAGE     WHERE language = 'English'     INTERSECT     SELECT countrycode     FROM COUNTRYLANGUAGE     WHERE language = 'French' )",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM COUNTRY WHERE code IN (     SELECT countrycode     FROM COUNTRYLANGUAGE     WHERE language = 'English'     INTERSECT     SELECT countrycode     FROM COUNTRYLANGUAGE     WHERE language = 'French' )",
        "repair_result": 1
    },
    {
        "idx": 747,
        "db_id": "world_1",
        "question": "Give the names of nations that speak both English and French.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "pred": "SELECT name FROM country WHERE code IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' AND isofficial = 'T'     INTERSECT     SELECT countrycode     FROM countrylanguage     WHERE language = 'French' AND isofficial = 'T' )",
        "pred_result": 0,
        "repair_sql": "SELECT name FROM country WHERE code IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' AND isofficial = 'T'     INTERSECT     SELECT countrycode     FROM countrylanguage     WHERE language = 'French' AND isofficial = 'T' )",
        "repair_result": 0
    },
    {
        "idx": 748,
        "db_id": "world_1",
        "question": "What are the names of nations where both English and French are official languages?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "pred": "SELECT name FROM country WHERE code IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' AND isofficial = 'T'     INTERSECT     SELECT countrycode     FROM countrylanguage     WHERE language = 'French' AND isofficial = 'T' )",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM country WHERE code IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' AND isofficial = 'T'     INTERSECT     SELECT countrycode     FROM countrylanguage     WHERE language = 'French' AND isofficial = 'T' );",
        "repair_result": 1
    },
    {
        "idx": 749,
        "db_id": "world_1",
        "question": "Give the names of countries with English and French as official languages.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "pred": "SELECT name FROM COUNTRY WHERE code IN (     SELECT countrycode     FROM COUNTRYLANGUAGE     WHERE language = 'English' AND isofficial = 'T'     INTERSECT     SELECT countrycode     FROM COUNTRYLANGUAGE     WHERE language = 'French' AND isofficial = 'T' )",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM COUNTRY WHERE code IN (     SELECT countrycode     FROM COUNTRYLANGUAGE     WHERE language = 'English' AND isofficial = 'T'     INTERSECT     SELECT countrycode     FROM COUNTRYLANGUAGE     WHERE language = 'French' AND isofficial = 'T' )",
        "repair_result": 1
    },
    {
        "idx": 750,
        "db_id": "world_1",
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "evidence": "",
        "gold": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "pred": "SELECT count(DISTINCT t2.continent) FROM COUNTRYLANGUAGE AS t1 JOIN COUNTRY AS t2 ON t1.countrycode = t2.code WHERE t1.language = 'Chinese'",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT t2.continent) FROM COUNTRYLANGUAGE AS t1 JOIN COUNTRY AS t2 ON t1.countrycode = t2.code WHERE t1.language = 'Chinese'",
        "repair_result": 1
    },
    {
        "idx": 751,
        "db_id": "world_1",
        "question": "How many continents speak Chinese?",
        "evidence": "",
        "gold": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "pred": "SELECT count(DISTINCT c.continent) FROM COUNTRYLANGUAGE cl JOIN COUNTRY c ON cl.countrycode = c.code WHERE cl.language = 'Chinese'",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT c.continent) FROM COUNTRYLANGUAGE cl JOIN COUNTRY c ON cl.countrycode = c.code WHERE cl.language = 'Chinese'",
        "repair_result": 1
    },
    {
        "idx": 752,
        "db_id": "world_1",
        "question": "What are the regions that use English or Dutch?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "pred": "SELECT DISTINCT T2.region FROM COUNTRYLANGUAGE AS T1 JOIN COUNTRY AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'English' OR T1.language = 'Dutch'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.region FROM COUNTRYLANGUAGE AS T1 JOIN COUNTRY AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'English' OR T1.language = 'Dutch';",
        "repair_result": 1
    },
    {
        "idx": 753,
        "db_id": "world_1",
        "question": "Which regions speak Dutch or English?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "pred": "SELECT DISTINCT T2.region FROM COUNTRYLANGUAGE AS T1 JOIN COUNTRY AS T2 ON T1.countrycode = T2.code WHERE T1.language IN ('Dutch', 'English')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.region FROM COUNTRYLANGUAGE AS T1 JOIN COUNTRY AS T2 ON T1.countrycode = T2.code WHERE T1.language IN ('Dutch', 'English')",
        "repair_result": 1
    },
    {
        "idx": 754,
        "db_id": "world_1",
        "question": "What are the countries where either English or Dutch is the official language ?",
        "evidence": "",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "pred": "SELECT DISTINCT T2.name FROM COUNTRYLANGUAGE AS T1 JOIN COUNTRY AS T2 ON T1.countrycode = T2.code WHERE (T1.language = 'English' OR T1.language = 'Dutch') AND T1.isofficial = 'T';",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T2.name FROM COUNTRYLANGUAGE AS T1 JOIN COUNTRY AS T2 ON T1.countrycode = T2.code WHERE (T1.language = 'English' OR T1.language = 'Dutch') AND T1.isofficial = 'T';",
        "repair_result": 0
    },
    {
        "idx": 755,
        "db_id": "world_1",
        "question": "Which countries have either English or Dutch as an official language?",
        "evidence": "",
        "gold": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "pred": "SELECT DISTINCT C.name FROM COUNTRY AS C JOIN COUNTRYLANGUAGE AS CL ON C.code = CL.countrycode WHERE (CL.language = 'English' OR CL.language = 'Dutch') AND CL.isofficial = 'T'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT C.name FROM COUNTRY AS C JOIN COUNTRYLANGUAGE AS CL ON C.code = CL.countrycode WHERE (CL.language = 'English' OR CL.language = 'Dutch') AND CL.isofficial = 'T'",
        "repair_result": 0
    },
    {
        "idx": 756,
        "db_id": "world_1",
        "question": "Which language is the most popular on the Asian continent?",
        "evidence": "",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "pred": "SELECT language FROM countrylanguage WHERE countrycode IN (     SELECT code     FROM country     WHERE continent = 'Asia' ) GROUP BY language ORDER BY sum(percentage) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT cl.language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.continent = 'Asia' GROUP BY cl.language ORDER BY SUM(cl.percentage) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 757,
        "db_id": "world_1",
        "question": "What is the language that is used by the largest number of Asian nations?",
        "evidence": "",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "pred": "SELECT language FROM COUNTRYLANGUAGE WHERE countrycode IN (     SELECT code     FROM COUNTRY     WHERE continent = 'Asia' ) GROUP BY language ORDER BY count(countrycode) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT language FROM COUNTRYLANGUAGE WHERE countrycode IN (     SELECT code     FROM COUNTRY     WHERE continent = 'Asia' ) GROUP BY language ORDER BY COUNT(countrycode) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 758,
        "db_id": "world_1",
        "question": "Which languages are spoken by only one country in republic governments?",
        "evidence": "",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "pred": "SELECT language FROM countrylanguage WHERE countrycode IN (     SELECT code     FROM country     WHERE governmentform = 'Republic' ) GROUP BY language HAVING COUNT(DISTINCT countrycode) = 1",
        "pred_result": 1,
        "repair_sql": "SELECT language FROM countrylanguage WHERE countrycode IN (     SELECT code     FROM country     WHERE governmentform = 'Republic' ) GROUP BY language HAVING COUNT(DISTINCT countrycode) = 1 ORDER BY language ASC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 759,
        "db_id": "world_1",
        "question": "What languages are only used by a single country with a republic government?",
        "evidence": "",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "pred": "SELECT language FROM countrylanguage WHERE countrycode IN (     SELECT code     FROM country     WHERE governmentform = 'Republic' ) GROUP BY language HAVING COUNT(DISTINCT countrycode) = 1",
        "pred_result": 1,
        "repair_sql": "CREATE TABLE COUNTRYLANGUAGE(     countrycode char(3) not null,     language char(30) not null,     isofficial text not null default 'f',     percentage float,     primary key (countrycode, language),     constraint countrylanguage_ibfk_1 foreign key(countrycode) references COUNTRY(code) );  CREATE TABLE COUNTRY(     code char(3) not null,     name char(50),     continent char(50),     region char(50),     surfacearea float,     indepyear int,     population int,     lifeexpectancy float,     gnp float,     gnpold float,     localname char(50),     governmentform char(45) not null,     headofstate char(50),     capital int,     code2 char(2),     primary key (code) );",
        "repair_result": "table COUNTRYLANGUAGE already exists"
    },
    {
        "idx": 760,
        "db_id": "world_1",
        "question": "Find the city with the largest population that uses English.",
        "evidence": "",
        "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "pred": "SELECT name FROM city WHERE population = (   SELECT max(population)   FROM city   WHERE countrycode IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English'   ) )",
        "pred_result": 0,
        "repair_sql": "SELECT name FROM city WHERE countrycode IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' ) ORDER BY population DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 761,
        "db_id": "world_1",
        "question": "What is the most populace city that speaks English?",
        "evidence": "",
        "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "pred": "SELECT name FROM city WHERE population = (     SELECT max(population)     FROM city     WHERE countrycode IN (         SELECT countrycode         FROM countrylanguage         WHERE language = 'English'     ) )",
        "pred_result": 0,
        "repair_sql": "SELECT name FROM city WHERE countrycode IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' ) ORDER BY population DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 762,
        "db_id": "world_1",
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "evidence": "",
        "gold": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "pred": "SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' AND surfacearea = (     SELECT MAX(surfacearea)     FROM country     WHERE continent = 'Asia' )",
        "pred_result": 1,
        "repair_sql": "SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 763,
        "db_id": "world_1",
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "evidence": "",
        "gold": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "pred": "SELECT name, population, lifeexpectancy FROM country WHERE surfacearea = (     SELECT MAX(surfacearea)     FROM country     WHERE continent = 'Asia' )",
        "pred_result": 1,
        "repair_sql": "SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 764,
        "db_id": "world_1",
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "evidence": "",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "pred": "SELECT avg(lifeexpectancy) FROM country WHERE code IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English'     AND isofficial = 'F' )",
        "pred_result": 0,
        "repair_sql": "SELECT avg(lifeexpectancy) FROM country WHERE code IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English'     AND isofficial = 'f' );",
        "repair_result": 0
    },
    {
        "idx": 765,
        "db_id": "world_1",
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "evidence": "",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "pred": "SELECT avg(lifeexpectancy) FROM COUNTRY WHERE code NOT IN (SELECT countrycode FROM COUNTRYLANGUAGE WHERE language = 'English' AND isofficial = 'T')",
        "pred_result": 1,
        "repair_sql": "SELECT avg(lifeexpectancy) FROM COUNTRY WHERE code NOT IN (SELECT countrycode FROM COUNTRYLANGUAGE WHERE language = 'English' AND isofficial = 'T')",
        "repair_result": 1
    },
    {
        "idx": 766,
        "db_id": "world_1",
        "question": "What is the total number of people living in the nations that do not use English?",
        "evidence": "",
        "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "pred": "SELECT SUM(population) AS total_population FROM COUNTRY WHERE code NOT IN (     SELECT countrycode     FROM COUNTRYLANGUAGE     WHERE language = 'English' )",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(population) AS total_population FROM COUNTRY WHERE code NOT IN (     SELECT countrycode     FROM COUNTRYLANGUAGE     WHERE language = 'English' );",
        "repair_result": 1
    },
    {
        "idx": 767,
        "db_id": "world_1",
        "question": "How many people live in countries that do not speak English?",
        "evidence": "",
        "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "pred": "SELECT SUM(population) AS total_population FROM country WHERE code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' )",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(population) AS total_population FROM country WHERE code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' )",
        "repair_result": 1
    },
    {
        "idx": 768,
        "db_id": "world_1",
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "evidence": "",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "pred": "SELECT CL.language FROM COUNTRY AS C JOIN COUNTRYLANGUAGE AS CL ON C.code = CL.countrycode WHERE C.headofstate = 'Beatrix' AND CL.isofficial = 'T'",
        "pred_result": 1,
        "repair_sql": "SELECT CL.language FROM COUNTRY AS C JOIN COUNTRYLANGUAGE AS CL ON C.code = CL.countrycode WHERE C.headofstate = 'Beatrix' AND CL.isofficial = 'T'",
        "repair_result": 1
    },
    {
        "idx": 769,
        "db_id": "world_1",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "evidence": "",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "pred": "SELECT CL.language FROM COUNTRY AS C JOIN COUNTRYLANGUAGE AS CL ON C.code = CL.countrycode WHERE C.headofstate = 'Beatrix' AND CL.isofficial = 'T'",
        "pred_result": 1,
        "repair_sql": "SELECT CL.language FROM COUNTRY AS C JOIN COUNTRYLANGUAGE AS CL ON C.code = CL.countrycode WHERE C.headofstate = 'Beatrix' AND CL.isofficial = 'T'",
        "repair_result": 1
    },
    {
        "idx": 770,
        "db_id": "world_1",
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "pred": "SELECT count(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE cl.isofficial = 'T' AND c.indepyear < 1930",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE cl.isofficial = 'T' AND c.indepyear < 1930",
        "repair_result": 1
    },
    {
        "idx": 771,
        "db_id": "world_1",
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "pred": "SELECT COUNT(DISTINCT CL.language) AS total_official_languages FROM COUNTRY AS C JOIN COUNTRYLANGUAGE AS CL ON C.code = CL.countrycode WHERE C.indepyear < 1930 AND CL.isofficial = 'T';",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT CL.language) AS total_official_languages FROM COUNTRY AS C JOIN COUNTRYLANGUAGE AS CL ON C.code = CL.countrycode WHERE C.indepyear < 1930 AND CL.isofficial = 'T';",
        "repair_result": 1
    },
    {
        "idx": 772,
        "db_id": "world_1",
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "pred": "SELECT name FROM country WHERE surfacearea > (SELECT max(surfacearea) FROM country WHERE continent = 'Europe')",
        "pred_result": 0,
        "repair_sql": "SELECT name FROM country WHERE surfacearea > (SELECT max(surfacearea) FROM country WHERE continent = 'Europe');",
        "repair_result": 0
    },
    {
        "idx": 773,
        "db_id": "world_1",
        "question": "Which countries have greater area than that of any country in Europe?",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "pred": "SELECT name FROM country WHERE surfacearea > ANY (SELECT surfacearea FROM country WHERE continent = 'Europe')",
        "pred_result": "near \"SELECT\": syntax error",
        "repair_sql": "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe');",
        "repair_result": 0
    },
    {
        "idx": 774,
        "db_id": "world_1",
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
        "pred": "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
        "pred_result": 0,
        "repair_sql": "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
        "repair_result": 0
    },
    {
        "idx": 775,
        "db_id": "world_1",
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
        "pred": "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population)                   FROM country                   WHERE continent = 'Asia');",
        "repair_result": 1
    },
    {
        "idx": 776,
        "db_id": "world_1",
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
        "pred": "SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')",
        "repair_result": 1
    },
    {
        "idx": 777,
        "db_id": "world_1",
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
        "pred": "SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')",
        "pred_result": 0,
        "repair_sql": "SELECT name FROM country WHERE continent = 'Asia' AND population >  (SELECT MAX(population)  FROM country  WHERE continent = 'Africa')",
        "repair_result": 0
    },
    {
        "idx": 778,
        "db_id": "world_1",
        "question": "What are the country codes for countries that do not speak English?",
        "evidence": "",
        "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "pred": "SELECT countrycode FROM COUNTRYLANGUAGE EXCEPT SELECT countrycode FROM COUNTRYLANGUAGE WHERE language = 'English'",
        "pred_result": 1,
        "repair_sql": "SELECT countrycode FROM COUNTRYLANGUAGE EXCEPT SELECT countrycode FROM COUNTRYLANGUAGE WHERE language = 'English';",
        "repair_result": 1
    },
    {
        "idx": 779,
        "db_id": "world_1",
        "question": "Return the country codes for countries that do not speak English.",
        "evidence": "",
        "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "pred": "SELECT countrycode FROM countrylanguage WHERE countrycode NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' )",
        "pred_result": 1,
        "repair_sql": "SELECT countrycode FROM countrylanguage WHERE countrycode NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' )",
        "repair_result": 1
    },
    {
        "idx": 780,
        "db_id": "world_1",
        "question": "What are the country codes of countries where people use languages other than English?",
        "evidence": "",
        "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "pred": "SELECT countrycode FROM countrylanguage WHERE countrycode NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
        "pred_result": 0,
        "repair_sql": "SELECT countrycode FROM countrylanguage WHERE countrycode NOT IN (SELECT countrycode  FROM countrylanguage  WHERE language = 'English')",
        "repair_result": 0
    },
    {
        "idx": 781,
        "db_id": "world_1",
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "evidence": "",
        "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "pred": "SELECT countrycode FROM countrylanguage WHERE countrycode NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
        "pred_result": 0,
        "repair_sql": "SELECT countrycode FROM countrylanguage WHERE countrycode NOT IN (SELECT countrycode  FROM countrylanguage  WHERE language = 'English')",
        "repair_result": 0
    },
    {
        "idx": 782,
        "db_id": "world_1",
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "evidence": "",
        "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "pred": "SELECT code FROM country WHERE governmentform != 'Republic' EXCEPT SELECT countrycode FROM countrylanguage WHERE language = 'English'",
        "pred_result": 1,
        "repair_sql": "SELECT code FROM country WHERE governmentform != 'Republic' EXCEPT SELECT countrycode FROM countrylanguage WHERE language = 'English'",
        "repair_result": 1
    },
    {
        "idx": 783,
        "db_id": "world_1",
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "evidence": "",
        "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "pred": "SELECT code FROM COUNTRY EXCEPT SELECT countrycode FROM COUNTRYLANGUAGE WHERE language = 'English' INTERSECT SELECT code FROM COUNTRY WHERE governmentform != 'Republic'",
        "pred_result": 1,
        "repair_sql": "SELECT code FROM COUNTRY WHERE code NOT IN (     SELECT countrycode     FROM COUNTRYLANGUAGE     WHERE language = 'English' ) AND governmentform != 'Republic';",
        "repair_result": 1
    },
    {
        "idx": 784,
        "db_id": "world_1",
        "question": "Which cities are in European countries where English is not the official language?",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "pred": "SELECT name FROM city WHERE countrycode IN (     SELECT code     FROM country     WHERE continent = 'Europe'     EXCEPT     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' AND isofficial = 'T' )",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM city WHERE countrycode IN (     SELECT code     FROM country     WHERE continent = 'Europe'     EXCEPT     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' AND isofficial = 'T' )",
        "repair_result": 1
    },
    {
        "idx": 785,
        "db_id": "world_1",
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "pred": "SELECT name FROM city WHERE countrycode IN (     SELECT countrycode     FROM country     WHERE continent = 'Europe' ) EXCEPT SELECT name FROM city WHERE countrycode IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' AND isofficial = 'T' )",
        "pred_result": 0,
        "repair_sql": "SELECT city.name FROM city WHERE city.countrycode IN (     SELECT country.code     FROM country     WHERE country.continent = 'Europe' ) EXCEPT SELECT city.name FROM city WHERE city.countrycode IN (     SELECT countrylanguage.countrycode     FROM countrylanguage     WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T' )",
        "repair_result": 1
    },
    {
        "idx": 786,
        "db_id": "world_1",
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "evidence": "",
        "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "pred": "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T';",
        "repair_result": 0
    },
    {
        "idx": 787,
        "db_id": "world_1",
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "evidence": "",
        "gold": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "pred": "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
        "repair_result": 1
    },
    {
        "idx": 788,
        "db_id": "world_1",
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "evidence": "",
        "gold": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "pred": "SELECT name, indepyear, surfacearea FROM country ORDER BY population ASC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT name, indepyear, surfacearea  FROM country  ORDER BY population ASC  LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 789,
        "db_id": "world_1",
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "evidence": "",
        "gold": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "pred": "SELECT name, indepyear, surfacearea FROM country WHERE population = (     SELECT MIN(population)     FROM country );",
        "pred_result": 0,
        "repair_sql": "SELECT name, indepyear, surfacearea FROM country ORDER BY population ASC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 790,
        "db_id": "world_1",
        "question": "What are the population, name and leader of the country with the largest area?",
        "evidence": "",
        "gold": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "pred": "SELECT population, name, headofstate FROM country WHERE surfacearea = (SELECT MAX(surfacearea) FROM country)",
        "pred_result": 0,
        "repair_sql": "SELECT population, name, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 791,
        "db_id": "world_1",
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "evidence": "",
        "gold": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "pred": "SELECT name, population, headofstate FROM COUNTRY WHERE surfacearea = (SELECT MAX(surfacearea) FROM COUNTRY);",
        "pred_result": 1,
        "repair_sql": "SELECT name, population, headofstate FROM COUNTRY ORDER BY surfacearea DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 792,
        "db_id": "world_1",
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "evidence": "",
        "gold": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "pred": "SELECT C.name, COUNT(CL.language) AS num_languages FROM COUNTRY AS C JOIN COUNTRYLANGUAGE AS CL ON C.code = CL.countrycode GROUP BY C.name HAVING num_languages >= 3",
        "pred_result": 0,
        "repair_sql": "SELECT C.name, COUNT(CL.language) AS num_languages FROM COUNTRY AS C JOIN COUNTRYLANGUAGE AS CL ON C.code = CL.countrycode GROUP BY C.name HAVING num_languages >= 3;",
        "repair_result": 0
    },
    {
        "idx": 793,
        "db_id": "world_1",
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "evidence": "",
        "gold": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "pred": "SELECT C.name, COUNT(CL.language) AS language_count FROM COUNTRY AS C JOIN COUNTRYLANGUAGE AS CL ON C.code = CL.countrycode GROUP BY C.code HAVING COUNT(CL.language) > 2",
        "pred_result": 0,
        "repair_sql": "SELECT C.name, COUNT(CL.language) AS language_count FROM COUNTRY AS C JOIN COUNTRYLANGUAGE AS CL ON C.code = CL.countrycode GROUP BY C.name HAVING COUNT(CL.language) > 2",
        "repair_result": 0
    },
    {
        "idx": 794,
        "db_id": "world_1",
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "evidence": "",
        "gold": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "pred": "SELECT district, COUNT(*) as city_count FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district",
        "pred_result": 0,
        "repair_sql": "SELECT district, COUNT(*) as city_count FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;",
        "repair_result": 0
    },
    {
        "idx": 795,
        "db_id": "world_1",
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "evidence": "",
        "gold": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "pred": "SELECT district, COUNT(*) as city_count FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district",
        "pred_result": 0,
        "repair_sql": "SELECT district, COUNT(*) as city_count FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;",
        "repair_result": 0
    },
    {
        "idx": 796,
        "db_id": "world_1",
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "evidence": "",
        "gold": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "pred": "SELECT governmentform, SUM(population) as total_population FROM country WHERE governmentform IN (   SELECT governmentform   FROM country   GROUP BY governmentform   HAVING AVG(lifeexpectancy) > 72 ) GROUP BY governmentform",
        "pred_result": 0,
        "repair_sql": "SELECT governmentform, SUM(population) as total_population FROM country WHERE governmentform IN (   SELECT governmentform   FROM country   GROUP BY governmentform   HAVING AVG(lifeexpectancy) > 72 ) GROUP BY governmentform;",
        "repair_result": 0
    },
    {
        "idx": 797,
        "db_id": "world_1",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "evidence": "",
        "gold": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "pred": "SELECT governmentform, SUM(population) as total_population FROM country WHERE governmentform IN (     SELECT governmentform     FROM country     GROUP BY governmentform     HAVING AVG(lifeexpectancy) > 72 ) GROUP BY governmentform",
        "pred_result": 0,
        "repair_sql": "SELECT governmentform, SUM(population) as total_population FROM country WHERE governmentform IN (     SELECT governmentform     FROM country     GROUP BY governmentform     HAVING AVG(lifeexpectancy) > 72 ) GROUP BY governmentform;",
        "repair_result": 0
    },
    {
        "idx": 798,
        "db_id": "world_1",
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "evidence": "",
        "gold": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "pred": "SELECT continent, avg(lifeexpectancy) AS avg_lifeexpectancy, sum(population) AS total_population FROM country GROUP BY continent HAVING avg_lifeexpectancy < 72",
        "pred_result": 0,
        "repair_sql": "SELECT continent, avg(lifeexpectancy) AS avg_lifeexpectancy, sum(population) AS total_population FROM country GROUP BY continent HAVING avg(lifeexpectancy) < 72",
        "repair_result": 0
    },
    {
        "idx": 799,
        "db_id": "world_1",
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "evidence": "",
        "gold": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "pred": "SELECT continent, SUM(population) AS total_population, AVG(lifeexpectancy) AS average_life_expectancy FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72",
        "pred_result": 0,
        "repair_sql": "SELECT continent, SUM(population) AS total_population, AVG(lifeexpectancy) AS average_life_expectancy FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;",
        "repair_result": 0
    },
    {
        "idx": 800,
        "db_id": "world_1",
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "evidence": "",
        "gold": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "pred": "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
        "pred_result": 1,
        "repair_sql": "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;",
        "repair_result": 1
    },
    {
        "idx": 801,
        "db_id": "world_1",
        "question": "Return the names and surface areas of the 5 largest countries.",
        "evidence": "",
        "gold": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "pred": "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
        "pred_result": 1,
        "repair_sql": "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;",
        "repair_result": 1
    },
    {
        "idx": 802,
        "db_id": "world_1",
        "question": "What are names of countries with the top 3 largest population?",
        "evidence": "",
        "gold": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "pred": "SELECT name FROM country ORDER BY population DESC LIMIT 3",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM country ORDER BY population DESC LIMIT 3;",
        "repair_result": 1
    },
    {
        "idx": 803,
        "db_id": "world_1",
        "question": "Return the names of the 3 most populated countries.",
        "evidence": "",
        "gold": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "pred": "SELECT name FROM country ORDER BY population DESC LIMIT 3",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM country ORDER BY population DESC LIMIT 3;",
        "repair_result": 1
    },
    {
        "idx": 804,
        "db_id": "world_1",
        "question": "What are the names of the nations with the 3 lowest populations?",
        "evidence": "",
        "gold": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "pred": "SELECT name FROM country ORDER BY population ASC LIMIT 3",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM country ORDER BY population ASC LIMIT 3;",
        "repair_result": 1
    },
    {
        "idx": 805,
        "db_id": "world_1",
        "question": "Return the names of the 3 countries with the fewest people.",
        "evidence": "",
        "gold": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "pred": "SELECT name FROM COUNTRY ORDER BY population ASC LIMIT 3",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM COUNTRY ORDER BY population ASC LIMIT 3;",
        "repair_result": 1
    },
    {
        "idx": 806,
        "db_id": "world_1",
        "question": "how many countries are in Asia?",
        "evidence": "",
        "gold": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "pred": "SELECT count(*) FROM country WHERE continent = 'Asia'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM country WHERE continent = 'Asia'",
        "repair_result": 1
    },
    {
        "idx": 807,
        "db_id": "world_1",
        "question": "Count the number of countries in Asia.",
        "evidence": "",
        "gold": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "pred": "SELECT count(*) FROM country WHERE continent = 'Asia'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM country WHERE continent = 'Asia'",
        "repair_result": 1
    },
    {
        "idx": 808,
        "db_id": "world_1",
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "pred": "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;",
        "repair_result": 1
    },
    {
        "idx": 809,
        "db_id": "world_1",
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "evidence": "",
        "gold": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "pred": "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;",
        "repair_result": 1
    },
    {
        "idx": 810,
        "db_id": "world_1",
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "evidence": "",
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "pred": "SELECT sum(population) as total_population, avg(surfacearea) as average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000",
        "pred_result": 0,
        "repair_sql": "SELECT sum(population) as total_population, avg(surfacearea) as average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000",
        "repair_result": 0
    },
    {
        "idx": 811,
        "db_id": "world_1",
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "evidence": "",
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "pred": "SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_surfacearea FROM country WHERE continent = 'North America' AND surfacearea > 3000",
        "pred_result": 0,
        "repair_sql": "SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_surfacearea FROM country WHERE continent = 'North America' AND surfacearea > 3000;",
        "repair_result": 0
    },
    {
        "idx": 812,
        "db_id": "world_1",
        "question": "What are the cities whose population is between 160000 and 900000?",
        "evidence": "",
        "gold": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "pred": "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;",
        "repair_result": 1
    },
    {
        "idx": 813,
        "db_id": "world_1",
        "question": "Return the names of cities that have a population between 160000 and 900000 .",
        "evidence": "",
        "gold": "select name from city where population between 160000 and 900000",
        "pred": "SELECT name FROM CITY WHERE population BETWEEN 160000 AND 900000",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM CITY WHERE population BETWEEN 160000 AND 900000;",
        "repair_result": 1
    },
    {
        "idx": 814,
        "db_id": "world_1",
        "question": "Which language is spoken by the largest number of countries?",
        "evidence": "",
        "gold": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT language FROM COUNTRYLANGUAGE GROUP BY language ORDER BY count(DISTINCT countrycode) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT language FROM COUNTRYLANGUAGE GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 815,
        "db_id": "world_1",
        "question": "Give the language that is spoken in the most countries.",
        "evidence": "",
        "gold": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT language FROM COUNTRYLANGUAGE GROUP BY language ORDER BY count(DISTINCT countrycode) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT language FROM COUNTRYLANGUAGE GROUP BY language ORDER BY count(DISTINCT countrycode) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 816,
        "db_id": "world_1",
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "evidence": "",
        "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "pred": "SELECT countrycode, language FROM countrylanguage WHERE (countrycode, percentage) IN (     SELECT countrycode, MAX(percentage)     FROM countrylanguage     GROUP BY countrycode )",
        "pred_result": 0,
        "repair_sql": "SELECT cl.countrycode, cl.language FROM countrylanguage cl JOIN (     SELECT countrycode, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) AS subquery ON cl.countrycode = subquery.countrycode AND cl.percentage = subquery.max_percentage;",
        "repair_result": 0
    },
    {
        "idx": 817,
        "db_id": "world_1",
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "evidence": "",
        "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "pred": "SELECT countrycode, language FROM COUNTRYLANGUAGE AS CL1 WHERE percentage = (     SELECT MAX(percentage)     FROM COUNTRYLANGUAGE AS CL2     WHERE CL1.countrycode = CL2.countrycode )",
        "pred_result": 0,
        "repair_sql": "SELECT CL1.countrycode, CL1.language FROM COUNTRYLANGUAGE AS CL1 WHERE (CL1.countrycode, CL1.percentage) IN (     SELECT CL2.countrycode, MAX(CL2.percentage)     FROM COUNTRYLANGUAGE AS CL2     GROUP BY CL2.countrycode );",
        "repair_result": 0
    },
    {
        "idx": 818,
        "db_id": "world_1",
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "evidence": "",
        "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "pred": "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND percentage = (     SELECT MAX(percentage)     FROM countrylanguage     WHERE language = 'Spanish'     GROUP BY countrycode )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT cl1.countrycode) FROM countrylanguage cl1 WHERE cl1.language = 'Spanish' ORDER BY cl1.percentage DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 819,
        "db_id": "world_1",
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "evidence": "",
        "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "pred": "SELECT count(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish' AND countrycode = countrylanguage.countrycode)",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish'   AND percentage = (SELECT MAX(percentage)                     FROM countrylanguage AS cl2                     WHERE cl2.countrycode = countrylanguage.countrycode);",
        "repair_result": 0
    },
    {
        "idx": 820,
        "db_id": "world_1",
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "evidence": "",
        "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "pred": "SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND percentage = (     SELECT MAX(percentage)     FROM countrylanguage     WHERE language = 'Spanish' )",
        "pred_result": 0,
        "repair_sql": "SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' ORDER BY percentage DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 821,
        "db_id": "world_1",
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "evidence": "",
        "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "pred": "SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish')",
        "pred_result": 0,
        "repair_sql": "SELECT countrycode FROM countrylanguage cl1 WHERE language = 'Spanish' AND percentage = (     SELECT MAX(cl2.percentage)     FROM countrylanguage cl2     WHERE cl2.countrycode = cl1.countrycode )",
        "repair_result": 0
    },
    {
        "idx": 822,
        "db_id": "orchestra",
        "question": "How many conductors are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM conductor",
        "pred": "SELECT count(*) FROM conductor",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM conductor;",
        "repair_result": 1
    },
    {
        "idx": 823,
        "db_id": "orchestra",
        "question": "Count the number of conductors.",
        "evidence": "",
        "gold": "SELECT count(*) FROM conductor",
        "pred": "SELECT count(*) FROM conductor",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM conductor",
        "repair_result": 1
    },
    {
        "idx": 824,
        "db_id": "orchestra",
        "question": "List the names of conductors in ascending order of age.",
        "evidence": "",
        "gold": "SELECT Name FROM conductor ORDER BY Age ASC",
        "pred": "SELECT name FROM conductor ORDER BY age ASC",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM conductor ORDER BY age ASC;",
        "repair_result": 1
    },
    {
        "idx": 825,
        "db_id": "orchestra",
        "question": "What are the names of conductors, ordered by age?",
        "evidence": "",
        "gold": "SELECT Name FROM conductor ORDER BY Age ASC",
        "pred": "SELECT name FROM conductor ORDER BY age",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM conductor ORDER BY age;",
        "repair_result": 1
    },
    {
        "idx": 826,
        "db_id": "orchestra",
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "evidence": "",
        "gold": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "pred": "SELECT name FROM conductor WHERE nationality != 'USA'",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM conductor WHERE nationality != 'USA'",
        "repair_result": 1
    },
    {
        "idx": 827,
        "db_id": "orchestra",
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "evidence": "",
        "gold": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "pred": "SELECT name FROM conductor WHERE nationality != 'USA'",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM conductor WHERE nationality != 'USA'",
        "repair_result": 1
    },
    {
        "idx": 828,
        "db_id": "orchestra",
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "evidence": "",
        "gold": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "pred": "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC",
        "pred_result": 1,
        "repair_sql": "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;",
        "repair_result": 1
    },
    {
        "idx": 829,
        "db_id": "orchestra",
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "evidence": "",
        "gold": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "pred": "SELECT record_company FROM ORCHESTRA ORDER BY year_of_founded DESC",
        "pred_result": 1,
        "repair_sql": "SELECT record_company FROM ORCHESTRA ORDER BY year_of_founded DESC;",
        "repair_result": 1
    },
    {
        "idx": 830,
        "db_id": "orchestra",
        "question": "What is the average attendance of shows?",
        "evidence": "",
        "gold": "SELECT avg(Attendance) FROM SHOW",
        "pred": "SELECT avg(attendance) FROM show",
        "pred_result": 1,
        "repair_sql": "SELECT avg(attendance) FROM show;",
        "repair_result": 1
    },
    {
        "idx": 831,
        "db_id": "orchestra",
        "question": "Return the average attendance across all shows.",
        "evidence": "",
        "gold": "SELECT avg(Attendance) FROM SHOW",
        "pred": "SELECT avg(attendance) FROM show",
        "pred_result": 1,
        "repair_sql": "SELECT avg(attendance) FROM show;",
        "repair_result": 1
    },
    {
        "idx": 832,
        "db_id": "orchestra",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "evidence": "",
        "gold": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "pred": "SELECT max(CAST(REPLACE(share, '%', '') AS REAL)), min(CAST(REPLACE(share, '%', '') AS REAL)) FROM PERFORMANCE WHERE type != 'Live final'",
        "pred_result": 0,
        "repair_sql": "SELECT max(CAST(REPLACE(share, '%', '') AS REAL)), min(CAST(REPLACE(share, '%', '') AS REAL)) FROM PERFORMANCE WHERE type != 'Live final'",
        "repair_result": 0
    },
    {
        "idx": 833,
        "db_id": "orchestra",
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "evidence": "",
        "gold": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "pred": "SELECT max(share), min(share) FROM performance WHERE type != 'Live final'",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(share) AS max_share, MIN(share) AS min_share FROM performance WHERE type != 'Live final';",
        "repair_result": 1
    },
    {
        "idx": 834,
        "db_id": "orchestra",
        "question": "How many different nationalities do conductors have?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT Nationality) FROM conductor",
        "pred": "SELECT count(DISTINCT nationality) FROM conductor",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT nationality) FROM conductor;",
        "repair_result": 1
    },
    {
        "idx": 835,
        "db_id": "orchestra",
        "question": "Count the number of different nationalities of conductors.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT Nationality) FROM conductor",
        "pred": "SELECT count(DISTINCT nationality) FROM conductor",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT nationality) FROM conductor;",
        "repair_result": 1
    },
    {
        "idx": 836,
        "db_id": "orchestra",
        "question": "List names of conductors in descending order of years of work.",
        "evidence": "",
        "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "pred": "SELECT name FROM conductor ORDER BY year_of_work DESC",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM conductor ORDER BY year_of_work DESC;",
        "repair_result": 1
    },
    {
        "idx": 837,
        "db_id": "orchestra",
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "evidence": "",
        "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "pred": "SELECT name FROM conductor ORDER BY year_of_work DESC",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM conductor ORDER BY year_of_work DESC;",
        "repair_result": 1
    },
    {
        "idx": 838,
        "db_id": "orchestra",
        "question": "List the name of the conductor with the most years of work.",
        "evidence": "",
        "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "pred": "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 839,
        "db_id": "orchestra",
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "evidence": "",
        "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "pred": "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 840,
        "db_id": "orchestra",
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "evidence": "",
        "gold": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "pred": "SELECT C.name, O.orchestra FROM CONDUCTOR AS C JOIN ORCHESTRA AS O ON C.conductor_id = O.conductor_id",
        "pred_result": 1,
        "repair_sql": "SELECT C.name, O.orchestra FROM CONDUCTOR AS C JOIN ORCHESTRA AS O ON C.conductor_id = O.conductor_id;",
        "repair_result": 1
    },
    {
        "idx": 841,
        "db_id": "orchestra",
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "evidence": "",
        "gold": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "pred": "SELECT C.name, O.orchestra FROM CONDUCTOR AS C JOIN ORCHESTRA AS O ON C.conductor_id = O.conductor_id",
        "pred_result": 1,
        "repair_sql": "SELECT C.name, O.orchestra FROM CONDUCTOR AS C JOIN ORCHESTRA AS O ON C.conductor_id = O.conductor_id;",
        "repair_result": 1
    },
    {
        "idx": 842,
        "db_id": "orchestra",
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "pred": "SELECT name FROM CONDUCTOR WHERE conductor_id IN (     SELECT conductor_id     FROM ORCHESTRA     GROUP BY conductor_id     HAVING COUNT(orchestra_id) > 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM CONDUCTOR WHERE conductor_id IN (     SELECT conductor_id     FROM ORCHESTRA     GROUP BY conductor_id     HAVING COUNT(orchestra_id) > 1 )",
        "repair_result": 1
    },
    {
        "idx": 843,
        "db_id": "orchestra",
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "pred": "SELECT name FROM conductor WHERE conductor_id IN (     SELECT conductor_id     FROM orchestra     GROUP BY conductor_id     HAVING COUNT(orchestra_id) > 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT conductor_name FROM conductor WHERE conductor_id IN (     SELECT conductor_id     FROM orchestra     GROUP BY conductor_id     HAVING COUNT(orchestra_id) > 1 )",
        "repair_result": "no such column: conductor_name"
    },
    {
        "idx": 844,
        "db_id": "orchestra",
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT C.name FROM CONDUCTOR AS C JOIN ORCHESTRA AS O ON C.conductor_id = O.conductor_id GROUP BY C.conductor_id ORDER BY COUNT(O.orchestra_id) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT C.name FROM CONDUCTOR AS C JOIN ORCHESTRA AS O ON C.conductor_id = O.conductor_id GROUP BY C.conductor_id ORDER BY COUNT(O.orchestra_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 845,
        "db_id": "orchestra",
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT C.name FROM CONDUCTOR AS C JOIN ORCHESTRA AS O ON C.conductor_id = O.conductor_id GROUP BY C.conductor_id ORDER BY COUNT(O.orchestra_id) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT C.name FROM CONDUCTOR AS C JOIN ORCHESTRA AS O ON C.conductor_id = O.conductor_id GROUP BY C.conductor_id, C.name ORDER BY COUNT(O.orchestra_id) DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 846,
        "db_id": "orchestra",
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "pred": "SELECT C.name FROM CONDUCTOR AS C JOIN ORCHESTRA AS O ON C.conductor_id = O.conductor_id WHERE O.year_of_founded > 2008",
        "pred_result": 1,
        "repair_sql": "SELECT C.name FROM CONDUCTOR AS C JOIN ORCHESTRA AS O ON C.conductor_id = O.conductor_id WHERE O.year_of_founded > 2008;",
        "repair_result": 1
    },
    {
        "idx": 847,
        "db_id": "orchestra",
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "pred": "SELECT C.name FROM CONDUCTOR AS C JOIN ORCHESTRA AS O ON C.conductor_id = O.conductor_id WHERE O.year_of_founded > 2008",
        "pred_result": 1,
        "repair_sql": "SELECT C.name FROM CONDUCTOR AS C JOIN ORCHESTRA AS O ON C.conductor_id = O.conductor_id WHERE O.year_of_founded > 2008",
        "repair_result": 1
    },
    {
        "idx": 848,
        "db_id": "orchestra",
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "evidence": "",
        "gold": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "pred": "SELECT record_company, COUNT(*) FROM orchestra GROUP BY record_company",
        "pred_result": 1,
        "repair_sql": "SELECT record_company, COUNT(*) FROM orchestra GROUP BY record_company;",
        "repair_result": 1
    },
    {
        "idx": 849,
        "db_id": "orchestra",
        "question": "How many orchestras does each record company manage?",
        "evidence": "",
        "gold": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "pred": "SELECT record_company, count(*) FROM ORCHESTRA GROUP BY record_company",
        "pred_result": 1,
        "repair_sql": "SELECT record_company, count(*) FROM ORCHESTRA GROUP BY record_company",
        "repair_result": 1
    },
    {
        "idx": 850,
        "db_id": "orchestra",
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "evidence": "",
        "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "pred": "SELECT major_record_format, COUNT(*) FROM ORCHESTRA GROUP BY major_record_format ORDER BY COUNT(*) ASC",
        "pred_result": 0,
        "repair_sql": "SELECT major_record_format, COUNT(*) FROM ORCHESTRA GROUP BY major_record_format ORDER BY COUNT(*) ASC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 851,
        "db_id": "orchestra",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "evidence": "",
        "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "pred": "SELECT major_record_format FROM ORCHESTRA GROUP BY major_record_format ORDER BY COUNT(*) DESC",
        "pred_result": 1,
        "repair_sql": "SELECT major_record_format, COUNT(*) as frequency FROM ORCHESTRA GROUP BY major_record_format ORDER BY frequency DESC;",
        "repair_result": 0
    },
    {
        "idx": 852,
        "db_id": "orchestra",
        "question": "List the record company shared by the most number of orchestras.",
        "evidence": "",
        "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT record_company FROM ORCHESTRA GROUP BY record_company ORDER BY count(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT record_company FROM ORCHESTRA GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 853,
        "db_id": "orchestra",
        "question": "What is the record company used by the greatest number of orchestras?",
        "evidence": "",
        "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT record_company FROM ORCHESTRA GROUP BY record_company ORDER BY count(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT record_company FROM ORCHESTRA GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 854,
        "db_id": "orchestra",
        "question": "List the names of orchestras that have no performance.",
        "evidence": "",
        "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "pred": "SELECT orchestra FROM ORCHESTRA EXCEPT SELECT O.orchestra FROM ORCHESTRA AS O JOIN PERFORMANCE AS P ON O.orchestra_id = P.orchestra_id",
        "pred_result": 1,
        "repair_sql": "SELECT orchestra FROM ORCHESTRA EXCEPT SELECT ORCHESTRA.orchestra FROM ORCHESTRA JOIN PERFORMANCE ON ORCHESTRA.orchestra_id = PERFORMANCE.orchestra_id;",
        "repair_result": 1
    },
    {
        "idx": 855,
        "db_id": "orchestra",
        "question": "What are the orchestras that do not have any performances?",
        "evidence": "",
        "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "pred": "SELECT orchestra FROM ORCHESTRA EXCEPT SELECT O.orchestra FROM ORCHESTRA AS O JOIN PERFORMANCE AS P ON O.orchestra_id = P.orchestra_id",
        "pred_result": 1,
        "repair_sql": "SELECT orchestra FROM ORCHESTRA EXCEPT SELECT O.orchestra FROM ORCHESTRA AS O JOIN PERFORMANCE AS P ON O.orchestra_id = P.orchestra_id;",
        "repair_result": 1
    },
    {
        "idx": 856,
        "db_id": "orchestra",
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "evidence": "",
        "gold": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "pred": "SELECT record_company FROM ORCHESTRA WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM ORCHESTRA WHERE year_of_founded > 2003",
        "pred_result": 1,
        "repair_sql": "SELECT record_company FROM ORCHESTRA WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM ORCHESTRA WHERE year_of_founded > 2003;",
        "repair_result": 1
    },
    {
        "idx": 857,
        "db_id": "orchestra",
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "evidence": "",
        "gold": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "pred": "SELECT record_company FROM ORCHESTRA WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM ORCHESTRA WHERE year_of_founded > 2003",
        "pred_result": 1,
        "repair_sql": "SELECT record_company FROM ORCHESTRA WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM ORCHESTRA WHERE year_of_founded > 2003;",
        "repair_result": 1
    },
    {
        "idx": 858,
        "db_id": "orchestra",
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "pred": "SELECT count(*) FROM ORCHESTRA WHERE major_record_format = 'CD' OR major_record_format = 'DVD'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM ORCHESTRA WHERE major_record_format = 'CD' OR major_record_format = 'DVD'",
        "repair_result": 1
    },
    {
        "idx": 859,
        "db_id": "orchestra",
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "pred": "SELECT count(*) FROM orchestra WHERE major_record_format LIKE '%CD%' OR major_record_format LIKE '%DVD%'",
        "pred_result": 0,
        "repair_sql": "SELECT count(*) FROM orchestra WHERE major_record_format LIKE '%CD%' OR major_record_format LIKE '%DVD%'",
        "repair_result": 0
    },
    {
        "idx": 860,
        "db_id": "orchestra",
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "evidence": "",
        "gold": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "pred": "SELECT year_of_founded FROM ORCHESTRA WHERE orchestra_id IN (     SELECT orchestra_id     FROM PERFORMANCE     GROUP BY orchestra_id     HAVING count(*) > 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT ORCHESTRA.year_of_founded FROM ORCHESTRA WHERE ORCHESTRA.orchestra_id IN (     SELECT PERFORMANCE.orchestra_id     FROM PERFORMANCE     GROUP BY PERFORMANCE.orchestra_id     HAVING count(*) > 1 )",
        "repair_result": 1
    },
    {
        "idx": 861,
        "db_id": "orchestra",
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "evidence": "",
        "gold": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "pred": "SELECT year_of_founded FROM ORCHESTRA WHERE orchestra_id IN (     SELECT orchestra_id     FROM PERFORMANCE     GROUP BY orchestra_id     HAVING COUNT(performance_id) > 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT year_of_founded FROM ORCHESTRA WHERE orchestra_id IN (     SELECT orchestra_id     FROM PERFORMANCE     GROUP BY orchestra_id     HAVING COUNT(performance_id) > 1 )",
        "repair_result": 1
    },
    {
        "idx": 862,
        "db_id": "network_1",
        "question": "How many high schoolers are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Highschooler",
        "pred": "SELECT count(*) FROM HIGHSCHOOLER",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM HIGHSCHOOLER",
        "repair_result": 1
    },
    {
        "idx": 863,
        "db_id": "network_1",
        "question": "Count the number of high schoolers.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Highschooler",
        "pred": "SELECT count(*) FROM highschooler",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM highschooler",
        "repair_result": 1
    },
    {
        "idx": 864,
        "db_id": "network_1",
        "question": "Show the names and grades of each high schooler.",
        "evidence": "",
        "gold": "SELECT name ,  grade FROM Highschooler",
        "pred": "SELECT name, grade FROM HIGHSCHOOLER",
        "pred_result": 1,
        "repair_sql": "SELECT name, grade FROM HIGHSCHOOLER;",
        "repair_result": 1
    },
    {
        "idx": 865,
        "db_id": "network_1",
        "question": "What are the names and grades for each high schooler?",
        "evidence": "",
        "gold": "SELECT name ,  grade FROM Highschooler",
        "pred": "SELECT name, grade FROM HIGHSCHOOLER",
        "pred_result": 1,
        "repair_sql": "SELECT name, grade FROM HIGHSCHOOLER;",
        "repair_result": 1
    },
    {
        "idx": 866,
        "db_id": "network_1",
        "question": "Show all the grades of the high schoolers.",
        "evidence": "",
        "gold": "SELECT grade FROM Highschooler",
        "pred": "SELECT grade FROM HIGHSCHOOLER",
        "pred_result": 1,
        "repair_sql": "SELECT grade FROM HIGHSCHOOLER;",
        "repair_result": 1
    },
    {
        "idx": 867,
        "db_id": "network_1",
        "question": "What is the grade of each high schooler?",
        "evidence": "",
        "gold": "SELECT grade FROM Highschooler",
        "pred": "SELECT name, grade FROM HIGHSCHOOLER",
        "pred_result": 0,
        "repair_sql": "SELECT name, grade FROM HIGHSCHOOLER;",
        "repair_result": 0
    },
    {
        "idx": 868,
        "db_id": "network_1",
        "question": "What grade is Kyle in?",
        "evidence": "",
        "gold": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "pred": "SELECT grade FROM HIGHSCHOOLER WHERE name = 'Kyle'",
        "pred_result": 1,
        "repair_sql": "SELECT grade FROM HIGHSCHOOLER WHERE name = 'Kyle';",
        "repair_result": 1
    },
    {
        "idx": 869,
        "db_id": "network_1",
        "question": "Return the grade for the high schooler named Kyle.",
        "evidence": "",
        "gold": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "pred": "SELECT grade FROM HIGHSCHOOLER WHERE name = 'Kyle'",
        "pred_result": 1,
        "repair_sql": "SELECT grade FROM HIGHSCHOOLER WHERE name = 'Kyle';",
        "repair_result": 1
    },
    {
        "idx": 870,
        "db_id": "network_1",
        "question": "Show the names of all high schoolers in grade 10.",
        "evidence": "",
        "gold": "SELECT name FROM Highschooler WHERE grade  =  10",
        "pred": "SELECT name FROM HIGHSCHOOLER WHERE grade = 10",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM HIGHSCHOOLER WHERE grade = 10;",
        "repair_result": 1
    },
    {
        "idx": 871,
        "db_id": "network_1",
        "question": "What are the names of all high schoolers in grade 10?",
        "evidence": "",
        "gold": "SELECT name FROM Highschooler WHERE grade  =  10",
        "pred": "SELECT name FROM HIGHSCHOOLER WHERE grade = 10",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM HIGHSCHOOLER WHERE grade = 10;",
        "repair_result": 1
    },
    {
        "idx": 872,
        "db_id": "network_1",
        "question": "Show the ID of the high schooler named Kyle.",
        "evidence": "",
        "gold": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "pred": "SELECT id FROM HIGHSCHOOLER WHERE name = 'Kyle'",
        "pred_result": 1,
        "repair_sql": "SELECT id FROM HIGHSCHOOLER WHERE name = 'Kyle'",
        "repair_result": 1
    },
    {
        "idx": 873,
        "db_id": "network_1",
        "question": "What is Kyle's id?",
        "evidence": "",
        "gold": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "pred": "SELECT id FROM HIGHSCHOOLER WHERE name = \"Kyle\"",
        "pred_result": 1,
        "repair_sql": "SELECT id FROM HIGHSCHOOLER WHERE name = \"Kyle\"",
        "repair_result": 1
    },
    {
        "idx": 874,
        "db_id": "network_1",
        "question": "How many high schoolers are there in grade 9 or 10?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "pred": "SELECT COUNT(*) FROM HIGHSCHOOLER WHERE grade IN (9, 10)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM HIGHSCHOOLER WHERE grade IN (9, 10);",
        "repair_result": 1
    },
    {
        "idx": 875,
        "db_id": "network_1",
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "pred": "SELECT COUNT(*) FROM HIGHSCHOOLER WHERE grade IN (9, 10)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM HIGHSCHOOLER WHERE grade IN (9, 10);",
        "repair_result": 1
    },
    {
        "idx": 876,
        "db_id": "network_1",
        "question": "Show the number of high schoolers for each grade.",
        "evidence": "",
        "gold": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "pred": "SELECT grade, COUNT(*) FROM HIGHSCHOOLER GROUP BY grade",
        "pred_result": 1,
        "repair_sql": "SELECT grade, COUNT(*) FROM HIGHSCHOOLER GROUP BY grade;",
        "repair_result": 1
    },
    {
        "idx": 877,
        "db_id": "network_1",
        "question": "How many high schoolers are in each grade?",
        "evidence": "",
        "gold": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "pred": "SELECT grade, COUNT(*) FROM HIGHSCHOOLER GROUP BY grade",
        "pred_result": 1,
        "repair_sql": "SELECT grade, COUNT(*) FROM HIGHSCHOOLER GROUP BY grade;",
        "repair_result": 1
    },
    {
        "idx": 878,
        "db_id": "network_1",
        "question": "Which grade has the most high schoolers?",
        "evidence": "",
        "gold": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT grade FROM HIGHSCHOOLER GROUP BY grade ORDER BY COUNT(id) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT grade FROM HIGHSCHOOLER GROUP BY grade ORDER BY COUNT(id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 879,
        "db_id": "network_1",
        "question": "Return the grade that has the greatest number of high schoolers.",
        "evidence": "",
        "gold": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 880,
        "db_id": "network_1",
        "question": "Show me all grades that have at least 4 students.",
        "evidence": "",
        "gold": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "pred": "SELECT grade FROM HIGHSCHOOLER GROUP BY grade HAVING COUNT(id) >= 4",
        "pred_result": 1,
        "repair_sql": "SELECT grade FROM HIGHSCHOOLER GROUP BY grade HAVING COUNT(id) >= 4;",
        "repair_result": 1
    },
    {
        "idx": 881,
        "db_id": "network_1",
        "question": "Which grades have 4 or more high schoolers?",
        "evidence": "",
        "gold": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "pred": "SELECT grade FROM HIGHSCHOOLER GROUP BY grade HAVING COUNT(id) >= 4",
        "pred_result": 1,
        "repair_sql": "SELECT grade FROM HIGHSCHOOLER GROUP BY grade HAVING COUNT(id) >= 4",
        "repair_result": 1
    },
    {
        "idx": 882,
        "db_id": "network_1",
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "evidence": "",
        "gold": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "pred": "SELECT student_id, COUNT(friend_id) AS number_of_friends FROM FRIEND GROUP BY student_id",
        "pred_result": 1,
        "repair_sql": "SELECT student_id, COUNT(friend_id) AS number_of_friends FROM FRIEND GROUP BY student_id;",
        "repair_result": 1
    },
    {
        "idx": 883,
        "db_id": "network_1",
        "question": "How many friends does each student have?",
        "evidence": "",
        "gold": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "pred": "SELECT student_id, COUNT(friend_id) AS friend_count FROM FRIEND GROUP BY student_id",
        "pred_result": 1,
        "repair_sql": "SELECT student_id, COUNT(friend_id) AS friend_count FROM FRIEND GROUP BY student_id;",
        "repair_result": 1
    },
    {
        "idx": 884,
        "db_id": "network_1",
        "question": "Show the names of high school students and their corresponding number of friends.",
        "evidence": "",
        "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "pred": "SELECT H.name, COUNT(F.friend_id) AS number_of_friends FROM HIGHSCHOOLER AS H LEFT JOIN FRIEND AS F ON H.id = F.student_id GROUP BY H.id",
        "pred_result": 0,
        "repair_sql": "SELECT H.name, COUNT(F.friend_id) AS number_of_friends FROM HIGHSCHOOLER AS H LEFT JOIN FRIEND AS F ON H.id = F.student_id GROUP BY H.id;",
        "repair_result": 0
    },
    {
        "idx": 885,
        "db_id": "network_1",
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "evidence": "",
        "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "pred": "SELECT H.name, COUNT(F.friend_id) AS num_friends FROM HIGHSCHOOLER AS H LEFT JOIN FRIEND AS F ON H.id = F.student_id GROUP BY H.id",
        "pred_result": 0,
        "repair_sql": "SELECT H.name, COUNT(F.friend_id) AS num_friends FROM HIGHSCHOOLER AS H LEFT JOIN FRIEND AS F ON H.id = F.student_id GROUP BY H.id;",
        "repair_result": 0
    },
    {
        "idx": 886,
        "db_id": "network_1",
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "evidence": "",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT name FROM highschooler WHERE id = (     SELECT student_id     FROM friend     GROUP BY student_id     ORDER BY COUNT(friend_id) DESC     LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM highschooler WHERE id = (     SELECT student_id     FROM friend     GROUP BY student_id     ORDER BY COUNT(friend_id) DESC     LIMIT 1 );",
        "repair_result": 1
    },
    {
        "idx": 887,
        "db_id": "network_1",
        "question": "Return the name of the high school student with the most friends.",
        "evidence": "",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT H.name FROM HIGHSCHOOLER AS H JOIN FRIEND AS F ON H.id = F.student_id OR H.id = F.friend_id GROUP BY H.id ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT H.name FROM HIGHSCHOOLER AS H JOIN FRIEND AS F ON H.id = F.student_id GROUP BY H.id ORDER BY COUNT(F.friend_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 888,
        "db_id": "network_1",
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "evidence": "",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "pred": "SELECT name FROM HIGHSCHOOLER WHERE id IN (     SELECT student_id     FROM FRIEND     GROUP BY student_id     HAVING COUNT(friend_id) >= 3 )",
        "pred_result": 1,
        "repair_sql": "SELECT HIGHSCHOOLER.name FROM HIGHSCHOOLER WHERE HIGHSCHOOLER.id IN (     SELECT FRIEND.student_id     FROM FRIEND     GROUP BY FRIEND.student_id     HAVING COUNT(FRIEND.friend_id) >= 3 );",
        "repair_result": 1
    },
    {
        "idx": 889,
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "evidence": "",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "pred": "SELECT H.name FROM HIGHSCHOOLER AS H JOIN FRIEND AS F ON H.id = F.student_id GROUP BY H.id HAVING count(F.friend_id) >= 3",
        "pred_result": 1,
        "repair_sql": "SELECT H.name FROM HIGHSCHOOLER AS H JOIN FRIEND AS F ON H.id = F.student_id GROUP BY H.id HAVING count(F.friend_id) >= 3;",
        "repair_result": 1
    },
    {
        "idx": 890,
        "db_id": "network_1",
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "evidence": "",
        "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "pred": "SELECT H2.name FROM FRIEND AS F JOIN HIGHSCHOOLER AS H1 ON F.student_id = H1.id JOIN HIGHSCHOOLER AS H2 ON F.friend_id = H2.id WHERE H1.name = 'Kyle'",
        "pred_result": 1,
        "repair_sql": "SELECT H2.name FROM FRIEND AS F JOIN HIGHSCHOOLER AS H1 ON F.student_id = H1.id JOIN HIGHSCHOOLER AS H2 ON F.friend_id = H2.id WHERE H1.name = 'Kyle';",
        "repair_result": 1
    },
    {
        "idx": 891,
        "db_id": "network_1",
        "question": "Return the names of friends of the high school student Kyle.",
        "evidence": "",
        "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "pred": "SELECT H2.name FROM HIGHSCHOOLER AS H1 JOIN FRIEND AS F ON H1.id = F.student_id JOIN HIGHSCHOOLER AS H2 ON F.friend_id = H2.id WHERE H1.name = 'Kyle'",
        "pred_result": 1,
        "repair_sql": "SELECT H2.name FROM HIGHSCHOOLER AS H1 JOIN FRIEND AS F ON H1.id = F.student_id JOIN HIGHSCHOOLER AS H2 ON F.friend_id = H2.id WHERE H1.name = 'Kyle'",
        "repair_result": 1
    },
    {
        "idx": 892,
        "db_id": "network_1",
        "question": "How many friends does the high school student Kyle have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "pred": "SELECT count(DISTINCT f.friend_id) FROM highschooler AS h JOIN friend AS f ON h.id = f.student_id WHERE h.name = 'Kyle'",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT f.friend_id) FROM highschooler AS h JOIN friend AS f ON h.id = f.student_id WHERE h.name = 'Kyle'",
        "repair_result": 1
    },
    {
        "idx": 893,
        "db_id": "network_1",
        "question": "Count the number of friends Kyle has.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "pred": "SELECT count(*) FROM FRIEND AS F JOIN HIGHSCHOOLER AS H ON F.student_id = H.id WHERE H.name = \"Kyle\"",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM FRIEND AS F JOIN HIGHSCHOOLER AS H ON F.student_id = H.id WHERE H.name = \"Kyle\"",
        "repair_result": 1
    },
    {
        "idx": 894,
        "db_id": "network_1",
        "question": "Show ids of all students who do not have any friends.",
        "evidence": "",
        "gold": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "pred": "SELECT id FROM HIGHSCHOOLER EXCEPT SELECT student_id FROM FRIEND UNION SELECT friend_id FROM FRIEND",
        "pred_result": 0,
        "repair_sql": "SELECT H.id FROM HIGHSCHOOLER H LEFT JOIN FRIEND F1 ON H.id = F1.student_id LEFT JOIN FRIEND F2 ON H.id = F2.friend_id WHERE F1.student_id IS NULL AND F2.friend_id IS NULL;",
        "repair_result": 0
    },
    {
        "idx": 895,
        "db_id": "network_1",
        "question": "What are the ids of high school students who do not have friends?",
        "evidence": "",
        "gold": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "pred": "SELECT id FROM HIGHSCHOOLER EXCEPT SELECT student_id FROM FRIEND EXCEPT SELECT friend_id FROM FRIEND",
        "pred_result": 0,
        "repair_sql": "SELECT H.id FROM HIGHSCHOOLER H LEFT JOIN FRIEND F1 ON H.id = F1.student_id LEFT JOIN FRIEND F2 ON H.id = F2.friend_id WHERE F1.student_id IS NULL AND F2.friend_id IS NULL;",
        "repair_result": 0
    },
    {
        "idx": 896,
        "db_id": "network_1",
        "question": "Show names of all high school students who do not have any friends.",
        "evidence": "",
        "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "pred": "SELECT name FROM HIGHSCHOOLER EXCEPT SELECT H.name FROM HIGHSCHOOLER AS H JOIN FRIEND AS F ON H.id = F.student_id OR H.id = F.friend_id",
        "pred_result": 0,
        "repair_sql": "SELECT name FROM HIGHSCHOOLER WHERE id NOT IN (     SELECT student_id     FROM FRIEND     UNION     SELECT friend_id     FROM FRIEND );",
        "repair_result": 0
    },
    {
        "idx": 897,
        "db_id": "network_1",
        "question": "What are the names of students who have no friends?",
        "evidence": "",
        "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "pred": "SELECT name FROM HIGHSCHOOLER EXCEPT SELECT H1.name FROM HIGHSCHOOLER AS H1 JOIN FRIEND AS F1 ON H1.id = F1.student_id UNION SELECT H2.name FROM HIGHSCHOOLER AS H2 JOIN FRIEND AS F2 ON H2.id = F2.friend_id",
        "pred_result": 0,
        "repair_sql": "SELECT name FROM HIGHSCHOOLER EXCEPT SELECT H1.name FROM HIGHSCHOOLER AS H1 JOIN FRIEND AS F1 ON H1.id = F1.student_id UNION SELECT H2.name FROM HIGHSCHOOLER AS H2 JOIN FRIEND AS F2 ON H2.id = F2.friend_id;",
        "repair_result": 0
    },
    {
        "idx": 898,
        "db_id": "network_1",
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "evidence": "",
        "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "pred": "SELECT student_id FROM FRIEND INTERSECT SELECT liked_id FROM LIKES",
        "pred_result": 1,
        "repair_sql": "SELECT student_id FROM FRIEND INTERSECT SELECT liked_id FROM LIKES",
        "repair_result": 1
    },
    {
        "idx": 899,
        "db_id": "network_1",
        "question": "What are the ids of students who both have friends and are liked?",
        "evidence": "",
        "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "pred": "SELECT student_id FROM FRIEND INTERSECT SELECT student_id FROM LIKES",
        "pred_result": 0,
        "repair_sql": "SELECT student_id FROM FRIEND INTERSECT SELECT student_id FROM LIKES;",
        "repair_result": 0
    },
    {
        "idx": 900,
        "db_id": "network_1",
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "evidence": "",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "pred": "SELECT name FROM HIGHSCHOOLER WHERE id IN (     SELECT student_id     FROM FRIEND ) INTERSECT SELECT name FROM HIGHSCHOOLER WHERE id IN (     SELECT liked_id     FROM LIKES )",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM HIGHSCHOOLER WHERE id IN (     SELECT student_id     FROM FRIEND ) AND id IN (     SELECT liked_id     FROM LIKES );",
        "repair_result": 1
    },
    {
        "idx": 901,
        "db_id": "network_1",
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "evidence": "",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "pred": "SELECT name FROM HIGHSCHOOLER WHERE id IN (     SELECT student_id     FROM FRIEND ) INTERSECT SELECT name FROM HIGHSCHOOLER WHERE id IN (     SELECT liked_id     FROM LIKES )",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM HIGHSCHOOLER WHERE id IN (     SELECT student_id     FROM FRIEND ) AND id IN (     SELECT liked_id     FROM LIKES );",
        "repair_result": 1
    },
    {
        "idx": 902,
        "db_id": "network_1",
        "question": "Count the number of likes for each student id.",
        "evidence": "",
        "gold": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "pred": "SELECT student_id, COUNT(*) as like_count FROM LIKES GROUP BY student_id",
        "pred_result": 1,
        "repair_sql": "SELECT liked_id as student_id, COUNT(*) as like_count FROM LIKES GROUP BY liked_id",
        "repair_result": 0
    },
    {
        "idx": 903,
        "db_id": "network_1",
        "question": "How many likes correspond to each student id?",
        "evidence": "",
        "gold": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "pred": "SELECT student_id, COUNT(*) as like_count FROM LIKES GROUP BY student_id",
        "pred_result": 1,
        "repair_sql": "SELECT student_id, COUNT(*) as like_count FROM LIKES GROUP BY student_id;",
        "repair_result": 1
    },
    {
        "idx": 904,
        "db_id": "network_1",
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "evidence": "",
        "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "pred": "SELECT H.name, COUNT(L.liked_id) AS number_of_likes FROM HIGHSCHOOLER AS H JOIN LIKES AS L ON H.id = L.student_id GROUP BY H.id",
        "pred_result": 1,
        "repair_sql": "SELECT H.name, COUNT(L.liked_id) AS number_of_likes FROM HIGHSCHOOLER AS H JOIN LIKES AS L ON H.id = L.student_id GROUP BY H.id, H.name",
        "repair_result": 1
    },
    {
        "idx": 905,
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "evidence": "",
        "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "pred": "SELECT H.name, COUNT(L.liked_id) AS likes_count FROM HIGHSCHOOLER AS H JOIN LIKES AS L ON H.id = L.liked_id GROUP BY H.id",
        "pred_result": 0,
        "repair_sql": "SELECT H.name, COUNT(L.liked_id) AS likes_count FROM HIGHSCHOOLER AS H JOIN LIKES AS L ON H.id = L.liked_id GROUP BY H.id, H.name",
        "repair_result": 0
    },
    {
        "idx": 906,
        "db_id": "network_1",
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "evidence": "",
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT H.name FROM HIGHSCHOOLER AS H JOIN LIKES AS L ON H.id = L.liked_id GROUP BY H.id ORDER BY count(L.student_id) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT H.name FROM HIGHSCHOOLER AS H JOIN LIKES AS L ON H.id = L.liked_id GROUP BY H.id, H.name ORDER BY count(L.student_id) DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 907,
        "db_id": "network_1",
        "question": "Give the name of the student with the most likes.",
        "evidence": "",
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT name FROM highschooler WHERE id = (   SELECT liked_id   FROM likes   GROUP BY liked_id   ORDER BY COUNT(*) DESC   LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT name FROM highschooler WHERE id = (   SELECT liked_id   FROM likes   GROUP BY liked_id   ORDER BY COUNT(liked_id) DESC   LIMIT 1 );",
        "repair_result": 0
    },
    {
        "idx": 908,
        "db_id": "network_1",
        "question": "Show the names of students who have at least 2 likes.",
        "evidence": "",
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "pred": "SELECT H.name FROM HIGHSCHOOLER AS H JOIN LIKES AS L ON H.id = L.liked_id GROUP BY H.id HAVING COUNT(L.student_id) >= 2",
        "pred_result": 0,
        "repair_sql": "SELECT H.name FROM HIGHSCHOOLER AS H JOIN LIKES AS L ON H.id = L.liked_id GROUP BY H.id HAVING COUNT(L.student_id) >= 2;",
        "repair_result": 0
    },
    {
        "idx": 909,
        "db_id": "network_1",
        "question": "What are the names of students who have 2 or more likes?",
        "evidence": "",
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "pred": "SELECT H.name FROM HIGHSCHOOLER AS H JOIN LIKES AS L ON H.id = L.liked_id GROUP BY H.id HAVING COUNT(L.student_id) >= 2",
        "pred_result": 0,
        "repair_sql": "SELECT H.name FROM HIGHSCHOOLER AS H JOIN LIKES AS L ON H.id = L.liked_id GROUP BY H.id, H.name HAVING COUNT(L.student_id) >= 2;",
        "repair_result": 0
    },
    {
        "idx": 910,
        "db_id": "network_1",
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "evidence": "",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "pred": "SELECT name FROM HIGHSCHOOLER WHERE grade > 5 INTERSECT SELECT name FROM HIGHSCHOOLER AS H WHERE (SELECT COUNT(*) FROM FRIEND AS F WHERE F.student_id = H.id OR F.friend_id = H.id) >= 2",
        "pred_result": 0,
        "repair_sql": "SELECT name FROM HIGHSCHOOLER WHERE grade > 5 AND id IN (     SELECT student_id     FROM FRIEND     UNION ALL     SELECT friend_id     FROM FRIEND     GROUP BY student_id, friend_id     HAVING COUNT(*) >= 2 );",
        "repair_result": 0
    },
    {
        "idx": 911,
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "evidence": "",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "pred": "SELECT name FROM HIGHSCHOOLER WHERE grade > 5 AND id IN (     SELECT student_id     FROM FRIEND     GROUP BY student_id     HAVING COUNT(friend_id) >= 2 )",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM HIGHSCHOOLER WHERE grade > 5 AND id IN (     SELECT student_id     FROM FRIEND     GROUP BY student_id     HAVING COUNT(friend_id) >= 2 );",
        "repair_result": 1
    },
    {
        "idx": 912,
        "db_id": "network_1",
        "question": "How many likes does Kyle have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "pred": "SELECT count(*) FROM LIKES JOIN HIGHSCHOOLER ON LIKES.liked_id = HIGHSCHOOLER.id WHERE HIGHSCHOOLER.name = 'Kyle'",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM LIKES JOIN HIGHSCHOOLER ON LIKES.liked_id = HIGHSCHOOLER.id WHERE HIGHSCHOOLER.name = 'Kyle'",
        "repair_result": 1
    },
    {
        "idx": 913,
        "db_id": "network_1",
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "pred": "SELECT COUNT(*) FROM LIKES AS L JOIN HIGHSCHOOLER AS H ON L.liked_id = H.id WHERE H.name = 'Kyle'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM LIKES AS L JOIN HIGHSCHOOLER AS H ON L.liked_id = H.id WHERE H.name = 'Kyle'",
        "repair_result": 1
    },
    {
        "idx": 914,
        "db_id": "network_1",
        "question": "Find the average grade of all students who have some friends.",
        "evidence": "",
        "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "pred": "SELECT AVG(grade) AS average_grade FROM HIGHSCHOOLER WHERE id IN (     SELECT student_id     FROM FRIEND     UNION     SELECT friend_id     FROM FRIEND )",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(grade) AS average_grade FROM HIGHSCHOOLER WHERE id IN (     SELECT student_id     FROM FRIEND     UNION     SELECT friend_id     FROM FRIEND )",
        "repair_result": 0
    },
    {
        "idx": 915,
        "db_id": "network_1",
        "question": "What is the average grade of students who have friends?",
        "evidence": "",
        "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "pred": "SELECT AVG(H1.grade) AS average_grade FROM HIGHSCHOOLER AS H1 JOIN FRIEND AS F ON H1.id = F.student_id OR H1.id = F.friend_id",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(H1.grade) AS average_grade FROM HIGHSCHOOLER AS H1 JOIN FRIEND AS F ON H1.id = F.student_id JOIN HIGHSCHOOLER AS H2 ON F.friend_id = H2.id;",
        "repair_result": 0
    },
    {
        "idx": 916,
        "db_id": "network_1",
        "question": "Find the minimum grade of students who have no friends.",
        "evidence": "",
        "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "pred": "SELECT MIN(grade) AS min_grade FROM highschooler WHERE id NOT IN (     SELECT student_id     FROM friend     UNION     SELECT friend_id     FROM friend )",
        "pred_result": 0,
        "repair_sql": "SELECT MIN(grade) AS min_grade FROM highschooler WHERE id NOT IN (     SELECT student_id     FROM friend     UNION     SELECT friend_id     FROM friend );",
        "repair_result": 0
    },
    {
        "idx": 917,
        "db_id": "network_1",
        "question": "What is the lowest grade of students who do not have any friends?",
        "evidence": "",
        "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "pred": "SELECT MIN(grade) AS lowest_grade FROM HIGHSCHOOLER WHERE id NOT IN (     SELECT student_id     FROM FRIEND     UNION     SELECT friend_id     FROM FRIEND )",
        "pred_result": 0,
        "repair_sql": "SELECT grade  FROM HIGHSCHOOLER  WHERE id NOT IN (     SELECT student_id      FROM FRIEND      UNION      SELECT friend_id      FROM FRIEND )  ORDER BY grade ASC  LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 918,
        "db_id": "dog_kennels",
        "question": "Which states have both owners and professionals living there?",
        "evidence": "",
        "gold": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "pred": "SELECT state FROM professionals INTERSECT SELECT state FROM owners",
        "pred_result": 1,
        "repair_sql": "SELECT state FROM professionals INTERSECT SELECT state FROM owners;",
        "repair_result": 1
    },
    {
        "idx": 919,
        "db_id": "dog_kennels",
        "question": "Find the states where both owners and professionals live.",
        "evidence": "",
        "gold": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "pred": "SELECT state FROM owners INTERSECT SELECT state FROM professionals",
        "pred_result": 1,
        "repair_sql": "SELECT state FROM owners INTERSECT SELECT state FROM professionals;",
        "repair_result": 1
    },
    {
        "idx": 920,
        "db_id": "dog_kennels",
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "evidence": "",
        "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "pred": "SELECT AVG(CAST(D.age AS INTEGER)) FROM DOGS AS D JOIN TREATMENTS AS T ON D.dog_id = T.dog_id;",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(CAST(D.age AS INTEGER)) FROM DOGS AS D JOIN TREATMENTS AS T ON D.dog_id = T.dog_id;",
        "repair_result": 0
    },
    {
        "idx": 921,
        "db_id": "dog_kennels",
        "question": "Find the average age of the dogs who went through treatments.",
        "evidence": "",
        "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "pred": "SELECT AVG(CAST(D.age AS INTEGER)) FROM DOGS AS D JOIN TREATMENTS AS T ON D.dog_id = T.dog_id",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(CAST(D.age AS INTEGER)) FROM DOGS AS D JOIN TREATMENTS AS T ON D.dog_id = T.dog_id",
        "repair_result": 0
    },
    {
        "idx": 922,
        "db_id": "dog_kennels",
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "evidence": "",
        "gold": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "pred": "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' UNION SELECT professional_id, last_name, cell_number FROM professionals WHERE professional_id IN (   SELECT professional_id   FROM treatments   GROUP BY professional_id   HAVING COUNT(treatment_id) > 2 )",
        "pred_result": 1,
        "repair_sql": "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' UNION SELECT p.professional_id, p.last_name, p.cell_number FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(t.treatment_id) > 2;",
        "repair_result": 1
    },
    {
        "idx": 923,
        "db_id": "dog_kennels",
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "evidence": "",
        "gold": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "pred": "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' UNION SELECT professional_id, last_name, cell_number FROM professionals WHERE professional_id IN (     SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(treatment_id) > 2 )",
        "pred_result": 1,
        "repair_sql": "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' UNION SELECT p.professional_id, p.last_name, p.cell_number FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(t.treatment_id) > 2;",
        "repair_result": 1
    },
    {
        "idx": 924,
        "db_id": "dog_kennels",
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "evidence": "",
        "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "pred": "SELECT name FROM DOGS WHERE dog_id NOT IN (     SELECT dog_id     FROM TREATMENTS     GROUP BY dog_id     HAVING SUM(cost_of_treatment) > 1000 )",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM DOGS WHERE dog_id NOT IN (     SELECT dog_id     FROM TREATMENTS     GROUP BY dog_id     HAVING SUM(cost_of_treatment) > 1000 )",
        "repair_result": 1
    },
    {
        "idx": 925,
        "db_id": "dog_kennels",
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "evidence": "",
        "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "pred": "SELECT name FROM DOGS WHERE dog_id NOT IN (     SELECT dog_id     FROM TREATMENTS     GROUP BY dog_id     HAVING SUM(cost_of_treatment) > 1000 )",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM DOGS WHERE dog_id NOT IN (     SELECT dog_id     FROM TREATMENTS     GROUP BY dog_id     HAVING SUM(cost_of_treatment) > 1000 )",
        "repair_result": 1
    },
    {
        "idx": 926,
        "db_id": "dog_kennels",
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "evidence": "",
        "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "pred": "SELECT first_name FROM (     SELECT first_name FROM PROFESSIONALS     UNION     SELECT first_name FROM OWNERS ) EXCEPT SELECT name FROM DOGS",
        "pred_result": 1,
        "repair_sql": "SELECT first_name FROM (     SELECT first_name FROM PROFESSIONALS     UNION     SELECT first_name FROM OWNERS ) EXCEPT SELECT name FROM DOGS;",
        "repair_result": 1
    },
    {
        "idx": 927,
        "db_id": "dog_kennels",
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "evidence": "",
        "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "pred": "SELECT first_name FROM (     SELECT first_name FROM PROFESSIONALS     UNION     SELECT first_name FROM OWNERS ) EXCEPT SELECT name FROM DOGS",
        "pred_result": 1,
        "repair_sql": "SELECT first_name FROM (     SELECT first_name FROM PROFESSIONALS     UNION     SELECT first_name FROM OWNERS ) EXCEPT SELECT name FROM DOGS;",
        "repair_result": 1
    },
    {
        "idx": 928,
        "db_id": "dog_kennels",
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "evidence": "",
        "gold": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "pred": "SELECT professional_id, role_code, email_address FROM PROFESSIONALS EXCEPT SELECT p.professional_id, p.role_code, p.email_address FROM PROFESSIONALS AS p JOIN TREATMENTS AS t ON p.professional_id = t.professional_id",
        "pred_result": 1,
        "repair_sql": "SELECT professional_id, role_code, email_address FROM PROFESSIONALS EXCEPT SELECT p.professional_id, p.role_code, p.email_address FROM PROFESSIONALS AS p JOIN TREATMENTS AS t ON p.professional_id = t.professional_id;",
        "repair_result": 1
    },
    {
        "idx": 929,
        "db_id": "dog_kennels",
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "evidence": "",
        "gold": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "pred": "SELECT professional_id, role_code, email_address FROM PROFESSIONALS EXCEPT SELECT T1.professional_id, T1.role_code, T1.email_address FROM PROFESSIONALS AS T1 JOIN TREATMENTS AS T2 ON T1.professional_id = T2.professional_id",
        "pred_result": 1,
        "repair_sql": "SELECT professional_id, role_code, email_address FROM PROFESSIONALS WHERE professional_id NOT IN (     SELECT T1.professional_id     FROM PROFESSIONALS AS T1     JOIN TREATMENTS AS T2 ON T1.professional_id = T2.professional_id );",
        "repair_result": 1
    },
    {
        "idx": 930,
        "db_id": "dog_kennels",
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "evidence": "",
        "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT O.owner_id, O.first_name, O.last_name FROM OWNERS AS O JOIN DOGS AS D ON O.owner_id = D.owner_id GROUP BY O.owner_id ORDER BY COUNT(D.dog_id) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT O.owner_id, O.first_name, O.last_name FROM OWNERS AS O JOIN DOGS AS D ON O.owner_id = D.owner_id GROUP BY O.owner_id, O.first_name, O.last_name ORDER BY COUNT(D.dog_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 931,
        "db_id": "dog_kennels",
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "evidence": "",
        "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id = (     SELECT owner_id     FROM dogs     GROUP BY owner_id     ORDER BY COUNT(dog_id) DESC     LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id = (     SELECT owner_id     FROM dogs     GROUP BY owner_id     ORDER BY COUNT(dog_id) DESC     LIMIT 1 );",
        "repair_result": 1
    },
    {
        "idx": 932,
        "db_id": "dog_kennels",
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "evidence": "",
        "gold": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "pred": "SELECT T1.professional_id, T1.role_code, T1.first_name FROM PROFESSIONALS AS T1 JOIN TREATMENTS AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(T2.treatment_id) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT T1.professional_id, T1.role_code, T1.first_name FROM PROFESSIONALS AS T1 JOIN TREATMENTS AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id, T1.role_code, T1.first_name HAVING COUNT(T2.treatment_id) >= 2;",
        "repair_result": 1
    },
    {
        "idx": 933,
        "db_id": "dog_kennels",
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "evidence": "",
        "gold": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "pred": "SELECT T1.professional_id, T1.role_code, T1.first_name FROM PROFESSIONALS AS T1 JOIN TREATMENTS AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(T2.treatment_id) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT T1.professional_id, T1.role_code, T1.first_name FROM PROFESSIONALS AS T1 JOIN TREATMENTS AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id, T1.role_code, T1.first_name HAVING COUNT(T2.treatment_id) >= 2;",
        "repair_result": 1
    },
    {
        "idx": 934,
        "db_id": "dog_kennels",
        "question": "What is the name of the breed with the most dogs?",
        "evidence": "",
        "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT B.breed_name FROM DOGS AS D JOIN BREEDS AS B ON D.breed_code = B.breed_code GROUP BY D.breed_code ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT B.breed_name FROM DOGS AS D JOIN BREEDS AS B ON D.breed_code = B.breed_code GROUP BY D.breed_code, B.breed_name ORDER BY COUNT(*) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 935,
        "db_id": "dog_kennels",
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "evidence": "",
        "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT b.breed_name FROM DOGS d JOIN BREEDS b ON d.breed_code = b.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT b.breed_name FROM DOGS d JOIN BREEDS b ON d.breed_code = b.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 936,
        "db_id": "dog_kennels",
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "evidence": "",
        "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT O.owner_id, O.last_name FROM OWNERS AS O JOIN DOGS AS D ON O.owner_id = D.owner_id JOIN TREATMENTS AS T ON D.dog_id = T.dog_id GROUP BY O.owner_id ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT O.owner_id, O.last_name FROM OWNERS AS O JOIN DOGS AS D ON O.owner_id = D.owner_id JOIN TREATMENTS AS T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.last_name ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 937,
        "db_id": "dog_kennels",
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "evidence": "",
        "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T3.owner_id, T3.last_name FROM OWNERS AS T3 JOIN (     SELECT T1.owner_id, SUM(T2.cost_of_treatment) AS total_cost     FROM DOGS AS T1     JOIN TREATMENTS AS T2 ON T1.dog_id = T2.dog_id     GROUP BY T1.owner_id     ORDER BY total_cost DESC     LIMIT 1 ) AS T4 ON T3.owner_id = T4.owner_id",
        "pred_result": 0,
        "repair_sql": "SELECT T3.owner_id, T3.last_name FROM OWNERS AS T3 JOIN (     SELECT T1.owner_id, SUM(T2.cost_of_treatment) AS total_cost     FROM DOGS AS T1     JOIN TREATMENTS AS T2 ON T1.dog_id = T2.dog_id     GROUP BY T1.owner_id     ORDER BY total_cost DESC     LIMIT 1 ) AS T4 ON T3.owner_id = T4.owner_id;",
        "repair_result": 0
    },
    {
        "idx": 938,
        "db_id": "dog_kennels",
        "question": "What is the description of the treatment type that costs the least money in total?",
        "evidence": "",
        "gold": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "pred": "SELECT T2.treatment_type_description FROM TREATMENT_TYPES AS T2 JOIN (     SELECT treatment_type_code     FROM TREATMENTS     GROUP BY treatment_type_code     ORDER BY SUM(cost_of_treatment) ASC     LIMIT 1 ) AS T1 ON T2.treatment_type_code = T1.treatment_type_code",
        "pred_result": 1,
        "repair_sql": "SELECT T2.treatment_type_description FROM TREATMENT_TYPES AS T2 JOIN (     SELECT treatment_type_code     FROM TREATMENTS     GROUP BY treatment_type_code     ORDER BY SUM(cost_of_treatment) ASC     LIMIT 1 ) AS T1 ON T2.treatment_type_code = T1.treatment_type_code;",
        "repair_result": 1
    },
    {
        "idx": 939,
        "db_id": "dog_kennels",
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "evidence": "",
        "gold": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "pred": "SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = (     SELECT treatment_type_code     FROM treatments     GROUP BY treatment_type_code     ORDER BY SUM(cost_of_treatment) ASC     LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = (     SELECT treatment_type_code     FROM treatments     GROUP BY treatment_type_code     ORDER BY SUM(cost_of_treatment) ASC     LIMIT 1 );",
        "repair_result": 1
    },
    {
        "idx": 940,
        "db_id": "dog_kennels",
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "evidence": "",
        "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "pred": "SELECT owner_id, zip_code FROM OWNERS WHERE owner_id = (     SELECT T1.owner_id     FROM DOGS AS T1     JOIN TREATMENTS AS T2 ON T1.dog_id = T2.dog_id     GROUP BY T1.owner_id     ORDER BY SUM(T2.cost_of_treatment) DESC     LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT owner_id, zip_code FROM OWNERS WHERE owner_id = (     SELECT T1.owner_id     FROM DOGS AS T1     JOIN TREATMENTS AS T2 ON T1.dog_id = T2.dog_id     GROUP BY T1.owner_id     ORDER BY SUM(T2.cost_of_treatment) DESC     LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 941,
        "db_id": "dog_kennels",
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "evidence": "",
        "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "pred": "SELECT owner_id, zip_code FROM owners WHERE owner_id = (   SELECT T1.owner_id   FROM dogs AS T1   JOIN treatments AS T2 ON T1.dog_id = T2.dog_id   GROUP BY T1.owner_id   ORDER BY SUM(T2.cost_of_treatment) DESC   LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT owner_id, zip_code FROM owners WHERE owner_id = (   SELECT T1.owner_id   FROM dogs AS T1   JOIN treatments AS T2 ON T1.dog_id = T2.dog_id   GROUP BY T1.owner_id   ORDER BY SUM(T2.cost_of_treatment) DESC   LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 942,
        "db_id": "dog_kennels",
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "evidence": "",
        "gold": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "pred": "SELECT professional_id, cell_number FROM PROFESSIONALS WHERE professional_id IN (     SELECT professional_id     FROM TREATMENTS     GROUP BY professional_id     HAVING COUNT(DISTINCT treatment_type_code) >= 2 )",
        "pred_result": 0,
        "repair_sql": "SELECT professional_id, cell_number FROM PROFESSIONALS WHERE professional_id IN (     SELECT professional_id     FROM TREATMENTS     GROUP BY professional_id     HAVING COUNT(DISTINCT treatment_type_code) >= 2 )",
        "repair_result": 0
    },
    {
        "idx": 943,
        "db_id": "dog_kennels",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "evidence": "",
        "gold": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "pred": "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (     SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(DISTINCT treatment_type_code) >= 2 )",
        "pred_result": 0,
        "repair_sql": "SELECT p.professional_id, p.cell_number FROM professionals p WHERE p.professional_id IN (     SELECT t.professional_id     FROM treatments t     GROUP BY t.professional_id     HAVING COUNT(DISTINCT t.treatment_type_code) >= 2 );",
        "repair_result": 0
    },
    {
        "idx": 944,
        "db_id": "dog_kennels",
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "pred": "SELECT first_name, last_name FROM PROFESSIONALS WHERE professional_id IN (     SELECT professional_id     FROM TREATMENTS     WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment)         FROM TREATMENTS     ) )",
        "pred_result": 0,
        "repair_sql": "SELECT first_name, last_name FROM PROFESSIONALS WHERE professional_id IN (     SELECT professional_id     FROM TREATMENTS     WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment)         FROM TREATMENTS     ) )",
        "repair_result": 0
    },
    {
        "idx": 945,
        "db_id": "dog_kennels",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "pred": "SELECT first_name, last_name FROM professionals WHERE professional_id IN (     SELECT professional_id     FROM treatments     WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment)         FROM treatments     ) )",
        "pred_result": 0,
        "repair_sql": "SELECT p.first_name, p.last_name FROM professionals p WHERE p.professional_id IN (     SELECT t.professional_id     FROM treatments t     WHERE t.cost_of_treatment < (         SELECT AVG(t2.cost_of_treatment)         FROM treatments t2     ) );",
        "repair_result": 0
    },
    {
        "idx": 946,
        "db_id": "dog_kennels",
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "evidence": "",
        "gold": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "pred": "SELECT T.date_of_treatment, P.first_name FROM TREATMENTS AS T JOIN PROFESSIONALS AS P ON T.professional_id = P.professional_id",
        "pred_result": 1,
        "repair_sql": "SELECT T.date_of_treatment, P.first_name FROM TREATMENTS AS T JOIN PROFESSIONALS AS P ON T.professional_id = P.professional_id;",
        "repair_result": 1
    },
    {
        "idx": 947,
        "db_id": "dog_kennels",
        "question": "What are the date and the operating professional's first name of each treatment?",
        "evidence": "",
        "gold": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "pred": "SELECT T1.date_of_treatment, T2.first_name FROM TREATMENTS AS T1 JOIN PROFESSIONALS AS T2 ON T1.professional_id = T2.professional_id",
        "pred_result": 1,
        "repair_sql": "SELECT T1.date_of_treatment, T2.first_name FROM TREATMENTS AS T1 JOIN PROFESSIONALS AS T2 ON T1.professional_id = T2.professional_id;",
        "repair_result": 1
    },
    {
        "idx": 948,
        "db_id": "dog_kennels",
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "evidence": "",
        "gold": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "pred": "SELECT T2.treatment_type_description, T1.cost_of_treatment FROM TREATMENTS AS T1 JOIN TREATMENT_TYPES AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        "pred_result": 0,
        "repair_sql": "SELECT T2.treatment_type_description, T1.cost_of_treatment FROM TREATMENTS AS T1 JOIN TREATMENT_TYPES AS T2 ON T1.treatment_type_code = T2.treatment_type_code;",
        "repair_result": 0
    },
    {
        "idx": 949,
        "db_id": "dog_kennels",
        "question": "What are the cost and treatment type description of each treatment?",
        "evidence": "",
        "gold": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "pred": "SELECT T2.cost_of_treatment, T3.treatment_type_description FROM TREATMENTS AS T2 JOIN TREATMENT_TYPES AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
        "pred_result": 1,
        "repair_sql": "SELECT T2.cost_of_treatment, T3.treatment_type_description FROM TREATMENTS AS T2 JOIN TREATMENT_TYPES AS T3 ON T2.treatment_type_code = T3.treatment_type_code;",
        "repair_result": 1
    },
    {
        "idx": 950,
        "db_id": "dog_kennels",
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "pred": "SELECT O.first_name, O.last_name, S.size_description FROM OWNERS AS O JOIN DOGS AS D ON O.owner_id = D.owner_id JOIN SIZES AS S ON D.size_code = S.size_code",
        "pred_result": 0,
        "repair_sql": "SELECT O.first_name, O.last_name, S.size_description FROM OWNERS AS O JOIN DOGS AS D ON O.owner_id = D.owner_id JOIN SIZES AS S ON D.size_code = S.size_code;",
        "repair_result": 0
    },
    {
        "idx": 951,
        "db_id": "dog_kennels",
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "pred": "SELECT O.first_name, O.last_name, S.size_description FROM OWNERS AS O JOIN DOGS AS D ON O.owner_id = D.owner_id JOIN SIZES AS S ON D.size_code = S.size_code",
        "pred_result": 0,
        "repair_sql": "SELECT O.first_name, O.last_name, S.size_description FROM OWNERS AS O JOIN DOGS AS D ON O.owner_id = D.owner_id JOIN SIZES AS S ON D.size_code = S.size_code;",
        "repair_result": 0
    },
    {
        "idx": 952,
        "db_id": "dog_kennels",
        "question": "List pairs of the owner's first name and the dogs's name.",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "pred": "SELECT O.first_name, D.name FROM OWNERS AS O JOIN DOGS AS D ON O.owner_id = D.owner_id",
        "pred_result": 1,
        "repair_sql": "SELECT O.first_name, D.name FROM OWNERS AS O JOIN DOGS AS D ON O.owner_id = D.owner_id;",
        "repair_result": 1
    },
    {
        "idx": 953,
        "db_id": "dog_kennels",
        "question": "What are each owner's first name and their dogs's name?",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "pred": "SELECT O.first_name, D.name FROM OWNERS AS O JOIN DOGS AS D ON O.owner_id = D.owner_id",
        "pred_result": 1,
        "repair_sql": "SELECT O.first_name, D.name FROM OWNERS AS O JOIN DOGS AS D ON O.owner_id = D.owner_id",
        "repair_result": 1
    },
    {
        "idx": 954,
        "db_id": "dog_kennels",
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "evidence": "",
        "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "pred": "SELECT d.name, t.date_of_treatment FROM DOGS d JOIN TREATMENTS t ON d.dog_id = t.dog_id WHERE d.breed_code = (     SELECT breed_code     FROM BREEDS     WHERE breed_code = (         SELECT breed_code         FROM DOGS         GROUP BY breed_code         ORDER BY COUNT(dog_id) ASC         LIMIT 1     ) )",
        "pred_result": 1,
        "repair_sql": "SELECT d.name, t.date_of_treatment FROM DOGS d JOIN TREATMENTS t ON d.dog_id = t.dog_id WHERE d.breed_code = (     SELECT breed_code     FROM DOGS     GROUP BY breed_code     ORDER BY COUNT(dog_id) ASC     LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 955,
        "db_id": "dog_kennels",
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "evidence": "",
        "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "pred": "SELECT D.name, T.date_of_treatment FROM DOGS AS D JOIN TREATMENTS AS T ON D.dog_id = T.dog_id WHERE D.breed_code = (     SELECT breed_code     FROM BREEDS     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT D.name, T.date_of_treatment FROM DOGS AS D JOIN TREATMENTS AS T ON D.dog_id = T.dog_id WHERE D.breed_code = (     SELECT breed_code     FROM DOGS     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 );",
        "repair_result": 1
    },
    {
        "idx": 956,
        "db_id": "dog_kennels",
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "pred": "SELECT O.first_name, D.name FROM DOGS AS D JOIN OWNERS AS O ON D.owner_id = O.owner_id WHERE O.state = 'Virginia'",
        "pred_result": 1,
        "repair_sql": "SELECT O.first_name, D.name FROM DOGS AS D JOIN OWNERS AS O ON D.owner_id = O.owner_id WHERE O.state = 'Virginia'",
        "repair_result": 1
    },
    {
        "idx": 957,
        "db_id": "dog_kennels",
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "evidence": "",
        "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "pred": "SELECT O.first_name, D.name FROM OWNERS AS O JOIN DOGS AS D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia'",
        "pred_result": 1,
        "repair_sql": "SELECT O.first_name, D.name FROM OWNERS AS O JOIN DOGS AS D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia'",
        "repair_result": 1
    },
    {
        "idx": 958,
        "db_id": "dog_kennels",
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "pred": "SELECT D.date_arrived, D.date_departed FROM DOGS AS D JOIN TREATMENTS AS T ON D.dog_id = T.dog_id GROUP BY D.dog_id",
        "pred_result": 1,
        "repair_sql": "SELECT D.date_arrived, D.date_departed FROM DOGS AS D JOIN TREATMENTS AS T ON D.dog_id = T.dog_id;",
        "repair_result": 1
    },
    {
        "idx": 959,
        "db_id": "dog_kennels",
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "pred": "SELECT D.date_arrived, D.date_departed FROM DOGS AS D JOIN TREATMENTS AS T ON D.dog_id = T.dog_id",
        "pred_result": 1,
        "repair_sql": "SELECT D.date_arrived, D.date_departed FROM DOGS AS D JOIN TREATMENTS AS T ON D.dog_id = T.dog_id",
        "repair_result": 1
    },
    {
        "idx": 960,
        "db_id": "dog_kennels",
        "question": "List the last name of the owner owning the youngest dog.",
        "evidence": "",
        "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "pred": "SELECT O.last_name FROM DOGS AS D JOIN OWNERS AS O ON D.owner_id = O.owner_id ORDER BY D.date_of_birth DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT O.last_name FROM DOGS AS D JOIN OWNERS AS O ON D.owner_id = O.owner_id ORDER BY D.date_of_birth DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 961,
        "db_id": "dog_kennels",
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "evidence": "",
        "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "pred": "SELECT O.last_name FROM OWNERS AS O JOIN DOGS AS D ON O.owner_id = D.owner_id ORDER BY D.date_of_birth DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT O.last_name FROM OWNERS AS O JOIN DOGS AS D ON O.owner_id = D.owner_id ORDER BY D.date_of_birth DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 962,
        "db_id": "dog_kennels",
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "evidence": "",
        "gold": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "pred": "SELECT email_address FROM professionals WHERE state IN ('Hawaii', 'Wisconsin')",
        "pred_result": 1,
        "repair_sql": "SELECT email_address FROM professionals WHERE state IN ('Hawaii', 'Wisconsin');",
        "repair_result": 1
    },
    {
        "idx": 963,
        "db_id": "dog_kennels",
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "evidence": "",
        "gold": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "pred": "SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
        "pred_result": 1,
        "repair_sql": "SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';",
        "repair_result": 1
    },
    {
        "idx": 964,
        "db_id": "dog_kennels",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "evidence": "",
        "gold": "SELECT date_arrived ,  date_departed FROM Dogs",
        "pred": "SELECT date_arrived, date_departed FROM DOGS",
        "pred_result": 1,
        "repair_sql": "SELECT date_arrived, date_departed FROM DOGS;",
        "repair_result": 1
    },
    {
        "idx": 965,
        "db_id": "dog_kennels",
        "question": "List the arrival date and the departure date for all the dogs.",
        "evidence": "",
        "gold": "SELECT date_arrived ,  date_departed FROM Dogs",
        "pred": "SELECT date_arrived, date_departed FROM DOGS",
        "pred_result": 1,
        "repair_sql": "SELECT date_arrived, date_departed FROM DOGS;",
        "repair_result": 1
    },
    {
        "idx": 966,
        "db_id": "dog_kennels",
        "question": "How many dogs went through any treatments?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "pred": "SELECT COUNT(DISTINCT dog_id) FROM TREATMENTS",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT dog_id) FROM TREATMENTS;",
        "repair_result": 1
    },
    {
        "idx": 967,
        "db_id": "dog_kennels",
        "question": "Count the number of dogs that went through a treatment.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "pred": "SELECT count(DISTINCT T1.dog_id) FROM TREATMENTS AS T1 JOIN DOGS AS T2 ON T1.dog_id = T2.dog_id",
        "pred_result": 1,
        "repair_sql": "SELECT count(DISTINCT T1.dog_id) FROM TREATMENTS AS T1 JOIN DOGS AS T2 ON T1.dog_id = T2.dog_id;",
        "repair_result": 1
    },
    {
        "idx": 968,
        "db_id": "dog_kennels",
        "question": "How many professionals have performed any treatment to dogs?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "pred": "SELECT COUNT(DISTINCT professional_id) FROM TREATMENTS",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT professional_id) FROM TREATMENTS;",
        "repair_result": 1
    },
    {
        "idx": 969,
        "db_id": "dog_kennels",
        "question": "Find the number of professionals who have ever treated dogs.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "pred": "SELECT COUNT(DISTINCT professional_id) FROM treatments",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT professional_id) FROM treatments;",
        "repair_result": 1
    },
    {
        "idx": 970,
        "db_id": "dog_kennels",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "evidence": "",
        "gold": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "pred": "SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%';",
        "pred_result": 1,
        "repair_sql": "SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%';",
        "repair_result": 1
    },
    {
        "idx": 971,
        "db_id": "dog_kennels",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "evidence": "",
        "gold": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "pred": "SELECT role_code, street, city, state FROM PROFESSIONALS WHERE city LIKE \"%West%\"",
        "pred_result": 1,
        "repair_sql": "SELECT role_code, street, city, state FROM PROFESSIONALS WHERE city LIKE \"%West%\"",
        "repair_result": 1
    },
    {
        "idx": 972,
        "db_id": "dog_kennels",
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "evidence": "",
        "gold": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "pred": "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%';",
        "pred_result": 1,
        "repair_sql": "SELECT first_name,        last_name,        email_address FROM owners WHERE state LIKE '%North%';",
        "repair_result": 1
    },
    {
        "idx": 973,
        "db_id": "dog_kennels",
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "evidence": "",
        "gold": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "pred": "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%';",
        "pred_result": 1,
        "repair_sql": "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%';",
        "repair_result": 1
    },
    {
        "idx": 974,
        "db_id": "dog_kennels",
        "question": "How many dogs have an age below the average?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "pred": "SELECT count(*) FROM DOGS WHERE age < (SELECT avg(age) FROM DOGS)",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM DOGS WHERE age < (SELECT avg(age) FROM DOGS)",
        "repair_result": 1
    },
    {
        "idx": 975,
        "db_id": "dog_kennels",
        "question": "Count the number of dogs of an age below the average.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "pred": "SELECT count(*) FROM DOGS WHERE age < (SELECT avg(age) FROM DOGS)",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM DOGS WHERE age < (SELECT avg(age) FROM DOGS)",
        "repair_result": 1
    },
    {
        "idx": 976,
        "db_id": "dog_kennels",
        "question": "How much does the most recent treatment cost?",
        "evidence": "",
        "gold": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "pred": "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 977,
        "db_id": "dog_kennels",
        "question": "Show me the cost of the most recently performed treatment.",
        "evidence": "",
        "gold": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "pred": "SELECT cost_of_treatment FROM TREATMENTS ORDER BY date_of_treatment DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT cost_of_treatment FROM TREATMENTS ORDER BY date_of_treatment DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 978,
        "db_id": "dog_kennels",
        "question": "How many dogs have not gone through any treatment?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "pred": "SELECT COUNT(dog_id) AS num_dogs FROM dogs EXCEPT SELECT COUNT(dog_id) AS num_dogs FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id",
        "pred_result": "ambiguous column name: dog_id",
        "repair_sql": "SELECT COUNT(dogs.dog_id) AS num_dogs FROM dogs LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.dog_id IS NULL;",
        "repair_result": 1
    },
    {
        "idx": 979,
        "db_id": "dog_kennels",
        "question": "Tell me the number of dogs that have not received any treatment .",
        "evidence": "",
        "gold": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "pred": "SELECT count(*) FROM DOGS EXCEPT SELECT count(DISTINCT dog_id) FROM TREATMENTS",
        "pred_result": 0,
        "repair_sql": "SELECT count(*) FROM DOGS d LEFT JOIN TREATMENTS t ON d.dog_id = t.dog_id WHERE t.dog_id IS NULL;",
        "repair_result": 1
    },
    {
        "idx": 980,
        "db_id": "dog_kennels",
        "question": "How many owners temporarily do not have any dogs?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "pred": "SELECT COUNT(*) FROM OWNERS WHERE owner_id NOT IN (     SELECT owner_id     FROM DOGS )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM OWNERS WHERE owner_id NOT IN (     SELECT DOGS.owner_id     FROM DOGS )",
        "repair_result": 1
    },
    {
        "idx": 981,
        "db_id": "dog_kennels",
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "pred": "SELECT count(*) FROM OWNERS EXCEPT SELECT count(DISTINCT owner_id) FROM DOGS",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM OWNERS o LEFT JOIN DOGS d ON o.owner_id = d.owner_id WHERE d.owner_id IS NULL;",
        "repair_result": 1
    },
    {
        "idx": 982,
        "db_id": "dog_kennels",
        "question": "How many professionals did not operate any treatment on dogs?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "pred": "SELECT COUNT(*) FROM PROFESSIONALS WHERE professional_id NOT IN (     SELECT DISTINCT professional_id     FROM TREATMENTS )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM PROFESSIONALS WHERE professional_id NOT IN (     SELECT DISTINCT professional_id     FROM TREATMENTS     WHERE dog_id IS NOT NULL )",
        "repair_result": 1
    },
    {
        "idx": 983,
        "db_id": "dog_kennels",
        "question": "Find the number of professionals who have not treated any dogs.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "pred": "SELECT COUNT(*) FROM PROFESSIONALS WHERE professional_id NOT IN (     SELECT DISTINCT professional_id     FROM TREATMENTS )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM PROFESSIONALS WHERE professional_id NOT IN (     SELECT DISTINCT professional_id     FROM TREATMENTS );",
        "repair_result": 1
    },
    {
        "idx": 984,
        "db_id": "dog_kennels",
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "evidence": "",
        "gold": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "pred": "SELECT name, age, weight FROM dogs WHERE abandoned_yn = '1'",
        "pred_result": 1,
        "repair_sql": "SELECT name, age, weight FROM dogs WHERE abandoned_yn = '1'",
        "repair_result": 1
    },
    {
        "idx": 985,
        "db_id": "dog_kennels",
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "evidence": "",
        "gold": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "pred": "SELECT name, age, weight FROM DOGS WHERE abandoned_yn = '1'",
        "pred_result": 1,
        "repair_sql": "SELECT name,        age,        weight FROM DOGS WHERE abandoned_yn = '1';",
        "repair_result": 1
    },
    {
        "idx": 986,
        "db_id": "dog_kennels",
        "question": "What is the average age of all the dogs?",
        "evidence": "",
        "gold": "SELECT avg(age) FROM Dogs",
        "pred": "SELECT AVG(age) AS average_age FROM DOGS",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(age) AS average_age FROM DOGS;",
        "repair_result": 1
    },
    {
        "idx": 987,
        "db_id": "dog_kennels",
        "question": "Compute the average age of all the dogs.",
        "evidence": "",
        "gold": "SELECT avg(age) FROM Dogs",
        "pred": "SELECT AVG(age) AS average_age FROM DOGS",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(age) AS average_age FROM DOGS;",
        "repair_result": 1
    },
    {
        "idx": 988,
        "db_id": "dog_kennels",
        "question": "What is the age of the oldest dog?",
        "evidence": "",
        "gold": "SELECT max(age) FROM Dogs",
        "pred": "SELECT MAX(age) AS oldest_age FROM DOGS",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(age) AS oldest_age FROM DOGS",
        "repair_result": 1
    },
    {
        "idx": 989,
        "db_id": "dog_kennels",
        "question": "Tell me the age of the oldest dog.",
        "evidence": "",
        "gold": "SELECT max(age) FROM Dogs",
        "pred": "SELECT MAX(age) AS oldest_age FROM DOGS",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(age) AS oldest_age FROM DOGS;",
        "repair_result": 1
    },
    {
        "idx": 990,
        "db_id": "dog_kennels",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "evidence": "",
        "gold": "SELECT charge_type ,  charge_amount FROM Charges",
        "pred": "SELECT charge_type, charge_amount FROM charges",
        "pred_result": 1,
        "repair_sql": "SELECT charge_type, charge_amount FROM charges;",
        "repair_result": 1
    },
    {
        "idx": 991,
        "db_id": "dog_kennels",
        "question": "List each charge type and its amount.",
        "evidence": "",
        "gold": "SELECT charge_type ,  charge_amount FROM Charges",
        "pred": "SELECT charge_type, charge_amount FROM CHARGES",
        "pred_result": 1,
        "repair_sql": "SELECT charge_type,        charge_amount FROM CHARGES;",
        "repair_result": 1
    },
    {
        "idx": 992,
        "db_id": "dog_kennels",
        "question": "How much does the most expensive charge type costs?",
        "evidence": "",
        "gold": "SELECT max(charge_amount) FROM Charges",
        "pred": "SELECT max(charge_amount) as most_expensive_charge FROM charges",
        "pred_result": 1,
        "repair_sql": "SELECT charge_amount  FROM charges  ORDER BY charge_amount DESC  LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 993,
        "db_id": "dog_kennels",
        "question": "What is the charge amount of the most expensive charge type?",
        "evidence": "",
        "gold": "SELECT max(charge_amount) FROM Charges",
        "pred": "SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 994,
        "db_id": "dog_kennels",
        "question": "List the email, cell phone and home phone of all the professionals.",
        "evidence": "",
        "gold": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "pred": "SELECT email_address, cell_number, home_phone FROM professionals",
        "pred_result": 1,
        "repair_sql": "SELECT email_address,        cell_number,        home_phone FROM professionals;",
        "repair_result": 1
    },
    {
        "idx": 995,
        "db_id": "dog_kennels",
        "question": "What are the email, cell phone and home phone of each professional?",
        "evidence": "",
        "gold": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "pred": "SELECT email_address, cell_number, home_phone FROM professionals;",
        "pred_result": 1,
        "repair_sql": "SELECT email_address,        cell_number,        home_phone FROM professionals;",
        "repair_result": 1
    },
    {
        "idx": 996,
        "db_id": "dog_kennels",
        "question": "What are all the possible breed type and size type combinations?",
        "evidence": "",
        "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "pred": "SELECT BREEDS.breed_name, SIZES.size_description FROM BREEDS CROSS JOIN SIZES",
        "pred_result": 0,
        "repair_sql": "SELECT BREEDS.breed_name, SIZES.size_description FROM BREEDS CROSS JOIN SIZES;",
        "repair_result": 0
    },
    {
        "idx": 997,
        "db_id": "dog_kennels",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "evidence": "",
        "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "pred": "SELECT DISTINCT breed_code, size_code FROM DOGS",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT breed_code, size_code FROM DOGS;",
        "repair_result": 1
    },
    {
        "idx": 998,
        "db_id": "dog_kennels",
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "pred": "SELECT P.first_name, TT.treatment_type_description FROM PROFESSIONALS AS P JOIN TREATMENTS AS T ON P.professional_id = T.professional_id JOIN TREATMENT_TYPES AS TT ON T.treatment_type_code = TT.treatment_type_code",
        "pred_result": 1,
        "repair_sql": "SELECT P.first_name, TT.treatment_type_description FROM PROFESSIONALS AS P JOIN TREATMENTS AS T ON P.professional_id = T.professional_id JOIN TREATMENT_TYPES AS TT ON T.treatment_type_code = TT.treatment_type_code",
        "repair_result": 1
    },
    {
        "idx": 999,
        "db_id": "dog_kennels",
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "pred": "SELECT P.first_name, TT.treatment_type_description FROM PROFESSIONALS AS P JOIN TREATMENTS AS T ON P.professional_id = T.professional_id JOIN TREATMENT_TYPES AS TT ON T.treatment_type_code = TT.treatment_type_code",
        "pred_result": 1,
        "repair_sql": "SELECT P.first_name, TT.treatment_type_description FROM PROFESSIONALS AS P JOIN TREATMENTS AS T ON P.professional_id = T.professional_id JOIN TREATMENT_TYPES AS TT ON T.treatment_type_code = TT.treatment_type_code;",
        "repair_result": 1
    },
    {
        "idx": 1000,
        "db_id": "singer",
        "question": "How many singers are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM singer",
        "pred": "SELECT count(*) FROM SINGER",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM SINGER;",
        "repair_result": 1
    },
    {
        "idx": 1001,
        "db_id": "singer",
        "question": "What is the count of singers?",
        "evidence": "",
        "gold": "SELECT count(*) FROM singer",
        "pred": "SELECT count(*) FROM SINGER",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM SINGER",
        "repair_result": 1
    },
    {
        "idx": 1002,
        "db_id": "singer",
        "question": "List the name of singers in ascending order of net worth.",
        "evidence": "",
        "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "pred": "SELECT name FROM SINGER ORDER BY net_worth_millions ASC",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM SINGER ORDER BY net_worth_millions ASC;",
        "repair_result": 1
    },
    {
        "idx": 1003,
        "db_id": "singer",
        "question": "What are the names of singers ordered by ascending net worth?",
        "evidence": "",
        "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "pred": "SELECT name FROM SINGER ORDER BY net_worth_millions ASC",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM SINGER ORDER BY net_worth_millions ASC;",
        "repair_result": 1
    },
    {
        "idx": 1004,
        "db_id": "singer",
        "question": "What are the birth year and citizenship of singers?",
        "evidence": "",
        "gold": "SELECT Birth_Year ,  Citizenship FROM singer",
        "pred": "SELECT birth_year, citizenship FROM singer",
        "pred_result": 1,
        "repair_sql": "SELECT birth_year,        citizenship FROM singer;",
        "repair_result": 1
    },
    {
        "idx": 1005,
        "db_id": "singer",
        "question": "What are the birth years and citizenships of the singers?",
        "evidence": "",
        "gold": "SELECT Birth_Year ,  Citizenship FROM singer",
        "pred": "SELECT birth_year, citizenship FROM singer",
        "pred_result": 1,
        "repair_sql": "SELECT birth_year, citizenship FROM singer;",
        "repair_result": 1
    },
    {
        "idx": 1006,
        "db_id": "singer",
        "question": "List the name of singers whose citizenship is not \"France\".",
        "evidence": "",
        "gold": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "pred": "SELECT name FROM SINGER WHERE citizenship != 'France'",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM SINGER WHERE citizenship != 'France'",
        "repair_result": 1
    },
    {
        "idx": 1007,
        "db_id": "singer",
        "question": "What are the names of the singers who are not French citizens?",
        "evidence": "",
        "gold": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "pred": "SELECT name FROM SINGER WHERE citizenship != 'France'",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM SINGER WHERE citizenship != 'France'",
        "repair_result": 1
    },
    {
        "idx": 1008,
        "db_id": "singer",
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "evidence": "",
        "gold": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "pred": "SELECT name FROM singer WHERE birth_year IN (1948, 1949)",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM singer WHERE birth_year IN (1948, 1949);",
        "repair_result": 1
    },
    {
        "idx": 1009,
        "db_id": "singer",
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "evidence": "",
        "gold": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "pred": "SELECT name FROM singer WHERE birth_year IN (1948, 1949)",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM singer WHERE birth_year IN (1948, 1949);",
        "repair_result": 1
    },
    {
        "idx": 1010,
        "db_id": "singer",
        "question": "What is the name of the singer with the largest net worth?",
        "evidence": "",
        "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "pred": "SELECT name FROM SINGER ORDER BY net_worth_millions DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM SINGER ORDER BY net_worth_millions DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 1011,
        "db_id": "singer",
        "question": "What is the name of the singer who is worth the most?",
        "evidence": "",
        "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "pred": "SELECT name FROM SINGER ORDER BY net_worth_millions DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM SINGER ORDER BY net_worth_millions DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 1012,
        "db_id": "singer",
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "evidence": "",
        "gold": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "pred": "SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship",
        "pred_result": 1,
        "repair_sql": "SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship;",
        "repair_result": 1
    },
    {
        "idx": 1013,
        "db_id": "singer",
        "question": "For each citizenship, how many singers are from that country?",
        "evidence": "",
        "gold": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "pred": "SELECT citizenship, COUNT(*) FROM SINGER GROUP BY citizenship",
        "pred_result": 1,
        "repair_sql": "SELECT citizenship, COUNT(*) FROM SINGER GROUP BY citizenship;",
        "repair_result": 1
    },
    {
        "idx": 1014,
        "db_id": "singer",
        "question": "Please show the most common citizenship of singers.",
        "evidence": "",
        "gold": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT citizenship FROM SINGER GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT citizenship FROM SINGER GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 1015,
        "db_id": "singer",
        "question": "What is the most common singer citizenship ?",
        "evidence": "",
        "gold": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "pred": "SELECT citizenship FROM SINGER GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT citizenship FROM SINGER GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;",
        "repair_result": 1
    },
    {
        "idx": 1016,
        "db_id": "singer",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "evidence": "",
        "gold": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "pred": "SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM SINGER GROUP BY citizenship",
        "pred_result": 1,
        "repair_sql": "SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM SINGER GROUP BY citizenship;",
        "repair_result": 1
    },
    {
        "idx": 1017,
        "db_id": "singer",
        "question": "For each citizenship, what is the maximum net worth?",
        "evidence": "",
        "gold": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "pred": "SELECT citizenship, max(net_worth_millions) FROM SINGER GROUP BY citizenship",
        "pred_result": 1,
        "repair_sql": "SELECT citizenship, max(net_worth_millions)  FROM SINGER  GROUP BY citizenship;",
        "repair_result": 1
    },
    {
        "idx": 1018,
        "db_id": "singer",
        "question": "Show titles of songs and names of singers.",
        "evidence": "",
        "gold": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "pred": "SELECT SONG.title, SINGER.name FROM SONG JOIN SINGER ON SONG.singer_id = SINGER.singer_id",
        "pred_result": 1,
        "repair_sql": "SELECT SONG.title, SINGER.name FROM SONG JOIN SINGER ON SONG.singer_id = SINGER.singer_id;",
        "repair_result": 1
    },
    {
        "idx": 1019,
        "db_id": "singer",
        "question": "What are the song titles and singer names?",
        "evidence": "",
        "gold": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "pred": "SELECT SONG.title, SINGER.name FROM SONG JOIN SINGER ON SONG.singer_id = SINGER.singer_id",
        "pred_result": 1,
        "repair_sql": "SELECT SONG.title, SINGER.name FROM SONG JOIN SINGER ON SONG.singer_id = SINGER.singer_id;",
        "repair_result": 1
    },
    {
        "idx": 1020,
        "db_id": "singer",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "pred": "SELECT DISTINCT S.name FROM SINGER AS S JOIN SONG AS SO ON S.singer_id = SO.singer_id WHERE SO.sales > 300000",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT S.name FROM SINGER AS S JOIN SONG AS SO ON S.singer_id = SO.singer_id WHERE SO.sales > 300000;",
        "repair_result": 1
    },
    {
        "idx": 1021,
        "db_id": "singer",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "pred": "SELECT DISTINCT S.name FROM SINGER AS S JOIN SONG AS SO ON S.singer_id = SO.singer_id WHERE SO.sales > 300000",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT S.name FROM SINGER AS S JOIN SONG AS SO ON S.singer_id = SO.singer_id WHERE SO.sales > 300000;",
        "repair_result": 1
    },
    {
        "idx": 1022,
        "db_id": "singer",
        "question": "Show the names of singers that have more than one song.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "pred": "SELECT S.name FROM SINGER AS S JOIN SONG AS SO ON S.singer_id = SO.singer_id GROUP BY S.singer_id HAVING COUNT(SO.song_id) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT S.name FROM SINGER AS S JOIN SONG AS SO ON S.singer_id = SO.singer_id GROUP BY S.singer_id HAVING COUNT(SO.song_id) > 1",
        "repair_result": 1
    },
    {
        "idx": 1023,
        "db_id": "singer",
        "question": "What are the names of the singers that have more than one songs?",
        "evidence": "",
        "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "pred": "SELECT T1.name FROM SINGER AS T1 JOIN SONG AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id HAVING COUNT(*) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.name FROM SINGER AS T1 JOIN SONG AS T2 ON T1.singer_id = T2.singer_id GROUP BY T1.singer_id HAVING COUNT(*) > 1",
        "repair_result": 1
    },
    {
        "idx": 1024,
        "db_id": "singer",
        "question": "Show the names of singers and the total sales of their songs.",
        "evidence": "",
        "gold": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "pred": "SELECT S.name, SUM(SO.sales) AS total_sales FROM SINGER AS S JOIN SONG AS SO ON S.singer_id = SO.singer_id GROUP BY S.singer_id",
        "pred_result": 1,
        "repair_sql": "SELECT S.name, SUM(SO.sales) AS total_sales FROM SINGER AS S JOIN SONG AS SO ON S.singer_id = SO.singer_id GROUP BY S.singer_id;",
        "repair_result": 1
    },
    {
        "idx": 1025,
        "db_id": "singer",
        "question": "For each singer name, what is the total sales for their songs?",
        "evidence": "",
        "gold": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "pred": "SELECT S.name, SUM(SO.sales) AS total_sales FROM SINGER AS S JOIN SONG AS SO ON S.singer_id = SO.singer_id GROUP BY S.name",
        "pred_result": 1,
        "repair_sql": "SELECT S.name, SUM(SO.sales) AS total_sales FROM SINGER AS S JOIN SONG AS SO ON S.singer_id = SO.singer_id GROUP BY S.name;",
        "repair_result": 1
    },
    {
        "idx": 1026,
        "db_id": "singer",
        "question": "List the name of singers that do not have any song.",
        "evidence": "",
        "gold": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "pred": "SELECT name FROM SINGER EXCEPT SELECT S.name FROM SINGER AS S JOIN SONG AS G ON S.singer_id = G.singer_id",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM SINGER EXCEPT SELECT SINGER.name FROM SINGER JOIN SONG ON SINGER.singer_id = SONG.singer_id;",
        "repair_result": 1
    },
    {
        "idx": 1027,
        "db_id": "singer",
        "question": "What is the sname of every sing that does not have any song?",
        "evidence": "",
        "gold": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "pred": "SELECT name FROM SINGER EXCEPT SELECT S.name FROM SINGER AS S JOIN SONG AS G ON S.singer_id = G.singer_id",
        "pred_result": 1,
        "repair_sql": "SELECT name FROM SINGER EXCEPT SELECT S.name FROM SINGER AS S JOIN SONG AS G ON S.singer_id = G.singer_id",
        "repair_result": 1
    },
    {
        "idx": 1028,
        "db_id": "singer",
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "evidence": "",
        "gold": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "pred": "SELECT citizenship FROM SINGER WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM SINGER WHERE birth_year > 1955",
        "pred_result": 1,
        "repair_sql": "SELECT citizenship FROM SINGER WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM SINGER WHERE birth_year > 1955;",
        "repair_result": 1
    },
    {
        "idx": 1029,
        "db_id": "singer",
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "evidence": "",
        "gold": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "pred": "SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year > 1955",
        "pred_result": 1,
        "repair_sql": "SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year > 1955;",
        "repair_result": 1
    },
    {
        "idx": 1030,
        "db_id": "real_estate_properties",
        "question": "How many available features are there in total?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Other_Available_Features",
        "pred": "SELECT count(*) FROM OTHER_AVAILABLE_FEATURES",
        "pred_result": 1,
        "repair_sql": "SELECT count(*) FROM OTHER_AVAILABLE_FEATURES",
        "repair_result": 1
    },
    {
        "idx": 1031,
        "db_id": "real_estate_properties",
        "question": "What is the feature type name of feature AirCon?",
        "evidence": "",
        "gold": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "pred": "SELECT T2.feature_type_name FROM OTHER_AVAILABLE_FEATURES AS T1 JOIN REF_FEATURE_TYPES AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = 'AirCon'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.feature_type_name FROM OTHER_AVAILABLE_FEATURES AS T1 JOIN REF_FEATURE_TYPES AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = 'AirCon'",
        "repair_result": 1
    },
    {
        "idx": 1032,
        "db_id": "real_estate_properties",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "evidence": "",
        "gold": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "pred": "SELECT P.property_id, R.property_type_description FROM PROPERTIES AS P JOIN REF_PROPERTY_TYPES AS R ON P.property_type_code = R.property_type_code",
        "pred_result": 0,
        "repair_sql": "SELECT P.property_id, R.property_type_description FROM PROPERTIES AS P JOIN REF_PROPERTY_TYPES AS R ON P.property_type_code = R.property_type_code;",
        "repair_result": 0
    },
    {
        "idx": 1033,
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "evidence": "",
        "gold": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "pred": "SELECT property_name FROM properties WHERE property_type_code IN ('House', 'Apartment') AND room_count > 1",
        "pred_result": 0,
        "repair_sql": "SELECT property_name FROM properties WHERE property_type_code IN ('House', 'Apartment') AND room_count > 1",
        "repair_result": 0
    }
]