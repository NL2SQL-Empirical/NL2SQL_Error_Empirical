[
    {
        "idx": 0,
        "db_id": "e_commerce",
        "question": "List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.",
        "evidence": "",
        "gold": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3",
        "pred": "SELECT C.`customer_id`, C.`customer_first_name`, C.`customer_last_name` FROM Customers AS C JOIN Orders AS O ON C.`customer_id` = O.`customer_id` JOIN ( SELECT customer_id, COUNT(*) AS order_count FROM Orders GROUP BY customer_id HAVING order_count > 2 ) AS OC ON C.`customer_id` = OC.`customer_id` JOIN ( SELECT customer_id, COUNT(*) AS item_count FROM Order_Items GROUP BY customer_id HAVING item_count > 2 ) AS OI ON C.`customer_id` = OI.`customer_id`",
        "pred_result": "no such column: customer_id",
        "repair_sql": "SELECT C.`customer_id`, C.`customer_first_name`, C.`customer_last_name` FROM Customers AS C JOIN Orders AS O ON C.`customer_id` = O.`customer_id` JOIN ( SELECT O.customer_id, COUNT(*) AS order_count FROM Orders AS O GROUP BY O.customer_id HAVING COUNT(*) > 2 ) AS OC ON C.`customer_id` = OC.`customer_id` JOIN ( SELECT O.customer_id, COUNT(*) AS item_count FROM Order_Items AS OI JOIN Orders AS O ON OI.order_id = O.order_id GROUP BY O.customer_id HAVING COUNT(*) > 2 ) AS OI ON C.`customer_id` = OI.`customer_id`",
        "repair_result": 1
    },
    {
        "idx": 1,
        "db_id": "e_commerce",
        "question": "What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?",
        "evidence": "",
        "gold": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3",
        "pred": "SELECT C.`customer_id`, C.`customer_first_name`, C.`customer_last_name` FROM Customers AS C JOIN Orders AS O ON C.`customer_id` = O.`customer_id` JOIN ( SELECT `customer_id`, COUNT(*) AS order_count FROM Orders GROUP BY `customer_id` HAVING order_count > 2 ) AS OC ON C.`customer_id` = OC.`customer_id` JOIN ( SELECT `customer_id`, COUNT(*) AS item_count FROM Order_Items GROUP BY `customer_id` HAVING item_count > 2 ) AS OI ON C.`customer_id` = OI.`customer_id`",
        "pred_result": "no such column: customer_id",
        "repair_sql": "SELECT C.`customer_id`, C.`customer_first_name`, C.`customer_last_name` FROM Customers AS C JOIN Orders AS O ON C.`customer_id` = O.`customer_id` JOIN ( SELECT `customer_id`, COUNT(*) AS order_count FROM Orders GROUP BY `customer_id` HAVING COUNT(*) > 2 ) AS OC ON C.`customer_id` = OC.`customer_id` JOIN ( SELECT `customer_id`, COUNT(*) AS item_count FROM Order_Items GROUP BY `customer_id` HAVING COUNT(*) >= 3 ) AS OI ON C.`customer_id` = OI.`customer_id`",
        "repair_result": "no such column: customer_id"
    },
    {
        "idx": 2,
        "db_id": "e_commerce",
        "question": "For the orders with any produts, how many products does each orders contain ? List the order id, status and the number.",
        "evidence": "",
        "gold": "SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id",
        "pred": "SELECT O.order_id, O.order_status_code, COUNT(OI.product_id) AS num_products FROM Orders AS O JOIN Order_Items AS OI ON O.order_id = OI.order_id GROUP BY O.order_id",
        "pred_result": 1,
        "repair_sql": "SELECT O.order_id, O.order_status_code, COUNT(OI.product_id) AS num_products FROM Orders AS O JOIN Order_Items AS OI ON O.order_id = OI.order_id GROUP BY O.order_id",
        "repair_result": 1
    },
    {
        "idx": 3,
        "db_id": "e_commerce",
        "question": "For every order, how many products does it contain, and what are the orders' statuses and ids?",
        "evidence": "",
        "gold": "SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id",
        "pred": "SELECT O.order_id, O.order_status_code, COUNT(OI.product_id) AS num_products FROM Orders AS O JOIN Order_Items AS OI ON O.order_id = OI.order_id GROUP BY O.order_id, O.order_status_code",
        "pred_result": 1,
        "repair_sql": "SELECT O.order_id, O.order_status_code, COUNT(OI.product_id) AS num_products FROM Orders AS O JOIN Order_Items AS OI ON O.order_id = OI.order_id GROUP BY O.order_id, O.order_status_code",
        "repair_result": 1
    },
    {
        "idx": 4,
        "db_id": "e_commerce",
        "question": "List the dates of the orders which were placed at the earliest time or have more than 1 items.",
        "evidence": "",
        "gold": "SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1",
        "pred": "SELECT DISTINCT `date_order_placed` FROM Orders WHERE `date_order_placed` = (SELECT MIN(`date_order_placed`) FROM Orders) OR `order_id` IN (SELECT `order_id` FROM Order_Items GROUP BY `order_id` HAVING COUNT(*) > 1)",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `date_order_placed` FROM Orders WHERE `date_order_placed` = (SELECT MIN(`date_order_placed`) FROM Orders) OR `order_id` IN (SELECT `order_id` FROM Order_Items GROUP BY `order_id` HAVING COUNT(*) > 1)",
        "repair_result": 1
    },
    {
        "idx": 5,
        "db_id": "e_commerce",
        "question": "What are the dates of the earliest order and the dates of all orders with more than 1 item?",
        "evidence": "",
        "gold": "SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1",
        "pred": "SELECT MIN(date_order_placed) FROM Orders; SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1);",
        "pred_result": "You can only execute one statement at a time.",
        "repair_sql": "SELECT MIN(date_order_placed) AS earliest_order_date FROM Orders; SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1);",
        "repair_result": "You can only execute one statement at a time."
    },
    {
        "idx": 6,
        "db_id": "e_commerce",
        "question": "Which customers did not make any orders? List the first name, middle initial and last name.",
        "evidence": "",
        "gold": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id",
        "pred": "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)",
        "pred_result": 1,
        "repair_sql": "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)",
        "repair_result": 1
    },
    {
        "idx": 7,
        "db_id": "e_commerce",
        "question": "WHat are the first and last names, and middle initials of all customers who did not make any orders?",
        "evidence": "",
        "gold": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id",
        "pred": "SELECT customer_first_name, customer_last_name, customer_middle_initial FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)",
        "pred_result": 0,
        "repair_sql": "SELECT customer_first_name, customer_last_name, customer_middle_initial FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)",
        "repair_result": 0
    },
    {
        "idx": 8,
        "db_id": "e_commerce",
        "question": "What are the id, name, price and color of the products which have not been ordered for at least twice?",
        "evidence": "",
        "gold": "SELECT product_id ,  product_name ,  product_price ,  product_color FROM Products EXCEPT SELECT T1.product_id ,  T1.product_name ,  T1.product_price ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.product_id HAVING count(*)  >=  2",
        "pred": "SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) >= 2 )",
        "pred_result": 1,
        "repair_sql": "SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) >= 2 )",
        "repair_result": 1
    },
    {
        "idx": 9,
        "db_id": "e_commerce",
        "question": "What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?",
        "evidence": "",
        "gold": "select t1.product_id ,  t1.product_name ,  t1.product_price ,  t1.product_color from products as t1 join order_items as t2 on t1.product_id  =  t2.product_id join orders as t3 on t2.order_id  =  t3.order_id group by t1.product_id having count(*) < 2",
        "pred": "SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id IN ( SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(DISTINCT order_id) < 2 )",
        "pred_result": 1,
        "repair_sql": "SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id IN ( SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(DISTINCT order_id) < 2 )",
        "repair_result": 1
    },
    {
        "idx": 10,
        "db_id": "e_commerce",
        "question": "Which orders have at least 2 products on it? List the order id and date.",
        "evidence": "",
        "gold": "SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2",
        "pred": "SELECT O.`order_id`, O.`date_order_placed` FROM Orders AS O JOIN ( SELECT order_id, COUNT(*) AS num_products FROM Order_Items GROUP BY order_id HAVING num_products >= 2 ) AS OI ON O.`order_id` = OI.`order_id`",
        "pred_result": 1,
        "repair_sql": "SELECT O.`order_id`, O.`date_order_placed` FROM Orders AS O JOIN ( SELECT order_id, COUNT(*) AS num_products FROM Order_Items GROUP BY order_id HAVING num_products >= 2 ) AS OI ON O.`order_id` = OI.`order_id`",
        "repair_result": 1
    },
    {
        "idx": 11,
        "db_id": "e_commerce",
        "question": "What are the ids and dates of the orders with at least two products?",
        "evidence": "",
        "gold": "SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2",
        "pred": "SELECT O.`order_id`, O.`date_order_placed` FROM Orders AS O JOIN ( SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(DISTINCT product_id) >= 2 ) AS OI ON O.`order_id` = OI.`order_id`",
        "pred_result": 1,
        "repair_sql": "SELECT O.`order_id`, O.`date_order_placed` FROM Orders AS O JOIN ( SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(DISTINCT product_id) >= 2 ) AS OI ON O.`order_id` = OI.`order_id`",
        "repair_result": 1
    },
    {
        "idx": 12,
        "db_id": "e_commerce",
        "question": "Which product are listed in orders most frequently? List the id, product name and price.",
        "evidence": "",
        "gold": "SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`product_id`, T1.`product_name`, T1.`product_price` FROM Products AS T1 JOIN Order_Items AS T2 ON T1.`product_id` = T2.`product_id` GROUP BY T1.`product_id` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`product_id`, T1.`product_name`, T1.`product_price` FROM Products AS T1 JOIN Order_Items AS T2 ON T1.`product_id` = T2.`product_id` GROUP BY T1.`product_id` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 13,
        "db_id": "e_commerce",
        "question": "What are the ids, names, and prices of all products that are ordered most frequently?",
        "evidence": "",
        "gold": "SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.product_id, T1.product_name, T1.product_price FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id, T1.product_name, T1.product_price ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.product_id, T1.product_name, T1.product_price FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id, T1.product_name, T1.product_price ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 14,
        "db_id": "e_commerce",
        "question": "Which order have the least sum of the product prices. List the order id and sum.",
        "evidence": "",
        "gold": "SELECT T1.order_id ,  sum(T2.product_price) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.order_id ORDER BY sum(T2.product_price) ASC LIMIT 1",
        "pred": "SELECT O.order_id, SUM(P.product_price) AS total_price FROM Orders AS O JOIN Order_Items AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id GROUP BY O.order_id ORDER BY total_price LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT O.order_id, SUM(P.product_price) AS total_price FROM Orders AS O JOIN Order_Items AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id GROUP BY O.order_id ORDER BY total_price LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 15,
        "db_id": "e_commerce",
        "question": "What is the order that total cost the least , and how much is the total cost ?",
        "evidence": "",
        "gold": "select t1.order_id ,  sum(t2.product_price) from order_items as t1 join products as t2 on t1.product_id  =  t2.product_id group by t1.order_id order by sum(t2.product_price) asc limit 1",
        "pred": "SELECT `order_id`, SUM(`product_price`) AS total_cost FROM Orders JOIN Order_Items ON Orders.`order_id` = Order_Items.`order_id` JOIN Products ON Order_Items.`product_id` = Products.`product_id` GROUP BY `order_id` ORDER BY total_cost LIMIT 1",
        "pred_result": "ambiguous column name: order_id",
        "repair_sql": "SELECT Orders.`order_id`, SUM(Products.`product_price`) AS total_cost FROM Orders JOIN Order_Items ON Orders.`order_id` = Order_Items.`order_id` JOIN Products ON Order_Items.`product_id` = Products.`product_id` GROUP BY Orders.`order_id` ORDER BY total_cost LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 16,
        "db_id": "e_commerce",
        "question": "What is the most popular payment method?",
        "evidence": "",
        "gold": "SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `payment_method_code`, COUNT(*) AS count FROM Customer_Payment_Methods GROUP BY `payment_method_code` ORDER BY count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `payment_method_code`, COUNT(*) AS count FROM Customer_Payment_Methods GROUP BY `payment_method_code` ORDER BY count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 17,
        "db_id": "e_commerce",
        "question": "What is the payment method that most customers use?",
        "evidence": "",
        "gold": "SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `payment_method_code`, COUNT(*) AS count FROM Customer_Payment_Methods GROUP BY `payment_method_code` ORDER BY count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `payment_method_code`, COUNT(*) AS count FROM Customer_Payment_Methods GROUP BY `payment_method_code` ORDER BY count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 18,
        "db_id": "e_commerce",
        "question": "How many number of products does each gender of customers buy? List the gender and the number",
        "evidence": "",
        "gold": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code",
        "pred": "SELECT C.gender_code, COUNT(DISTINCT OI.product_id) AS num_products_bought FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id JOIN Order_Items AS OI ON O.order_id = OI.order_id GROUP BY C.gender_code",
        "pred_result": 0,
        "repair_sql": "SELECT C.gender_code, COUNT(DISTINCT OI.product_id) AS num_products_bought FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id JOIN Order_Items AS OI ON O.order_id = OI.order_id GROUP BY C.gender_code",
        "repair_result": 0
    },
    {
        "idx": 19,
        "db_id": "e_commerce",
        "question": "How many products does each gender buy?",
        "evidence": "",
        "gold": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code",
        "pred": "SELECT C.`gender_code`, COUNT(DISTINCT OI.`product_id`) AS num_products_bought FROM Customers AS C JOIN Orders AS O ON C.`customer_id` = O.`customer_id` JOIN Order_Items AS OI ON O.`order_id` = OI.`order_id` GROUP BY C.`gender_code`",
        "pred_result": 0,
        "repair_sql": "SELECT C.`gender_code`, COUNT(DISTINCT OI.`product_id`) AS num_products_bought FROM Customers AS C JOIN Orders AS O ON C.`customer_id` = O.`customer_id` JOIN Order_Items AS OI ON O.`order_id` = OI.`order_id` GROUP BY C.`gender_code`",
        "repair_result": 0
    },
    {
        "idx": 20,
        "db_id": "e_commerce",
        "question": "How many orders has each gender of customers placed?",
        "evidence": "",
        "gold": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code",
        "pred": "SELECT C.`gender_code`, COUNT(*) AS num_orders FROM Customers AS C JOIN Orders AS O ON C.`customer_id` = O.`customer_id` GROUP BY C.`gender_code`",
        "pred_result": 1,
        "repair_sql": "SELECT C.`gender_code`, COUNT(*) AS num_orders FROM Customers AS C JOIN Orders AS O ON C.`customer_id` = O.`customer_id` GROUP BY C.`gender_code`",
        "repair_result": 1
    },
    {
        "idx": 21,
        "db_id": "e_commerce",
        "question": "How many orders has each gender placed?",
        "evidence": "",
        "gold": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code",
        "pred": "SELECT C.gender_code, COUNT(*) AS num_orders FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id GROUP BY C.gender_code",
        "pred_result": 1,
        "repair_sql": "SELECT C.gender_code, COUNT(*) AS num_orders FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id GROUP BY C.gender_code",
        "repair_result": 1
    },
    {
        "idx": 22,
        "db_id": "e_commerce",
        "question": "List the customers' first name, middle initial, last name and payment methods.",
        "evidence": "",
        "gold": "SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id",
        "pred": "SELECT C.customer_first_name, C.customer_middle_initial, C.customer_last_name, CP.payment_method_code FROM Customers AS C JOIN Customer_Payment_Methods AS CP ON C.customer_id = CP.customer_id",
        "pred_result": 1,
        "repair_sql": "SELECT C.customer_first_name, C.customer_middle_initial, C.customer_last_name, CP.payment_method_code FROM Customers AS C JOIN Customer_Payment_Methods AS CP ON C.customer_id = CP.customer_id",
        "repair_result": 1
    },
    {
        "idx": 23,
        "db_id": "e_commerce",
        "question": "What are the first names, middle initials, last names, and payment methods of all customers?",
        "evidence": "",
        "gold": "SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id",
        "pred": "SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id",
        "pred_result": 1,
        "repair_sql": "SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id",
        "repair_result": 1
    },
    {
        "idx": 24,
        "db_id": "e_commerce",
        "question": "List the invoices' status, date and the date of shipment.",
        "evidence": "",
        "gold": "SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number",
        "pred": "SELECT I.`invoice_status_code`, I.`invoice_date`, S.`shipment_date` FROM Invoices AS I JOIN Shipments AS S ON I.`invoice_number` = S.`invoice_number`",
        "pred_result": 1,
        "repair_sql": "SELECT I.`invoice_status_code`, I.`invoice_date`, S.`shipment_date` FROM Invoices AS I JOIN Shipments AS S ON I.`invoice_number` = S.`invoice_number`",
        "repair_result": 1
    },
    {
        "idx": 25,
        "db_id": "e_commerce",
        "question": "What are the statuses, dates, and shipment dates for all invoices?",
        "evidence": "",
        "gold": "SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number",
        "pred": "SELECT invoice_status_code, invoice_date, shipment_date FROM Invoices JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number",
        "pred_result": 1,
        "repair_sql": "SELECT invoice_status_code, invoice_date, shipment_date FROM Invoices JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number",
        "repair_result": 1
    },
    {
        "idx": 26,
        "db_id": "e_commerce",
        "question": "List the names of the products being shipped and the corresponding shipment date.",
        "evidence": "",
        "gold": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "pred": "SELECT P.product_name, S.shipment_date FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Orders AS O ON OI.order_id = O.order_id JOIN Shipments AS S ON O.order_id = S.order_id",
        "pred_result": 0,
        "repair_sql": "SELECT P.product_name, S.shipment_date FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Orders AS O ON OI.order_id = O.order_id JOIN Shipments AS S ON O.order_id = S.order_id",
        "repair_result": 0
    },
    {
        "idx": 27,
        "db_id": "e_commerce",
        "question": "What are the names of the products tht have been shipped, and on what days were they shipped?",
        "evidence": "",
        "gold": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "pred": "SELECT P.product_name, S.shipment_date FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Orders AS O ON OI.order_id = O.order_id JOIN Shipments AS S ON O.order_id = S.order_id",
        "pred_result": 0,
        "repair_sql": "SELECT P.product_name, S.shipment_date FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Orders AS O ON OI.order_id = O.order_id JOIN Shipments AS S ON O.order_id = S.order_id",
        "repair_result": 0
    },
    {
        "idx": 28,
        "db_id": "e_commerce",
        "question": "What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?",
        "evidence": "",
        "gold": "SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id",
        "pred": "SELECT OI.`order_item_status_code`, S.`shipment_tracking_number` FROM Order_Items AS OI JOIN Shipments AS S ON OI.`order_id` = S.`order_id`",
        "pred_result": 0,
        "repair_sql": "SELECT OI.`order_item_status_code`, S.`shipment_tracking_number` FROM Order_Items AS OI JOIN Shipments AS S ON OI.`order_id` = S.`order_id`",
        "repair_result": 0
    },
    {
        "idx": 29,
        "db_id": "e_commerce",
        "question": "What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?",
        "evidence": "",
        "gold": "SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id",
        "pred": "SELECT OI.`order_item_status_code`, S.`shipment_tracking_number` FROM Order_Items AS OI JOIN Shipments AS S ON OI.`order_id` = S.`order_id` AND OI.`order_item_status_code` = 'Delivered'",
        "pred_result": 0,
        "repair_sql": "SELECT OI.`order_item_status_code`, S.`shipment_tracking_number` FROM Order_Items AS OI JOIN Shipments AS S ON OI.`order_id` = S.`order_id` AND OI.`order_item_status_code` = 'Delivered'",
        "repair_result": 0
    },
    {
        "idx": 30,
        "db_id": "e_commerce",
        "question": "What is the product name and the color of the ordered items which have been shipped?",
        "evidence": "",
        "gold": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "pred": "SELECT P.product_name, P.product_color FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Shipments AS S ON OI.order_id = S.order_id WHERE OI.order_item_status_code = 'Delivered'",
        "pred_result": 0,
        "repair_sql": "SELECT P.product_name, P.product_color FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Shipments AS S ON OI.order_id = S.order_id WHERE OI.order_item_status_code = 'Delivered'",
        "repair_result": 0
    },
    {
        "idx": 31,
        "db_id": "e_commerce",
        "question": "What are the names and colors of all products that have been shipped?",
        "evidence": "",
        "gold": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "pred": "SELECT product_name, product_color FROM Products WHERE product_id IN ( SELECT DISTINCT product_id FROM Order_Items WHERE order_id IN ( SELECT order_id FROM Shipments ) )",
        "pred_result": 0,
        "repair_sql": "SELECT product_name, product_color FROM Products WHERE product_id IN ( SELECT DISTINCT product_id FROM Order_Items WHERE order_id IN ( SELECT order_id FROM Shipments ) )",
        "repair_result": 0
    },
    {
        "idx": 32,
        "db_id": "e_commerce",
        "question": "List all the distinct product names, price and descriptions which are bought by female customers.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
        "pred": "SELECT DISTINCT P.product_name, P.product_price, P.product_description FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Orders AS O ON OI.order_id = O.order_id JOIN Customers AS C ON O.customer_id = C.customer_id WHERE C.gender_code = 'Female'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT P.product_name, P.product_price, P.product_description FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Orders AS O ON OI.order_id = O.order_id JOIN Customers AS C ON O.customer_id = C.customer_id WHERE C.gender_code = 'Female'",
        "repair_result": 1
    },
    {
        "idx": 33,
        "db_id": "e_commerce",
        "question": "What are the different names, prices, and descriptions for all products bought by female customers?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
        "pred": "SELECT DISTINCT P.product_name, P.product_price, P.product_description FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Orders AS O ON OI.order_id = O.order_id JOIN Customers AS C ON O.customer_id = C.customer_id WHERE C.gender_code = 'Female'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT P.product_name, P.product_price, P.product_description FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Orders AS O ON OI.order_id = O.order_id JOIN Customers AS C ON O.customer_id = C.customer_id WHERE C.gender_code = 'Female'",
        "repair_result": 1
    },
    {
        "idx": 34,
        "db_id": "e_commerce",
        "question": "What are invoices status of all the orders which have not been shipped?",
        "evidence": "",
        "gold": "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )",
        "pred": "SELECT DISTINCT OI.invoice_status_code FROM Orders AS O JOIN Order_Items AS OI ON O.order_id = OI.order_id LEFT JOIN Shipments AS S ON O.order_id = S.order_id WHERE S.shipment_id IS NULL",
        "pred_result": "no such column: OI.invoice_status_code",
        "repair_sql": "SELECT DISTINCT I.invoice_status_code FROM Orders AS O JOIN Order_Items AS OI ON O.order_id = OI.order_id JOIN Invoices AS I ON OI.order_id = I.invoice_number LEFT JOIN Shipments AS S ON O.order_id = S.order_id WHERE S.shipment_id IS NULL",
        "repair_result": 1
    },
    {
        "idx": 35,
        "db_id": "e_commerce",
        "question": "What are the invoice statuses for all orderes that have not been shipped out yet?",
        "evidence": "",
        "gold": "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )",
        "pred": "SELECT DISTINCT OI.invoice_status_code FROM Orders AS O JOIN Order_Items AS OI ON O.order_id = OI.order_id LEFT JOIN Shipments AS S ON O.order_id = S.order_id WHERE S.shipment_id IS NULL",
        "pred_result": "no such column: OI.invoice_status_code",
        "repair_sql": "SELECT DISTINCT I.invoice_status_code FROM Orders AS O JOIN Order_Items AS OI ON O.order_id = OI.order_id JOIN Invoices AS I ON OI.order_id = I.invoice_number LEFT JOIN Shipments AS S ON O.order_id = S.order_id WHERE S.shipment_id IS NULL",
        "repair_result": 1
    },
    {
        "idx": 36,
        "db_id": "e_commerce",
        "question": "What are the total cost of all the orders ? List the order id , date , and total cost .",
        "evidence": "",
        "gold": "select t1.order_id ,  t1.date_order_placed ,  sum(t3.product_price) from orders as t1 join order_items as t2 on t1.order_id  =  t2.order_id join products as t3 on t2.product_id  =  t3.product_id group by t1.order_id",
        "pred": "SELECT O.order_id, O.date_order_placed, SUM(P.product_price) AS total_cost FROM Orders AS O JOIN Order_Items AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id GROUP BY O.order_id, O.date_order_placed",
        "pred_result": 1,
        "repair_sql": "SELECT O.order_id, O.date_order_placed, SUM(P.product_price) AS total_cost FROM Orders AS O JOIN Order_Items AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id GROUP BY O.order_id, O.date_order_placed",
        "repair_result": 1
    },
    {
        "idx": 37,
        "db_id": "e_commerce",
        "question": "For each order, what is its id, date, and total amount paid?",
        "evidence": "",
        "gold": "SELECT T1.order_id ,  T1.date_order_placed ,  sum(T3.product_price) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id JOIN Products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T1.order_id",
        "pred": "SELECT O.order_id, O.date_order_placed, SUM(P.product_price) AS total_amount_paid FROM Orders AS O JOIN Order_Items AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id GROUP BY O.order_id, O.date_order_placed",
        "pred_result": 1,
        "repair_sql": "SELECT O.order_id, O.date_order_placed, SUM(P.product_price) AS total_amount_paid FROM Orders AS O JOIN Order_Items AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id GROUP BY O.order_id, O.date_order_placed",
        "repair_result": 1
    },
    {
        "idx": 38,
        "db_id": "e_commerce",
        "question": "How many customers have placed any order?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT customer_id) FROM Orders",
        "pred": "SELECT COUNT(DISTINCT customer_id) FROM Orders",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT customer_id) FROM Orders",
        "repair_result": 1
    },
    {
        "idx": 39,
        "db_id": "e_commerce",
        "question": "How many different customers have ordered things?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT customer_id) FROM Orders",
        "pred": "SELECT COUNT(DISTINCT customer_id) FROM Orders",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT customer_id) FROM Orders",
        "repair_result": 1
    },
    {
        "idx": 40,
        "db_id": "e_commerce",
        "question": "How many item states are there in the orders?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT order_item_status_code) FROM Order_items",
        "pred": "SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items",
        "repair_result": 1
    },
    {
        "idx": 41,
        "db_id": "e_commerce",
        "question": "How many different item status codes are there listed in ordered items?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT order_item_status_code) FROM Order_items",
        "pred": "SELECT COUNT(DISTINCT `order_item_status_code`) FROM Order_Items",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT `order_item_status_code`) FROM Order_Items",
        "repair_result": 1
    },
    {
        "idx": 42,
        "db_id": "e_commerce",
        "question": "How many different payment methods are there?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods",
        "pred": "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods",
        "repair_result": 1
    },
    {
        "idx": 43,
        "db_id": "e_commerce",
        "question": "How many different payment methods can customers choose from?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods",
        "pred": "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods",
        "repair_result": 1
    },
    {
        "idx": 44,
        "db_id": "e_commerce",
        "question": "What are the login names and passwords of the customers whose phone number have the prefix '+12'?",
        "evidence": "",
        "gold": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
        "pred": "SELECT `login_name`, `login_password` FROM Customers WHERE phone_number LIKE '+12%'",
        "pred_result": 1,
        "repair_sql": "SELECT `login_name`, `login_password` FROM Customers WHERE phone_number LIKE '+12%'",
        "repair_result": 1
    },
    {
        "idx": 45,
        "db_id": "e_commerce",
        "question": "What are the usernames and passwords of all customers whose phone number starts with '+12'?",
        "evidence": "",
        "gold": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
        "pred": "SELECT `login_name`, `login_password` FROM Customers WHERE phone_number LIKE '+12%'",
        "pred_result": 1,
        "repair_sql": "SELECT `login_name`, `login_password` FROM Customers WHERE phone_number LIKE '+12%'",
        "repair_result": 1
    },
    {
        "idx": 46,
        "db_id": "e_commerce",
        "question": "What are the product sizes of the products whose name has the substring 'Dell'?",
        "evidence": "",
        "gold": "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'",
        "pred": "SELECT DISTINCT `product_size` FROM Products WHERE `product_name` LIKE '%Dell%'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `product_size` FROM Products WHERE `product_name` LIKE '%Dell%'",
        "repair_result": 1
    },
    {
        "idx": 47,
        "db_id": "e_commerce",
        "question": "What are the sizes of all products whose name includes the word 'Dell'?",
        "evidence": "",
        "gold": "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'",
        "pred": "SELECT DISTINCT `product_size` FROM Products WHERE `product_name` LIKE '%Dell%'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `product_size` FROM Products WHERE `product_name` LIKE '%Dell%'",
        "repair_result": 1
    },
    {
        "idx": 48,
        "db_id": "e_commerce",
        "question": "What are the product price and the product size of the products whose price is above average?",
        "evidence": "",
        "gold": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
        "pred": "SELECT `product_price`, `product_size` FROM Products WHERE `product_price` > (SELECT AVG(`product_price`) FROM Products)",
        "pred_result": 1,
        "repair_sql": "SELECT `product_price`, `product_size` FROM Products WHERE `product_price` > (SELECT AVG(`product_price`) FROM Products)",
        "repair_result": 1
    },
    {
        "idx": 49,
        "db_id": "e_commerce",
        "question": "What are the prices and sizes of all products whose price is above the mean?",
        "evidence": "",
        "gold": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
        "pred": "SELECT `product_price`, `product_size` FROM Products WHERE `product_price` > (SELECT AVG(`product_price`) FROM Products)",
        "pred_result": 1,
        "repair_sql": "SELECT `product_price`, `product_size` FROM Products WHERE `product_price` > (SELECT AVG(`product_price`) FROM Products)",
        "repair_result": 1
    },
    {
        "idx": 50,
        "db_id": "e_commerce",
        "question": "How many kinds of products have not been sold?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "pred": "SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items WHERE order_item_status_code = 'Delivered')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items WHERE order_item_status_code = 'Delivered')",
        "repair_result": 1
    },
    {
        "idx": 51,
        "db_id": "e_commerce",
        "question": "What is the number of products that have not been ordered yet?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "pred": "SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items)",
        "repair_result": 1
    },
    {
        "idx": 52,
        "db_id": "e_commerce",
        "question": "How many customers do not have any payment method?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )",
        "pred": "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)",
        "repair_result": 1
    },
    {
        "idx": 53,
        "db_id": "e_commerce",
        "question": "How many customers do not have a listed payment method?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )",
        "pred": "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)",
        "repair_result": 1
    },
    {
        "idx": 54,
        "db_id": "e_commerce",
        "question": "What are all the order status and all the dates of orders?",
        "evidence": "",
        "gold": "SELECT order_status_code ,  date_order_placed FROM Orders",
        "pred": "SELECT DISTINCT `order_status_code`, `date_order_placed` FROM Orders",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `order_status_code`, `date_order_placed` FROM Orders",
        "repair_result": 1
    },
    {
        "idx": 55,
        "db_id": "e_commerce",
        "question": "What are the status codes and dates placed for all of the orders?",
        "evidence": "",
        "gold": "SELECT order_status_code ,  date_order_placed FROM Orders",
        "pred": "SELECT `order_status_code`, `date_order_placed` FROM Orders",
        "pred_result": 1,
        "repair_sql": "SELECT `order_status_code`, `date_order_placed` FROM Orders",
        "repair_result": 1
    },
    {
        "idx": 56,
        "db_id": "e_commerce",
        "question": "List the address, town and county information of the customers who live in the USA.",
        "evidence": "",
        "gold": "SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'",
        "pred": "SELECT `address_line_1`, `town_city`, `county` FROM Customers WHERE `country` = 'USA'",
        "pred_result": 1,
        "repair_sql": "SELECT `address_line_1`, `town_city`, `county` FROM Customers WHERE `country` = 'USA'",
        "repair_result": 1
    },
    {
        "idx": 57,
        "db_id": "e_commerce",
        "question": "What are the addresses, towns, and county information for all customers who live in the United States?",
        "evidence": "",
        "gold": "SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'",
        "pred": "SELECT `address_line_1`, `town_city`, `county` FROM Customers WHERE `country` = 'USA'",
        "pred_result": 1,
        "repair_sql": "SELECT `address_line_1`, `town_city`, `county` FROM Customers WHERE `country` = 'USA'",
        "repair_result": 1
    },
    {
        "idx": 58,
        "db_id": "e_commerce",
        "question": "List all the pairs of buyer first names and product names.",
        "evidence": "",
        "gold": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
        "pred": "SELECT C.customer_first_name, P.product_name FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id JOIN Order_Items AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id",
        "pred_result": 1,
        "repair_sql": "SELECT C.customer_first_name, P.product_name FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id JOIN Order_Items AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id",
        "repair_result": 1
    },
    {
        "idx": 59,
        "db_id": "e_commerce",
        "question": "What are the first names of all buyers and what products did they buy? List them in pairs.",
        "evidence": "",
        "gold": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
        "pred": "SELECT C.customer_first_name, P.product_name FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id JOIN Order_Items AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id",
        "pred_result": 1,
        "repair_sql": "SELECT C.customer_first_name, P.product_name FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id JOIN Order_Items AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id",
        "repair_result": 1
    },
    {
        "idx": 60,
        "db_id": "e_commerce",
        "question": "How many items are shipped?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Shipment_Items",
        "pred": "SELECT COUNT(*) FROM Shipment_Items",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Shipment_Items",
        "repair_result": 1
    },
    {
        "idx": 61,
        "db_id": "e_commerce",
        "question": "How many products have been shipped?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Shipment_Items",
        "pred": "SELECT COUNT(DISTINCT product_id) FROM Order_Items WHERE order_item_status_code = 'Delivered'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT product_id) FROM Order_Items WHERE order_item_status_code = 'Delivered'",
        "repair_result": 0
    },
    {
        "idx": 62,
        "db_id": "e_commerce",
        "question": "What is the product average price?",
        "evidence": "",
        "gold": "SELECT avg(product_price) FROM Products",
        "pred": "SELECT AVG(product_price) FROM Products",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(product_price) FROM Products",
        "repair_result": 1
    },
    {
        "idx": 63,
        "db_id": "e_commerce",
        "question": "How much do the products cost on average?",
        "evidence": "",
        "gold": "SELECT avg(product_price) FROM Products",
        "pred": "SELECT AVG(product_price) FROM Products",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(product_price) FROM Products",
        "repair_result": 1
    },
    {
        "idx": 64,
        "db_id": "e_commerce",
        "question": "What is the average price of the products being ordered?",
        "evidence": "",
        "gold": "SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "pred": "SELECT AVG(product_price) FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items)",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(product_price) FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items)",
        "repair_result": 0
    },
    {
        "idx": 65,
        "db_id": "e_commerce",
        "question": "What is the price of all products being ordered on average?",
        "evidence": "",
        "gold": "SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "pred": "SELECT AVG(product_price) FROM Products",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(product_price) FROM Products",
        "repair_result": 0
    },
    {
        "idx": 66,
        "db_id": "e_commerce",
        "question": "What are the email address, town and county of the customers who are of the least common gender?",
        "evidence": "",
        "gold": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
        "pred": "SELECT `email_address`, `town_city`, `county` FROM Customers WHERE gender_code = ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT `email_address`, `town_city`, `county` FROM Customers WHERE gender_code = ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 67,
        "db_id": "e_commerce",
        "question": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?",
        "evidence": "",
        "gold": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
        "pred": "SELECT `email_address`, `town_city`, `county` FROM Customers WHERE `gender_code` = 'Unknown'",
        "pred_result": 1,
        "repair_sql": "SELECT `email_address`, `town_city`, `county` FROM Customers WHERE `gender_code` = 'Unknown'",
        "repair_result": 1
    },
    {
        "idx": 68,
        "db_id": "e_commerce",
        "question": "List the order date of the orders who are placed by customers with at least 2 payment methods.",
        "evidence": "",
        "gold": "SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )",
        "pred": "SELECT DISTINCT O.`date_order_placed` FROM Orders AS O JOIN Customer_Payment_Methods AS CPM ON O.`customer_id` = CPM.`customer_id` GROUP BY O.`customer_id` HAVING COUNT(CPM.`payment_method_code`) >= 2",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT O.`date_order_placed` FROM Orders AS O JOIN Customer_Payment_Methods AS CPM ON O.`customer_id` = CPM.`customer_id` GROUP BY O.`customer_id` HAVING COUNT(CPM.`payment_method_code`) >= 2",
        "repair_result": 0
    },
    {
        "idx": 69,
        "db_id": "e_commerce",
        "question": "What is the date of all orders that have been placed by customers with at least 2 payment methods?",
        "evidence": "",
        "gold": "SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )",
        "pred": "SELECT DISTINCT O.`date_order_placed` FROM Orders AS O JOIN Customer_Payment_Methods AS CPM ON O.`customer_id` = CPM.`customer_id` GROUP BY O.`customer_id` HAVING COUNT(CPM.`payment_method_code`) >= 2",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT O.`date_order_placed` FROM Orders AS O JOIN Customer_Payment_Methods AS CPM ON O.`customer_id` = CPM.`customer_id` GROUP BY O.`customer_id` HAVING COUNT(CPM.`payment_method_code`) >= 2",
        "repair_result": 0
    },
    {
        "idx": 70,
        "db_id": "e_commerce",
        "question": "What is the most uncommon order status?",
        "evidence": "",
        "gold": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
        "pred": "SELECT `order_status_code`, COUNT(*) AS count FROM Orders GROUP BY `order_status_code` ORDER BY count ASC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `order_status_code`, COUNT(*) AS count FROM Orders GROUP BY `order_status_code` ORDER BY count ASC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 71,
        "db_id": "e_commerce",
        "question": "What is the least common order status?",
        "evidence": "",
        "gold": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
        "pred": "SELECT `order_status_code`, COUNT(*) AS count FROM Orders GROUP BY `order_status_code` ORDER BY count ASC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `order_status_code`, COUNT(*) AS count FROM Orders GROUP BY `order_status_code` ORDER BY count ASC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 72,
        "db_id": "e_commerce",
        "question": "For all the products sold for more than 3 times, list their id and description.",
        "evidence": "",
        "gold": "SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3",
        "pred": "SELECT P.product_id, P.product_description FROM Products AS P JOIN Order_Items AS O ON P.product_id = O.product_id GROUP BY P.product_id HAVING COUNT(*) > 3",
        "pred_result": 1,
        "repair_sql": "SELECT P.product_id, P.product_description FROM Products AS P JOIN Order_Items AS O ON P.product_id = O.product_id GROUP BY P.product_id HAVING COUNT(*) > 3",
        "repair_result": 1
    },
    {
        "idx": 73,
        "db_id": "e_commerce",
        "question": "For all products sold more than 3 times, what are their ids and descriptions?",
        "evidence": "",
        "gold": "SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3",
        "pred": "SELECT P.product_id, P.product_description FROM Products AS P JOIN Order_Items AS O ON P.product_id = O.product_id GROUP BY P.product_id HAVING COUNT(*) > 3",
        "pred_result": 1,
        "repair_sql": "SELECT P.product_id, P.product_description FROM Products AS P JOIN Order_Items AS O ON P.product_id = O.product_id GROUP BY P.product_id HAVING COUNT(*) > 3",
        "repair_result": 1
    },
    {
        "idx": 74,
        "db_id": "e_commerce",
        "question": "List the invoice dates and ids of the invoices causing at least 2 shipments.",
        "evidence": "",
        "gold": "SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2",
        "pred": "SELECT DISTINCT I.`invoice_number`, I.`invoice_date` FROM Shipments AS S JOIN Invoices AS I ON S.`invoice_number` = I.`invoice_number` GROUP BY S.`invoice_number` HAVING COUNT(*) >= 2",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT I.`invoice_number`, I.`invoice_date` FROM Shipments AS S JOIN Invoices AS I ON S.`invoice_number` = I.`invoice_number` GROUP BY S.`invoice_number` HAVING COUNT(*) >= 2",
        "repair_result": 0
    },
    {
        "idx": 75,
        "db_id": "e_commerce",
        "question": "What are the dates and ids of the invoices that are related to at least 2 shipments?",
        "evidence": "",
        "gold": "SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2",
        "pred": "SELECT DISTINCT I.`invoice_number`, I.`invoice_date` FROM Invoices AS I JOIN Shipments AS S ON I.`invoice_number` = S.`invoice_number` GROUP BY I.`invoice_number` HAVING COUNT(S.`shipment_id`) >= 2",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT I.`invoice_number`, I.`invoice_date` FROM Invoices AS I JOIN Shipments AS S ON I.`invoice_number` = S.`invoice_number` GROUP BY I.`invoice_number` HAVING COUNT(S.`shipment_id`) >= 2",
        "repair_result": 0
    },
    {
        "idx": 76,
        "db_id": "e_commerce",
        "question": "what are all shipment tracking numbers and shipment dates?",
        "evidence": "",
        "gold": "SELECT shipment_tracking_number ,  shipment_date FROM Shipments",
        "pred": "SELECT `shipment_tracking_number`, `shipment_date` FROM Shipments",
        "pred_result": 1,
        "repair_sql": "SELECT `shipment_tracking_number`, `shipment_date` FROM Shipments",
        "repair_result": 1
    },
    {
        "idx": 77,
        "db_id": "e_commerce",
        "question": "What are the tracking numbers and dates for all shipments listed?",
        "evidence": "",
        "gold": "SELECT shipment_tracking_number ,  shipment_date FROM Shipments",
        "pred": "SELECT `shipment_tracking_number`, `shipment_date` FROM Shipments",
        "pred_result": 1,
        "repair_sql": "SELECT `shipment_tracking_number`, `shipment_date` FROM Shipments",
        "repair_result": 1
    },
    {
        "idx": 78,
        "db_id": "e_commerce",
        "question": "What are the color, description and size of the products priced below the maximum price.",
        "evidence": "",
        "gold": "SELECT product_color ,  product_description ,  product_size FROM Products WHERE product_price  <  ( SELECT max(product_price) FROM products )",
        "pred": "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products)",
        "pred_result": 1,
        "repair_sql": "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products)",
        "repair_result": 1
    },
    {
        "idx": 79,
        "db_id": "e_commerce",
        "question": "What are the colors , descriptions , and sizes for all products that are not at the maximum price ?",
        "evidence": "",
        "gold": "select product_color ,  product_description ,  product_size from products where product_price  !=  ( select max(product_price) from products )",
        "pred": "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products)",
        "pred_result": 1,
        "repair_sql": "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products)",
        "repair_result": 1
    },
    {
        "idx": 80,
        "db_id": "bbc_channels",
        "question": "Return the names of directors who are older than the average age.",
        "evidence": "",
        "gold": "SELECT name FROM director WHERE age  >  (SELECT avg(age) FROM director)",
        "pred": "SELECT `Name` FROM director WHERE Age > (SELECT AVG(Age) FROM director)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM director WHERE Age > (SELECT AVG(Age) FROM director)",
        "repair_result": 1
    },
    {
        "idx": 81,
        "db_id": "bbc_channels",
        "question": "Find the the name of the oldest director.",
        "evidence": "",
        "gold": "SELECT name FROM director ORDER BY age DESC LIMIT 1",
        "pred": "SELECT `Name` FROM director WHERE Age = (SELECT MAX(Age) FROM director)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM director WHERE Age = (SELECT MAX(Age) FROM director)",
        "repair_result": 1
    },
    {
        "idx": 82,
        "db_id": "bbc_channels",
        "question": "How many channels have the word 'bbc' in their internet link?",
        "evidence": "",
        "gold": "SELECT count(*) FROM channel WHERE internet LIKE \"%bbc%\"",
        "pred": "SELECT COUNT(*) FROM channel WHERE Internet LIKE '%bbc%'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM channel WHERE Internet LIKE '%bbc%'",
        "repair_result": 1
    },
    {
        "idx": 83,
        "db_id": "bbc_channels",
        "question": "How many different digital terrestrial channels are there?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT Digital_terrestrial_channel) FROM channel",
        "pred": "SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel WHERE Digital_terrestrial_channel != 'unavailable'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel WHERE Digital_terrestrial_channel != 'unavailable'",
        "repair_result": 0
    },
    {
        "idx": 84,
        "db_id": "bbc_channels",
        "question": "List all program titles in the order of starting year. List the most recent one first.",
        "evidence": "",
        "gold": "SELECT title FROM program ORDER BY start_year DESC",
        "pred": "SELECT `Title` FROM program ORDER BY `Start_Year` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM program ORDER BY `Start_Year` DESC",
        "repair_result": 1
    },
    {
        "idx": 85,
        "db_id": "bbc_channels",
        "question": "Which director is in charge of the most programs?",
        "evidence": "",
        "gold": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT D.`Name`, COUNT(*) AS program_count FROM director AS D JOIN program AS P ON D.`Director_ID` = P.`Director_ID` GROUP BY D.`Director_ID` ORDER BY program_count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT D.`Name`, COUNT(*) AS program_count FROM director AS D JOIN program AS P ON D.`Director_ID` = P.`Director_ID` GROUP BY D.`Director_ID` ORDER BY program_count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 86,
        "db_id": "bbc_channels",
        "question": "Find the name and age of the director who is in charge of the most programs?",
        "evidence": "",
        "gold": "SELECT t2.name ,  t2.age FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT D.`Name`, D.`Age` FROM director AS D JOIN program AS P ON D.`Director_ID` = P.`Director_ID` GROUP BY D.`Director_ID` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT D.`Name`, D.`Age` FROM director AS D JOIN program AS P ON D.`Director_ID` = P.`Director_ID` GROUP BY D.`Director_ID` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 87,
        "db_id": "bbc_channels",
        "question": "Return the title of the program that began most recently.",
        "evidence": "",
        "gold": "SELECT title FROM program ORDER BY start_year DESC LIMIT 1",
        "pred": "SELECT `Title` FROM program WHERE Start_Year = (SELECT MAX(Start_Year) FROM program)",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM program WHERE Start_Year = (SELECT MAX(Start_Year) FROM program)",
        "repair_result": 1
    },
    {
        "idx": 88,
        "db_id": "bbc_channels",
        "question": "Find the name and website link of the channels that have more than one program.",
        "evidence": "",
        "gold": "SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id HAVING count(*)  >  1",
        "pred": "SELECT DISTINCT T1.`Name`, T1.`Internet` FROM channel AS T1 JOIN program AS T2 ON T1.`Channel_ID` = T2.`Channel_ID` GROUP BY T1.`Channel_ID` HAVING COUNT(*) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`Name`, T1.`Internet` FROM channel AS T1 JOIN program AS T2 ON T1.`Channel_ID` = T2.`Channel_ID` GROUP BY T1.`Channel_ID` HAVING COUNT(*) > 1",
        "repair_result": 1
    },
    {
        "idx": 89,
        "db_id": "bbc_channels",
        "question": "Find the number of programs for each channel. Return the name of each channel as well.",
        "evidence": "",
        "gold": "SELECT t1.name ,  count(*) FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id",
        "pred": "SELECT T1.`Name`, COUNT(*) FROM channel AS T1 JOIN program AS T2 ON T1.`Channel_ID` = T2.`Channel_ID` GROUP BY T1.`Channel_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Name`, COUNT(*) FROM channel AS T1 JOIN program AS T2 ON T1.`Channel_ID` = T2.`Channel_ID` GROUP BY T1.`Channel_ID`",
        "repair_result": 1
    },
    {
        "idx": 90,
        "db_id": "bbc_channels",
        "question": "Find the number of channels that do not run any program.",
        "evidence": "",
        "gold": "SELECT count(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program)",
        "pred": "SELECT COUNT(*) FROM channel WHERE Channel_ID NOT IN (SELECT DISTINCT Channel_ID FROM program)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM channel WHERE Channel_ID NOT IN (SELECT DISTINCT Channel_ID FROM program)",
        "repair_result": 1
    },
    {
        "idx": 91,
        "db_id": "bbc_channels",
        "question": "What is the name of the director who is in the \"Dracula\" program?",
        "evidence": "",
        "gold": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'",
        "pred": "SELECT D.`Name` FROM director AS D JOIN program AS P ON D.`Director_ID` = P.`Director_ID` WHERE P.`Title` = 'Dracula'",
        "pred_result": 1,
        "repair_sql": "SELECT D.`Name` FROM director AS D JOIN program AS P ON D.`Director_ID` = P.`Director_ID` WHERE P.`Title` = 'Dracula'",
        "repair_result": 1
    },
    {
        "idx": 92,
        "db_id": "bbc_channels",
        "question": "Find the name and internet web of the channel that is directed by the most directors.",
        "evidence": "",
        "gold": "SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT C.`Name`, C.`Internet` FROM channel AS C JOIN director_admin AS DA ON C.`Channel_ID` = DA.`Channel_ID` GROUP BY C.`Channel_ID` ORDER BY COUNT(DISTINCT DA.`Director_ID`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT C.`Name`, C.`Internet` FROM channel AS C JOIN director_admin AS DA ON C.`Channel_ID` = DA.`Channel_ID` GROUP BY C.`Channel_ID` ORDER BY COUNT(DISTINCT DA.`Director_ID`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 93,
        "db_id": "bbc_channels",
        "question": "Find the name of the directors whose age is between 30 and 60.",
        "evidence": "",
        "gold": "SELECT name FROM director WHERE age BETWEEN 30 AND 60",
        "pred": "SELECT `Name` FROM director WHERE Age BETWEEN 30 AND 60",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM director WHERE Age BETWEEN 30 AND 60",
        "repair_result": 1
    },
    {
        "idx": 94,
        "db_id": "bbc_channels",
        "question": "give me the name of channels that have both a director younger than 40 and a director older than 60.",
        "evidence": "",
        "gold": "SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  <  40 INTERSECT SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  >  60",
        "pred": "SELECT DISTINCT C.`Name` FROM channel AS C JOIN director_admin AS DA ON C.`Channel_ID` = DA.`Channel_ID` JOIN director AS D ON DA.`Director_ID` = D.`Director_ID` WHERE D.`Age` < 40 AND C.`Name` IN ( SELECT C.`Name` FROM channel AS C JOIN director_admin AS DA ON C.`Channel_ID` = DA.`Channel_ID` JOIN director AS D ON DA.`Director_ID` = D.`Director_ID` WHERE D.`Age` > 60 )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT C.`Name` FROM channel AS C JOIN director_admin AS DA ON C.`Channel_ID` = DA.`Channel_ID` JOIN director AS D ON DA.`Director_ID` = D.`Director_ID` WHERE D.`Age` < 40 AND C.`Name` IN ( SELECT C.`Name` FROM channel AS C JOIN director_admin AS DA ON C.`Channel_ID` = DA.`Channel_ID` JOIN director AS D ON DA.`Director_ID` = D.`Director_ID` WHERE D.`Age` > 60 )",
        "repair_result": 1
    },
    {
        "idx": 95,
        "db_id": "bbc_channels",
        "question": "Find the id and name of the channel that is not directed by Hank Baskett.",
        "evidence": "",
        "gold": "SELECT t1.name ,  t1.channel_id FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.name != \"Hank Baskett\"",
        "pred": "SELECT `Channel_ID`, `Name` FROM channel WHERE `Channel_ID` NOT IN (SELECT DISTINCT `Channel_ID` FROM program WHERE `Director_ID` = (SELECT `Director_ID` FROM director WHERE `Name` = 'Hank Baskett'))",
        "pred_result": 0,
        "repair_sql": "SELECT `Channel_ID`, `Name` FROM channel WHERE `Channel_ID` NOT IN (SELECT DISTINCT `Channel_ID` FROM program WHERE `Director_ID` = (SELECT `Director_ID` FROM director WHERE `Name` = 'Hank Baskett'))",
        "repair_result": 0
    },
    {
        "idx": 96,
        "db_id": "tv_shows",
        "question": "How many radios are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM radio",
        "pred": "SELECT COUNT(*) FROM radio",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM radio",
        "repair_result": 1
    },
    {
        "idx": 97,
        "db_id": "tv_shows",
        "question": "List the transmitters of radios in ascending order of erp kw .",
        "evidence": "",
        "gold": "select transmitter from radio order by erp_kw asc",
        "pred": "SELECT `Transmitter` FROM radio ORDER BY `ERP_kW` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Transmitter` FROM radio ORDER BY `ERP_kW` ASC",
        "repair_result": 1
    },
    {
        "idx": 98,
        "db_id": "tv_shows",
        "question": "What are the names and original air dates of tv shows?",
        "evidence": "",
        "gold": "SELECT tv_show_name ,  Original_Airdate FROM tv_show",
        "pred": "SELECT `tv_show_name`, `Original_Airdate` FROM tv_show",
        "pred_result": 1,
        "repair_sql": "SELECT `tv_show_name`, `Original_Airdate` FROM tv_show",
        "repair_result": 1
    },
    {
        "idx": 99,
        "db_id": "tv_shows",
        "question": "List the station names of city channels whose affiliation is not \"ABC\".",
        "evidence": "",
        "gold": "SELECT Station_name FROM city_channel WHERE Affiliation != \"ABC\"",
        "pred": "SELECT T1.`Station_name` FROM city_channel AS T1 WHERE T1.`Affiliation` != 'ABC'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Station_name` FROM city_channel AS T1 WHERE T1.`Affiliation` != 'ABC'",
        "repair_result": 1
    },
    {
        "idx": 100,
        "db_id": "tv_shows",
        "question": "Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.",
        "evidence": "",
        "gold": "SELECT Transmitter FROM radio WHERE ERP_kW  >  150 OR ERP_kW  <  30",
        "pred": "SELECT `Transmitter` FROM radio WHERE `ERP_kW` > 150 OR `ERP_kW` < 30",
        "pred_result": 1,
        "repair_sql": "SELECT `Transmitter` FROM radio WHERE `ERP_kW` > 150 OR `ERP_kW` < 30",
        "repair_result": 1
    },
    {
        "idx": 101,
        "db_id": "tv_shows",
        "question": "What is the transmitter of the radio with the largest ERP_kW?",
        "evidence": "",
        "gold": "SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1",
        "pred": "SELECT `Transmitter` FROM radio WHERE `ERP_kW` = (SELECT MAX(`ERP_kW`) FROM radio)",
        "pred_result": 0,
        "repair_sql": "SELECT `Transmitter` FROM radio WHERE `ERP_kW` = (SELECT MAX(`ERP_kW`) FROM radio)",
        "repair_result": 0
    },
    {
        "idx": 102,
        "db_id": "tv_shows",
        "question": "What is the average ERP across all radios?",
        "evidence": "",
        "gold": "SELECT avg(ERP_kW) FROM radio",
        "pred": "SELECT AVG(`ERP_kW`) FROM radio",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(`ERP_kW`) FROM radio",
        "repair_result": 1
    },
    {
        "idx": 103,
        "db_id": "tv_shows",
        "question": "Show the different affiliations of city channels and the number of city channels with each affiliation.",
        "evidence": "",
        "gold": "SELECT Affiliation ,  COUNT(*) FROM city_channel GROUP BY Affiliation",
        "pred": "SELECT c.`Affiliation`, COUNT(*) FROM city_channel c GROUP BY c.`Affiliation`",
        "pred_result": 1,
        "repair_sql": "SELECT c.`Affiliation`, COUNT(*) FROM city_channel c GROUP BY c.`Affiliation`",
        "repair_result": 1
    },
    {
        "idx": 104,
        "db_id": "tv_shows",
        "question": "Please show the most common affiliation for city channels.",
        "evidence": "",
        "gold": "SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT Affiliation, COUNT(*) AS Frequency FROM city_channel GROUP BY Affiliation ORDER BY Frequency DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT Affiliation, COUNT(*) AS Frequency FROM city_channel GROUP BY Affiliation ORDER BY Frequency DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 105,
        "db_id": "tv_shows",
        "question": "List the affiliations shared by more than three city channels.",
        "evidence": "",
        "gold": "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*)  >  3",
        "pred": "SELECT c.`Affiliation` FROM city_channel c GROUP BY c.`Affiliation` HAVING COUNT(c.`Affiliation`) > 3",
        "pred_result": 1,
        "repair_sql": "SELECT c.`Affiliation` FROM city_channel c GROUP BY c.`Affiliation` HAVING COUNT(c.`Affiliation`) > 3",
        "repair_result": 1
    },
    {
        "idx": 106,
        "db_id": "tv_shows",
        "question": "Show the cities and station names of city channels in ascending alphabetical order of station name.",
        "evidence": "",
        "gold": "SELECT City ,  Station_name FROM city_channel ORDER BY Station_name ASC",
        "pred": "SELECT C.`City`, C.`Station_name` FROM city_channel AS C JOIN city_channel_tv_show AS CTV ON C.`ID` = CTV.`City_channel_ID` ORDER BY C.`Station_name` ASC",
        "pred_result": 0,
        "repair_sql": "SELECT C.`City`, C.`Station_name` FROM city_channel AS C JOIN city_channel_tv_show AS CTV ON C.`ID` = CTV.`City_channel_ID` ORDER BY C.`Station_name` ASC",
        "repair_result": 0
    },
    {
        "idx": 107,
        "db_id": "tv_shows",
        "question": "Show the transmitters of radios and the cities of the channels they are associated with.",
        "evidence": "",
        "gold": "SELECT T3.Transmitter ,  T2.City FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID",
        "pred": "SELECT T2.`Transmitter`, T1.`City` FROM city_channel AS T1 JOIN city_channel_radio AS T3 ON T1.`ID` = T3.`City_channel_ID` JOIN radio AS T2 ON T3.`Radio_ID` = T2.`Radio_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Transmitter`, T1.`City` FROM city_channel AS T1 JOIN city_channel_radio AS T3 ON T1.`ID` = T3.`City_channel_ID` JOIN radio AS T2 ON T3.`Radio_ID` = T2.`Radio_ID`",
        "repair_result": 1
    },
    {
        "idx": 108,
        "db_id": "tv_shows",
        "question": "Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.",
        "evidence": "",
        "gold": "SELECT T3.Transmitter ,  T2.Station_name FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID ORDER BY T3.ERP_kW DESC",
        "pred": "SELECT T2.`Transmitter`, T1.`Station_name` FROM radio AS T2 JOIN city_channel_radio AS T3 ON T2.`Radio_ID` = T3.`Radio_ID` JOIN city_channel AS T1 ON T3.`City_channel_ID` = T1.`ID` ORDER BY T2.`ERP_kW` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Transmitter`, T1.`Station_name` FROM radio AS T2 JOIN city_channel_radio AS T3 ON T2.`Radio_ID` = T3.`Radio_ID` JOIN city_channel AS T1 ON T3.`City_channel_ID` = T1.`ID` ORDER BY T2.`ERP_kW` DESC",
        "repair_result": 1
    },
    {
        "idx": 109,
        "db_id": "tv_shows",
        "question": "Show the transmitters of the radios and the number of city channels they are associated with.",
        "evidence": "",
        "gold": "SELECT T2.Transmitter ,  COUNT(*) FROM city_channel_radio AS T1 JOIN radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID GROUP BY T2.Transmitter",
        "pred": "SELECT T1.`Transmitter`, COUNT(*) FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.`Radio_ID` = T2.`Radio_ID` GROUP BY T1.`Radio_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Transmitter`, COUNT(*) FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.`Radio_ID` = T2.`Radio_ID` GROUP BY T1.`Radio_ID`",
        "repair_result": 1
    },
    {
        "idx": 110,
        "db_id": "tv_shows",
        "question": "Show the distinct transmitters of radios that are not associated with any city channel.",
        "evidence": "",
        "gold": "SELECT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio)",
        "pred": "SELECT DISTINCT `Transmitter` FROM radio WHERE `Radio_ID` NOT IN (SELECT `Radio_ID` FROM city_channel_radio)",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Transmitter` FROM radio WHERE `Radio_ID` NOT IN (SELECT `Radio_ID` FROM city_channel_radio)",
        "repair_result": 1
    },
    {
        "idx": 111,
        "db_id": "online_exams",
        "question": "How many exams are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Exams",
        "pred": "SELECT COUNT(*) FROM Exams",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Exams",
        "repair_result": 1
    },
    {
        "idx": 112,
        "db_id": "online_exams",
        "question": "Count the number of exams.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Exams",
        "pred": "SELECT COUNT(*) FROM Exams",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Exams",
        "repair_result": 1
    },
    {
        "idx": 113,
        "db_id": "online_exams",
        "question": "List the distinct subject code of exams in ascending alphabetical order .",
        "evidence": "",
        "gold": "select distinct subject_code from exams order by subject_code asc",
        "pred": "SELECT DISTINCT `Subject_Code` FROM Exams ORDER BY `Subject_Code` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Subject_Code` FROM Exams ORDER BY `Subject_Code` ASC",
        "repair_result": 1
    },
    {
        "idx": 114,
        "db_id": "online_exams",
        "question": "Give me an alphabetically ordered list of the distinct subject code for exams.",
        "evidence": "",
        "gold": "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code",
        "pred": "SELECT DISTINCT `Subject_Code` FROM Exams ORDER BY `Subject_Code` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Subject_Code` FROM Exams ORDER BY `Subject_Code` ASC",
        "repair_result": 1
    },
    {
        "idx": 115,
        "db_id": "online_exams",
        "question": "What are the names and dates of the exams with subject code that is not \"Database\"?",
        "evidence": "",
        "gold": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "pred": "SELECT `Exam_Name`, `Exam_Date` FROM Exams WHERE `Subject_Code` != 'Database'",
        "pred_result": 0,
        "repair_sql": "SELECT `Exam_Name`, `Exam_Date` FROM Exams WHERE `Subject_Code` != 'Database'",
        "repair_result": 0
    },
    {
        "idx": 116,
        "db_id": "online_exams",
        "question": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?",
        "evidence": "",
        "gold": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "pred": "SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "pred_result": 1,
        "repair_sql": "SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "repair_result": 1
    },
    {
        "idx": 117,
        "db_id": "online_exams",
        "question": "List the dates of the exams with subject code containing the word \"data\", in descending order of dates.",
        "evidence": "",
        "gold": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
        "pred": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
        "pred_result": 1,
        "repair_sql": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
        "repair_result": 1
    },
    {
        "idx": 118,
        "db_id": "online_exams",
        "question": "What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates.",
        "evidence": "",
        "gold": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
        "pred": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
        "pred_result": 1,
        "repair_sql": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
        "repair_result": 1
    },
    {
        "idx": 119,
        "db_id": "online_exams",
        "question": "What are the type of questions and their counts?",
        "evidence": "",
        "gold": "SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
        "pred": "SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
        "pred_result": 1,
        "repair_sql": "SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
        "repair_result": 1
    },
    {
        "idx": 120,
        "db_id": "online_exams",
        "question": "For each question type, return its type code and its count of occurrence.",
        "evidence": "",
        "gold": "SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
        "pred": "SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
        "pred_result": 1,
        "repair_sql": "SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
        "repair_result": 1
    },
    {
        "idx": 121,
        "db_id": "online_exams",
        "question": "What are the distinct student answer texts that received comments \"Normal\"?",
        "evidence": "",
        "gold": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\"",
        "pred": "SELECT DISTINCT `Student_Answer_Text` FROM Student_Answers WHERE Comments = 'Normal'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Student_Answer_Text` FROM Student_Answers WHERE Comments = 'Normal'",
        "repair_result": 1
    },
    {
        "idx": 122,
        "db_id": "online_exams",
        "question": "List all the distinct student answer texts to which comments \"Normal\" were given?",
        "evidence": "",
        "gold": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\"",
        "pred": "SELECT DISTINCT `Student_Answer_Text` FROM Student_Answers WHERE Comments = 'Normal'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Student_Answer_Text` FROM Student_Answers WHERE Comments = 'Normal'",
        "repair_result": 1
    },
    {
        "idx": 123,
        "db_id": "online_exams",
        "question": "How many different comments are there for student answers?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT Comments) FROM Student_Answers",
        "pred": "SELECT COUNT(DISTINCT Comments) FROM Student_Answers",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Comments) FROM Student_Answers",
        "repair_result": 1
    },
    {
        "idx": 124,
        "db_id": "online_exams",
        "question": "Count the number of different comments for student answers.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT Comments) FROM Student_Answers",
        "pred": "SELECT COUNT(DISTINCT Comments) FROM Student_Answers",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Comments) FROM Student_Answers",
        "repair_result": 1
    },
    {
        "idx": 125,
        "db_id": "online_exams",
        "question": "List all the student answer texts in descending order of count.",
        "evidence": "",
        "gold": "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC",
        "pred": "SELECT `Student_Answer_Text`, COUNT(`Student_Answer_Text`) AS `Answer_Count` FROM Student_Answers GROUP BY `Student_Answer_Text` ORDER BY `Answer_Count` DESC",
        "pred_result": 0,
        "repair_sql": "SELECT `Student_Answer_Text`, COUNT(`Student_Answer_Text`) AS `Answer_Count` FROM Student_Answers GROUP BY `Student_Answer_Text` ORDER BY `Answer_Count` DESC",
        "repair_result": 0
    },
    {
        "idx": 126,
        "db_id": "online_exams",
        "question": "Sort the student answer texts in descending order of their frequency of occurrence.",
        "evidence": "",
        "gold": "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC",
        "pred": "SELECT `Student_Answer_Text`, COUNT(`Student_Answer_Text`) AS frequency FROM Student_Answers GROUP BY `Student_Answer_Text` ORDER BY frequency DESC",
        "pred_result": 0,
        "repair_sql": "SELECT `Student_Answer_Text`, COUNT(`Student_Answer_Text`) AS frequency FROM Student_Answers GROUP BY `Student_Answer_Text` ORDER BY frequency DESC",
        "repair_result": 0
    },
    {
        "idx": 127,
        "db_id": "online_exams",
        "question": "Please show the first names of students and the dates of their answers.",
        "evidence": "",
        "gold": "SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID",
        "pred": "SELECT T1.`First_Name`, T2.`Date_of_Answer` FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.`Student_ID` = T2.`Student_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`First_Name`, T2.`Date_of_Answer` FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.`Student_ID` = T2.`Student_ID`",
        "repair_result": 1
    },
    {
        "idx": 128,
        "db_id": "online_exams",
        "question": "For each student answer, find the first name of the student and the date of the answer.",
        "evidence": "",
        "gold": "SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID",
        "pred": "SELECT S.`First_Name`, SA.`Date_of_Answer` FROM Students AS S JOIN Student_Answers AS SA ON S.`Student_ID` = SA.`Student_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT S.`First_Name`, SA.`Date_of_Answer` FROM Students AS S JOIN Student_Answers AS SA ON S.`Student_ID` = SA.`Student_ID`",
        "repair_result": 1
    },
    {
        "idx": 129,
        "db_id": "online_exams",
        "question": "Please show the email addresses of students and the dates of their answers in descending order of dates.",
        "evidence": "",
        "gold": "SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC",
        "pred": "SELECT `Email_Adress`, `Date_of_Answer` FROM Students AS S JOIN Student_Answers AS SA ON S.`Student_ID` = SA.`Student_ID` ORDER BY `Date_of_Answer` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Email_Adress`, `Date_of_Answer` FROM Students AS S JOIN Student_Answers AS SA ON S.`Student_ID` = SA.`Student_ID` ORDER BY `Date_of_Answer` DESC",
        "repair_result": 1
    },
    {
        "idx": 130,
        "db_id": "online_exams",
        "question": "For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.",
        "evidence": "",
        "gold": "SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC",
        "pred": "SELECT S.`Email_Adress`, SA.`Date_of_Answer` FROM Students AS S JOIN Student_Answers AS SA ON S.`Student_ID` = SA.`Student_ID` ORDER BY SA.`Date_of_Answer` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT S.`Email_Adress`, SA.`Date_of_Answer` FROM Students AS S JOIN Student_Answers AS SA ON S.`Student_ID` = SA.`Student_ID` ORDER BY SA.`Date_of_Answer` DESC",
        "repair_result": 1
    },
    {
        "idx": 131,
        "db_id": "online_exams",
        "question": "Please show the least common assessment for students.",
        "evidence": "",
        "gold": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
        "pred": "SELECT Assessment, COUNT(*) AS Assessment_Count FROM Student_Assessments GROUP BY Assessment ORDER BY Assessment_Count LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT Assessment, COUNT(*) AS Assessment_Count FROM Student_Assessments GROUP BY Assessment ORDER BY Assessment_Count LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 132,
        "db_id": "online_exams",
        "question": "Which assessment has the smallest frequency count?",
        "evidence": "",
        "gold": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
        "pred": "SELECT Assessment, COUNT(Assessment) AS Frequency FROM Student_Assessments GROUP BY Assessment ORDER BY Frequency LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT Assessment, COUNT(Assessment) AS Frequency FROM Student_Assessments GROUP BY Assessment ORDER BY Frequency LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 133,
        "db_id": "online_exams",
        "question": "Please show the first names of the students that have at least two answer records.",
        "evidence": "",
        "gold": "SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2",
        "pred": "SELECT First_Name FROM Students WHERE Student_ID IN ( SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2 )",
        "pred_result": 1,
        "repair_sql": "SELECT First_Name FROM Students WHERE Student_ID IN ( SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2 )",
        "repair_result": 1
    },
    {
        "idx": 134,
        "db_id": "online_exams",
        "question": "Which students have 2 or more answer records? Give me their first names.",
        "evidence": "",
        "gold": "SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2",
        "pred": "SELECT First_Name FROM Students WHERE Student_ID IN ( SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2 )",
        "pred_result": 1,
        "repair_sql": "SELECT First_Name FROM Students WHERE Student_ID IN ( SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2 )",
        "repair_result": 1
    },
    {
        "idx": 135,
        "db_id": "online_exams",
        "question": "What is the most common valid answer text?",
        "evidence": "",
        "gold": "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT `Valid_Answer_Text`, COUNT(*) AS count FROM Valid_Answers GROUP BY `Valid_Answer_Text` ORDER BY count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Valid_Answer_Text`, COUNT(*) AS count FROM Valid_Answers GROUP BY `Valid_Answer_Text` ORDER BY count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 136,
        "db_id": "online_exams",
        "question": "Find the valid answer text that appeared most frequently.",
        "evidence": "",
        "gold": "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT `Valid_Answer_Text`, COUNT(`Valid_Answer_Text`) AS Frequency FROM Valid_Answers GROUP BY `Valid_Answer_Text` ORDER BY Frequency DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Valid_Answer_Text`, COUNT(`Valid_Answer_Text`) AS Frequency FROM Valid_Answers GROUP BY `Valid_Answer_Text` ORDER BY Frequency DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 137,
        "db_id": "online_exams",
        "question": "List the last names of the students whose gender is not \"M\".",
        "evidence": "",
        "gold": "SELECT Last_Name FROM Students WHERE Gender_MFU != \"M\"",
        "pred": "SELECT Last_Name FROM Students WHERE Gender_MFU != 'M'",
        "pred_result": 1,
        "repair_sql": "SELECT Last_Name FROM Students WHERE Gender_MFU != 'M'",
        "repair_result": 1
    },
    {
        "idx": 138,
        "db_id": "online_exams",
        "question": "What are the last names of the students with gender other than \"M\"?",
        "evidence": "",
        "gold": "SELECT Last_Name FROM Students WHERE Gender_MFU != \"M\"",
        "pred": "SELECT Last_Name FROM Students WHERE Gender_MFU != 'M'",
        "pred_result": 1,
        "repair_sql": "SELECT Last_Name FROM Students WHERE Gender_MFU != 'M'",
        "repair_result": 1
    },
    {
        "idx": 139,
        "db_id": "online_exams",
        "question": "List each gender and the corresponding number of students.",
        "evidence": "",
        "gold": "SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU",
        "pred": "SELECT Gender_MFU, COUNT(*) FROM Students GROUP BY Gender_MFU",
        "pred_result": 1,
        "repair_sql": "SELECT Gender_MFU, COUNT(*) FROM Students GROUP BY Gender_MFU",
        "repair_result": 1
    },
    {
        "idx": 140,
        "db_id": "online_exams",
        "question": "For each gender, return the gender code and the number of students who identify as that gender.",
        "evidence": "",
        "gold": "SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU",
        "pred": "SELECT Gender_MFU, COUNT(*) FROM Students GROUP BY Gender_MFU",
        "pred_result": 1,
        "repair_sql": "SELECT Gender_MFU, COUNT(*) FROM Students GROUP BY Gender_MFU",
        "repair_result": 1
    },
    {
        "idx": 141,
        "db_id": "online_exams",
        "question": "List the last names of the students whose gender is \"F\" or \"M\".",
        "evidence": "",
        "gold": "SELECT Last_Name FROM Students WHERE Gender_MFU  =  \"F\" OR Gender_MFU  =  \"M\"",
        "pred": "SELECT Last_Name FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'M'",
        "pred_result": 1,
        "repair_sql": "SELECT Last_Name FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'M'",
        "repair_result": 1
    },
    {
        "idx": 142,
        "db_id": "online_exams",
        "question": "Which students identify their gender as \"F\" or \"M\"? Give me their last names.",
        "evidence": "",
        "gold": "SELECT Last_Name FROM Students WHERE Gender_MFU  =  \"F\" OR Gender_MFU  =  \"M\"",
        "pred": "SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M')",
        "pred_result": 1,
        "repair_sql": "SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M')",
        "repair_result": 1
    },
    {
        "idx": 143,
        "db_id": "online_exams",
        "question": "List the first names of the students who do not have any answers.",
        "evidence": "",
        "gold": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
        "pred": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT DISTINCT Student_ID FROM Student_Answers)",
        "pred_result": 1,
        "repair_sql": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT DISTINCT Student_ID FROM Student_Answers)",
        "repair_result": 1
    },
    {
        "idx": 144,
        "db_id": "online_exams",
        "question": "Which students do not have any answers? Find their first names.",
        "evidence": "",
        "gold": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
        "pred": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT DISTINCT Student_ID FROM Student_Answers)",
        "pred_result": 1,
        "repair_sql": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT DISTINCT Student_ID FROM Student_Answers)",
        "repair_result": 1
    },
    {
        "idx": 145,
        "db_id": "online_exams",
        "question": "Show the student answer texts that received both \"Normal\" and \"Absent\" as comments.",
        "evidence": "",
        "gold": "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Absent\"",
        "pred": "SELECT `Student_Answer_Text` FROM Student_Answers WHERE `Comments` IN ('Normal', 'Absent') GROUP BY `Student_Answer_Text` HAVING COUNT(DISTINCT `Comments`) = 2",
        "pred_result": 1,
        "repair_sql": "SELECT `Student_Answer_Text` FROM Student_Answers WHERE `Comments` IN ('Normal', 'Absent') GROUP BY `Student_Answer_Text` HAVING COUNT(DISTINCT `Comments`) = 2",
        "repair_result": 1
    },
    {
        "idx": 146,
        "db_id": "online_exams",
        "question": "Which student answer texts were given both \"Normal\" and \"Absent\" as comments?",
        "evidence": "",
        "gold": "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Absent\"",
        "pred": "SELECT DISTINCT T1.`Student_Answer_Text` FROM Student_Answers AS T1 JOIN Student_Answers AS T2 ON T1.`Student_ID` = T2.`Student_ID` AND T1.`Question_ID` = T2.`Question_ID` WHERE T1.`Comments` = 'Normal' AND T2.`Comments` = 'Absent'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`Student_Answer_Text` FROM Student_Answers AS T1 JOIN Student_Answers AS T2 ON T1.`Student_ID` = T2.`Student_ID` AND T1.`Question_ID` = T2.`Question_ID` WHERE T1.`Comments` = 'Normal' AND T2.`Comments` = 'Absent'",
        "repair_result": 0
    },
    {
        "idx": 147,
        "db_id": "online_exams",
        "question": "Show the types of questions that have at least three questions.",
        "evidence": "",
        "gold": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3",
        "pred": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3",
        "pred_result": 1,
        "repair_sql": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3",
        "repair_result": 1
    },
    {
        "idx": 148,
        "db_id": "online_exams",
        "question": "Which types of questions have 3 or more questions? Return the questions type code.",
        "evidence": "",
        "gold": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3",
        "pred": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3",
        "pred_result": 1,
        "repair_sql": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3",
        "repair_result": 1
    },
    {
        "idx": 149,
        "db_id": "online_exams",
        "question": "Show all information on students.",
        "evidence": "",
        "gold": "SELECT * FROM Students",
        "pred": "SELECT * FROM Students",
        "pred_result": 1,
        "repair_sql": "SELECT * FROM Students",
        "repair_result": 1
    },
    {
        "idx": 150,
        "db_id": "online_exams",
        "question": "What is al the available information of each student?",
        "evidence": "",
        "gold": "SELECT * FROM Students",
        "pred": "SELECT * FROM Students",
        "pred_result": 1,
        "repair_sql": "SELECT * FROM Students",
        "repair_result": 1
    },
    {
        "idx": 151,
        "db_id": "region_building",
        "question": "How many buildings are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM building",
        "pred": "SELECT COUNT(*) FROM building",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM building",
        "repair_result": 1
    },
    {
        "idx": 152,
        "db_id": "region_building",
        "question": "Count the number of buildings.",
        "evidence": "",
        "gold": "SELECT count(*) FROM building",
        "pred": "SELECT COUNT(*) FROM building",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM building",
        "repair_result": 1
    },
    {
        "idx": 153,
        "db_id": "region_building",
        "question": "List the names of buildings in ascending order of number of stories.",
        "evidence": "",
        "gold": "SELECT Name FROM building ORDER BY Number_of_Stories ASC",
        "pred": "SELECT `Name` FROM building ORDER BY `Number_of_Stories` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM building ORDER BY `Number_of_Stories` ASC",
        "repair_result": 1
    },
    {
        "idx": 154,
        "db_id": "region_building",
        "question": "What is the list of building names, sorted by the number of stories of each building in ascending order?",
        "evidence": "",
        "gold": "SELECT Name FROM building ORDER BY Number_of_Stories ASC",
        "pred": "SELECT `Name` FROM building ORDER BY `Number_of_Stories` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM building ORDER BY `Number_of_Stories` ASC",
        "repair_result": 1
    },
    {
        "idx": 155,
        "db_id": "region_building",
        "question": "List the addresses of buildings in descending order of building completion year.",
        "evidence": "",
        "gold": "SELECT Address FROM building ORDER BY Completed_Year DESC",
        "pred": "SELECT `Address` FROM building ORDER BY `Completed_Year` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Address` FROM building ORDER BY `Completed_Year` DESC",
        "repair_result": 1
    },
    {
        "idx": 156,
        "db_id": "region_building",
        "question": "Sort the buildings in descending order of building completion year, and return the building addresses.",
        "evidence": "",
        "gold": "SELECT Address FROM building ORDER BY Completed_Year DESC",
        "pred": "SELECT `Address` FROM building ORDER BY `Completed_Year` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Address` FROM building ORDER BY `Completed_Year` DESC",
        "repair_result": 1
    },
    {
        "idx": 157,
        "db_id": "region_building",
        "question": "What is the maximum number of stories of buildings not completed in 1980?",
        "evidence": "",
        "gold": "SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != \"1980\"",
        "pred": "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year <> 1980",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year <> 1980",
        "repair_result": 1
    },
    {
        "idx": 158,
        "db_id": "region_building",
        "question": "Among the buildings not completed in 1980, what is the maximum number of stories?",
        "evidence": "",
        "gold": "SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != \"1980\"",
        "pred": "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year <> 1980",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year <> 1980",
        "repair_result": 1
    },
    {
        "idx": 159,
        "db_id": "region_building",
        "question": "What is the average population for all regions?",
        "evidence": "",
        "gold": "SELECT avg(Population) FROM region",
        "pred": "SELECT AVG(Population) FROM region",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Population) FROM region",
        "repair_result": 1
    },
    {
        "idx": 160,
        "db_id": "region_building",
        "question": "Compute the average population of a region.",
        "evidence": "",
        "gold": "SELECT avg(Population) FROM region",
        "pred": "SELECT AVG(Population) FROM region",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Population) FROM region",
        "repair_result": 1
    },
    {
        "idx": 161,
        "db_id": "region_building",
        "question": "What are the names of regions in ascending alphabetical order?",
        "evidence": "",
        "gold": "SELECT Name FROM region ORDER BY Name ASC",
        "pred": "SELECT `Name` FROM region ORDER BY `Name` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM region ORDER BY `Name` ASC",
        "repair_result": 1
    },
    {
        "idx": 162,
        "db_id": "region_building",
        "question": "List the names of regions in alphabetical order.",
        "evidence": "",
        "gold": "SELECT Name FROM region ORDER BY Name ASC",
        "pred": "SELECT `Name` FROM region ORDER BY `Name` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM region ORDER BY `Name` ASC",
        "repair_result": 1
    },
    {
        "idx": 163,
        "db_id": "region_building",
        "question": "What are the capitals of the regions with area bigger than 10000?",
        "evidence": "",
        "gold": "SELECT Capital FROM region WHERE Area  >  10000",
        "pred": "SELECT Capital FROM region WHERE Area > 10000",
        "pred_result": 1,
        "repair_sql": "SELECT Capital FROM region WHERE Area > 10000",
        "repair_result": 1
    },
    {
        "idx": 164,
        "db_id": "region_building",
        "question": "Give me the capitals of the regions whose area is larger than 10000.",
        "evidence": "",
        "gold": "SELECT Capital FROM region WHERE Area  >  10000",
        "pred": "SELECT `Capital` FROM region WHERE `Area` > 10000",
        "pred_result": 1,
        "repair_sql": "SELECT `Capital` FROM region WHERE `Area` > 10000",
        "repair_result": 1
    },
    {
        "idx": 165,
        "db_id": "region_building",
        "question": "List the capital of the region with the largest population.",
        "evidence": "",
        "gold": "SELECT Capital FROM region ORDER BY Population DESC LIMIT 1",
        "pred": "SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region)",
        "pred_result": 1,
        "repair_sql": "SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region)",
        "repair_result": 1
    },
    {
        "idx": 166,
        "db_id": "region_building",
        "question": "Which region has the largest population? Give me the capital of the region.",
        "evidence": "",
        "gold": "SELECT Capital FROM region ORDER BY Population DESC LIMIT 1",
        "pred": "SELECT `Capital` FROM region WHERE `Population` = (SELECT MAX(`Population`) FROM region)",
        "pred_result": 1,
        "repair_sql": "SELECT `Capital` FROM region WHERE `Population` = (SELECT MAX(`Population`) FROM region)",
        "repair_result": 1
    },
    {
        "idx": 167,
        "db_id": "region_building",
        "question": "List the names of the regions with the top 5 largest areas.",
        "evidence": "",
        "gold": "SELECT Name FROM region ORDER BY Area DESC LIMIT 5",
        "pred": "SELECT `Name` FROM region ORDER BY Area DESC LIMIT 5",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM region ORDER BY Area DESC LIMIT 5",
        "repair_result": 1
    },
    {
        "idx": 168,
        "db_id": "region_building",
        "question": "What are the names of the 5 largest regions in terms of area?",
        "evidence": "",
        "gold": "SELECT Name FROM region ORDER BY Area DESC LIMIT 5",
        "pred": "SELECT `Name` FROM region ORDER BY Area DESC LIMIT 5",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM region ORDER BY Area DESC LIMIT 5",
        "repair_result": 1
    },
    {
        "idx": 169,
        "db_id": "region_building",
        "question": "Show the names of buildings and the names of regions they are in.",
        "evidence": "",
        "gold": "SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
        "pred": "SELECT B.`Name` AS Building_Name, R.`Name` AS Region_Name FROM building AS B JOIN region AS R ON B.`Region_ID` = R.`Region_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT B.`Name` AS Building_Name, R.`Name` AS Region_Name FROM building AS B JOIN region AS R ON B.`Region_ID` = R.`Region_ID`",
        "repair_result": 1
    },
    {
        "idx": 170,
        "db_id": "region_building",
        "question": "For each building, return the name of the building and the name of the region it belongs to.",
        "evidence": "",
        "gold": "SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
        "pred": "SELECT B.`Name` AS Building_Name, R.`Name` AS Region_Name FROM building AS B JOIN region AS R ON B.`Region_ID` = R.`Region_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT B.`Name` AS Building_Name, R.`Name` AS Region_Name FROM building AS B JOIN region AS R ON B.`Region_ID` = R.`Region_ID`",
        "repair_result": 1
    },
    {
        "idx": 171,
        "db_id": "region_building",
        "question": "Show the names of regions that have more than one building.",
        "evidence": "",
        "gold": "SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1",
        "pred": "SELECT region.`Name` FROM region JOIN building ON region.`Region_ID` = building.`Region_ID` GROUP BY region.`Name` HAVING COUNT(building.`Building_ID`) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT region.`Name` FROM region JOIN building ON region.`Region_ID` = building.`Region_ID` GROUP BY region.`Name` HAVING COUNT(building.`Building_ID`) > 1",
        "repair_result": 1
    },
    {
        "idx": 172,
        "db_id": "region_building",
        "question": "Which regions have more than one building? Give me the names of the regions.",
        "evidence": "",
        "gold": "SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1",
        "pred": "SELECT region.`Name` FROM region JOIN building ON region.`Region_ID` = building.`Region_ID` GROUP BY region.`Region_ID` HAVING COUNT(building.`Building_ID`) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT region.`Name` FROM region JOIN building ON region.`Region_ID` = building.`Region_ID` GROUP BY region.`Region_ID` HAVING COUNT(building.`Building_ID`) > 1",
        "repair_result": 1
    },
    {
        "idx": 173,
        "db_id": "region_building",
        "question": "Show the capital of the region that has the most buildings.",
        "evidence": "",
        "gold": "SELECT T2.capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT R.`Capital` FROM region AS R JOIN building AS B ON R.`Region_ID` = B.`Region_ID` GROUP BY R.`Capital` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT R.`Capital` FROM region AS R JOIN building AS B ON R.`Region_ID` = B.`Region_ID` GROUP BY R.`Capital` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 174,
        "db_id": "region_building",
        "question": "Which region has the largest number of buildings? Show me the capital of the region.",
        "evidence": "",
        "gold": "SELECT T2.capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT R.`Name`, R.`Capital` FROM region AS R JOIN building AS B ON R.`Region_ID` = B.`Region_ID` GROUP BY R.`Region_ID` ORDER BY COUNT(B.`Building_ID`) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT R.`Name`, R.`Capital` FROM region AS R JOIN building AS B ON R.`Region_ID` = B.`Region_ID` GROUP BY R.`Region_ID` ORDER BY COUNT(B.`Building_ID`) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 175,
        "db_id": "region_building",
        "question": "Show addresses of buildings and the capitals of regions they are in.",
        "evidence": "",
        "gold": "SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
        "pred": "SELECT B.`Address`, R.`Capital` FROM building AS B JOIN region AS R ON B.`Region_ID` = R.`Region_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT B.`Address`, R.`Capital` FROM building AS B JOIN region AS R ON B.`Region_ID` = R.`Region_ID`",
        "repair_result": 1
    },
    {
        "idx": 176,
        "db_id": "region_building",
        "question": "For each building, return the address of the building and the name of the region it belongs to.",
        "evidence": "",
        "gold": "SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
        "pred": "SELECT B.`Address`, R.`Name` FROM building AS B JOIN region AS R ON B.`Region_ID` = R.`Region_ID`",
        "pred_result": 0,
        "repair_sql": "SELECT B.`Address`, R.`Name` FROM building AS B JOIN region AS R ON B.`Region_ID` = R.`Region_ID`",
        "repair_result": 0
    },
    {
        "idx": 177,
        "db_id": "region_building",
        "question": "Show the number of stories of buildings in the region with name \"Abruzzo\".",
        "evidence": "",
        "gold": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
        "pred": "SELECT `Number_of_Stories` FROM building WHERE `Region_ID` = (SELECT `Region_ID` FROM region WHERE `Name` = 'Abruzzo')",
        "pred_result": 1,
        "repair_sql": "SELECT `Number_of_Stories` FROM building WHERE `Region_ID` = (SELECT `Region_ID` FROM region WHERE `Name` = 'Abruzzo')",
        "repair_result": 1
    },
    {
        "idx": 178,
        "db_id": "region_building",
        "question": "Return the number of stories for each building in the region named \"Abruzzo\".",
        "evidence": "",
        "gold": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
        "pred": "SELECT `Name`, `Number_of_Stories` FROM building WHERE `Region_ID` = (SELECT `Region_ID` FROM region WHERE `Name` = 'Abruzzo')",
        "pred_result": 0,
        "repair_sql": "SELECT `Name`, `Number_of_Stories` FROM building WHERE `Region_ID` = (SELECT `Region_ID` FROM region WHERE `Name` = 'Abruzzo')",
        "repair_result": 0
    },
    {
        "idx": 179,
        "db_id": "region_building",
        "question": "Please show each completion year and the number of buildings completed in that year.",
        "evidence": "",
        "gold": "SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year",
        "pred": "SELECT `Completed_Year`, COUNT(*) FROM building GROUP BY `Completed_Year`",
        "pred_result": 1,
        "repair_sql": "SELECT `Completed_Year`, COUNT(*) FROM building GROUP BY `Completed_Year`",
        "repair_result": 1
    },
    {
        "idx": 180,
        "db_id": "region_building",
        "question": "For completion year, return the year and the number of buildings completed.",
        "evidence": "",
        "gold": "SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year",
        "pred": "SELECT `Completed_Year`, COUNT(*) FROM building GROUP BY `Completed_Year`",
        "pred_result": 1,
        "repair_sql": "SELECT `Completed_Year`, COUNT(*) FROM building GROUP BY `Completed_Year`",
        "repair_result": 1
    },
    {
        "idx": 181,
        "db_id": "region_building",
        "question": "List the year in which the most buildings are completed.",
        "evidence": "",
        "gold": "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT Completed_Year, COUNT(*) AS num_buildings FROM building GROUP BY Completed_Year ORDER BY num_buildings DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT Completed_Year, COUNT(*) AS num_buildings FROM building GROUP BY Completed_Year ORDER BY num_buildings DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 182,
        "db_id": "region_building",
        "question": "In which year did the most building constructions complete?",
        "evidence": "",
        "gold": "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT `Completed_Year` FROM building GROUP BY `Completed_Year` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT `Completed_Year` FROM building GROUP BY `Completed_Year` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 183,
        "db_id": "region_building",
        "question": "List the names of regions that do not have any buildings.",
        "evidence": "",
        "gold": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
        "pred": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
        "pred_result": 1,
        "repair_sql": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
        "repair_result": 1
    },
    {
        "idx": 184,
        "db_id": "region_building",
        "question": "What are the names of regions in which there are no buildings?",
        "evidence": "",
        "gold": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
        "pred": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
        "pred_result": 1,
        "repair_sql": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
        "repair_result": 1
    },
    {
        "idx": 185,
        "db_id": "region_building",
        "question": "Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.",
        "evidence": "",
        "gold": "SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15",
        "pred": "SELECT DISTINCT T1.`Completed_Year` FROM building AS T1 WHERE T1.`Number_of_Stories` > 20 INTERSECT SELECT DISTINCT T2.`Completed_Year` FROM building AS T2 WHERE T2.`Number_of_Stories` < 15",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`Completed_Year` FROM building AS T1 WHERE T1.`Number_of_Stories` > 20 INTERSECT SELECT DISTINCT T2.`Completed_Year` FROM building AS T2 WHERE T2.`Number_of_Stories` < 15",
        "repair_result": 1
    },
    {
        "idx": 186,
        "db_id": "region_building",
        "question": "In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?",
        "evidence": "",
        "gold": "SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15",
        "pred": "SELECT DISTINCT B1.`Completed_Year` FROM building AS B1 JOIN building AS B2 ON B1.`Completed_Year` = B2.`Completed_Year` WHERE B1.`Number_of_Stories` > 20 AND B2.`Number_of_Stories` < 15",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT B1.`Completed_Year` FROM building AS B1 JOIN building AS B2 ON B1.`Completed_Year` = B2.`Completed_Year` WHERE B1.`Number_of_Stories` > 20 AND B2.`Number_of_Stories` < 15",
        "repair_result": 1
    },
    {
        "idx": 187,
        "db_id": "region_building",
        "question": "Show the distinct addresses of buildings.",
        "evidence": "",
        "gold": "SELECT DISTINCT Address FROM building",
        "pred": "SELECT DISTINCT `Address` FROM building",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Address` FROM building",
        "repair_result": 1
    },
    {
        "idx": 188,
        "db_id": "region_building",
        "question": "Give me a list of distinct building addresses.",
        "evidence": "",
        "gold": "SELECT DISTINCT Address FROM building",
        "pred": "SELECT DISTINCT `Address` FROM building",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Address` FROM building",
        "repair_result": 1
    },
    {
        "idx": 189,
        "db_id": "region_building",
        "question": "Show the completed years of buildings in descending order of the number of stories.",
        "evidence": "",
        "gold": "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC",
        "pred": "SELECT `Completed_Year` FROM building ORDER BY `Number_of_Stories` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Completed_Year` FROM building ORDER BY `Number_of_Stories` DESC",
        "repair_result": 1
    },
    {
        "idx": 190,
        "db_id": "region_building",
        "question": "Sort buildings in descending order of the number of stories, and return their completion years.",
        "evidence": "",
        "gold": "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC",
        "pred": "SELECT `Completed_Year` FROM building ORDER BY `Number_of_Stories` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Completed_Year` FROM building ORDER BY `Number_of_Stories` DESC",
        "repair_result": 1
    },
    {
        "idx": 191,
        "db_id": "government_shift",
        "question": "List details of all the channel in alphabetical order .",
        "evidence": "",
        "gold": "select channel_details from channels order by channel_details",
        "pred": "SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC",
        "pred_result": 1,
        "repair_sql": "SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC",
        "repair_result": 1
    },
    {
        "idx": 192,
        "db_id": "government_shift",
        "question": "What is the list of channel details ordered alphabetically ?",
        "evidence": "",
        "gold": "select channel_details from channels order by channel_details",
        "pred": "SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC",
        "pred_result": 1,
        "repair_sql": "SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC",
        "repair_result": 1
    },
    {
        "idx": 193,
        "db_id": "government_shift",
        "question": "How many services are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM services",
        "pred": "SELECT COUNT(*) FROM Services",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Services",
        "repair_result": 1
    },
    {
        "idx": 194,
        "db_id": "government_shift",
        "question": "Count the number of services.",
        "evidence": "",
        "gold": "SELECT count(*) FROM services",
        "pred": "SELECT COUNT(*) FROM Services",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Services",
        "repair_result": 1
    },
    {
        "idx": 195,
        "db_id": "government_shift",
        "question": "What is the most common analytical layer type code?",
        "evidence": "",
        "gold": "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `Analytical_Layer_Type_Code`, COUNT(*) AS count FROM Analytical_Layer GROUP BY `Analytical_Layer_Type_Code` ORDER BY count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Analytical_Layer_Type_Code`, COUNT(*) AS count FROM Analytical_Layer GROUP BY `Analytical_Layer_Type_Code` ORDER BY count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 196,
        "db_id": "government_shift",
        "question": "Find the analytical layer type code that appears most often.",
        "evidence": "",
        "gold": "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `Analytical_Layer_Type_Code`, COUNT(*) AS count FROM Analytical_Layer GROUP BY `Analytical_Layer_Type_Code` ORDER BY count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Analytical_Layer_Type_Code`, COUNT(*) AS count FROM Analytical_Layer GROUP BY `Analytical_Layer_Type_Code` ORDER BY count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 197,
        "db_id": "government_shift",
        "question": "Find all the services that has been used by the customer with details \"Hardy Kutch\".",
        "evidence": "",
        "gold": "SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  \"Hardy Kutch\"",
        "pred": "SELECT Services.`Service_Details` FROM Services JOIN Customers_and_Services ON Services.`Service_ID` = Customers_and_Services.`Service_ID` JOIN Customers ON Customers_and_Services.`Customer_ID` = Customers.`Customer_ID` WHERE Customers.`Customer_Details` = 'Hardy Kutch'",
        "pred_result": 1,
        "repair_sql": "SELECT Services.`Service_Details` FROM Services JOIN Customers_and_Services ON Services.`Service_ID` = Customers_and_Services.`Service_ID` JOIN Customers ON Customers_and_Services.`Customer_ID` = Customers.`Customer_ID` WHERE Customers.`Customer_Details` = 'Hardy Kutch'",
        "repair_result": 1
    },
    {
        "idx": 198,
        "db_id": "government_shift",
        "question": "Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details.",
        "evidence": "",
        "gold": "SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  \"Hardy Kutch\"",
        "pred": "SELECT Services.`Service_Details` FROM Customers JOIN Customers_and_Services ON Customers.`Customer_ID` = Customers_and_Services.`Customer_ID` JOIN Services ON Customers_and_Services.`Service_ID` = Services.`Service_ID` WHERE Customers.`Customer_Details` = 'Hardy Kutch'",
        "pred_result": 1,
        "repair_sql": "SELECT Services.`Service_Details` FROM Customers JOIN Customers_and_Services ON Customers.`Customer_ID` = Customers_and_Services.`Customer_ID` JOIN Services ON Customers_and_Services.`Service_ID` = Services.`Service_ID` WHERE Customers.`Customer_Details` = 'Hardy Kutch'",
        "repair_result": 1
    },
    {
        "idx": 199,
        "db_id": "government_shift",
        "question": "Find the details of the services that have been used by more than 3 times .",
        "evidence": "",
        "gold": "select t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id group by t1.service_details having count(*)  >  3",
        "pred": "SELECT T1.`Service_Details` FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.`Service_ID` = T2.`Service_ID` GROUP BY T1.`Service_ID` HAVING COUNT(*) > 3",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Service_Details` FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.`Service_ID` = T2.`Service_ID` GROUP BY T1.`Service_ID` HAVING COUNT(*) > 3",
        "repair_result": 1
    },
    {
        "idx": 200,
        "db_id": "government_shift",
        "question": "Which services were used by customers by more than 3 times? Give me the service details.",
        "evidence": "",
        "gold": "SELECT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_details HAVING count(*)  >  3",
        "pred": "SELECT Service_Details FROM Services WHERE Service_ID IN ( SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(*) > 3 )",
        "pred_result": 1,
        "repair_sql": "SELECT Service_Details FROM Services WHERE Service_ID IN ( SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(*) > 3 )",
        "repair_result": 1
    },
    {
        "idx": 201,
        "db_id": "government_shift",
        "question": "Find the details of the customer who has used services the most times.",
        "evidence": "",
        "gold": "SELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_details ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT C.`Customer_Details`, COUNT(*) AS Total_Use_Count FROM Customers AS C JOIN Customers_and_Services AS CS ON C.`Customer_ID` = CS.`Customer_ID` GROUP BY C.`Customer_ID` ORDER BY Total_Use_Count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT C.`Customer_Details`, COUNT(*) AS Total_Use_Count FROM Customers AS C JOIN Customers_and_Services AS CS ON C.`Customer_ID` = CS.`Customer_ID` GROUP BY C.`Customer_ID` ORDER BY Total_Use_Count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 202,
        "db_id": "government_shift",
        "question": "return the details of the customer with largest count of used services.",
        "evidence": "",
        "gold": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1",
        "pred": "SELECT Customers.`Customer_Details` FROM Customers JOIN Customers_and_Services ON Customers.`Customer_ID` = Customers_and_Services.`Customer_ID` GROUP BY Customers.`Customer_ID` ORDER BY COUNT(Customers_and_Services.`Service_ID`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT Customers.`Customer_Details` FROM Customers JOIN Customers_and_Services ON Customers.`Customer_ID` = Customers_and_Services.`Customer_ID` GROUP BY Customers.`Customer_ID` ORDER BY COUNT(Customers_and_Services.`Service_ID`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 203,
        "db_id": "government_shift",
        "question": "Find the name of the customer who has used the most types of services .",
        "evidence": "",
        "gold": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1",
        "pred": "SELECT C.`Customer_Details` FROM Customers AS C JOIN Customers_and_Services AS CS ON C.`Customer_ID` = CS.`Customer_ID` GROUP BY C.`Customer_ID` ORDER BY COUNT(DISTINCT CS.`Service_ID`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT C.`Customer_Details` FROM Customers AS C JOIN Customers_and_Services AS CS ON C.`Customer_ID` = CS.`Customer_ID` GROUP BY C.`Customer_ID` ORDER BY COUNT(DISTINCT CS.`Service_ID`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 204,
        "db_id": "government_shift",
        "question": "Which customer has used the most types of services ? Give me the customer details .",
        "evidence": "",
        "gold": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1",
        "pred": "SELECT C.`Customer_Details` FROM Customers AS C JOIN Customers_and_Services AS CS ON C.`Customer_ID` = CS.`Customer_ID` GROUP BY C.`Customer_ID` ORDER BY COUNT(DISTINCT CS.`Service_ID`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT C.`Customer_Details` FROM Customers AS C JOIN Customers_and_Services AS CS ON C.`Customer_ID` = CS.`Customer_ID` GROUP BY C.`Customer_ID` ORDER BY COUNT(DISTINCT CS.`Service_ID`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 205,
        "db_id": "government_shift",
        "question": "Find the details of the customer who has never used any services .",
        "evidence": "",
        "gold": "select customer_details from customers where customer_id not in (select customer_id from customers_and_services)",
        "pred": "SELECT * FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)",
        "pred_result": 0,
        "repair_sql": "SELECT * FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)",
        "repair_result": 0
    },
    {
        "idx": 206,
        "db_id": "government_shift",
        "question": "Which customers never used any services ? Give me the customer details .",
        "evidence": "",
        "gold": "select customer_details from customers where customer_id not in (select customer_id from customers_and_services)",
        "pred": "SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)",
        "pred_result": 1,
        "repair_sql": "SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)",
        "repair_result": 1
    },
    {
        "idx": 207,
        "db_id": "government_shift",
        "question": "Find the details of the customers who have used the least-used service .",
        "evidence": "",
        "gold": "select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)",
        "pred": "SELECT Customers.`Customer_Details` FROM Customers JOIN Customers_and_Services ON Customers.`Customer_ID` = Customers_and_Services.`Customer_ID` JOIN Services ON Customers_and_Services.`Service_ID` = Services.`Service_ID` GROUP BY Customers.`Customer_ID` ORDER BY COUNT(Services.`Service_ID`) ASC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT Customers.`Customer_Details` FROM Customers JOIN Customers_and_Services ON Customers.`Customer_ID` = Customers_and_Services.`Customer_ID` JOIN Services ON Customers_and_Services.`Service_ID` = Services.`Service_ID` GROUP BY Customers.`Customer_ID` ORDER BY COUNT(Services.`Service_ID`) ASC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 208,
        "db_id": "government_shift",
        "question": "Which customers used the least commonly-used service ? Give me the distinct customer details .",
        "evidence": "",
        "gold": "select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)",
        "pred": "SELECT DISTINCT C.`Customer_Details` FROM Customers AS C JOIN Customers_and_Services AS CS ON C.`Customer_ID` = CS.`Customer_ID` JOIN Services AS S ON CS.`Service_ID` = S.`Service_ID` GROUP BY S.`Service_Details` ORDER BY COUNT(*) ASC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT C.`Customer_Details` FROM Customers AS C JOIN Customers_and_Services AS CS ON C.`Customer_ID` = CS.`Customer_ID` JOIN Services AS S ON CS.`Service_ID` = S.`Service_ID` GROUP BY S.`Service_Details` ORDER BY COUNT(*) ASC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 209,
        "db_id": "government_shift",
        "question": "How many distinct customer and services details are there?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services",
        "pred": "SELECT COUNT(DISTINCT Customers_and_Services_Details) FROM Customers_and_Services",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Customers_and_Services_Details) FROM Customers_and_Services",
        "repair_result": 1
    },
    {
        "idx": 210,
        "db_id": "government_shift",
        "question": "Count the total number of available customers and services details.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services",
        "pred": "SELECT COUNT(*) FROM Customers_and_Services",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Customers_and_Services",
        "repair_result": 0
    },
    {
        "idx": 211,
        "db_id": "government_shift",
        "question": "Find all the customers whose name contains \"Kutch\".",
        "evidence": "",
        "gold": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Kutch%\"",
        "pred": "SELECT * FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
        "pred_result": 0,
        "repair_sql": "SELECT * FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
        "repair_result": 0
    },
    {
        "idx": 212,
        "db_id": "government_shift",
        "question": "What are the details of the customers who have \"Kutch\" in part of their details?",
        "evidence": "",
        "gold": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Kutch%\"",
        "pred": "SELECT * FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
        "pred_result": 0,
        "repair_sql": "SELECT * FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
        "repair_result": 0
    },
    {
        "idx": 213,
        "db_id": "government_shift",
        "question": "Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions.",
        "evidence": "",
        "gold": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" OR t4.services_and_channels_details  =  \"good\"",
        "pred": "SELECT DISTINCT Services.`Service_Details` FROM Services JOIN Customers_and_Services ON Services.`Service_ID` = Customers_and_Services.`Service_ID` JOIN Customers ON Customers_and_Services.`Customer_ID` = Customers.`Customer_ID` JOIN Customer_Interactions ON Customers_and_Services.`Customer_ID` = Customer_Interactions.`Customer_ID` WHERE Customers.`Customer_Details` = 'Hardy Kutch' OR Customer_Interactions.`Services_and_Channels_Details` = 'good'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT Services.`Service_Details` FROM Services JOIN Customers_and_Services ON Services.`Service_ID` = Customers_and_Services.`Service_ID` JOIN Customers ON Customers_and_Services.`Customer_ID` = Customers.`Customer_ID` JOIN Customer_Interactions ON Customers_and_Services.`Customer_ID` = Customer_Interactions.`Customer_ID` WHERE Customers.`Customer_Details` = 'Hardy Kutch' OR Customer_Interactions.`Services_and_Channels_Details` = 'good'",
        "repair_result": 0
    },
    {
        "idx": 214,
        "db_id": "government_shift",
        "question": "Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details.",
        "evidence": "",
        "gold": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" OR t4.services_and_channels_details  =  \"good\"",
        "pred": "SELECT DISTINCT Services.`Service_Details` FROM Services JOIN Customers_and_Services ON Services.`Service_ID` = Customers_and_Services.`Service_ID` JOIN Customer_Interactions ON Customers_and_Services.`Customer_ID` = Customers.`Customer_ID` AND Customers_and_Services.`Service_ID` = Services.`Service_ID` AND Customer_Interactions.`Customer_ID` = Customers.`Customer_ID` AND Customer_Interactions.`Service_ID` = Services.`Service_ID` WHERE Customers.`Customer_Details` = 'Hardy Kutch' OR Customer_Interactions.`Services_and_Channels_Details` = 'good'",
        "pred_result": "no such column: Customers.Customer_Details",
        "repair_sql": "SELECT DISTINCT Services.`Service_Details` FROM Services JOIN Customers_and_Services ON Services.`Service_ID` = Customers_and_Services.`Service_ID` JOIN Customer_Interactions ON Customers_and_Services.`Customer_ID` = Customer_Interactions.`Customer_ID` AND Customers_and_Services.`Service_ID` = Customer_Interactions.`Service_ID` WHERE Customer_Interactions.`Services_and_Channels_Details` = 'good' OR Customers_and_Services.`Customer_ID` IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')",
        "repair_result": 0
    },
    {
        "idx": 215,
        "db_id": "government_shift",
        "question": "Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions.",
        "evidence": "",
        "gold": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" AND t4.services_and_channels_details  =  \"bad\"",
        "pred": "SELECT DISTINCT S.`Service_Details` FROM Services AS S JOIN Customers_and_Services AS CS ON S.`Service_ID` = CS.`Service_ID` JOIN Customer_Interactions AS CI ON CS.`Customer_ID` = CI.`Customer_ID` AND CS.`Service_ID` = CI.`Service_ID` JOIN Customers AS C ON CS.`Customer_ID` = C.`Customer_ID` WHERE C.`Customer_Details` = 'Hardy Kutch' AND CI.`Services_and_Channels_Details` = 'bad'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT S.`Service_Details` FROM Services AS S JOIN Customers_and_Services AS CS ON S.`Service_ID` = CS.`Service_ID` JOIN Customer_Interactions AS CI ON CS.`Customer_ID` = CI.`Customer_ID` AND CS.`Service_ID` = CI.`Service_ID` JOIN Customers AS C ON CS.`Customer_ID` = C.`Customer_ID` WHERE C.`Customer_Details` = 'Hardy Kutch' AND CI.`Services_and_Channels_Details` = 'bad'",
        "repair_result": 0
    },
    {
        "idx": 216,
        "db_id": "government_shift",
        "question": "Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details.",
        "evidence": "",
        "gold": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" AND t4.services_and_channels_details  =  \"bad\"",
        "pred": "SELECT DISTINCT S.`Service_Details` FROM Services AS S JOIN Customers_and_Services AS CS ON S.`Service_ID` = CS.`Service_ID` JOIN Customer_Interactions AS CI ON CS.`Customer_ID` = CI.`Customer_ID` AND CS.`Service_ID` = CI.`Service_ID` JOIN Customers AS C ON CS.`Customer_ID` = C.`Customer_ID` WHERE C.`Customer_Details` = 'Hardy Kutch' AND CI.`Services_and_Channels_Details` = 'bad'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT S.`Service_Details` FROM Services AS S JOIN Customers_and_Services AS CS ON S.`Service_ID` = CS.`Service_ID` JOIN Customer_Interactions AS CI ON CS.`Customer_ID` = CI.`Customer_ID` AND CS.`Service_ID` = CI.`Service_ID` JOIN Customers AS C ON CS.`Customer_ID` = C.`Customer_ID` WHERE C.`Customer_Details` = 'Hardy Kutch' AND CI.`Services_and_Channels_Details` = 'bad'",
        "repair_result": 0
    },
    {
        "idx": 217,
        "db_id": "government_shift",
        "question": "Find details of all the services that have interacted with `` 15 ij '' for the the channel details.",
        "evidence": "",
        "gold": "select distinct t1.service_details from services as t1 join customer_interactions as t2 on t1.service_id  =  t2.service_id join channels as t3 on t2.channel_id  =  t3.channel_id where t3.channel_details  =  \"15 ij\"",
        "pred": "SELECT Services.`Service_Details` FROM Services JOIN Customers_and_Services ON Services.`Service_ID` = Customers_and_Services.`Service_ID` JOIN Customer_Interactions ON Customers_and_Services.`Customer_ID` = Customer_Interactions.`Customer_ID` WHERE Customer_Interactions.`Channel_ID` = '15 ij'",
        "pred_result": 0,
        "repair_sql": "SELECT Services.`Service_Details` FROM Services JOIN Customers_and_Services ON Services.`Service_ID` = Customers_and_Services.`Service_ID` JOIN Customer_Interactions ON Customers_and_Services.`Customer_ID` = Customer_Interactions.`Customer_ID` WHERE Customer_Interactions.`Channel_ID` = '15 ij'",
        "repair_result": 0
    },
    {
        "idx": 218,
        "db_id": "government_shift",
        "question": "Give me the details of all the services that have interacted with the channel with detail \"15 ij\".",
        "evidence": "",
        "gold": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customer_interactions AS t2 ON t1.service_id  =  t2.service_id JOIN channels AS t3 ON t2.channel_id  =  t3.channel_id WHERE t3.channel_details  =  \"15 ij\"",
        "pred": "SELECT Services.`Service_Details` FROM Services JOIN Customers_and_Services ON Services.`Service_ID` = Customers_and_Services.`Service_ID` JOIN Customer_Interactions ON Customers_and_Services.`Customer_ID` = Customer_Interactions.`Customer_ID` AND Customers_and_Services.`Service_ID` = Customer_Interactions.`Service_ID` WHERE Customer_Interactions.`Channel_ID` = (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij')",
        "pred_result": 0,
        "repair_sql": "SELECT Services.`Service_Details` FROM Services JOIN Customers_and_Services ON Services.`Service_ID` = Customers_and_Services.`Service_ID` JOIN Customer_Interactions ON Customers_and_Services.`Customer_ID` = Customer_Interactions.`Customer_ID` AND Customers_and_Services.`Service_ID` = Customer_Interactions.`Service_ID` WHERE Customer_Interactions.`Channel_ID` = (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij')",
        "repair_result": 0
    },
    {
        "idx": 219,
        "db_id": "government_shift",
        "question": "Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' .",
        "evidence": "",
        "gold": "select t1.customer_details from customers as t1 join customer_interactions as t2 on t1.customer_id  =  t2.customer_id where t2.status_code  =  \"stuck\" and services_and_channels_details  =  \"bad\"",
        "pred": "SELECT * FROM Customers JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID WHERE Customer_Interactions.Status_Code = 'Stuck' AND Customer_Interactions.Services_and_Channels_Details = 'bad'",
        "pred_result": 0,
        "repair_sql": "SELECT * FROM Customers JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID WHERE Customer_Interactions.Status_Code = 'Stuck' AND Customer_Interactions.Services_and_Channels_Details = 'bad'",
        "repair_result": 0
    },
    {
        "idx": 220,
        "db_id": "government_shift",
        "question": "Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details.",
        "evidence": "",
        "gold": "SELECT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.status_code  =  \"Stuck\" AND services_and_channels_details  =  \"bad\"",
        "pred": "SELECT DISTINCT C.`Customer_Details` FROM Customers AS C JOIN Customer_Interactions AS CI ON C.`Customer_ID` = CI.`Customer_ID` WHERE CI.`Status_Code` = 'Stuck' AND CI.`Services_and_Channels_Details` = 'bad'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT C.`Customer_Details` FROM Customers AS C JOIN Customer_Interactions AS CI ON C.`Customer_ID` = CI.`Customer_ID` WHERE CI.`Status_Code` = 'Stuck' AND CI.`Services_and_Channels_Details` = 'bad'",
        "repair_result": 1
    },
    {
        "idx": 221,
        "db_id": "government_shift",
        "question": "How many integration platforms are successful?",
        "evidence": "",
        "gold": "SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  \"Success\"",
        "pred": "SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details = 'Success'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details = 'Success'",
        "repair_result": 1
    },
    {
        "idx": 222,
        "db_id": "government_shift",
        "question": "Count the number of integration platforms that have \"Success\" in the details.",
        "evidence": "",
        "gold": "SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  \"Success\"",
        "pred": "SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details = 'Success'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details = 'Success'",
        "repair_result": 1
    },
    {
        "idx": 223,
        "db_id": "government_shift",
        "question": "List the details of all the customers who are associated with a failed integration platform .",
        "evidence": "",
        "gold": "select distinct t1.customer_details from customers as t1 join customer_interactions as t2 on t1.customer_id  =  t2.customer_id join integration_platform as t3 where t3.integration_platform_details  =  \"fail\"",
        "pred": "SELECT DISTINCT C.`Customer_Details` FROM Customers AS C JOIN Customers_and_Services AS CS ON C.`Customer_ID` = CS.`Customer_ID` JOIN Customer_Interactions AS CI ON C.`Customer_ID` = CI.`Customer_ID` JOIN Integration_Platform AS IP ON CI.`Customer_Interaction_ID` = IP.`Customer_Interaction_ID` WHERE IP.`Integration_Platform_Details` = 'Fail'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT C.`Customer_Details` FROM Customers AS C JOIN Customers_and_Services AS CS ON C.`Customer_ID` = CS.`Customer_ID` JOIN Customer_Interactions AS CI ON C.`Customer_ID` = CI.`Customer_ID` JOIN Integration_Platform AS IP ON CI.`Customer_Interaction_ID` = IP.`Customer_Interaction_ID` WHERE IP.`Integration_Platform_Details` = 'Fail'",
        "repair_result": 0
    },
    {
        "idx": 224,
        "db_id": "government_shift",
        "question": "Which customers have integration platform details \"Fail\" in interactions? Give me the customer details.",
        "evidence": "",
        "gold": "SELECT DISTINCT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id JOIN integration_platform AS t3 WHERE t3.integration_platform_details  =  \"Fail\"",
        "pred": "SELECT C.`Customer_Details` FROM Customers AS C JOIN Customer_Interactions AS CI ON C.`Customer_ID` = CI.`Customer_ID` JOIN Integration_Platform AS IP ON CI.`Customer_Interaction_ID` = IP.`Customer_Interaction_ID` WHERE IP.`Integration_Platform_Details` = 'Fail'",
        "pred_result": 0,
        "repair_sql": "SELECT C.`Customer_Details` FROM Customers AS C JOIN Customer_Interactions AS CI ON C.`Customer_ID` = CI.`Customer_ID` JOIN Integration_Platform AS IP ON CI.`Customer_Interaction_ID` = IP.`Customer_Interaction_ID` WHERE IP.`Integration_Platform_Details` = 'Fail'",
        "repair_result": 0
    },
    {
        "idx": 225,
        "db_id": "government_shift",
        "question": "Which service ( s ) has never been used by any customer ? List their details .",
        "evidence": "",
        "gold": "select service_details from services except select t2.service_details from customers_and_services as t1 join services as t2 on t1.service_id  =  t2.service_id",
        "pred": "SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT DISTINCT Service_ID FROM Customers_and_Services)",
        "pred_result": 1,
        "repair_sql": "SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT DISTINCT Service_ID FROM Customers_and_Services)",
        "repair_result": 1
    },
    {
        "idx": 226,
        "db_id": "government_shift",
        "question": "Find details of the services that no customer has ever used . Return the service details .",
        "evidence": "",
        "gold": "select service_details from services except select t2.service_details from customers_and_services as t1 join services as t2 on t1.service_id  =  t2.service_id",
        "pred": "SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT DISTINCT Service_ID FROM Customers_and_Services)",
        "pred_result": 1,
        "repair_sql": "SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT DISTINCT Service_ID FROM Customers_and_Services)",
        "repair_result": 1
    },
    {
        "idx": 227,
        "db_id": "government_shift",
        "question": "Find all the layer type codes with their corresponding usage count.",
        "evidence": "",
        "gold": "SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code",
        "pred": "SELECT `Analytical_Layer_Type_Code`, COUNT(*) FROM Analytical_Layer GROUP BY `Analytical_Layer_Type_Code`",
        "pred_result": 1,
        "repair_sql": "SELECT `Analytical_Layer_Type_Code`, COUNT(*) FROM Analytical_Layer GROUP BY `Analytical_Layer_Type_Code`",
        "repair_result": 1
    },
    {
        "idx": 228,
        "db_id": "government_shift",
        "question": "For each analytical layer, return the analytical layer type code and the number of times it was used.",
        "evidence": "",
        "gold": "SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code",
        "pred": "SELECT `Analytical_Layer_Type_Code`, COUNT(*) FROM Analytical_Layer GROUP BY `Analytical_Layer_Type_Code`",
        "pred_result": 1,
        "repair_sql": "SELECT `Analytical_Layer_Type_Code`, COUNT(*) FROM Analytical_Layer GROUP BY `Analytical_Layer_Type_Code`",
        "repair_result": 1
    },
    {
        "idx": 229,
        "db_id": "government_shift",
        "question": "Find details of all the services that have been marked as `` unsatisfied '' in customers and services details .",
        "evidence": "",
        "gold": "select distinct t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id where t2.customers_and_services_details  =  \"unsatisfied\"",
        "pred": "SELECT T1.`Service_Details` FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.`Service_ID` = T2.`Service_ID` WHERE T2.`Customers_and_Services_Details` = 'Unsatisfied'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`Service_Details` FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.`Service_ID` = T2.`Service_ID` WHERE T2.`Customers_and_Services_Details` = 'Unsatisfied'",
        "repair_result": 0
    },
    {
        "idx": 230,
        "db_id": "government_shift",
        "question": "Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details.",
        "evidence": "",
        "gold": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id WHERE t2.customers_and_services_details  =  \"Unsatisfied\"",
        "pred": "SELECT S.`Service_Details` FROM Services AS S JOIN Customers_and_Services AS CS ON S.`Service_ID` = CS.`Service_ID` WHERE CS.`Customers_and_Services_Details` = 'Unsatisfied'",
        "pred_result": 1,
        "repair_sql": "SELECT S.`Service_Details` FROM Services AS S JOIN Customers_and_Services AS CS ON S.`Service_ID` = CS.`Service_ID` WHERE CS.`Customers_and_Services_Details` = 'Unsatisfied'",
        "repair_result": 1
    },
    {
        "idx": 231,
        "db_id": "restaurant_bills",
        "question": "How many customers are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM customer",
        "pred": "SELECT COUNT(*) FROM customer",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM customer",
        "repair_result": 1
    },
    {
        "idx": 232,
        "db_id": "restaurant_bills",
        "question": "Count the number of customers.",
        "evidence": "",
        "gold": "SELECT count(*) FROM customer",
        "pred": "SELECT COUNT(*) FROM customer",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM customer",
        "repair_result": 1
    },
    {
        "idx": 233,
        "db_id": "restaurant_bills",
        "question": "List the names of customers in ascending order of level of membership.",
        "evidence": "",
        "gold": "SELECT Name FROM customer ORDER BY Level_of_Membership ASC",
        "pred": "SELECT `Name` FROM customer ORDER BY `Level_of_Membership` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM customer ORDER BY `Level_of_Membership` ASC",
        "repair_result": 1
    },
    {
        "idx": 234,
        "db_id": "restaurant_bills",
        "question": "Sort all the customers by the level of membership in ascending order, and return the customer names.",
        "evidence": "",
        "gold": "SELECT Name FROM customer ORDER BY Level_of_Membership ASC",
        "pred": "SELECT `Name` FROM customer ORDER BY `Level_of_Membership` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM customer ORDER BY `Level_of_Membership` ASC",
        "repair_result": 1
    },
    {
        "idx": 235,
        "db_id": "restaurant_bills",
        "question": "What are the nationalities and card credits of customers?",
        "evidence": "",
        "gold": "SELECT Nationality ,  Card_Credit FROM customer",
        "pred": "SELECT `Nationality`, `Card_Credit` FROM customer",
        "pred_result": 1,
        "repair_sql": "SELECT `Nationality`, `Card_Credit` FROM customer",
        "repair_result": 1
    },
    {
        "idx": 236,
        "db_id": "restaurant_bills",
        "question": "Find the nationality and card credit of each customer.",
        "evidence": "",
        "gold": "SELECT Nationality ,  Card_Credit FROM customer",
        "pred": "SELECT `Nationality`, `Card_Credit` FROM customer",
        "pred_result": 1,
        "repair_sql": "SELECT `Nationality`, `Card_Credit` FROM customer",
        "repair_result": 1
    },
    {
        "idx": 237,
        "db_id": "restaurant_bills",
        "question": "Show the names of customers with nationality \"England\" or \"Australia\".",
        "evidence": "",
        "gold": "SELECT Name FROM customer WHERE Nationality  =  \"England\" OR Nationality  =  \"Australia\"",
        "pred": "SELECT `Name` FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'",
        "repair_result": 1
    },
    {
        "idx": 238,
        "db_id": "restaurant_bills",
        "question": "Which customers have nationality \"England\" or \"Australia\"? Give me their names.",
        "evidence": "",
        "gold": "SELECT Name FROM customer WHERE Nationality  =  \"England\" OR Nationality  =  \"Australia\"",
        "pred": "SELECT `Name` FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'",
        "repair_result": 1
    },
    {
        "idx": 239,
        "db_id": "restaurant_bills",
        "question": "What is the average card credit of customers with membership level higher than 1?",
        "evidence": "",
        "gold": "SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1",
        "pred": "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1",
        "repair_result": 1
    },
    {
        "idx": 240,
        "db_id": "restaurant_bills",
        "question": "Find the average card credit customers whose membership level is above 1.",
        "evidence": "",
        "gold": "SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1",
        "pred": "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1",
        "repair_result": 1
    },
    {
        "idx": 241,
        "db_id": "restaurant_bills",
        "question": "What is the card credit of the customer with the highest membership level?",
        "evidence": "",
        "gold": "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1",
        "pred": "SELECT `Card_Credit` FROM customer WHERE `Level_of_Membership` = (SELECT MAX(`Level_of_Membership`) FROM customer)",
        "pred_result": 1,
        "repair_sql": "SELECT `Card_Credit` FROM customer WHERE `Level_of_Membership` = (SELECT MAX(`Level_of_Membership`) FROM customer)",
        "repair_result": 1
    },
    {
        "idx": 242,
        "db_id": "restaurant_bills",
        "question": "Find the customer with the highest membership level and return his or her card credit.",
        "evidence": "",
        "gold": "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1",
        "pred": "SELECT `Card_Credit` FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer)",
        "pred_result": 1,
        "repair_sql": "SELECT `Card_Credit` FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer)",
        "repair_result": 1
    },
    {
        "idx": 243,
        "db_id": "restaurant_bills",
        "question": "Show different nationalities of customers, along with the number of customers of each nationality.",
        "evidence": "",
        "gold": "SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality",
        "pred": "SELECT `Nationality`, COUNT(*) FROM customer GROUP BY `Nationality`",
        "pred_result": 1,
        "repair_sql": "SELECT `Nationality`, COUNT(*) FROM customer GROUP BY `Nationality`",
        "repair_result": 1
    },
    {
        "idx": 244,
        "db_id": "restaurant_bills",
        "question": "How many customers are associated with each nationality? List the nationality and the number of customers.",
        "evidence": "",
        "gold": "SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality",
        "pred": "SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality",
        "pred_result": 1,
        "repair_sql": "SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality",
        "repair_result": 1
    },
    {
        "idx": 245,
        "db_id": "restaurant_bills",
        "question": "Show the most common nationality of customers.",
        "evidence": "",
        "gold": "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT Nationality, COUNT(*) AS count FROM customer GROUP BY Nationality ORDER BY count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT Nationality, COUNT(*) AS count FROM customer GROUP BY Nationality ORDER BY count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 246,
        "db_id": "restaurant_bills",
        "question": "Which nationality does the most customers have?",
        "evidence": "",
        "gold": "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT Nationality, COUNT(*) AS Total_Customers FROM customer GROUP BY Nationality ORDER BY Total_Customers DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT Nationality, COUNT(*) AS Total_Customers FROM customer GROUP BY Nationality ORDER BY Total_Customers DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 247,
        "db_id": "restaurant_bills",
        "question": "Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.",
        "evidence": "",
        "gold": "SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75",
        "pred": "SELECT DISTINCT c1.`Nationality` FROM customer c1 WHERE c1.`Card_Credit` < 50 AND EXISTS ( SELECT * FROM customer c2 WHERE c2.`Card_Credit` > 75 AND c1.`Nationality` = c2.`Nationality` )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT c1.`Nationality` FROM customer c1 WHERE c1.`Card_Credit` < 50 AND EXISTS ( SELECT * FROM customer c2 WHERE c2.`Card_Credit` > 75 AND c1.`Nationality` = c2.`Nationality` )",
        "repair_result": 1
    },
    {
        "idx": 248,
        "db_id": "restaurant_bills",
        "question": "Which nations have both customers with card credit above 50 and customers with card credit below 75.",
        "evidence": "",
        "gold": "SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75",
        "pred": "SELECT DISTINCT c1.`Nationality` FROM customer c1 WHERE EXISTS ( SELECT 1 FROM customer c2 WHERE c2.`Nationality` = c1.`Nationality` AND c2.`Card_Credit` > 50 AND c1.`Card_Credit` < 75 )",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT c1.`Nationality` FROM customer c1 WHERE EXISTS ( SELECT 1 FROM customer c2 WHERE c2.`Nationality` = c1.`Nationality` AND c2.`Card_Credit` > 50 AND c1.`Card_Credit` < 75 )",
        "repair_result": 0
    },
    {
        "idx": 249,
        "db_id": "restaurant_bills",
        "question": "Show the names of customers and names of dishes they order.",
        "evidence": "",
        "gold": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID",
        "pred": "SELECT C.`Name`, CO.`Dish_Name` FROM customer AS C JOIN customer_order AS CO ON C.`Customer_ID` = CO.`Customer_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT C.`Name`, CO.`Dish_Name` FROM customer AS C JOIN customer_order AS CO ON C.`Customer_ID` = CO.`Customer_ID`",
        "repair_result": 1
    },
    {
        "idx": 250,
        "db_id": "restaurant_bills",
        "question": "For each order, return the customer name and the dish name.",
        "evidence": "",
        "gold": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID",
        "pred": "SELECT C.`Name`, CO.`Dish_Name` FROM customer AS C JOIN customer_order AS CO ON C.`Customer_ID` = CO.`Customer_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT C.`Name`, CO.`Dish_Name` FROM customer AS C JOIN customer_order AS CO ON C.`Customer_ID` = CO.`Customer_ID`",
        "repair_result": 1
    },
    {
        "idx": 251,
        "db_id": "restaurant_bills",
        "question": "Show the names of customers and names of dishes they order, in descending order of the quantity of dish.",
        "evidence": "",
        "gold": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC",
        "pred": "SELECT c.`Name`, co.`Dish_Name` FROM customer AS c JOIN customer_order AS co ON c.`Customer_ID` = co.`Customer_ID` ORDER BY co.`Quantity` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT c.`Name`, co.`Dish_Name` FROM customer AS c JOIN customer_order AS co ON c.`Customer_ID` = co.`Customer_ID` ORDER BY co.`Quantity` DESC",
        "repair_result": 1
    },
    {
        "idx": 252,
        "db_id": "restaurant_bills",
        "question": "For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.",
        "evidence": "",
        "gold": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC",
        "pred": "SELECT C.`Name`, CO.`Dish_Name` FROM customer AS C JOIN customer_order AS CO ON C.`Customer_ID` = CO.`Customer_ID` ORDER BY CO.`Quantity` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT C.`Name`, CO.`Dish_Name` FROM customer AS C JOIN customer_order AS CO ON C.`Customer_ID` = CO.`Customer_ID` ORDER BY CO.`Quantity` DESC",
        "repair_result": 1
    },
    {
        "idx": 253,
        "db_id": "restaurant_bills",
        "question": "Show each customer name and the total quantities of dishes ordered by that customer.",
        "evidence": "",
        "gold": "SELECT T1.Name ,  sum(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name",
        "pred": "SELECT C.`Name`, SUM(CO.`Quantity`) AS Total_Quantity FROM customer AS C JOIN customer_order AS CO ON C.`Customer_ID` = CO.`Customer_ID` GROUP BY C.`Customer_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT C.`Name`, SUM(CO.`Quantity`) AS Total_Quantity FROM customer AS C JOIN customer_order AS CO ON C.`Customer_ID` = CO.`Customer_ID` GROUP BY C.`Customer_ID`",
        "repair_result": 1
    },
    {
        "idx": 254,
        "db_id": "restaurant_bills",
        "question": "What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity .",
        "evidence": "",
        "gold": "select t1.name ,  sum(t2.quantity) from customer as t1 join customer_order as t2 on t1.customer_id  =  t2.customer_id group by t1.name",
        "pred": "SELECT C.`Name`, SUM(CO.`Quantity`) AS Total_Quantity FROM customer AS C JOIN customer_order AS CO ON C.`Customer_ID` = CO.`Customer_ID` GROUP BY C.`Customer_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT C.`Name`, SUM(CO.`Quantity`) AS Total_Quantity FROM customer AS C JOIN customer_order AS CO ON C.`Customer_ID` = CO.`Customer_ID` GROUP BY C.`Customer_ID`",
        "repair_result": 1
    },
    {
        "idx": 255,
        "db_id": "restaurant_bills",
        "question": "Show the customers with total quantity of order bigger than 1.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity)  >  1",
        "pred": "SELECT DISTINCT C.`Name` FROM customer AS C JOIN customer_order AS CO ON C.`Customer_ID` = CO.`Customer_ID` GROUP BY C.`Customer_ID` HAVING SUM(CO.`Quantity`) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT C.`Name` FROM customer AS C JOIN customer_order AS CO ON C.`Customer_ID` = CO.`Customer_ID` GROUP BY C.`Customer_ID` HAVING SUM(CO.`Quantity`) > 1",
        "repair_result": 1
    },
    {
        "idx": 256,
        "db_id": "restaurant_bills",
        "question": "Which customers have total order quantity greater than 1? Give me the customer names.",
        "evidence": "",
        "gold": "SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity)  >  1",
        "pred": "SELECT `Name` FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1)",
        "repair_result": 1
    },
    {
        "idx": 257,
        "db_id": "restaurant_bills",
        "question": "Show distinct managers of branches.",
        "evidence": "",
        "gold": "SELECT DISTINCT Manager FROM branch",
        "pred": "SELECT DISTINCT `Manager` FROM branch",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Manager` FROM branch",
        "repair_result": 1
    },
    {
        "idx": 258,
        "db_id": "restaurant_bills",
        "question": "Who are the distinct managers of branches?",
        "evidence": "",
        "gold": "SELECT DISTINCT Manager FROM branch",
        "pred": "SELECT DISTINCT `Manager` FROM branch",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Manager` FROM branch",
        "repair_result": 1
    },
    {
        "idx": 259,
        "db_id": "restaurant_bills",
        "question": "List the names of customers that do not have any order.",
        "evidence": "",
        "gold": "SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
        "pred": "SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
        "pred_result": 1,
        "repair_sql": "SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
        "repair_result": 1
    },
    {
        "idx": 260,
        "db_id": "restaurant_bills",
        "question": "Which customers do not have any order? Give me the customer names.",
        "evidence": "",
        "gold": "SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
        "pred": "SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
        "pred_result": 1,
        "repair_sql": "SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
        "repair_result": 1
    },
    {
        "idx": 261,
        "db_id": "address_1",
        "question": "How many cities do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM City",
        "pred": "SELECT COUNT(*) FROM City",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM City",
        "repair_result": 1
    },
    {
        "idx": 262,
        "db_id": "address_1",
        "question": "Count the number of cities.",
        "evidence": "",
        "gold": "SELECT count(*) FROM City",
        "pred": "SELECT COUNT(*) FROM City",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM City",
        "repair_result": 1
    },
    {
        "idx": 263,
        "db_id": "address_1",
        "question": "List all different states .",
        "evidence": "",
        "gold": "select distinct state from city",
        "pred": "SELECT DISTINCT state FROM City",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT state FROM City",
        "repair_result": 1
    },
    {
        "idx": 264,
        "db_id": "address_1",
        "question": "What are all the distinct states?",
        "evidence": "",
        "gold": "SELECT DISTINCT state FROM City",
        "pred": "SELECT DISTINCT state FROM City",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT state FROM City",
        "repair_result": 1
    },
    {
        "idx": 265,
        "db_id": "address_1",
        "question": "How many countries do we have?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT country) FROM City",
        "pred": "SELECT COUNT(DISTINCT country) FROM City",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT country) FROM City",
        "repair_result": 1
    },
    {
        "idx": 266,
        "db_id": "address_1",
        "question": "Count the number of coutries.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT country) FROM City",
        "pred": "SELECT COUNT(DISTINCT country) FROM City",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT country) FROM City",
        "repair_result": 1
    },
    {
        "idx": 267,
        "db_id": "address_1",
        "question": "Show names, codes, states, countries for all cities.",
        "evidence": "",
        "gold": "SELECT city_name ,  city_code ,  state ,  country FROM City",
        "pred": "SELECT `city_name`, `city_code`, `state`, `country` FROM City",
        "pred_result": 1,
        "repair_sql": "SELECT `city_name`, `city_code`, `state`, `country` FROM City",
        "repair_result": 1
    },
    {
        "idx": 268,
        "db_id": "address_1",
        "question": "What are the names, codes, states, and countries for all cities?",
        "evidence": "",
        "gold": "SELECT city_name ,  city_code ,  state ,  country FROM City",
        "pred": "SELECT `city_name`, `city_code`, `state`, `country` FROM City",
        "pred_result": 1,
        "repair_sql": "SELECT `city_name`, `city_code`, `state`, `country` FROM City",
        "repair_result": 1
    },
    {
        "idx": 269,
        "db_id": "address_1",
        "question": "What is the latitude and longitude for Baltimore?",
        "evidence": "",
        "gold": "SELECT latitude ,  longitude FROM City WHERE city_name  =  \"Baltimore\"",
        "pred": "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'",
        "pred_result": 1,
        "repair_sql": "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'",
        "repair_result": 1
    },
    {
        "idx": 270,
        "db_id": "address_1",
        "question": "What latitude and longitude correspond to Baltimore?",
        "evidence": "",
        "gold": "SELECT latitude ,  longitude FROM City WHERE city_name  =  \"Baltimore\"",
        "pred": "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'",
        "pred_result": 1,
        "repair_sql": "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'",
        "repair_result": 1
    },
    {
        "idx": 271,
        "db_id": "address_1",
        "question": "Show names for all cities in state PA.",
        "evidence": "",
        "gold": "SELECT city_name FROM City WHERE state  =  \"PA\"",
        "pred": "SELECT city_name FROM City WHERE state = 'PA'",
        "pred_result": 1,
        "repair_sql": "SELECT city_name FROM City WHERE state = 'PA'",
        "repair_result": 1
    },
    {
        "idx": 272,
        "db_id": "address_1",
        "question": "What are the names of all cities in PA?",
        "evidence": "",
        "gold": "SELECT city_name FROM City WHERE state  =  \"PA\"",
        "pred": "SELECT city_name FROM City WHERE state = 'PA'",
        "pred_result": 1,
        "repair_sql": "SELECT city_name FROM City WHERE state = 'PA'",
        "repair_result": 1
    },
    {
        "idx": 273,
        "db_id": "address_1",
        "question": "How many cities are in Canada?",
        "evidence": "",
        "gold": "SELECT count(*) FROM City WHERE country  =  \"CANADA\"",
        "pred": "SELECT COUNT(*) FROM City WHERE country = 'UK'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM City WHERE country = 'UK'",
        "repair_result": 1
    },
    {
        "idx": 274,
        "db_id": "address_1",
        "question": "Count the number of cities in Canada.",
        "evidence": "",
        "gold": "SELECT count(*) FROM City WHERE country  =  \"CANADA\"",
        "pred": "SELECT COUNT(*) FROM City WHERE country = 'UK'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM City WHERE country = 'UK'",
        "repair_result": 1
    },
    {
        "idx": 275,
        "db_id": "address_1",
        "question": "Show names for all USA city ordered by latitude.",
        "evidence": "",
        "gold": "SELECT city_name FROM City WHERE country  =  \"USA\" ORDER BY latitude",
        "pred": "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude",
        "pred_result": 1,
        "repair_sql": "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude",
        "repair_result": 1
    },
    {
        "idx": 276,
        "db_id": "address_1",
        "question": "What are all the city names for cities in the USA, ordered by latitude?",
        "evidence": "",
        "gold": "SELECT city_name FROM City WHERE country  =  \"USA\" ORDER BY latitude",
        "pred": "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude",
        "pred_result": 1,
        "repair_sql": "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude",
        "repair_result": 1
    },
    {
        "idx": 277,
        "db_id": "address_1",
        "question": "Show all states and number of cities in each state.",
        "evidence": "",
        "gold": "SELECT state ,  count(*) FROM City GROUP BY state",
        "pred": "SELECT state, COUNT(city_name) AS num_cities FROM City GROUP BY state",
        "pred_result": 1,
        "repair_sql": "SELECT state, COUNT(city_name) AS num_cities FROM City GROUP BY state",
        "repair_result": 1
    },
    {
        "idx": 278,
        "db_id": "address_1",
        "question": "How many cities are in each state?",
        "evidence": "",
        "gold": "SELECT state ,  count(*) FROM City GROUP BY state",
        "pred": "SELECT state, COUNT(DISTINCT city_name) AS num_cities FROM City GROUP BY state",
        "pred_result": 1,
        "repair_sql": "SELECT state, COUNT(DISTINCT city_name) AS num_cities FROM City GROUP BY state",
        "repair_result": 1
    },
    {
        "idx": 279,
        "db_id": "address_1",
        "question": "Show all countries and number of cities in each .",
        "evidence": "",
        "gold": "select country ,  count(*) from city group by country",
        "pred": "SELECT country, COUNT(city_name) AS num_cities FROM City GROUP BY country",
        "pred_result": 1,
        "repair_sql": "SELECT country, COUNT(city_name) AS num_cities FROM City GROUP BY country",
        "repair_result": 1
    },
    {
        "idx": 280,
        "db_id": "address_1",
        "question": "How many cities are there in each country?",
        "evidence": "",
        "gold": "SELECT country ,  count(*) FROM City GROUP BY country",
        "pred": "SELECT country, COUNT(DISTINCT city_name) AS num_cities FROM City GROUP BY country",
        "pred_result": 0,
        "repair_sql": "SELECT country, COUNT(DISTINCT city_name) AS num_cities FROM City GROUP BY country",
        "repair_result": 0
    },
    {
        "idx": 281,
        "db_id": "address_1",
        "question": "List all states with at least two cities.",
        "evidence": "",
        "gold": "SELECT state FROM City GROUP BY state HAVING count(*)  >=  2",
        "pred": "SELECT state FROM City GROUP BY state HAVING COUNT(city_name) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT state FROM City GROUP BY state HAVING COUNT(city_name) >= 2",
        "repair_result": 1
    },
    {
        "idx": 282,
        "db_id": "address_1",
        "question": "Which states have at least two cities?",
        "evidence": "",
        "gold": "SELECT state FROM City GROUP BY state HAVING count(*)  >=  2",
        "pred": "SELECT state FROM City GROUP BY state HAVING COUNT(city_name) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT state FROM City GROUP BY state HAVING COUNT(city_name) >= 2",
        "repair_result": 1
    },
    {
        "idx": 283,
        "db_id": "address_1",
        "question": "Which state has most number of cities?",
        "evidence": "",
        "gold": "SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT state, COUNT(city_name) AS num_cities FROM City GROUP BY state ORDER BY num_cities DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT state, COUNT(city_name) AS num_cities FROM City GROUP BY state ORDER BY num_cities DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 284,
        "db_id": "address_1",
        "question": "Give the state that has the most cities.",
        "evidence": "",
        "gold": "SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT state, COUNT(city_name) AS city_count FROM City GROUP BY state ORDER BY city_count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT state, COUNT(city_name) AS city_count FROM City GROUP BY state ORDER BY city_count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 285,
        "db_id": "address_1",
        "question": "Which country has fewest number of cities?",
        "evidence": "",
        "gold": "SELECT country FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1",
        "pred": "SELECT country, COUNT(city_name) AS num_cities FROM City GROUP BY country ORDER BY num_cities LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT country, COUNT(city_name) AS num_cities FROM City GROUP BY country ORDER BY num_cities LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 286,
        "db_id": "address_1",
        "question": "Give the country with the fewest number of cities.",
        "evidence": "",
        "gold": "SELECT country FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1",
        "pred": "SELECT country, COUNT(city_name) AS num_cities FROM City GROUP BY country ORDER BY num_cities LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT country, COUNT(city_name) AS num_cities FROM City GROUP BY country ORDER BY num_cities LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 287,
        "db_id": "address_1",
        "question": "Show the first name and the last name for students living in state MD.",
        "evidence": "",
        "gold": "SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"MD\"",
        "pred": "SELECT `Fname`, `LName` FROM Student JOIN City ON Student.`city_code` = City.`city_code` WHERE City.`state` = 'MD'",
        "pred_result": 1,
        "repair_sql": "SELECT `Fname`, `LName` FROM Student JOIN City ON Student.`city_code` = City.`city_code` WHERE City.`state` = 'MD'",
        "repair_result": 1
    },
    {
        "idx": 288,
        "db_id": "address_1",
        "question": "What are the full names of students living in MD?",
        "evidence": "",
        "gold": "SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"MD\"",
        "pred": "SELECT `Fname` || ' ' || `LName` AS Full_Name FROM Student WHERE Student.`city_code` IN (SELECT `city_code` FROM City WHERE state = 'MD')",
        "pred_result": 0,
        "repair_sql": "SELECT `Fname` || ' ' || `LName` AS Full_Name FROM Student WHERE Student.`city_code` IN (SELECT `city_code` FROM City WHERE state = 'MD')",
        "repair_result": 0
    },
    {
        "idx": 289,
        "db_id": "address_1",
        "question": "How many students live in China?",
        "evidence": "",
        "gold": "SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  \"CHINA\"",
        "pred": "SELECT COUNT(*) FROM Student AS S JOIN City AS C ON S.city_code = C.city_code WHERE C.country = 'CHINA'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Student AS S JOIN City AS C ON S.city_code = C.city_code WHERE C.country = 'CHINA'",
        "repair_result": 1
    },
    {
        "idx": 290,
        "db_id": "address_1",
        "question": "Count the number of students living in China.",
        "evidence": "",
        "gold": "SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  \"CHINA\"",
        "pred": "SELECT COUNT(*) FROM Student AS S JOIN City AS C ON S.city_code = C.city_code WHERE C.country = 'CHINA'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Student AS S JOIN City AS C ON S.city_code = C.city_code WHERE C.country = 'CHINA'",
        "repair_result": 1
    },
    {
        "idx": 291,
        "db_id": "address_1",
        "question": "Return the first name and major of students are living in Baltimore?",
        "evidence": "",
        "gold": "SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  \"Baltimore\"",
        "pred": "SELECT `Fname`, `Major` FROM Student WHERE city_code = (SELECT city_code FROM City WHERE city_name = 'Baltimore')",
        "pred_result": 1,
        "repair_sql": "SELECT `Fname`, `Major` FROM Student WHERE city_code = (SELECT city_code FROM City WHERE city_name = 'Baltimore')",
        "repair_result": 1
    },
    {
        "idx": 292,
        "db_id": "address_1",
        "question": "What are the first names and majors of students living in Baltimore?",
        "evidence": "",
        "gold": "SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  \"Baltimore\"",
        "pred": "SELECT `Fname`, `Major` FROM Student WHERE city_code = (SELECT city_code FROM City WHERE city_name = 'Baltimore')",
        "pred_result": 1,
        "repair_sql": "SELECT `Fname`, `Major` FROM Student WHERE city_code = (SELECT city_code FROM City WHERE city_name = 'Baltimore')",
        "repair_result": 1
    },
    {
        "idx": 293,
        "db_id": "address_1",
        "question": "Show the number of students living in each country.",
        "evidence": "",
        "gold": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
        "pred": "SELECT C.`country`, COUNT(*) FROM Student AS S JOIN City AS C ON S.`city_code` = C.`city_code` GROUP BY C.`country`",
        "pred_result": 1,
        "repair_sql": "SELECT C.`country`, COUNT(*) FROM Student AS S JOIN City AS C ON S.`city_code` = C.`city_code` GROUP BY C.`country`",
        "repair_result": 1
    },
    {
        "idx": 294,
        "db_id": "address_1",
        "question": "How many students live in each country?",
        "evidence": "",
        "gold": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
        "pred": "SELECT C.`country`, COUNT(*) AS num_students FROM Student AS S JOIN City AS C ON S.`city_code` = C.`city_code` GROUP BY C.`country`",
        "pred_result": 1,
        "repair_sql": "SELECT C.`country`, COUNT(*) AS num_students FROM Student AS S JOIN City AS C ON S.`city_code` = C.`city_code` GROUP BY C.`country`",
        "repair_result": 1
    },
    {
        "idx": 295,
        "db_id": "address_1",
        "question": "Find the number of students living in each city.",
        "evidence": "",
        "gold": "SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code",
        "pred": "SELECT City.city_name, COUNT(*) AS num_of_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.city_name",
        "pred_result": 1,
        "repair_sql": "SELECT City.city_name, COUNT(*) AS num_of_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.city_name",
        "repair_result": 1
    },
    {
        "idx": 296,
        "db_id": "address_1",
        "question": "How many students live in each city?",
        "evidence": "",
        "gold": "SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code",
        "pred": "SELECT City.city_name, COUNT(*) AS num_of_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.city_name",
        "pred_result": 1,
        "repair_sql": "SELECT City.city_name, COUNT(*) AS num_of_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.city_name",
        "repair_result": 1
    },
    {
        "idx": 297,
        "db_id": "address_1",
        "question": "Which state has most number of students?",
        "evidence": "",
        "gold": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT state, COUNT(*) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY state ORDER BY num_students DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT state, COUNT(*) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY state ORDER BY num_students DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 298,
        "db_id": "address_1",
        "question": "Give the state that has the most students.",
        "evidence": "",
        "gold": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT state FROM City WHERE city_code IN ( SELECT city_code FROM Student GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT state FROM City WHERE city_code IN ( SELECT city_code FROM Student GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 299,
        "db_id": "address_1",
        "question": "Which country has least number of students?",
        "evidence": "",
        "gold": "SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1",
        "pred": "SELECT country FROM City WHERE city_code IN ( SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) = ( SELECT MIN(cnt) FROM ( SELECT COUNT(*) as cnt FROM Student GROUP BY city_code ) ) )",
        "pred_result": 0,
        "repair_sql": "SELECT country FROM City WHERE city_code IN ( SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) = ( SELECT MIN(cnt) FROM ( SELECT COUNT(*) as cnt FROM Student GROUP BY city_code ) ) )",
        "repair_result": 0
    },
    {
        "idx": 300,
        "db_id": "address_1",
        "question": "Give the country with the fewest students.",
        "evidence": "",
        "gold": "SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1",
        "pred": "SELECT country, COUNT(*) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY country ORDER BY num_students LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT country, COUNT(*) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY country ORDER BY num_students LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 301,
        "db_id": "address_1",
        "question": "Show names for all cities where at least three students live.",
        "evidence": "",
        "gold": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
        "pred": "SELECT DISTINCT City.city_name FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.city_name HAVING COUNT(*) >= 3",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT City.city_name FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.city_name HAVING COUNT(*) >= 3",
        "repair_result": 1
    },
    {
        "idx": 302,
        "db_id": "address_1",
        "question": "What are the names of cities with at least three students?",
        "evidence": "",
        "gold": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
        "pred": "SELECT DISTINCT C.`city_name` FROM City AS C JOIN Student AS S ON C.`city_code` = S.`city_code` GROUP BY C.`city_name` HAVING COUNT(*) >= 3",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT C.`city_name` FROM City AS C JOIN Student AS S ON C.`city_code` = S.`city_code` GROUP BY C.`city_name` HAVING COUNT(*) >= 3",
        "repair_result": 1
    },
    {
        "idx": 303,
        "db_id": "address_1",
        "question": "Show all states where more than 5 students live.",
        "evidence": "",
        "gold": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5",
        "pred": "SELECT DISTINCT City.state FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.state HAVING COUNT(*) > 5",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT City.state FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.state HAVING COUNT(*) > 5",
        "repair_result": 1
    },
    {
        "idx": 304,
        "db_id": "address_1",
        "question": "What are the states with more than 5 students?",
        "evidence": "",
        "gold": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5",
        "pred": "SELECT DISTINCT City.state FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.state HAVING COUNT(*) > 5",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT City.state FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.state HAVING COUNT(*) > 5",
        "repair_result": 1
    },
    {
        "idx": 305,
        "db_id": "address_1",
        "question": "Show ids for all students who don't live in USA.",
        "evidence": "",
        "gold": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  \"USA\"",
        "pred": "SELECT StuID FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country != 'USA')",
        "pred_result": 1,
        "repair_sql": "SELECT StuID FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country != 'USA')",
        "repair_result": 1
    },
    {
        "idx": 306,
        "db_id": "address_1",
        "question": "What the the student ids for students not living in the USA?",
        "evidence": "",
        "gold": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  \"USA\"",
        "pred": "SELECT StuID FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country != 'USA')",
        "pred_result": 1,
        "repair_sql": "SELECT StuID FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country != 'USA')",
        "repair_result": 1
    },
    {
        "idx": 307,
        "db_id": "address_1",
        "question": "Show ids for all female (sex is F) students living in state PA.",
        "evidence": "",
        "gold": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"PA\"  AND T2.sex  =  'F'",
        "pred": "SELECT StuID FROM Student WHERE Sex = 'F' AND city_code IN (SELECT city_code FROM City WHERE state = 'PA')",
        "pred_result": 1,
        "repair_sql": "SELECT StuID FROM Student WHERE Sex = 'F' AND city_code IN (SELECT city_code FROM City WHERE state = 'PA')",
        "repair_result": 1
    },
    {
        "idx": 308,
        "db_id": "address_1",
        "question": "What are the student ids for female students in the state of PA?",
        "evidence": "",
        "gold": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"PA\"  AND T2.sex  =  'F'",
        "pred": "SELECT StuID FROM Student WHERE Sex = 'F' AND city_code IN (SELECT city_code FROM City WHERE state = 'PA')",
        "pred_result": 1,
        "repair_sql": "SELECT StuID FROM Student WHERE Sex = 'F' AND city_code IN (SELECT city_code FROM City WHERE state = 'PA')",
        "repair_result": 1
    },
    {
        "idx": 309,
        "db_id": "address_1",
        "question": "Show ids for all male students living outside of USA.",
        "evidence": "",
        "gold": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != \"USA\"",
        "pred": "SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA')",
        "pred_result": 1,
        "repair_sql": "SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA')",
        "repair_result": 1
    },
    {
        "idx": 310,
        "db_id": "address_1",
        "question": "What are the ids for male students not in the USA?",
        "evidence": "",
        "gold": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != \"USA\"",
        "pred": "SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA')",
        "pred_result": 1,
        "repair_sql": "SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA')",
        "repair_result": 1
    },
    {
        "idx": 311,
        "db_id": "address_1",
        "question": "What is the distance between BAL and CHI?",
        "evidence": "",
        "gold": "SELECT distance FROM Direct_distance WHERE city1_code  =  \"BAL\" AND city2_code  =  \"CHI\"",
        "pred": "SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'",
        "pred_result": 1,
        "repair_sql": "SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'",
        "repair_result": 1
    },
    {
        "idx": 312,
        "db_id": "address_1",
        "question": "Give the distance between BAL and CHI?",
        "evidence": "",
        "gold": "SELECT distance FROM Direct_distance WHERE city1_code  =  \"BAL\" AND city2_code  =  \"CHI\"",
        "pred": "SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'",
        "pred_result": 1,
        "repair_sql": "SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'",
        "repair_result": 1
    },
    {
        "idx": 313,
        "db_id": "address_1",
        "question": "Show me the distance between Boston and Newark.",
        "evidence": "",
        "gold": "SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" AND T3.city_name  =  \"Newark\"",
        "pred": "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')",
        "pred_result": 1,
        "repair_sql": "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')",
        "repair_result": 1
    },
    {
        "idx": 314,
        "db_id": "address_1",
        "question": "What is the distance between Boston and Newark?",
        "evidence": "",
        "gold": "SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" AND T3.city_name  =  \"Newark\"",
        "pred": "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')",
        "pred_result": 1,
        "repair_sql": "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')",
        "repair_result": 1
    },
    {
        "idx": 315,
        "db_id": "address_1",
        "question": "What is the average, minimum, maximum distance between two cities?",
        "evidence": "",
        "gold": "SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance",
        "pred": "SELECT AVG(distance) AS average_distance, MIN(distance) AS min_distance, MAX(distance) AS max_distance FROM Direct_distance",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(distance) AS average_distance, MIN(distance) AS min_distance, MAX(distance) AS max_distance FROM Direct_distance",
        "repair_result": 1
    },
    {
        "idx": 316,
        "db_id": "address_1",
        "question": "Give the average, minimum, and maximum distances between two cities.",
        "evidence": "",
        "gold": "SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance",
        "pred": "SELECT AVG(distance) AS average_distance, MIN(distance) AS min_distance, MAX(distance) AS max_distance FROM Direct_distance",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(distance) AS average_distance, MIN(distance) AS min_distance, MAX(distance) AS max_distance FROM Direct_distance",
        "repair_result": 1
    },
    {
        "idx": 317,
        "db_id": "address_1",
        "question": "Show me the city code of two cities with maximum distance.",
        "evidence": "",
        "gold": "SELECT city1_code ,  city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1",
        "pred": "SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance)",
        "pred_result": 0,
        "repair_sql": "SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance)",
        "repair_result": 0
    },
    {
        "idx": 318,
        "db_id": "address_1",
        "question": "What are the city codes of the cities with the maximum distance?",
        "evidence": "",
        "gold": "SELECT city1_code ,  city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1",
        "pred": "SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance)",
        "pred_result": 0,
        "repair_sql": "SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance)",
        "repair_result": 0
    },
    {
        "idx": 319,
        "db_id": "address_1",
        "question": "Show me the city code of two cities with a distance greater than the average.",
        "evidence": "",
        "gold": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)",
        "pred": "SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance)",
        "pred_result": 1,
        "repair_sql": "SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance)",
        "repair_result": 1
    },
    {
        "idx": 320,
        "db_id": "address_1",
        "question": "What are the city codes of cities with distance greater than average?",
        "evidence": "",
        "gold": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)",
        "pred": "SELECT DISTINCT city1_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance) UNION SELECT DISTINCT city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance)",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT city1_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance) UNION SELECT DISTINCT city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance)",
        "repair_result": 0
    },
    {
        "idx": 321,
        "db_id": "address_1",
        "question": "Show me the city code of two cities with a distance less than 1000.",
        "evidence": "",
        "gold": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000",
        "pred": "SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000",
        "pred_result": 1,
        "repair_sql": "SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000",
        "repair_result": 1
    },
    {
        "idx": 322,
        "db_id": "address_1",
        "question": "What are the city codes corresponding to cities with distances less than 1000?",
        "evidence": "",
        "gold": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000",
        "pred": "SELECT DISTINCT city1_code FROM Direct_distance WHERE distance < 1000 UNION SELECT DISTINCT city2_code FROM Direct_distance WHERE distance < 1000",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT city1_code FROM Direct_distance WHERE distance < 1000 UNION SELECT DISTINCT city2_code FROM Direct_distance WHERE distance < 1000",
        "repair_result": 0
    },
    {
        "idx": 323,
        "db_id": "address_1",
        "question": "What is the total distance between city BAL and all other cities.",
        "evidence": "",
        "gold": "SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  \"BAL\"",
        "pred": "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'BAL')",
        "pred_result": 0,
        "repair_sql": "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'BAL')",
        "repair_result": 0
    },
    {
        "idx": 324,
        "db_id": "address_1",
        "question": "What is the sum of distances between BAL and other cities?",
        "evidence": "",
        "gold": "SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  \"BAL\"",
        "pred": "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL'",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL'",
        "repair_result": 1
    },
    {
        "idx": 325,
        "db_id": "address_1",
        "question": "What is the average distance between Boston and all other cities.",
        "evidence": "",
        "gold": "SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  \"Boston\"",
        "pred": "SELECT AVG(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston')",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston')",
        "repair_result": 1
    },
    {
        "idx": 326,
        "db_id": "address_1",
        "question": "Give the average distance between Boston and other cities.",
        "evidence": "",
        "gold": "SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  \"Boston\"",
        "pred": "SELECT AVG(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston')",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston')",
        "repair_result": 1
    },
    {
        "idx": 327,
        "db_id": "address_1",
        "question": "What is the name of the city closest to Chicago?",
        "evidence": "",
        "gold": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Chicago\" ORDER BY distance LIMIT 1",
        "pred": "SELECT city_name FROM City WHERE city_code = ( SELECT city2_code FROM Direct_distance WHERE city1_code = ( SELECT city_code FROM City WHERE city_name = 'Chicago' ) ORDER BY distance LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT city_name FROM City WHERE city_code = ( SELECT city2_code FROM Direct_distance WHERE city1_code = ( SELECT city_code FROM City WHERE city_name = 'Chicago' ) ORDER BY distance LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 328,
        "db_id": "address_1",
        "question": "Give the name of the nearest city to Chicago.",
        "evidence": "",
        "gold": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Chicago\" ORDER BY distance LIMIT 1",
        "pred": "SELECT city_name FROM City WHERE city_code = ( SELECT city2_code FROM Direct_distance WHERE city1_code = ( SELECT city_code FROM City WHERE city_name = 'Chicago' ) ORDER BY distance LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT city_name FROM City WHERE city_code = ( SELECT city2_code FROM Direct_distance WHERE city1_code = ( SELECT city_code FROM City WHERE city_name = 'Chicago' ) ORDER BY distance LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 329,
        "db_id": "address_1",
        "question": "What is the name of the city furthest to Boston?",
        "evidence": "",
        "gold": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" ORDER BY distance DESC LIMIT 1",
        "pred": "SELECT city_name FROM City WHERE city_code = ( SELECT city2_code FROM Direct_distance WHERE city1_code = ( SELECT city_code FROM City WHERE city_name = 'Boston' ) ORDER BY distance DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT city_name FROM City WHERE city_code = ( SELECT city2_code FROM Direct_distance WHERE city1_code = ( SELECT city_code FROM City WHERE city_name = 'Boston' ) ORDER BY distance DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 330,
        "db_id": "address_1",
        "question": "Give the city name of the city with greatest distance from Boston.",
        "evidence": "",
        "gold": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" ORDER BY distance DESC LIMIT 1",
        "pred": "SELECT C.city_name FROM City AS C JOIN Direct_distance AS D ON C.city_code = D.city2_code WHERE D.distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston'))",
        "pred_result": 0,
        "repair_sql": "SELECT C.city_name FROM City AS C JOIN Direct_distance AS D ON C.city_code = D.city2_code WHERE D.distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston'))",
        "repair_result": 0
    },
    {
        "idx": 331,
        "db_id": "address_1",
        "question": "Show all city codes and the total distance to all other cities.",
        "evidence": "",
        "gold": "SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code",
        "pred": "SELECT city1_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city1_code",
        "pred_result": 1,
        "repair_sql": "SELECT city1_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city1_code",
        "repair_result": 1
    },
    {
        "idx": 332,
        "db_id": "address_1",
        "question": "For each city, what is the the city code and sum of distances from each?",
        "evidence": "",
        "gold": "SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code",
        "pred": "SELECT City.`city_code`, SUM(Direct_distance.`distance`) AS total_distance FROM City JOIN Direct_distance ON City.`city_code` = Direct_distance.`city1_code` GROUP BY City.`city_code`",
        "pred_result": 1,
        "repair_sql": "SELECT City.`city_code`, SUM(Direct_distance.`distance`) AS total_distance FROM City JOIN Direct_distance ON City.`city_code` = Direct_distance.`city1_code` GROUP BY City.`city_code`",
        "repair_result": 1
    },
    {
        "idx": 333,
        "db_id": "address_1",
        "question": "Show all city names and the average distance to all other cities.",
        "evidence": "",
        "gold": "SELECT T2.city_name ,  avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.city1_code",
        "pred": "SELECT C1.`city_name`, AVG(D.distance) AS avg_distance FROM City AS C1 JOIN Direct_distance AS D ON C1.`city_code` = D.`city1_code` GROUP BY C1.`city_name`",
        "pred_result": 0,
        "repair_sql": "SELECT C1.`city_name`, AVG(D.distance) AS avg_distance FROM City AS C1 JOIN Direct_distance AS D ON C1.`city_code` = D.`city1_code` GROUP BY C1.`city_name`",
        "repair_result": 0
    },
    {
        "idx": 334,
        "db_id": "address_1",
        "question": "What are the city name and average distances from each city?",
        "evidence": "",
        "gold": "SELECT T2.city_name ,  avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.city1_code",
        "pred": "SELECT City.city_name, AVG(Direct_distance.distance) AS average_distance FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city1_code GROUP BY City.city_name",
        "pred_result": 0,
        "repair_sql": "SELECT City.city_name, AVG(Direct_distance.distance) AS average_distance FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city1_code GROUP BY City.city_name",
        "repair_result": 0
    },
    {
        "idx": 335,
        "db_id": "address_1",
        "question": "How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?",
        "evidence": "",
        "gold": "SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" AND T3.Fname  =  \"Tracy\" AND T3.Lname  =  \"Kim\"",
        "pred": "SELECT D.distance FROM Student AS S1 JOIN Student AS S2 ON S1.city_code = S2.city_code JOIN Direct_distance AS D ON S1.city_code = D.city1_code AND S2.city_code = D.city2_code WHERE S1.Fname = 'Linda' AND S1.LName = 'Smith' AND S2.Fname = 'Tracy' AND S2.LName = 'Kim'",
        "pred_result": 0,
        "repair_sql": "SELECT D.distance FROM Student AS S1 JOIN Student AS S2 ON S1.city_code = S2.city_code JOIN Direct_distance AS D ON S1.city_code = D.city1_code AND S2.city_code = D.city2_code WHERE S1.Fname = 'Linda' AND S1.LName = 'Smith' AND S2.Fname = 'Tracy' AND S2.LName = 'Kim'",
        "repair_result": 0
    },
    {
        "idx": 336,
        "db_id": "address_1",
        "question": "What is the distance between the cities where Linda Smith and Tracy Kim live?",
        "evidence": "",
        "gold": "SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" AND T3.Fname  =  \"Tracy\" AND T3.Lname  =  \"Kim\"",
        "pred": "SELECT D.distance FROM Student AS S1 JOIN Student AS S2 ON S1.Advisor = S2.Advisor JOIN City AS C1 ON S1.city_code = C1.city_code JOIN City AS C2 ON S2.city_code = C2.city_code JOIN Direct_distance AS D ON C1.city_code = D.city1_code AND C2.city_code = D.city2_code WHERE S1.LName = 'Smith' AND S2.LName = 'Kim'",
        "pred_result": 0,
        "repair_sql": "SELECT D.distance FROM Student AS S1 JOIN Student AS S2 ON S1.Advisor = S2.Advisor JOIN City AS C1 ON S1.city_code = C1.city_code JOIN City AS C2 ON S2.city_code = C2.city_code JOIN Direct_distance AS D ON C1.city_code = D.city1_code AND C2.city_code = D.city2_code WHERE S1.LName = 'Smith' AND S2.LName = 'Kim'",
        "repair_result": 0
    },
    {
        "idx": 337,
        "db_id": "address_1",
        "question": "What is the first name and last name of the student living furthest to Linda Smith?",
        "evidence": "",
        "gold": "SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY distance DESC LIMIT 1",
        "pred": "SELECT `Fname`, `LName` FROM Student WHERE StuID = ( SELECT StuID FROM Student WHERE city_code = ( SELECT city_code FROM City WHERE city_name = 'Newark' AND LName = 'Smith' ) ORDER BY distance DESC LIMIT 1 )",
        "pred_result": "no such column: distance",
        "repair_sql": "SELECT s.Fname, s.LName FROM Student s JOIN City c ON s.city_code = c.city_code JOIN Direct_distance d ON c.city_code = d.city2_code WHERE s.LName <> 'Smith' ORDER BY d.distance DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 338,
        "db_id": "address_1",
        "question": "What is the full name of the student who lives furthest from Linda Smith?",
        "evidence": "",
        "gold": "SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY distance DESC LIMIT 1",
        "pred": "SELECT `Fname` || ' ' || `LName` AS Full_Name FROM Student WHERE `city_code` IN ( SELECT `city2_code` FROM Direct_distance WHERE `city1_code` = ( SELECT `city_code` FROM Student WHERE `LName` = 'Smith' AND `Fname` = 'Linda' ) ORDER BY `distance` DESC LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT `Fname` || ' ' || `LName` AS Full_Name FROM Student WHERE `city_code` IN ( SELECT `city2_code` FROM Direct_distance WHERE `city1_code` = ( SELECT `city_code` FROM Student WHERE `LName` = 'Smith' AND `Fname` = 'Linda' ) ORDER BY `distance` DESC LIMIT 1 )",
        "repair_result": 0
    },
    {
        "idx": 339,
        "db_id": "address_1",
        "question": "Which state does the student whose first name is Linda live in?",
        "evidence": "",
        "gold": "SELECT state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code WHERE T1.Fname  =  \"Linda\"",
        "pred": "SELECT C.state FROM Student AS S JOIN City AS C ON S.city_code = C.city_code WHERE S.Fname = 'Linda'",
        "pred_result": 1,
        "repair_sql": "SELECT C.state FROM Student AS S JOIN City AS C ON S.city_code = C.city_code WHERE S.Fname = 'Linda'",
        "repair_result": 1
    },
    {
        "idx": 340,
        "db_id": "address_1",
        "question": "Give the state that the student with first name Linda lives in.",
        "evidence": "",
        "gold": "SELECT state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code WHERE T1.Fname  =  \"Linda\"",
        "pred": "SELECT City.state FROM Student JOIN City ON Student.city_code = City.city_code WHERE Student.Fname = 'Linda'",
        "pred_result": 1,
        "repair_sql": "SELECT City.state FROM Student JOIN City ON Student.city_code = City.city_code WHERE Student.Fname = 'Linda'",
        "repair_result": 1
    },
    {
        "idx": 341,
        "db_id": "boat_1",
        "question": "Return all details of sailors who are older than 30.",
        "evidence": "",
        "gold": "SELECT * FROM Sailors WHERE age  >  30",
        "pred": "SELECT * FROM Sailors WHERE age > 30",
        "pred_result": 1,
        "repair_sql": "SELECT * FROM Sailors WHERE age > 30",
        "repair_result": 1
    },
    {
        "idx": 342,
        "db_id": "boat_1",
        "question": "What can you tell me about sailors who are older than age 30?",
        "evidence": "",
        "gold": "SELECT * FROM Sailors WHERE age  >  30",
        "pred": "SELECT * FROM Sailors WHERE age > 30",
        "pred_result": 1,
        "repair_sql": "SELECT * FROM Sailors WHERE age > 30",
        "repair_result": 1
    },
    {
        "idx": 343,
        "db_id": "boat_1",
        "question": "Return name and age for sailors who are younger than 30.",
        "evidence": "",
        "gold": "SELECT name ,  age FROM Sailors WHERE age  <  30",
        "pred": "SELECT `name`, `age` FROM Sailors WHERE `age` < 30",
        "pred_result": 1,
        "repair_sql": "SELECT `name`, `age` FROM Sailors WHERE `age` < 30",
        "repair_result": 1
    },
    {
        "idx": 344,
        "db_id": "boat_1",
        "question": "What is the name and age of every sailor who is younger than age 30?",
        "evidence": "",
        "gold": "SELECT name ,  age FROM Sailors WHERE age  <  30",
        "pred": "SELECT `name`, `age` FROM Sailors WHERE `age` < 30",
        "pred_result": 1,
        "repair_sql": "SELECT `name`, `age` FROM Sailors WHERE `age` < 30",
        "repair_result": 1
    },
    {
        "idx": 345,
        "db_id": "boat_1",
        "question": "Find boats reserved by Sailor with id 1.",
        "evidence": "",
        "gold": "SELECT DISTINCT bid FROM Reserves WHERE sid = 1",
        "pred": "SELECT B.name FROM Boats AS B JOIN Reserves AS R ON B.bid = R.bid WHERE R.sid = 1",
        "pred_result": 0,
        "repair_sql": "SELECT B.name FROM Boats AS B JOIN Reserves AS R ON B.bid = R.bid WHERE R.sid = 1",
        "repair_result": 0
    },
    {
        "idx": 346,
        "db_id": "boat_1",
        "question": "What are the different boat ids reserved by the sailor whose id is 1?",
        "evidence": "",
        "gold": "SELECT DISTINCT bid FROM Reserves WHERE sid = 1",
        "pred": "SELECT DISTINCT R.`bid` FROM Reserves AS R WHERE R.`sid` = 1",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT R.`bid` FROM Reserves AS R WHERE R.`sid` = 1",
        "repair_result": 1
    },
    {
        "idx": 347,
        "db_id": "boat_1",
        "question": "Who reserved boat 102?",
        "evidence": "",
        "gold": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102",
        "pred": "SELECT S.name FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid WHERE R.bid = 102",
        "pred_result": 1,
        "repair_sql": "SELECT S.name FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid WHERE R.bid = 102",
        "repair_result": 1
    },
    {
        "idx": 348,
        "db_id": "boat_1",
        "question": "What is the name of the sailor who reserved boat 102?",
        "evidence": "",
        "gold": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102",
        "pred": "SELECT S.name FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid WHERE R.bid = 102",
        "pred_result": 1,
        "repair_sql": "SELECT S.name FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid WHERE R.bid = 102",
        "repair_result": 1
    },
    {
        "idx": 349,
        "db_id": "boat_1",
        "question": "Return the unique boat ids (bid) of all reserved boats.",
        "evidence": "",
        "gold": "SELECT DISTINCT bid FROM Reserves",
        "pred": "SELECT DISTINCT `bid` FROM Reserves",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `bid` FROM Reserves",
        "repair_result": 1
    },
    {
        "idx": 350,
        "db_id": "boat_1",
        "question": "What are the ids of all boats that are reserved by someone?",
        "evidence": "",
        "gold": "SELECT DISTINCT bid FROM Reserves",
        "pred": "SELECT DISTINCT `bid` FROM Reserves",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `bid` FROM Reserves",
        "repair_result": 1
    },
    {
        "idx": 351,
        "db_id": "boat_1",
        "question": "What is the name of sailors whose names contain letter e?",
        "evidence": "",
        "gold": "SELECT name FROM Sailors WHERE name LIKE '%e%'",
        "pred": "SELECT `name` FROM Sailors WHERE `name` LIKE '%e%'",
        "pred_result": 1,
        "repair_sql": "SELECT `name` FROM Sailors WHERE `name` LIKE '%e%'",
        "repair_result": 1
    },
    {
        "idx": 352,
        "db_id": "boat_1",
        "question": "What is the name of every sailor whose name contains the letter e?",
        "evidence": "",
        "gold": "SELECT name FROM Sailors WHERE name LIKE '%e%'",
        "pred": "SELECT `name` FROM Sailors WHERE `name` LIKE '%e%'",
        "pred_result": 1,
        "repair_sql": "SELECT `name` FROM Sailors WHERE `name` LIKE '%e%'",
        "repair_result": 1
    },
    {
        "idx": 353,
        "db_id": "boat_1",
        "question": "return the unique ids of sailors who are older than any sailors.",
        "evidence": "",
        "gold": "SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);",
        "pred": "SELECT DISTINCT s1.sid FROM Sailors s1 WHERE s1.age > ALL (SELECT age FROM Sailors s2 WHERE s1.sid <> s2.sid)",
        "pred_result": "near \"ALL\": syntax error",
        "repair_sql": "SELECT DISTINCT s1.sid FROM Sailors s1 WHERE s1.age > (SELECT MAX(age) FROM Sailors)",
        "repair_result": 0
    },
    {
        "idx": 354,
        "db_id": "boat_1",
        "question": "What is the different id of every sailor who is not the youngest?",
        "evidence": "",
        "gold": "SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);",
        "pred": "SELECT DISTINCT sid FROM Sailors WHERE age != (SELECT MIN(age) FROM Sailors)",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT sid FROM Sailors WHERE age != (SELECT MIN(age) FROM Sailors)",
        "repair_result": 1
    },
    {
        "idx": 355,
        "db_id": "boat_1",
        "question": "Return the unique names of sailors who are older than any sailors whose rating is larger than 7.",
        "evidence": "",
        "gold": "SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);",
        "pred": "SELECT DISTINCT s1.name FROM Sailors s1 WHERE s1.age > ALL (SELECT s2.age FROM Sailors s2 WHERE s2.rating > 7)",
        "pred_result": "near \"ALL\": syntax error",
        "repair_sql": "SELECT DISTINCT s1.name FROM Sailors s1 WHERE s1.age > (SELECT MAX(s2.age) FROM Sailors s2 WHERE s2.rating > 7)",
        "repair_result": 1
    },
    {
        "idx": 356,
        "db_id": "boat_1",
        "question": "What are the different names of sailors who are older than some other sailor with a rating larger than 7?",
        "evidence": "",
        "gold": "SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);",
        "pred": "SELECT DISTINCT S1.`name` FROM Sailors AS S1 WHERE S1.`age` > (SELECT S2.`age` FROM Sailors AS S2 WHERE S2.`rating` > 7 ORDER BY S2.`age` DESC LIMIT 1)",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT S1.`name` FROM Sailors AS S1 WHERE S1.`age` > (SELECT S2.`age` FROM Sailors AS S2 WHERE S2.`rating` > 7 ORDER BY S2.`age` DESC LIMIT 1)",
        "repair_result": 1
    },
    {
        "idx": 357,
        "db_id": "boat_1",
        "question": "Find the name and id of the sailors who reserved at least one boat?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
        "pred": "SELECT DISTINCT S.`sid`, S.`name` FROM Sailors AS S JOIN Reserves AS R ON S.`sid` = R.`sid`",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT S.`sid`, S.`name` FROM Sailors AS S JOIN Reserves AS R ON S.`sid` = R.`sid`",
        "repair_result": 0
    },
    {
        "idx": 358,
        "db_id": "boat_1",
        "question": "What is the name and id of every sailor who reserved one or more boats?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
        "pred": "SELECT DISTINCT S.`sid`, S.`name` FROM Sailors AS S JOIN Reserves AS R ON S.`sid` = R.`sid`",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT S.`sid`, S.`name` FROM Sailors AS S JOIN Reserves AS R ON S.`sid` = R.`sid`",
        "repair_result": 0
    },
    {
        "idx": 359,
        "db_id": "boat_1",
        "question": "Find the id and name of the sailors who reserved more than one boat.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T2.sid HAVING COUNT(*)  >  1",
        "pred": "SELECT S.sid, S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid GROUP BY S.sid, S.name HAVING COUNT(DISTINCT R.bid) > 1",
        "pred_result": 0,
        "repair_sql": "SELECT S.sid, S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid GROUP BY S.sid, S.name HAVING COUNT(DISTINCT R.bid) > 1",
        "repair_result": 0
    },
    {
        "idx": 360,
        "db_id": "boat_1",
        "question": "What are the different names of sailors who reserved two or more boats ?",
        "evidence": "",
        "gold": "select distinct t1.name ,  t1.sid from sailors as t1 join reserves as t2 on t1.sid  =  t2.sid group by t2.sid having count(*)  >=  2",
        "pred": "SELECT DISTINCT S1.`name` FROM Sailors AS S1 JOIN Reserves AS R1 ON S1.`sid` = R1.`sid` GROUP BY S1.`sid` HAVING COUNT(DISTINCT R1.`bid`) >= 2",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT S1.`name` FROM Sailors AS S1 JOIN Reserves AS R1 ON S1.`sid` = R1.`sid` GROUP BY S1.`sid` HAVING COUNT(DISTINCT R1.`bid`) >= 2",
        "repair_result": 0
    },
    {
        "idx": 361,
        "db_id": "boat_1",
        "question": "Find the id of Sailors (sid) that reserved red or blue boat.",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
        "pred": "SELECT DISTINCT `sid` FROM Reserves WHERE `bid` IN (SELECT `bid` FROM Boats WHERE `color` = 'red' OR `color` = 'blue')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `sid` FROM Reserves WHERE `bid` IN (SELECT `bid` FROM Boats WHERE `color` = 'red' OR `color` = 'blue')",
        "repair_result": 1
    },
    {
        "idx": 362,
        "db_id": "boat_1",
        "question": "What are the sids for sailors who reserved red or blue boats?",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
        "pred": "SELECT DISTINCT R.`sid` FROM Reserves AS R JOIN Boats AS B ON R.`bid` = B.`bid` WHERE B.`color` IN ('red', 'blue')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT R.`sid` FROM Reserves AS R JOIN Boats AS B ON R.`bid` = B.`bid` WHERE B.`color` IN ('red', 'blue')",
        "repair_result": 1
    },
    {
        "idx": 363,
        "db_id": "boat_1",
        "question": "Find the name and id of Sailors (sid) that reserved red or blue boat.",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
        "pred": "SELECT DISTINCT S.`sid`, S.`name` FROM Sailors AS S JOIN Reserves AS R ON S.`sid` = R.`sid` JOIN Boats AS B ON R.`bid` = B.`bid` WHERE B.`color` IN ('red', 'blue')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT S.`sid`, S.`name` FROM Sailors AS S JOIN Reserves AS R ON S.`sid` = R.`sid` JOIN Boats AS B ON R.`bid` = B.`bid` WHERE B.`color` IN ('red', 'blue')",
        "repair_result": 1
    },
    {
        "idx": 364,
        "db_id": "boat_1",
        "question": "What are the names and ids of sailors who reserved red or blue boats?",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
        "pred": "SELECT DISTINCT S.`name`, S.`sid` FROM Sailors AS S JOIN Reserves AS R ON S.`sid` = R.`sid` JOIN Boats AS B ON R.`bid` = B.`bid` WHERE B.`color` IN ('red', 'blue')",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT S.`name`, S.`sid` FROM Sailors AS S JOIN Reserves AS R ON S.`sid` = R.`sid` JOIN Boats AS B ON R.`bid` = B.`bid` WHERE B.`color` IN ('red', 'blue')",
        "repair_result": 0
    },
    {
        "idx": 365,
        "db_id": "boat_1",
        "question": "Find the id of Sailors (sid) that reserved red and blue boat.",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  \"blue\"",
        "pred": "SELECT DISTINCT R1.`sid` FROM Reserves AS R1 JOIN Boats AS B1 ON R1.`bid` = B1.`bid` WHERE B1.`color` IN ('red', 'blue')",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT R1.`sid` FROM Reserves AS R1 JOIN Boats AS B1 ON R1.`bid` = B1.`bid` WHERE B1.`color` IN ('red', 'blue')",
        "repair_result": 0
    },
    {
        "idx": 366,
        "db_id": "boat_1",
        "question": "What are the ids of sailors who reserved red and blue boats?",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  \"blue\"",
        "pred": "SELECT DISTINCT R1.`sid` FROM Reserves AS R1 JOIN Boats AS B1 ON R1.`bid` = B1.`bid` WHERE B1.`color` IN ('red', 'blue')",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT R1.`sid` FROM Reserves AS R1 JOIN Boats AS B1 ON R1.`bid` = B1.`bid` WHERE B1.`color` IN ('red', 'blue')",
        "repair_result": 0
    },
    {
        "idx": 367,
        "db_id": "boat_1",
        "question": "Find the name and id of Sailors (sid) that reserved red and blue boat.",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  \"blue\"",
        "pred": "SELECT DISTINCT S.`sid`, S.`name` FROM Sailors AS S JOIN Reserves AS R ON S.`sid` = R.`sid` JOIN Boats AS B ON R.`bid` = B.`bid` WHERE B.`color` IN ('red', 'blue')",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT S.`sid`, S.`name` FROM Sailors AS S JOIN Reserves AS R ON S.`sid` = R.`sid` JOIN Boats AS B ON R.`bid` = B.`bid` WHERE B.`color` IN ('red', 'blue')",
        "repair_result": 0
    },
    {
        "idx": 368,
        "db_id": "boat_1",
        "question": "What are the names and ids of sailors who reserved red and blue boats?",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  \"blue\"",
        "pred": "SELECT DISTINCT S.`sid`, S.`name` FROM Sailors AS S JOIN Reserves AS R ON S.`sid` = R.`sid` JOIN Boats AS B ON R.`bid` = B.`bid` WHERE B.`color` IN ('red', 'blue')",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT S.`sid`, S.`name` FROM Sailors AS S JOIN Reserves AS R ON S.`sid` = R.`sid` JOIN Boats AS B ON R.`bid` = B.`bid` WHERE B.`color` IN ('red', 'blue')",
        "repair_result": 0
    },
    {
        "idx": 369,
        "db_id": "boat_1",
        "question": "What is the ids of sailors that haven\u2019t reserved a boat?",
        "evidence": "",
        "gold": "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
        "pred": "SELECT DISTINCT Sailors.sid FROM Sailors LEFT JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.sid IS NULL",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT Sailors.sid FROM Sailors LEFT JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.sid IS NULL",
        "repair_result": 1
    },
    {
        "idx": 370,
        "db_id": "boat_1",
        "question": "What are the ids of sailors who have not reserved a boat?",
        "evidence": "",
        "gold": "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
        "pred": "SELECT DISTINCT s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL",
        "repair_result": 1
    },
    {
        "idx": 371,
        "db_id": "boat_1",
        "question": "what is the name and id of sailors who do not have a reservation of a boat?",
        "evidence": "",
        "gold": "SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
        "pred": "SELECT `sid`, `name` FROM Sailors WHERE `sid` NOT IN (SELECT `sid` FROM Reserves)",
        "pred_result": 1,
        "repair_sql": "SELECT `sid`, `name` FROM Sailors WHERE `sid` NOT IN (SELECT `sid` FROM Reserves)",
        "repair_result": 1
    },
    {
        "idx": 372,
        "db_id": "boat_1",
        "question": "What are the names and ids of all sailors who do not have boat reservations?",
        "evidence": "",
        "gold": "SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
        "pred": "SELECT `sid`, `name` FROM Sailors WHERE `sid` NOT IN (SELECT `sid` FROM Reserves)",
        "pred_result": 1,
        "repair_sql": "SELECT `sid`, `name` FROM Sailors WHERE `sid` NOT IN (SELECT `sid` FROM Reserves)",
        "repair_result": 1
    },
    {
        "idx": 373,
        "db_id": "boat_1",
        "question": "Find id for the sailors who do not have a reservation of a boat?",
        "evidence": "",
        "gold": "SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
        "pred": "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)",
        "pred_result": 1,
        "repair_sql": "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)",
        "repair_result": 1
    },
    {
        "idx": 374,
        "db_id": "boat_1",
        "question": "What is id about sailors who do not have boat reservations?",
        "evidence": "",
        "gold": "SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
        "pred": "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)",
        "pred_result": 1,
        "repair_sql": "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)",
        "repair_result": 1
    },
    {
        "idx": 375,
        "db_id": "boat_1",
        "question": "What is the name of the sailors who reserved boat with id 103?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T2.bid  =  103",
        "pred": "SELECT S.name FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid WHERE R.bid = 103",
        "pred_result": 1,
        "repair_sql": "SELECT S.name FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid WHERE R.bid = 103",
        "repair_result": 1
    },
    {
        "idx": 376,
        "db_id": "boat_1",
        "question": "Find the name of the sailors who reserved boat with id 103.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T2.bid  =  103",
        "pred": "SELECT DISTINCT S.name FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid WHERE R.bid = 103",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT S.name FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid WHERE R.bid = 103",
        "repair_result": 1
    },
    {
        "idx": 377,
        "db_id": "boat_1",
        "question": "What is the name of all sailors whose rating is higher than any sailor named Luis?",
        "evidence": "",
        "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
        "pred": "SELECT DISTINCT s1.name FROM Sailors s1 WHERE s1.rating > (SELECT rating FROM Sailors WHERE name = 'Luis')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT s1.name FROM Sailors s1 WHERE s1.rating > (SELECT rating FROM Sailors WHERE name = 'Luis')",
        "repair_result": 1
    },
    {
        "idx": 378,
        "db_id": "boat_1",
        "question": "What are the sailors' names, the ones whose rating is higher than any sailor named Luis?",
        "evidence": "",
        "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
        "pred": "SELECT DISTINCT s1.name FROM Sailors s1 WHERE s1.rating > (SELECT rating FROM Sailors WHERE name = 'Luis')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT s1.name FROM Sailors s1 WHERE s1.rating > (SELECT rating FROM Sailors WHERE name = 'Luis')",
        "repair_result": 1
    },
    {
        "idx": 379,
        "db_id": "boat_1",
        "question": "What is the name of all sailors whose rating is higher than all sailors named Luis?",
        "evidence": "",
        "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
        "pred": "SELECT s1.name FROM Sailors s1 WHERE s1.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name = 'Luis')",
        "pred_result": 1,
        "repair_sql": "SELECT s1.name FROM Sailors s1 WHERE s1.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name = 'Luis')",
        "repair_result": 1
    },
    {
        "idx": 380,
        "db_id": "boat_1",
        "question": "What are the names of all sailors with a higher rating than every sailor named Luis?",
        "evidence": "",
        "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
        "pred": "SELECT DISTINCT s1.name FROM Sailors s1 WHERE s1.rating > (SELECT rating FROM Sailors WHERE name = 'Luis')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT s1.name FROM Sailors s1 WHERE s1.rating > (SELECT rating FROM Sailors WHERE name = 'Luis')",
        "repair_result": 1
    },
    {
        "idx": 381,
        "db_id": "boat_1",
        "question": "what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2",
        "pred": "SELECT S.`name`, S.`sid` FROM Sailors AS S JOIN Reserves AS R ON S.`sid` = R.`sid` WHERE S.`rating` > 2",
        "pred_result": 1,
        "repair_sql": "SELECT S.`name`, S.`sid` FROM Sailors AS S JOIN Reserves AS R ON S.`sid` = R.`sid` WHERE S.`rating` > 2",
        "repair_result": 1
    },
    {
        "idx": 382,
        "db_id": "boat_1",
        "question": "What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2",
        "pred": "SELECT S.`sid`, S.`name` FROM Sailors AS S JOIN Reserves AS R ON S.`sid` = R.`sid` WHERE S.`rating` >= 3",
        "pred_result": 0,
        "repair_sql": "SELECT S.`sid`, S.`name` FROM Sailors AS S JOIN Reserves AS R ON S.`sid` = R.`sid` WHERE S.`rating` >= 3",
        "repair_result": 0
    },
    {
        "idx": 383,
        "db_id": "boat_1",
        "question": "Find the name and age of the oldest sailor.",
        "evidence": "",
        "gold": "SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )",
        "pred": "SELECT `name`, `age` FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors)",
        "pred_result": 1,
        "repair_sql": "SELECT `name`, `age` FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors)",
        "repair_result": 1
    },
    {
        "idx": 384,
        "db_id": "boat_1",
        "question": "What is the name and age of the sailor with maximum age?",
        "evidence": "",
        "gold": "SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )",
        "pred": "SELECT `name`, `age` FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors)",
        "pred_result": 1,
        "repair_sql": "SELECT `name`, `age` FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors)",
        "repair_result": 1
    },
    {
        "idx": 385,
        "db_id": "boat_1",
        "question": "how many sailors in total?",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM Sailors",
        "pred": "SELECT COUNT(*) FROM Sailors",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Sailors",
        "repair_result": 1
    },
    {
        "idx": 386,
        "db_id": "boat_1",
        "question": "How many sailors exist?",
        "evidence": "",
        "gold": "SELECT COUNT(*) FROM Sailors",
        "pred": "SELECT COUNT(*) FROM Sailors",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Sailors",
        "repair_result": 1
    },
    {
        "idx": 387,
        "db_id": "boat_1",
        "question": "What is the average age of sailors whose rating is 7?",
        "evidence": "",
        "gold": "SELECT AVG(age) FROM Sailors WHERE rating  =  7",
        "pred": "SELECT AVG(age) FROM Sailors WHERE rating = 7",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(age) FROM Sailors WHERE rating = 7",
        "repair_result": 1
    },
    {
        "idx": 388,
        "db_id": "boat_1",
        "question": "What is average age of all sailors who have a rating of 7?",
        "evidence": "",
        "gold": "SELECT AVG(age) FROM Sailors WHERE rating  =  7",
        "pred": "SELECT AVG(age) FROM Sailors WHERE rating = 7",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(age) FROM Sailors WHERE rating = 7",
        "repair_result": 1
    },
    {
        "idx": 389,
        "db_id": "boat_1",
        "question": "How many sailors whose name starts with letter D exist ?",
        "evidence": "",
        "gold": "select count(*) from sailors where name like 'd%'",
        "pred": "SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'",
        "repair_result": 1
    },
    {
        "idx": 390,
        "db_id": "boat_1",
        "question": "What is the count of the sailors whose name starts with letter D ?",
        "evidence": "",
        "gold": "select count(*) from sailors where name like 'd%'",
        "pred": "SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'",
        "repair_result": 1
    },
    {
        "idx": 391,
        "db_id": "boat_1",
        "question": "What are the average rating and max age of all sailors?",
        "evidence": "",
        "gold": "SELECT AVG(rating) ,  MAX(age) FROM Sailors",
        "pred": "SELECT AVG(rating) AS average_rating, MAX(age) AS max_age FROM Sailors",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(rating) AS average_rating, MAX(age) AS max_age FROM Sailors",
        "repair_result": 1
    },
    {
        "idx": 392,
        "db_id": "boat_1",
        "question": "Find the average rating and largest age for the sailors",
        "evidence": "",
        "gold": "SELECT AVG(rating) ,  MAX(age) FROM Sailors",
        "pred": "SELECT AVG(rating) AS average_rating, MAX(age) AS largest_age FROM Sailors",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(rating) AS average_rating, MAX(age) AS largest_age FROM Sailors",
        "repair_result": 1
    },
    {
        "idx": 393,
        "db_id": "boat_1",
        "question": "Find the number of reservations for each boat.",
        "evidence": "",
        "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid",
        "pred": "SELECT B.name, COUNT(*) AS num_reservations FROM Boats AS B JOIN Reserves AS R ON B.bid = R.bid GROUP BY B.bid",
        "pred_result": 0,
        "repair_sql": "SELECT B.name, COUNT(*) AS num_reservations FROM Boats AS B JOIN Reserves AS R ON B.bid = R.bid GROUP BY B.bid",
        "repair_result": 0
    },
    {
        "idx": 394,
        "db_id": "boat_1",
        "question": "How many reservations exist for each boat?",
        "evidence": "",
        "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid",
        "pred": "SELECT B.name, COUNT(*) FROM Boats AS B JOIN Reserves AS R ON B.bid = R.bid GROUP BY B.bid",
        "pred_result": 0,
        "repair_sql": "SELECT B.name, COUNT(*) FROM Boats AS B JOIN Reserves AS R ON B.bid = R.bid GROUP BY B.bid",
        "repair_result": 0
    },
    {
        "idx": 395,
        "db_id": "boat_1",
        "question": "Find the number of reservations for each boat with id greater than 50.",
        "evidence": "",
        "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50",
        "pred": "SELECT R.`bid`, COUNT(*) FROM Reserves AS R WHERE R.`bid` > 50 GROUP BY R.`bid`",
        "pred_result": 1,
        "repair_sql": "SELECT R.`bid`, COUNT(*) FROM Reserves AS R WHERE R.`bid` > 50 GROUP BY R.`bid`",
        "repair_result": 1
    },
    {
        "idx": 396,
        "db_id": "boat_1",
        "question": "How many reservations exist for each boat with an id greater than 50?",
        "evidence": "",
        "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50",
        "pred": "SELECT B.`name`, COUNT(*) FROM Boats AS B JOIN Reserves AS R ON B.`bid` = R.`bid` WHERE B.`bid` > 50 GROUP BY B.`bid`",
        "pred_result": 0,
        "repair_sql": "SELECT B.`name`, COUNT(*) FROM Boats AS B JOIN Reserves AS R ON B.`bid` = R.`bid` WHERE B.`bid` > 50 GROUP BY B.`bid`",
        "repair_result": 0
    },
    {
        "idx": 397,
        "db_id": "boat_1",
        "question": "Find the number of reservations for each boat with more than 1 reservation.",
        "evidence": "",
        "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1",
        "pred": "SELECT `bid`, COUNT(*) FROM Reserves GROUP BY `bid` HAVING COUNT(*) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT `bid`, COUNT(*) FROM Reserves GROUP BY `bid` HAVING COUNT(*) > 1",
        "repair_result": 1
    },
    {
        "idx": 398,
        "db_id": "boat_1",
        "question": "How many reservations exist for each boat that has more than 1 reservation already?",
        "evidence": "",
        "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1",
        "pred": "SELECT R.`bid`, COUNT(*) AS num_reservations FROM Reserves AS R GROUP BY R.`bid` HAVING COUNT(*) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT R.`bid`, COUNT(*) AS num_reservations FROM Reserves AS R GROUP BY R.`bid` HAVING COUNT(*) > 1",
        "repair_result": 1
    },
    {
        "idx": 399,
        "db_id": "boat_1",
        "question": "Find the number of reservations by sailors with id greater than 1 for each boat.",
        "evidence": "",
        "gold": "SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid",
        "pred": "SELECT R.`bid`, COUNT(*) FROM Reserves AS R JOIN Sailors AS S ON R.`sid` = S.`sid` WHERE S.`sid` > 1 GROUP BY R.`bid`",
        "pred_result": 1,
        "repair_sql": "SELECT R.`bid`, COUNT(*) FROM Reserves AS R JOIN Sailors AS S ON R.`sid` = S.`sid` WHERE S.`sid` > 1 GROUP BY R.`bid`",
        "repair_result": 1
    },
    {
        "idx": 400,
        "db_id": "boat_1",
        "question": "How many reservations for each boat did the sailors with an id greater than 1 make?",
        "evidence": "",
        "gold": "SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid",
        "pred": "SELECT R.`bid`, COUNT(*) AS reservations_count FROM Reserves AS R WHERE R.`sid` > 1 GROUP BY R.`bid`",
        "pred_result": 1,
        "repair_sql": "SELECT R.`bid`, COUNT(*) AS reservations_count FROM Reserves AS R WHERE R.`sid` > 1 GROUP BY R.`bid`",
        "repair_result": 1
    },
    {
        "idx": 401,
        "db_id": "boat_1",
        "question": "What is the rating and average age for sailors who have reserved red boat grouped by rating?",
        "evidence": "",
        "gold": "SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating",
        "pred": "SELECT s.rating, AVG(s.age) FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY s.rating",
        "pred_result": 1,
        "repair_sql": "SELECT s.rating, AVG(s.age) FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY s.rating",
        "repair_result": 1
    },
    {
        "idx": 402,
        "db_id": "boat_1",
        "question": "What are the rating and average age for sailors who reserved red boats for each rating?",
        "evidence": "",
        "gold": "SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating",
        "pred": "SELECT s.rating, AVG(s.age) AS average_age FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY s.rating",
        "pred_result": 1,
        "repair_sql": "SELECT s.rating, AVG(s.age) AS average_age FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY s.rating",
        "repair_result": 1
    },
    {
        "idx": 403,
        "db_id": "boat_1",
        "question": "Find the name, rating and age of all sailors ordered by rating and age.",
        "evidence": "",
        "gold": "SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age",
        "pred": "SELECT `name`, `rating`, `age` FROM Sailors ORDER BY `rating`, `age`",
        "pred_result": 1,
        "repair_sql": "SELECT `name`, `rating`, `age` FROM Sailors ORDER BY `rating`, `age`",
        "repair_result": 1
    },
    {
        "idx": 404,
        "db_id": "boat_1",
        "question": "What is the name, rating, and age for every sailor? And order them by rating and age.",
        "evidence": "",
        "gold": "SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age",
        "pred": "SELECT `name`, `rating`, `age` FROM Sailors ORDER BY `rating`, `age`",
        "pred_result": 1,
        "repair_sql": "SELECT `name`, `rating`, `age` FROM Sailors ORDER BY `rating`, `age`",
        "repair_result": 1
    },
    {
        "idx": 405,
        "db_id": "boat_1",
        "question": "Find the total number of boats.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Boats",
        "pred": "SELECT COUNT(*) FROM Boats",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Boats",
        "repair_result": 1
    },
    {
        "idx": 406,
        "db_id": "boat_1",
        "question": "How many boats are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Boats",
        "pred": "SELECT COUNT(*) FROM Boats",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Boats",
        "repair_result": 1
    },
    {
        "idx": 407,
        "db_id": "boat_1",
        "question": "How many boats are red?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Boats WHERE color  =  'red'",
        "pred": "SELECT COUNT(*) FROM Boats WHERE color = 'red'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Boats WHERE color = 'red'",
        "repair_result": 1
    },
    {
        "idx": 408,
        "db_id": "boat_1",
        "question": "How many red boats exist?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Boats WHERE color  =  'red'",
        "pred": "SELECT COUNT(*) FROM Boats WHERE color = 'red'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Boats WHERE color = 'red'",
        "repair_result": 1
    },
    {
        "idx": 409,
        "db_id": "boat_1",
        "question": "Find the names of boats booked by sailors whose age is between 20 and 30.",
        "evidence": "",
        "gold": "SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30",
        "pred": "SELECT DISTINCT B.`name` FROM Boats AS B JOIN Reserves AS R ON B.`bid` = R.`bid` JOIN Sailors AS S ON R.`sid` = S.`sid` WHERE S.`age` BETWEEN 20 AND 30",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT B.`name` FROM Boats AS B JOIN Reserves AS R ON B.`bid` = R.`bid` JOIN Sailors AS S ON R.`sid` = S.`sid` WHERE S.`age` BETWEEN 20 AND 30",
        "repair_result": 1
    },
    {
        "idx": 410,
        "db_id": "boat_1",
        "question": "What are the names of the boats booked by people between age 20 and 30?",
        "evidence": "",
        "gold": "SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30",
        "pred": "SELECT DISTINCT B.`name` FROM Boats AS B JOIN Reserves AS R ON B.`bid` = R.`bid` JOIN Sailors AS S ON R.`sid` = S.`sid` WHERE S.`age` BETWEEN 20 AND 30",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT B.`name` FROM Boats AS B JOIN Reserves AS R ON B.`bid` = R.`bid` JOIN Sailors AS S ON R.`sid` = S.`sid` WHERE S.`age` BETWEEN 20 AND 30",
        "repair_result": 1
    },
    {
        "idx": 411,
        "db_id": "boat_1",
        "question": "Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.",
        "evidence": "",
        "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')",
        "pred": "SELECT DISTINCT S1.`name` FROM Sailors AS S1 WHERE S1.`rating` > ALL (SELECT S2.`rating` FROM Sailors AS S2 JOIN Reserves AS R ON S2.`sid` = R.`sid` JOIN Boats AS B ON R.`bid` = B.`bid` WHERE B.`color` = 'red')",
        "pred_result": "near \"ALL\": syntax error",
        "repair_sql": "SELECT DISTINCT S1.`name` FROM Sailors AS S1 WHERE S1.`rating` > ALL (SELECT S2.`rating` FROM Sailors AS S2 JOIN Reserves AS R ON S2.`sid` = R.`sid` JOIN Boats AS B ON R.`bid` = B.`bid` WHERE B.`color` = 'red')",
        "repair_result": "near \"ALL\": syntax error"
    },
    {
        "idx": 412,
        "db_id": "boat_1",
        "question": "What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?",
        "evidence": "",
        "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')",
        "pred": "SELECT DISTINCT S1.`name` FROM Sailors AS S1 WHERE S1.`rating` > ALL (SELECT S2.`rating` FROM Sailors AS S2 JOIN Reserves AS R ON S2.`sid` = R.`sid` JOIN Boats AS B ON R.`bid` = B.`bid` WHERE B.`color` = 'red')",
        "pred_result": "near \"ALL\": syntax error",
        "repair_sql": "SELECT DISTINCT S1.`name` FROM Sailors AS S1 WHERE S1.`rating` > ALL (SELECT S2.`rating` FROM Sailors AS S2 JOIN Reserves AS R ON S2.`sid` = R.`sid` JOIN Boats AS B ON R.`bid` = B.`bid` WHERE B.`color` = 'red')",
        "repair_result": "near \"ALL\": syntax error"
    },
    {
        "idx": 413,
        "db_id": "boat_1",
        "question": "What is highest rating between sailors?",
        "evidence": "",
        "gold": "SELECT max(rating) FROM Sailors",
        "pred": "SELECT MAX(rating) FROM Sailors",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(rating) FROM Sailors",
        "repair_result": 1
    },
    {
        "idx": 414,
        "db_id": "boat_1",
        "question": "What is the maximum rating for sailors?",
        "evidence": "",
        "gold": "SELECT max(rating) FROM Sailors",
        "pred": "SELECT MAX(rating) FROM Sailors",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(rating) FROM Sailors",
        "repair_result": 1
    },
    {
        "idx": 415,
        "db_id": "boat_1",
        "question": "Find the names of sailors who reserved boat with the name Melon.",
        "evidence": "",
        "gold": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
        "pred": "SELECT DISTINCT S.name FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid JOIN Boats AS B ON R.bid = B.bid WHERE B.name = 'Melon'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT S.name FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid JOIN Boats AS B ON R.bid = B.bid WHERE B.name = 'Melon'",
        "repair_result": 1
    },
    {
        "idx": 416,
        "db_id": "boat_1",
        "question": "What are the names of sailors who reserved a boat with the name Melon?",
        "evidence": "",
        "gold": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
        "pred": "SELECT DISTINCT S.name FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid JOIN Boats AS B ON R.bid = B.bid WHERE B.name = 'Melon'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT S.name FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid JOIN Boats AS B ON R.bid = B.bid WHERE B.name = 'Melon'",
        "repair_result": 1
    },
    {
        "idx": 417,
        "db_id": "boat_1",
        "question": "List the names and ages of all sailors sorted by rating in descending order.",
        "evidence": "",
        "gold": "SELECT name ,  age FROM Sailors ORDER BY rating DESC",
        "pred": "SELECT `name`, `age` FROM Sailors ORDER BY `rating` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `name`, `age` FROM Sailors ORDER BY `rating` DESC",
        "repair_result": 1
    },
    {
        "idx": 418,
        "db_id": "boat_1",
        "question": "What are the names and ages of all sailors sorted by decreasing rating?",
        "evidence": "",
        "gold": "SELECT name ,  age FROM Sailors ORDER BY rating DESC",
        "pred": "SELECT `name`, `age` FROM Sailors ORDER BY `rating` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `name`, `age` FROM Sailors ORDER BY `rating` DESC",
        "repair_result": 1
    },
    {
        "idx": 419,
        "db_id": "aan_1",
        "question": "How many authors do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Author",
        "pred": "SELECT COUNT(*) FROM Author",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Author",
        "repair_result": 1
    },
    {
        "idx": 420,
        "db_id": "aan_1",
        "question": "Count the number of authors.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Author",
        "pred": "SELECT COUNT(*) FROM Author",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Author",
        "repair_result": 1
    },
    {
        "idx": 421,
        "db_id": "aan_1",
        "question": "How many papers do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Paper",
        "pred": "SELECT COUNT(*) FROM Paper",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Paper",
        "repair_result": 1
    },
    {
        "idx": 422,
        "db_id": "aan_1",
        "question": "Count the number of papers.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Paper",
        "pred": "SELECT COUNT(*) FROM Paper",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Paper",
        "repair_result": 1
    },
    {
        "idx": 423,
        "db_id": "aan_1",
        "question": "How many affiliations do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Affiliation",
        "pred": "SELECT COUNT(*) FROM Affiliation",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Affiliation",
        "repair_result": 1
    },
    {
        "idx": 424,
        "db_id": "aan_1",
        "question": "Count the number of affiliations.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Affiliation",
        "pred": "SELECT COUNT(*) FROM Affiliation",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Affiliation",
        "repair_result": 1
    },
    {
        "idx": 425,
        "db_id": "aan_1",
        "question": "How many papers do we have in NAACL 2000?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Paper WHERE venue  =  \"NAACL\" AND YEAR  =  2000",
        "pred": "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
        "repair_result": 1
    },
    {
        "idx": 426,
        "db_id": "aan_1",
        "question": "Count the number of papers in NAACL 2000.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Paper WHERE venue  =  \"NAACL\" AND YEAR  =  2000",
        "pred": "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
        "repair_result": 1
    },
    {
        "idx": 427,
        "db_id": "aan_1",
        "question": "How many papers are published in year 2009 by Columbia University?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\" AND T1.year  =  2009",
        "pred": "SELECT COUNT(*) FROM Paper AS P JOIN Author_list AS AL ON P.paper_id = AL.paper_id JOIN Affiliation AS A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' AND P.year = 2009",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Paper AS P JOIN Author_list AS AL ON P.paper_id = AL.paper_id JOIN Affiliation AS A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' AND P.year = 2009",
        "repair_result": 0
    },
    {
        "idx": 428,
        "db_id": "aan_1",
        "question": "Count the number of papers published by Columbia University in 2009.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\" AND T1.year  =  2009",
        "pred": "SELECT COUNT(*) FROM Paper AS P JOIN Author_list AS AL ON P.paper_id = AL.paper_id JOIN Affiliation AS A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' AND P.year = 2009",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Paper AS P JOIN Author_list AS AL ON P.paper_id = AL.paper_id JOIN Affiliation AS A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' AND P.year = 2009",
        "repair_result": 0
    },
    {
        "idx": 429,
        "db_id": "aan_1",
        "question": "List names and addresses for all affiliations.",
        "evidence": "",
        "gold": "SELECT DISTINCT name ,  address FROM Affiliation",
        "pred": "SELECT `name`, `address` FROM Affiliation",
        "pred_result": 1,
        "repair_sql": "SELECT `name`, `address` FROM Affiliation",
        "repair_result": 1
    },
    {
        "idx": 430,
        "db_id": "aan_1",
        "question": "What are the names and addresses for all affiliations?",
        "evidence": "",
        "gold": "SELECT DISTINCT name ,  address FROM Affiliation",
        "pred": "SELECT `name`, `address` FROM Affiliation",
        "pred_result": 1,
        "repair_sql": "SELECT `name`, `address` FROM Affiliation",
        "repair_result": 1
    },
    {
        "idx": 431,
        "db_id": "aan_1",
        "question": "List all venues and years for papers ordered by year.",
        "evidence": "",
        "gold": "SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR",
        "pred": "SELECT `venue`, `year` FROM Paper ORDER BY `year`",
        "pred_result": 1,
        "repair_sql": "SELECT `venue`, `year` FROM Paper ORDER BY `year`",
        "repair_result": 1
    },
    {
        "idx": 432,
        "db_id": "aan_1",
        "question": "What are the distinct venues for papers, ordered by year?",
        "evidence": "",
        "gold": "SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR",
        "pred": "SELECT DISTINCT `venue` FROM Paper ORDER BY `year`",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT `venue` FROM Paper ORDER BY `year`",
        "repair_result": 0
    },
    {
        "idx": 433,
        "db_id": "aan_1",
        "question": "Find the titles and paper IDs for papers written by Harvard University.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  \"Harvard University\"",
        "pred": "SELECT `title`, `paper_id` FROM Paper WHERE `paper_id` IN (SELECT `paper_id` FROM Author_list WHERE `affiliation_id` = (SELECT `affiliation_id` FROM Affiliation WHERE `name` = 'Harvard University'))",
        "pred_result": 1,
        "repair_sql": "SELECT `title`, `paper_id` FROM Paper WHERE `paper_id` IN (SELECT `paper_id` FROM Author_list WHERE `affiliation_id` = (SELECT `affiliation_id` FROM Affiliation WHERE `name` = 'Harvard University'))",
        "repair_result": 1
    },
    {
        "idx": 434,
        "db_id": "aan_1",
        "question": "What are the titles and paper ids for papers written in affiliation with Harvard University?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  \"Harvard University\"",
        "pred": "SELECT `title`, `paper_id` FROM Paper WHERE `paper_id` IN (SELECT `paper_id` FROM Author_list WHERE `affiliation_id` = (SELECT `affiliation_id` FROM Affiliation WHERE `name` = 'Harvard University'))",
        "pred_result": 1,
        "repair_sql": "SELECT `title`, `paper_id` FROM Paper WHERE `paper_id` IN (SELECT `paper_id` FROM Author_list WHERE `affiliation_id` = (SELECT `affiliation_id` FROM Affiliation WHERE `name` = 'Harvard University'))",
        "repair_result": 1
    },
    {
        "idx": 435,
        "db_id": "aan_1",
        "question": "Find all papers with titles and paper IDs written by Mckeown.",
        "evidence": "",
        "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE \"%Mckeown%\"",
        "pred": "SELECT `title`, `paper_id` FROM Paper WHERE `paper_id` IN (SELECT `paper_id` FROM Author_list WHERE `author_id` = (SELECT `author_id` FROM Author WHERE `name` = 'Mckeown'))",
        "pred_result": 0,
        "repair_sql": "SELECT `title`, `paper_id` FROM Paper WHERE `paper_id` IN (SELECT `paper_id` FROM Author_list WHERE `author_id` = (SELECT `author_id` FROM Author WHERE `name` = 'Mckeown'))",
        "repair_result": 0
    },
    {
        "idx": 436,
        "db_id": "aan_1",
        "question": "What are the titles and paper ids for papers written by Mckeown?",
        "evidence": "",
        "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE \"%Mckeown%\"",
        "pred": "SELECT `title`, `paper_id` FROM Paper WHERE `paper_id` IN (SELECT `paper_id` FROM Author_list WHERE `author_id` = (SELECT `author_id` FROM Author WHERE `name` = 'Mckeown'))",
        "pred_result": 0,
        "repair_sql": "SELECT `title`, `paper_id` FROM Paper WHERE `paper_id` IN (SELECT `paper_id` FROM Author_list WHERE `author_id` = (SELECT `author_id` FROM Author WHERE `name` = 'Mckeown'))",
        "repair_result": 0
    },
    {
        "idx": 437,
        "db_id": "aan_1",
        "question": "Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.",
        "evidence": "",
        "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Stanford University\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\"",
        "pred": "SELECT P.`paper_id`, P.`title` FROM Paper AS P JOIN Author_list AS AL ON P.`paper_id` = AL.`paper_id` JOIN Affiliation AS A ON AL.`affiliation_id` = A.`affiliation_id` WHERE A.`name` IN ('University of California', 'The MITRE Corporation')",
        "pred_result": 0,
        "repair_sql": "SELECT P.`paper_id`, P.`title` FROM Paper AS P JOIN Author_list AS AL ON P.`paper_id` = AL.`paper_id` JOIN Affiliation AS A ON AL.`affiliation_id` = A.`affiliation_id` WHERE A.`name` IN ('University of California', 'The MITRE Corporation')",
        "repair_result": 0
    },
    {
        "idx": 438,
        "db_id": "aan_1",
        "question": "What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?",
        "evidence": "",
        "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Stanford University\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\"",
        "pred": "SELECT DISTINCT P.`title`, P.`paper_id` FROM Paper AS P JOIN Author_list AS AL ON P.`paper_id` = AL.`paper_id` JOIN Affiliation AS A ON AL.`affiliation_id` = A.`affiliation_id` WHERE A.`name` IN ('Stanford University', 'Columbia University') GROUP BY P.`title`, P.`paper_id` HAVING COUNT(DISTINCT A.`name`) = 2",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT P.`title`, P.`paper_id` FROM Paper AS P JOIN Author_list AS AL ON P.`paper_id` = AL.`paper_id` JOIN Affiliation AS A ON AL.`affiliation_id` = A.`affiliation_id` WHERE A.`name` IN ('Stanford University', 'Columbia University') GROUP BY P.`title`, P.`paper_id` HAVING COUNT(DISTINCT A.`name`) = 2",
        "repair_result": 1
    },
    {
        "idx": 439,
        "db_id": "aan_1",
        "question": "Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.",
        "evidence": "",
        "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
        "pred": "SELECT P.`paper_id`, P.`title` FROM Paper AS P JOIN Author_list AS AL1 ON P.`paper_id` = AL1.`paper_id` JOIN Author_list AS AL2 ON AL1.`paper_id` = AL2.`paper_id` JOIN Author AS A1 ON AL1.`author_id` = A1.`author_id` JOIN Author AS A2 ON AL2.`author_id` = A2.`author_id` WHERE A1.`name` = 'Mckeown, Kathleen' AND A2.`name` = 'Rambow, Owen'",
        "pred_result": 1,
        "repair_sql": "SELECT P.`paper_id`, P.`title` FROM Paper AS P JOIN Author_list AS AL1 ON P.`paper_id` = AL1.`paper_id` JOIN Author_list AS AL2 ON AL1.`paper_id` = AL2.`paper_id` JOIN Author AS A1 ON AL1.`author_id` = A1.`author_id` JOIN Author AS A2 ON AL2.`author_id` = A2.`author_id` WHERE A1.`name` = 'Mckeown, Kathleen' AND A2.`name` = 'Rambow, Owen'",
        "repair_result": 1
    },
    {
        "idx": 440,
        "db_id": "aan_1",
        "question": "What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?",
        "evidence": "",
        "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
        "pred": "SELECT DISTINCT P.title, P.paper_id FROM Paper AS P JOIN Author_list AS AL1 ON P.paper_id = AL1.paper_id JOIN Author_list AS AL2 ON AL1.paper_id = AL2.paper_id JOIN Author AS A1 ON AL1.author_id = A1.author_id JOIN Author AS A2 ON AL2.author_id = A2.author_id WHERE (A1.name = 'Mckeown, Kathleen' OR A2.name = 'Mckeown, Kathleen') AND (A1.name = 'Rambow, Owen' OR A2.name = 'Rambow, Owen')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT P.title, P.paper_id FROM Paper AS P JOIN Author_list AS AL1 ON P.paper_id = AL1.paper_id JOIN Author_list AS AL2 ON AL1.paper_id = AL2.paper_id JOIN Author AS A1 ON AL1.author_id = A1.author_id JOIN Author AS A2 ON AL2.author_id = A2.author_id WHERE (A1.name = 'Mckeown, Kathleen' OR A2.name = 'Mckeown, Kathleen') AND (A1.name = 'Rambow, Owen' OR A2.name = 'Rambow, Owen')",
        "repair_result": 1
    },
    {
        "idx": 441,
        "db_id": "aan_1",
        "question": "Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.",
        "evidence": "",
        "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown%\" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow%\"",
        "pred": "SELECT DISTINCT P.`title`, P.`paper_id` FROM Paper AS P JOIN Author_list AS AL ON P.`paper_id` = AL.`paper_id` JOIN Author AS A ON AL.`author_id` = A.`author_id` WHERE A.`name` = 'Mckeown' AND P.`paper_id` NOT IN (SELECT P2.`paper_id` FROM Paper AS P2 JOIN Author_list AS AL2 ON P2.`paper_id` = AL2.`paper_id` JOIN Author AS A2 ON AL2.`author_id` = A2.`author_id` WHERE A2.`name` = 'Rambow')",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT P.`title`, P.`paper_id` FROM Paper AS P JOIN Author_list AS AL ON P.`paper_id` = AL.`paper_id` JOIN Author AS A ON AL.`author_id` = A.`author_id` WHERE A.`name` = 'Mckeown' AND P.`paper_id` NOT IN (SELECT P2.`paper_id` FROM Paper AS P2 JOIN Author_list AS AL2 ON P2.`paper_id` = AL2.`paper_id` JOIN Author AS A2 ON AL2.`author_id` = A2.`author_id` WHERE A2.`name` = 'Rambow')",
        "repair_result": 0
    },
    {
        "idx": 442,
        "db_id": "aan_1",
        "question": "What are the titles and paper ids which have Mckeown as an author, but not Rambow?",
        "evidence": "",
        "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown%\" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow%\"",
        "pred": "SELECT DISTINCT P.title, P.paper_id FROM Paper AS P JOIN Author_list AS AL ON P.paper_id = AL.paper_id JOIN Author AS A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND P.paper_id NOT IN (SELECT P2.paper_id FROM Paper AS P2 JOIN Author_list AS AL2 ON P2.paper_id = AL2.paper_id JOIN Author AS A2 ON AL2.author_id = A2.author_id WHERE A2.name = 'Rambow')",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT P.title, P.paper_id FROM Paper AS P JOIN Author_list AS AL ON P.paper_id = AL.paper_id JOIN Author AS A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND P.paper_id NOT IN (SELECT P2.paper_id FROM Paper AS P2 JOIN Author_list AS AL2 ON P2.paper_id = AL2.paper_id JOIN Author AS A2 ON AL2.author_id = A2.author_id WHERE A2.name = 'Rambow')",
        "repair_result": 0
    },
    {
        "idx": 443,
        "db_id": "aan_1",
        "question": "Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE \"%Mckeown ,  Kathleen%\" OR T3.name LIKE \"%Rambow ,  Owen%\"",
        "pred": "SELECT DISTINCT P.`title`, P.`paper_id` FROM Paper AS P JOIN Author_list AS AL ON P.`paper_id` = AL.`paper_id` JOIN Author AS A ON AL.`author_id` = A.`author_id` WHERE A.`name` IN ('Mckeown, Kathleen', 'Rambow, Owen')",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT P.`title`, P.`paper_id` FROM Paper AS P JOIN Author_list AS AL ON P.`paper_id` = AL.`paper_id` JOIN Author AS A ON AL.`author_id` = A.`author_id` WHERE A.`name` IN ('Mckeown, Kathleen', 'Rambow, Owen')",
        "repair_result": 0
    },
    {
        "idx": 444,
        "db_id": "aan_1",
        "question": "What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE \"%Mckeown ,  Kathleen%\" OR T3.name LIKE \"%Rambow ,  Owen%\"",
        "pred": "SELECT DISTINCT P.`title`, P.`paper_id` FROM Paper AS P JOIN Author_list AS AL ON P.`paper_id` = AL.`paper_id` JOIN Author AS A ON AL.`author_id` = A.`author_id` WHERE A.`name` IN ('Mckeown, Kathleen', 'Rambow, Owen')",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT P.`title`, P.`paper_id` FROM Paper AS P JOIN Author_list AS AL ON P.`paper_id` = AL.`paper_id` JOIN Author AS A ON AL.`author_id` = A.`author_id` WHERE A.`name` IN ('Mckeown, Kathleen', 'Rambow, Owen')",
        "repair_result": 0
    },
    {
        "idx": 445,
        "db_id": "aan_1",
        "question": "List the names of all authors and their number of papers in descending order by number of papers.",
        "evidence": "",
        "gold": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC",
        "pred": "SELECT A.`name`, COUNT(AL.`paper_id`) AS num_papers FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` GROUP BY A.`author_id` ORDER BY num_papers DESC",
        "pred_result": 1,
        "repair_sql": "SELECT A.`name`, COUNT(AL.`paper_id`) AS num_papers FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` GROUP BY A.`author_id` ORDER BY num_papers DESC",
        "repair_result": 1
    },
    {
        "idx": 446,
        "db_id": "aan_1",
        "question": "How many papers did each author publish, ordered by number of papers?",
        "evidence": "",
        "gold": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC",
        "pred": "SELECT A.`name`, COUNT(AL.`paper_id`) AS num_papers FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` GROUP BY A.`author_id` ORDER BY num_papers DESC",
        "pred_result": 1,
        "repair_sql": "SELECT A.`name`, COUNT(AL.`paper_id`) AS num_papers FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` GROUP BY A.`author_id` ORDER BY num_papers DESC",
        "repair_result": 1
    },
    {
        "idx": 447,
        "db_id": "aan_1",
        "question": "List all affiliations with ascending ordered number of papers.",
        "evidence": "",
        "gold": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
        "pred": "SELECT A.`name`, COUNT(AL.`paper_id`) AS num_papers FROM Affiliation AS A JOIN Author_list AS AL ON A.`affiliation_id` = AL.`affiliation_id` GROUP BY A.`affiliation_id` ORDER BY num_papers ASC",
        "pred_result": 0,
        "repair_sql": "SELECT A.`name`, COUNT(AL.`paper_id`) AS num_papers FROM Affiliation AS A JOIN Author_list AS AL ON A.`affiliation_id` = AL.`affiliation_id` GROUP BY A.`affiliation_id` ORDER BY num_papers ASC",
        "repair_result": 0
    },
    {
        "idx": 448,
        "db_id": "aan_1",
        "question": "What are the names of all affiliations, ordered by number of papers?",
        "evidence": "",
        "gold": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
        "pred": "SELECT A.`name`, COUNT(AL.`paper_id`) AS paper_count FROM Affiliation AS A JOIN Author_list AS AL ON A.`affiliation_id` = AL.`affiliation_id` GROUP BY A.`affiliation_id` ORDER BY paper_count DESC",
        "pred_result": 0,
        "repair_sql": "SELECT A.`name`, COUNT(AL.`paper_id`) AS paper_count FROM Affiliation AS A JOIN Author_list AS AL ON A.`affiliation_id` = AL.`affiliation_id` GROUP BY A.`affiliation_id` ORDER BY paper_count DESC",
        "repair_result": 0
    },
    {
        "idx": 449,
        "db_id": "aan_1",
        "question": "List names of all authors who have more than 50 papers.",
        "evidence": "",
        "gold": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50",
        "pred": "SELECT A.`name` FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` GROUP BY A.`author_id` HAVING COUNT(AL.`paper_id`) > 50",
        "pred_result": 1,
        "repair_sql": "SELECT A.`name` FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` GROUP BY A.`author_id` HAVING COUNT(AL.`paper_id`) > 50",
        "repair_result": 1
    },
    {
        "idx": 450,
        "db_id": "aan_1",
        "question": "What are the names of all authors who have more than 50 papers?",
        "evidence": "",
        "gold": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50",
        "pred": "SELECT A.`name` FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` GROUP BY A.`author_id` HAVING COUNT(AL.`paper_id`) > 50",
        "pred_result": 1,
        "repair_sql": "SELECT A.`name` FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` GROUP BY A.`author_id` HAVING COUNT(AL.`paper_id`) > 50",
        "repair_result": 1
    },
    {
        "idx": 451,
        "db_id": "aan_1",
        "question": "List names of all authors who have only 1 paper.",
        "evidence": "",
        "gold": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
        "pred": "SELECT A.`name` FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` GROUP BY A.`author_id` HAVING COUNT(AL.`paper_id`) = 1",
        "pred_result": 1,
        "repair_sql": "SELECT A.`name` FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` GROUP BY A.`author_id` HAVING COUNT(AL.`paper_id`) = 1",
        "repair_result": 1
    },
    {
        "idx": 452,
        "db_id": "aan_1",
        "question": "What are the names of authors who have exactly 1 paper?",
        "evidence": "",
        "gold": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
        "pred": "SELECT A.`name` FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` GROUP BY A.`author_id` HAVING COUNT(AL.`paper_id`) = 1",
        "pred_result": 1,
        "repair_sql": "SELECT A.`name` FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` GROUP BY A.`author_id` HAVING COUNT(AL.`paper_id`) = 1",
        "repair_result": 1
    },
    {
        "idx": 453,
        "db_id": "aan_1",
        "question": "What is the venue and year with the most number of publications?",
        "evidence": "",
        "gold": "SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 454,
        "db_id": "aan_1",
        "question": "What was the venue and year with the most publications?",
        "evidence": "",
        "gold": "SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 455,
        "db_id": "aan_1",
        "question": "What is the venue with the least number of publications?",
        "evidence": "",
        "gold": "SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1",
        "pred": "SELECT venue, COUNT(*) AS num_publications FROM Paper GROUP BY venue ORDER BY num_publications LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT venue, COUNT(*) AS num_publications FROM Paper GROUP BY venue ORDER BY num_publications LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 456,
        "db_id": "aan_1",
        "question": "Which venue has the fewest publications?",
        "evidence": "",
        "gold": "SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1",
        "pred": "SELECT venue, COUNT(*) AS publication_count FROM Paper GROUP BY venue ORDER BY publication_count LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT venue, COUNT(*) AS publication_count FROM Paper GROUP BY venue ORDER BY publication_count LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 457,
        "db_id": "aan_1",
        "question": "How many papers cite paper with id A00-1002?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Citation WHERE cited_paper_id  =  \"A00-1002\"",
        "pred": "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002'",
        "repair_result": 1
    },
    {
        "idx": 458,
        "db_id": "aan_1",
        "question": "Count the number of papers which cited a paper with id A00-1002.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Citation WHERE cited_paper_id  =  \"A00-1002\"",
        "pred": "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002'",
        "repair_result": 1
    },
    {
        "idx": 459,
        "db_id": "aan_1",
        "question": "How many reference papers does paper with id D12-1027 have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Citation WHERE paper_id  =  \"D12-1027\"",
        "pred": "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'D12-1027'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'D12-1027'",
        "repair_result": 0
    },
    {
        "idx": 460,
        "db_id": "aan_1",
        "question": "Count the number of references the paper with id D12-1027 has.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Citation WHERE paper_id  =  \"D12-1027\"",
        "pred": "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'D12-1027'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'D12-1027'",
        "repair_result": 0
    },
    {
        "idx": 461,
        "db_id": "aan_1",
        "question": "What is the id and the number of citations of the most cited paper?",
        "evidence": "",
        "gold": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `paper_id`, COUNT(*) AS num_citations FROM Citation GROUP BY `paper_id` ORDER BY num_citations DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `paper_id`, COUNT(*) AS num_citations FROM Citation GROUP BY `paper_id` ORDER BY num_citations DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 462,
        "db_id": "aan_1",
        "question": "Give the id and the number of citations of the most cited paper.",
        "evidence": "",
        "gold": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `paper_id`, COUNT(*) AS num_citations FROM Citation GROUP BY `paper_id` ORDER BY num_citations DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `paper_id`, COUNT(*) AS num_citations FROM Citation GROUP BY `paper_id` ORDER BY num_citations DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 463,
        "db_id": "aan_1",
        "question": "Give the title of the paper which cites most number of papers?",
        "evidence": "",
        "gold": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT P1.`title` FROM Paper AS P1 JOIN Citation AS C ON P1.`paper_id` = C.`paper_id` GROUP BY P1.`title` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT P1.`title` FROM Paper AS P1 JOIN Citation AS C ON P1.`paper_id` = C.`paper_id` GROUP BY P1.`title` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 464,
        "db_id": "aan_1",
        "question": "What is the title of the paper which cites the most other papers?",
        "evidence": "",
        "gold": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT P1.`title` FROM Paper AS P1 JOIN Citation AS C ON P1.`paper_id` = C.`paper_id` GROUP BY P1.`paper_id` ORDER BY COUNT(C.`cited_paper_id`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT P1.`title` FROM Paper AS P1 JOIN Citation AS C ON P1.`paper_id` = C.`paper_id` GROUP BY P1.`paper_id` ORDER BY COUNT(C.`cited_paper_id`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 465,
        "db_id": "aan_1",
        "question": "List top 10 most cited papers and their numbers of citations.",
        "evidence": "",
        "gold": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 10",
        "pred": "SELECT P.title, COUNT(C.cited_paper_id) AS num_citations FROM Paper AS P JOIN Citation AS C ON P.paper_id = C.cited_paper_id GROUP BY P.paper_id ORDER BY num_citations DESC LIMIT 10",
        "pred_result": 0,
        "repair_sql": "SELECT P.title, COUNT(C.cited_paper_id) AS num_citations FROM Paper AS P JOIN Citation AS C ON P.paper_id = C.cited_paper_id GROUP BY P.paper_id ORDER BY num_citations DESC LIMIT 10",
        "repair_result": 0
    },
    {
        "idx": 466,
        "db_id": "aan_1",
        "question": "What are the 10 most cited papers, and how many citations did each have?",
        "evidence": "",
        "gold": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 10",
        "pred": "SELECT P.title, COUNT(C.cited_paper_id) AS num_citations FROM Paper AS P JOIN Citation AS C ON P.paper_id = C.cited_paper_id GROUP BY P.paper_id ORDER BY num_citations DESC LIMIT 10",
        "pred_result": 0,
        "repair_sql": "SELECT P.title, COUNT(C.cited_paper_id) AS num_citations FROM Paper AS P JOIN Citation AS C ON P.paper_id = C.cited_paper_id GROUP BY P.paper_id ORDER BY num_citations DESC LIMIT 10",
        "repair_result": 0
    },
    {
        "idx": 467,
        "db_id": "aan_1",
        "question": "How many citations does Mckeown , Kathleen have ?",
        "evidence": "",
        "gold": "select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
        "pred": "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = (SELECT paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown , Kathleen')",
        "pred_result": "ambiguous column name: paper_id",
        "repair_sql": "SELECT COUNT(*) FROM Citation WHERE cited_paper_id IN (SELECT Paper.paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown , Kathleen')",
        "repair_result": 1
    },
    {
        "idx": 468,
        "db_id": "aan_1",
        "question": "Count the number of citations Mckeown , Kathleen has .",
        "evidence": "",
        "gold": "select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
        "pred": "SELECT COUNT(*) FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Paper WHERE title LIKE '%Mckeown , Kathleen%')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Paper WHERE title LIKE '%Mckeown , Kathleen%')",
        "repair_result": 1
    },
    {
        "idx": 469,
        "db_id": "aan_1",
        "question": "How many papers does Mckeown , Kathleen cite ?",
        "evidence": "",
        "gold": "select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
        "pred": "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = (SELECT paper_id FROM Paper WHERE title = 'Mckeown , Kathleen')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = (SELECT paper_id FROM Paper WHERE title = 'Mckeown , Kathleen')",
        "repair_result": 1
    },
    {
        "idx": 470,
        "db_id": "aan_1",
        "question": "Count the number of papers Mckeown , Kathleen has cited .",
        "evidence": "",
        "gold": "select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
        "pred": "SELECT COUNT(*) FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Paper WHERE title = 'Mckeown , Kathleen')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Paper WHERE title = 'Mckeown , Kathleen')",
        "repair_result": 1
    },
    {
        "idx": 471,
        "db_id": "aan_1",
        "question": "Find the name and number of citations of the author who has most citations among all authors?",
        "evidence": "",
        "gold": "SELECT T3.name ,  count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT A.`name`, COUNT(C.`cited_paper_id`) AS num_citations FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` JOIN Citation C ON AL.`paper_id` = C.`cited_paper_id` GROUP BY A.`author_id` ORDER BY num_citations DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT A.`name`, COUNT(C.`cited_paper_id`) AS num_citations FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` JOIN Citation C ON AL.`paper_id` = C.`cited_paper_id` GROUP BY A.`author_id` ORDER BY num_citations DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 472,
        "db_id": "aan_1",
        "question": "What is the name and number of citations of the author with the greatest number of citations among authors?",
        "evidence": "",
        "gold": "SELECT T3.name ,  count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT A.`name`, COUNT(*) AS num_citations FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` JOIN Citation C ON AL.`paper_id` = C.`cited_paper_id` GROUP BY A.`author_id` ORDER BY num_citations DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT A.`name`, COUNT(*) AS num_citations FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` JOIN Citation C ON AL.`paper_id` = C.`cited_paper_id` GROUP BY A.`author_id` ORDER BY num_citations DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 473,
        "db_id": "aan_1",
        "question": "What are the venues and years where Mckeown , Kathleen had papers ?",
        "evidence": "",
        "gold": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
        "pred": "SELECT DISTINCT P.`venue`, P.`year` FROM Author_list AS AL JOIN Author AS A ON AL.`author_id` = A.`author_id` JOIN Paper AS P ON AL.`paper_id` = P.`paper_id` WHERE A.`name` = 'Mckeown , Kathleen'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT P.`venue`, P.`year` FROM Author_list AS AL JOIN Author AS A ON AL.`author_id` = A.`author_id` JOIN Paper AS P ON AL.`paper_id` = P.`paper_id` WHERE A.`name` = 'Mckeown , Kathleen'",
        "repair_result": 1
    },
    {
        "idx": 474,
        "db_id": "aan_1",
        "question": "Which venues and years did Mckeown , Kathleen have papers ?",
        "evidence": "",
        "gold": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
        "pred": "SELECT DISTINCT `venue`, `year` FROM Paper JOIN Author_list ON Paper.`paper_id` = Author_list.`paper_id` JOIN Author ON Author_list.`author_id` = Author.`author_id` WHERE Author.`name` = 'Mckeown , Kathleen'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `venue`, `year` FROM Paper JOIN Author_list ON Paper.`paper_id` = Author_list.`paper_id` JOIN Author ON Author_list.`author_id` = Author.`author_id` WHERE Author.`name` = 'Mckeown , Kathleen'",
        "repair_result": 1
    },
    {
        "idx": 475,
        "db_id": "aan_1",
        "question": "What are the venues and years where Columbia University had papers ?",
        "evidence": "",
        "gold": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = \"columbia university\"",
        "pred": "SELECT DISTINCT P.`venue`, P.`year` FROM Paper AS P JOIN Author_list AS AL ON P.`paper_id` = AL.`paper_id` JOIN Affiliation AS A ON AL.`affiliation_id` = A.`affiliation_id` WHERE A.`name` = 'Columbia University'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT P.`venue`, P.`year` FROM Paper AS P JOIN Author_list AS AL ON P.`paper_id` = AL.`paper_id` JOIN Affiliation AS A ON AL.`affiliation_id` = A.`affiliation_id` WHERE A.`name` = 'Columbia University'",
        "repair_result": 0
    },
    {
        "idx": 476,
        "db_id": "aan_1",
        "question": "Which venues and years did Columbia University have papers ?",
        "evidence": "",
        "gold": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = \"columbia university\"",
        "pred": "SELECT DISTINCT `venue`, `year` FROM Paper WHERE `paper_id` IN (SELECT `paper_id` FROM Author_list WHERE `affiliation_id` = (SELECT `affiliation_id` FROM Affiliation WHERE `name` = 'Columbia University'))",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT `venue`, `year` FROM Paper WHERE `paper_id` IN (SELECT `paper_id` FROM Author_list WHERE `affiliation_id` = (SELECT `affiliation_id` FROM Affiliation WHERE `name` = 'Columbia University'))",
        "repair_result": 0
    },
    {
        "idx": 477,
        "db_id": "aan_1",
        "question": "Which author had the most papers in the year 2009?",
        "evidence": "",
        "gold": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T1.year  =  2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT A.`name` FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` JOIN Paper P ON AL.`paper_id` = P.`paper_id` WHERE P.`year` = 2009 GROUP BY A.`name` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT A.`name` FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` JOIN Paper P ON AL.`paper_id` = P.`paper_id` WHERE P.`year` = 2009 GROUP BY A.`name` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 478,
        "db_id": "aan_1",
        "question": "What is the name of the author with the most papers in 2009?",
        "evidence": "",
        "gold": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T1.year  =  2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT A.`name` FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` JOIN Paper P ON AL.`paper_id` = P.`paper_id` WHERE P.`year` = 2009 GROUP BY A.`name` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT A.`name` FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` JOIN Paper P ON AL.`paper_id` = P.`paper_id` WHERE P.`year` = 2009 GROUP BY A.`name` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 479,
        "db_id": "aan_1",
        "question": "What are the names of the top 3 affiliations that have the most papers in year 2009?",
        "evidence": "",
        "gold": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  =  2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3",
        "pred": "SELECT A.`name`, COUNT(*) AS paper_count FROM Affiliation AS A JOIN Author_list AS AL ON A.`affiliation_id` = AL.`affiliation_id` JOIN Paper AS P ON AL.`paper_id` = P.`paper_id` WHERE P.`year` = '2009' GROUP BY A.`name` ORDER BY paper_count DESC LIMIT 3",
        "pred_result": 0,
        "repair_sql": "SELECT A.`name`, COUNT(*) AS paper_count FROM Affiliation AS A JOIN Author_list AS AL ON A.`affiliation_id` = AL.`affiliation_id` JOIN Paper AS P ON AL.`paper_id` = P.`paper_id` WHERE P.`year` = '2009' GROUP BY A.`name` ORDER BY paper_count DESC LIMIT 3",
        "repair_result": 0
    },
    {
        "idx": 480,
        "db_id": "aan_1",
        "question": "Which 3 affiliations had the most papers in 2009?",
        "evidence": "",
        "gold": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  =  2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3",
        "pred": "SELECT A.`name`, COUNT(*) AS paper_count FROM Affiliation A JOIN Author_list AL ON A.`affiliation_id` = AL.`affiliation_id` JOIN Paper P ON AL.`paper_id` = P.`paper_id` WHERE P.`year` = 2009 GROUP BY A.`name` ORDER BY paper_count DESC LIMIT 3",
        "pred_result": 0,
        "repair_sql": "SELECT A.`name`, COUNT(*) AS paper_count FROM Affiliation A JOIN Author_list AL ON A.`affiliation_id` = AL.`affiliation_id` JOIN Paper P ON AL.`paper_id` = P.`paper_id` WHERE P.`year` = 2009 GROUP BY A.`name` ORDER BY paper_count DESC LIMIT 3",
        "repair_result": 0
    },
    {
        "idx": 481,
        "db_id": "aan_1",
        "question": "How many papers does Columbia University have in or before 2009 ?",
        "evidence": "",
        "gold": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
        "pred": "SELECT COUNT(*) FROM Paper WHERE Paper.`paper_id` IN (SELECT Author_list.`paper_id` FROM Author_list WHERE Author_list.`affiliation_id` = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University')) AND year <= 2009",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Paper WHERE Paper.`paper_id` IN (SELECT Author_list.`paper_id` FROM Author_list WHERE Author_list.`affiliation_id` = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University')) AND year <= 2009",
        "repair_result": 0
    },
    {
        "idx": 482,
        "db_id": "aan_1",
        "question": "Count the number of papers Columbia University had during or prior to 2009 .",
        "evidence": "",
        "gold": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
        "pred": "SELECT COUNT(*) FROM Paper WHERE year <= 2009 AND paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Paper WHERE year <= 2009 AND paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))",
        "repair_result": 0
    },
    {
        "idx": 483,
        "db_id": "aan_1",
        "question": "How many papers does Stanford University have between 2000 and 2009?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE \"Stanford University\"",
        "pred": "SELECT COUNT(*) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009",
        "repair_result": 0
    },
    {
        "idx": 484,
        "db_id": "aan_1",
        "question": "Count the number of papers Stanford University had between 2000 and 2009.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE \"Stanford University\"",
        "pred": "SELECT COUNT(*) FROM Paper WHERE Paper.`venue` = 'Stanford University' AND Paper.`year` BETWEEN 2000 AND 2009",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Paper WHERE Paper.`venue` = 'Stanford University' AND Paper.`year` BETWEEN 2000 AND 2009",
        "repair_result": 0
    },
    {
        "idx": 485,
        "db_id": "aan_1",
        "question": "What is the title of the paper that has most number of authors?",
        "evidence": "",
        "gold": "SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `title` FROM Paper WHERE paper_id = ( SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT `title` FROM Paper WHERE paper_id = ( SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 486,
        "db_id": "aan_1",
        "question": "Give the title of the paper with the most authors.",
        "evidence": "",
        "gold": "SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `title` FROM Paper WHERE paper_id = (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1)",
        "pred_result": 1,
        "repair_sql": "SELECT `title` FROM Paper WHERE paper_id = (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1)",
        "repair_result": 1
    },
    {
        "idx": 487,
        "db_id": "aan_1",
        "question": "How many collaborators has Mckeown , Kathleen had ?",
        "evidence": "",
        "gold": "select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
        "pred": "SELECT COUNT(*) FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown , Kathleen')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown , Kathleen')",
        "repair_result": 1
    },
    {
        "idx": 488,
        "db_id": "aan_1",
        "question": "Count the number of collaborators that Mckeown , Kathleen has had .",
        "evidence": "",
        "gold": "select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
        "pred": "SELECT COUNT(*) FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown , Kathleen')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown , Kathleen')",
        "repair_result": 1
    },
    {
        "idx": 489,
        "db_id": "aan_1",
        "question": "Who has the most papers co-authored with Mckeown , Kathleen ?",
        "evidence": "",
        "gold": "select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = \"mckeown ,  kathleen\" group by t2.author_id order by count(*) desc limit 1",
        "pred": "SELECT A1.`name` FROM Author AS A1 JOIN Author_list AS AL1 ON A1.`author_id` = AL1.`author_id` JOIN Author_list AS AL2 ON AL1.`paper_id` = AL2.`paper_id` JOIN Author AS A2 ON AL2.`author_id` = A2.`author_id` WHERE A2.`name` = 'Mckeown , Kathleen' GROUP BY A1.`author_id` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT A1.`name` FROM Author AS A1 JOIN Author_list AS AL1 ON A1.`author_id` = AL1.`author_id` JOIN Author_list AS AL2 ON AL1.`paper_id` = AL2.`paper_id` JOIN Author AS A2 ON AL2.`author_id` = A2.`author_id` WHERE A2.`name` = 'Mckeown , Kathleen' GROUP BY A1.`author_id` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 490,
        "db_id": "aan_1",
        "question": "What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?",
        "evidence": "",
        "gold": "select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = \"mckeown ,  kathleen\" group by t2.author_id order by count(*) desc limit 1",
        "pred": "SELECT A2.`name` FROM Author AS A1 JOIN Author_list AS AL1 ON A1.`author_id` = AL1.`author_id` JOIN Author_list AS AL2 ON AL1.`paper_id` = AL2.`paper_id` JOIN Author AS A2 ON AL2.`author_id` = A2.`author_id` WHERE A1.`name` = 'Mckeown , Kathleen' GROUP BY A2.`name` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT A2.`name` FROM Author AS A1 JOIN Author_list AS AL1 ON A1.`author_id` = AL1.`author_id` JOIN Author_list AS AL2 ON AL1.`paper_id` = AL2.`paper_id` JOIN Author AS A2 ON AL2.`author_id` = A2.`author_id` WHERE A1.`name` = 'Mckeown , Kathleen' GROUP BY A2.`name` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 491,
        "db_id": "aan_1",
        "question": "Find the id of the papers whose title has the key word 'translation'.",
        "evidence": "",
        "gold": "SELECT paper_id FROM Paper WHERE title LIKE \"%translation%\"",
        "pred": "SELECT `paper_id` FROM Paper WHERE `title` LIKE '%translation%'",
        "pred_result": 1,
        "repair_sql": "SELECT `paper_id` FROM Paper WHERE `title` LIKE '%translation%'",
        "repair_result": 1
    },
    {
        "idx": 492,
        "db_id": "aan_1",
        "question": "What are the ids for papers with titles containing 'translation'?",
        "evidence": "",
        "gold": "SELECT paper_id FROM Paper WHERE title LIKE \"%translation%\"",
        "pred": "SELECT `paper_id` FROM Paper WHERE `title` LIKE '%translation%'",
        "pred_result": 1,
        "repair_sql": "SELECT `paper_id` FROM Paper WHERE `title` LIKE '%translation%'",
        "repair_result": 1
    },
    {
        "idx": 493,
        "db_id": "aan_1",
        "question": "Find the id and title of the papers that are never cited by others.",
        "evidence": "",
        "gold": "SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)",
        "pred": "SELECT P.`paper_id`, P.`title` FROM Paper AS P LEFT JOIN Citation AS C ON P.`paper_id` = C.`cited_paper_id` WHERE C.`cited_paper_id` IS NULL",
        "pred_result": 1,
        "repair_sql": "SELECT P.`paper_id`, P.`title` FROM Paper AS P LEFT JOIN Citation AS C ON P.`paper_id` = C.`cited_paper_id` WHERE C.`cited_paper_id` IS NULL",
        "repair_result": 1
    },
    {
        "idx": 494,
        "db_id": "aan_1",
        "question": "What are the ids and titles for papers that have never been cited?",
        "evidence": "",
        "gold": "SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)",
        "pred": "SELECT P.`paper_id`, P.`title` FROM Paper AS P LEFT JOIN Citation AS C ON P.`paper_id` = C.`cited_paper_id` WHERE C.`cited_paper_id` IS NULL",
        "pred_result": 1,
        "repair_sql": "SELECT P.`paper_id`, P.`title` FROM Paper AS P LEFT JOIN Citation AS C ON P.`paper_id` = C.`cited_paper_id` WHERE C.`cited_paper_id` IS NULL",
        "repair_result": 1
    },
    {
        "idx": 495,
        "db_id": "aan_1",
        "question": "Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.",
        "evidence": "",
        "gold": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE \"%China%\" GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT A.`name` FROM Affiliation A JOIN Author_list AL ON A.`affiliation_id` = AL.`affiliation_id` JOIN Paper P ON AL.`paper_id` = P.`paper_id` WHERE A.`address` LIKE '%China%' GROUP BY A.`name` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT A.`name` FROM Affiliation A JOIN Author_list AL ON A.`affiliation_id` = AL.`affiliation_id` JOIN Paper P ON AL.`paper_id` = P.`paper_id` WHERE A.`address` LIKE '%China%' GROUP BY A.`name` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 496,
        "db_id": "aan_1",
        "question": "What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.",
        "evidence": "",
        "gold": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE \"%China%\" GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT A.name FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE A.address LIKE '%China%' GROUP BY A.name ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT A.name FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE A.address LIKE '%China%' GROUP BY A.name ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 497,
        "db_id": "aan_1",
        "question": "Find the number of papers published in different conferences each year.",
        "evidence": "",
        "gold": "SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR",
        "pred": "SELECT year, venue, COUNT(*) FROM Paper GROUP BY year, venue",
        "pred_result": 0,
        "repair_sql": "SELECT year, venue, COUNT(*) FROM Paper GROUP BY year, venue",
        "repair_result": 0
    },
    {
        "idx": 498,
        "db_id": "aan_1",
        "question": "How many papers are published in each venue in each year?",
        "evidence": "",
        "gold": "SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR",
        "pred": "SELECT venue, year, COUNT(*) FROM Paper GROUP BY venue, year",
        "pred_result": 0,
        "repair_sql": "SELECT venue, year, COUNT(*) FROM Paper GROUP BY venue, year",
        "repair_result": 0
    },
    {
        "idx": 499,
        "db_id": "aan_1",
        "question": "Find the total number of papers for each affiliation.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id",
        "pred": "SELECT A.`name`, COUNT(*) AS total_papers FROM Affiliation A JOIN Author_list AL ON A.`affiliation_id` = AL.`affiliation_id` JOIN Paper P ON AL.`paper_id` = P.`paper_id` GROUP BY A.`name`",
        "pred_result": 0,
        "repair_sql": "SELECT A.`name`, COUNT(*) AS total_papers FROM Affiliation A JOIN Author_list AL ON A.`affiliation_id` = AL.`affiliation_id` JOIN Paper P ON AL.`paper_id` = P.`paper_id` GROUP BY A.`name`",
        "repair_result": 0
    },
    {
        "idx": 500,
        "db_id": "aan_1",
        "question": "How many papers has each affiliation published?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id",
        "pred": "SELECT A.`name`, COUNT(*) AS paper_count FROM Affiliation A JOIN Author_list AL ON A.`affiliation_id` = AL.`affiliation_id` JOIN Paper P ON AL.`paper_id` = P.`paper_id` GROUP BY A.`name`",
        "pred_result": 0,
        "repair_sql": "SELECT A.`name`, COUNT(*) AS paper_count FROM Affiliation A JOIN Author_list AL ON A.`affiliation_id` = AL.`affiliation_id` JOIN Paper P ON AL.`paper_id` = P.`paper_id` GROUP BY A.`name`",
        "repair_result": 0
    },
    {
        "idx": 501,
        "db_id": "aan_1",
        "question": "Find the titles of papers that have more than 50 citations.",
        "evidence": "",
        "gold": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50",
        "pred": "SELECT DISTINCT P.`title` FROM Paper AS P JOIN Citation AS C ON P.`paper_id` = C.`cited_paper_id` GROUP BY P.`paper_id` HAVING COUNT(*) > 50",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT P.`title` FROM Paper AS P JOIN Citation AS C ON P.`paper_id` = C.`cited_paper_id` GROUP BY P.`paper_id` HAVING COUNT(*) > 50",
        "repair_result": 1
    },
    {
        "idx": 502,
        "db_id": "aan_1",
        "question": "What are the titles for papers with more than 50 citations?",
        "evidence": "",
        "gold": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50",
        "pred": "SELECT DISTINCT P.`title` FROM Paper AS P JOIN Citation AS C ON P.`paper_id` = C.`cited_paper_id` GROUP BY P.`title` HAVING COUNT(C.`cited_paper_id`) > 50",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT P.`title` FROM Paper AS P JOIN Citation AS C ON P.`paper_id` = C.`cited_paper_id` GROUP BY P.`title` HAVING COUNT(C.`cited_paper_id`) > 50",
        "repair_result": 0
    },
    {
        "idx": 503,
        "db_id": "aan_1",
        "question": "Find the number of authors who did not publish any paper that is cited more than 50 times.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)",
        "pred": "SELECT COUNT(*) FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50))",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50))",
        "repair_result": 0
    },
    {
        "idx": 504,
        "db_id": "aan_1",
        "question": "How many authors have not published a paper with more than 50 citations?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)",
        "pred": "SELECT COUNT(*) FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY author_id HAVING COUNT(cited_paper_id) > 50)",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY author_id HAVING COUNT(cited_paper_id) > 50)",
        "repair_result": 0
    },
    {
        "idx": 505,
        "db_id": "aan_1",
        "question": "Find the names of authors who published some paper on NAACL and ACL in the year 2009.",
        "evidence": "",
        "gold": "SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"NAACL\" AND T2.year  =  2009)",
        "pred": "SELECT DISTINCT A.`name` FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` JOIN Paper P ON AL.`paper_id` = P.`paper_id` WHERE P.`venue` IN ('NAACL', 'ACL') AND P.`year` = 2009",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT A.`name` FROM Author A JOIN Author_list AL ON A.`author_id` = AL.`author_id` JOIN Paper P ON AL.`paper_id` = P.`paper_id` WHERE P.`venue` IN ('NAACL', 'ACL') AND P.`year` = 2009",
        "repair_result": 0
    },
    {
        "idx": 506,
        "db_id": "aan_1",
        "question": "What are the names of authors who published in both NAACL and ACL in 2009?",
        "evidence": "",
        "gold": "SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"NAACL\" AND T2.year  =  2009)",
        "pred": "SELECT DISTINCT A1.`name` FROM Author AS A1 JOIN Author_list AS AL1 ON A1.`author_id` = AL1.`author_id` JOIN Paper AS P1 ON AL1.`paper_id` = P1.`paper_id` WHERE P1.`venue` = 'NAACL' AND P1.`year` = 2009 AND A1.`name` IN ( SELECT A2.`name` FROM Author AS A2 JOIN Author_list AS AL2 ON A2.`author_id` = AL2.`author_id` JOIN Paper AS P2 ON AL2.`paper_id` = P2.`paper_id` WHERE P2.`venue` = 'ACL' AND P2.`year` = 2009 )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT A1.`name` FROM Author AS A1 JOIN Author_list AS AL1 ON A1.`author_id` = AL1.`author_id` JOIN Paper AS P1 ON AL1.`paper_id` = P1.`paper_id` WHERE P1.`venue` = 'NAACL' AND P1.`year` = 2009 AND A1.`name` IN ( SELECT A2.`name` FROM Author AS A2 JOIN Author_list AS AL2 ON A2.`author_id` = AL2.`author_id` JOIN Paper AS P2 ON AL2.`paper_id` = P2.`paper_id` WHERE P2.`venue` = 'ACL' AND P2.`year` = 2009 )",
        "repair_result": 1
    },
    {
        "idx": 507,
        "db_id": "aan_1",
        "question": "Find the name of authors who have never published a paper in ACL.",
        "evidence": "",
        "gold": "SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\")",
        "pred": "SELECT DISTINCT A.`name` FROM Author A WHERE A.`author_id` NOT IN (SELECT AL.`author_id` FROM Author_list AL JOIN Paper P ON AL.`paper_id` = P.`paper_id` WHERE P.`venue` = 'ACL')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT A.`name` FROM Author A WHERE A.`author_id` NOT IN (SELECT AL.`author_id` FROM Author_list AL JOIN Paper P ON AL.`paper_id` = P.`paper_id` WHERE P.`venue` = 'ACL')",
        "repair_result": 1
    },
    {
        "idx": 508,
        "db_id": "aan_1",
        "question": "What are the names of authors who have not published a paper in ACL?",
        "evidence": "",
        "gold": "SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\")",
        "pred": "SELECT DISTINCT A.`name` FROM Author A WHERE A.`author_id` NOT IN (SELECT AL.`author_id` FROM Author_list AL JOIN Paper P ON AL.`paper_id` = P.`paper_id` WHERE P.`venue` = 'ACL')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT A.`name` FROM Author A WHERE A.`author_id` NOT IN (SELECT AL.`author_id` FROM Author_list AL JOIN Paper P ON AL.`paper_id` = P.`paper_id` WHERE P.`venue` = 'ACL')",
        "repair_result": 1
    },
    {
        "idx": 509,
        "db_id": "car_road_race",
        "question": "How many races are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM race",
        "pred": "SELECT COUNT(*) FROM race",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM race",
        "repair_result": 1
    },
    {
        "idx": 510,
        "db_id": "car_road_race",
        "question": "Count the number of races.",
        "evidence": "",
        "gold": "SELECT count(*) FROM race",
        "pred": "SELECT COUNT(*) FROM race",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM race",
        "repair_result": 1
    },
    {
        "idx": 511,
        "db_id": "car_road_race",
        "question": "List the winning drivers and winning teams of races in ascending alphabetical order of winning team.",
        "evidence": "",
        "gold": "SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC",
        "pred": "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC",
        "pred_result": 1,
        "repair_sql": "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC",
        "repair_result": 1
    },
    {
        "idx": 512,
        "db_id": "car_road_race",
        "question": "What are the winning drivers and teams of races, ordered alphabetically by team?",
        "evidence": "",
        "gold": "SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC",
        "pred": "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC",
        "pred_result": 1,
        "repair_sql": "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC",
        "repair_result": 1
    },
    {
        "idx": 513,
        "db_id": "car_road_race",
        "question": "Which winning drivers of races had pole position that is not \"Junior Strous\"?",
        "evidence": "",
        "gold": "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'",
        "pred": "SELECT DISTINCT `Winning_driver` FROM race WHERE Pole_Position != 'Junior Strous'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Winning_driver` FROM race WHERE Pole_Position != 'Junior Strous'",
        "repair_result": 1
    },
    {
        "idx": 514,
        "db_id": "car_road_race",
        "question": "Return the winning drivers of races who did not have the pole position of Junior Strous.",
        "evidence": "",
        "gold": "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'",
        "pred": "SELECT DISTINCT `Winning_driver` FROM race WHERE `Winning_driver` NOT IN (SELECT `Winning_driver` FROM race WHERE `Winning_driver` = 'Junior Strous' AND `Fastest_Lap` = 'Junior Strous')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Winning_driver` FROM race WHERE `Winning_driver` NOT IN (SELECT `Winning_driver` FROM race WHERE `Winning_driver` = 'Junior Strous' AND `Fastest_Lap` = 'Junior Strous')",
        "repair_result": 1
    },
    {
        "idx": 515,
        "db_id": "car_road_race",
        "question": "Who are the constructors of drivers sorted by drivers' age in ascending order?",
        "evidence": "",
        "gold": "SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC",
        "pred": "SELECT DISTINCT T1.`Constructor` FROM driver AS T1 JOIN race AS T2 ON T1.`Driver_ID` = T2.`Driver_ID` ORDER BY T1.`Age` ASC",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`Constructor` FROM driver AS T1 JOIN race AS T2 ON T1.`Driver_ID` = T2.`Driver_ID` ORDER BY T1.`Age` ASC",
        "repair_result": 0
    },
    {
        "idx": 516,
        "db_id": "car_road_race",
        "question": "Return the different constructors of drivers, ordered by age ascending.",
        "evidence": "",
        "gold": "SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC",
        "pred": "SELECT DISTINCT `Constructor` FROM driver ORDER BY `Age` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Constructor` FROM driver ORDER BY `Age` ASC",
        "repair_result": 1
    },
    {
        "idx": 517,
        "db_id": "car_road_race",
        "question": "What are the distinct entrant types of drivers aged 20 or older?",
        "evidence": "",
        "gold": "SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20",
        "pred": "SELECT DISTINCT `Entrant` FROM driver WHERE Age >= 20",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Entrant` FROM driver WHERE Age >= 20",
        "repair_result": 1
    },
    {
        "idx": 518,
        "db_id": "car_road_race",
        "question": "Give the different entrant types for drivers at least 20 years old.",
        "evidence": "",
        "gold": "SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20",
        "pred": "SELECT DISTINCT `Entrant` FROM driver WHERE Age >= 20",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Entrant` FROM driver WHERE Age >= 20",
        "repair_result": 1
    },
    {
        "idx": 519,
        "db_id": "car_road_race",
        "question": "What are the maximum and minimum age of driver?",
        "evidence": "",
        "gold": "SELECT max(Age) ,  min(Age) FROM driver",
        "pred": "SELECT MAX(Age) AS Maximum_Age, MIN(Age) AS Minimum_Age FROM driver",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(Age) AS Maximum_Age, MIN(Age) AS Minimum_Age FROM driver",
        "repair_result": 1
    },
    {
        "idx": 520,
        "db_id": "car_road_race",
        "question": "Return the maximum and minimum age across drivers.",
        "evidence": "",
        "gold": "SELECT max(Age) ,  min(Age) FROM driver",
        "pred": "SELECT MAX(Age) AS Max_Age, MIN(Age) AS Min_Age FROM driver",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(Age) AS Max_Age, MIN(Age) AS Min_Age FROM driver",
        "repair_result": 1
    },
    {
        "idx": 521,
        "db_id": "car_road_race",
        "question": "How many different engines are used by drivers with age older than 30 or younger than 20?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20",
        "pred": "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20",
        "repair_result": 1
    },
    {
        "idx": 522,
        "db_id": "car_road_race",
        "question": "Count the number of different engines used by drivers who had an age either over 30 or under 20.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20",
        "pred": "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20",
        "repair_result": 1
    },
    {
        "idx": 523,
        "db_id": "car_road_race",
        "question": "List all names of drivers in descending alphabetical order.",
        "evidence": "",
        "gold": "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC",
        "pred": "SELECT `Driver_Name` FROM driver ORDER BY `Driver_Name` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Driver_Name` FROM driver ORDER BY `Driver_Name` DESC",
        "repair_result": 1
    },
    {
        "idx": 524,
        "db_id": "car_road_race",
        "question": "What are the names of drivers, ordered descending alphabetically?",
        "evidence": "",
        "gold": "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC",
        "pred": "SELECT `Driver_Name` FROM driver ORDER BY `Driver_Name` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Driver_Name` FROM driver ORDER BY `Driver_Name` DESC",
        "repair_result": 1
    },
    {
        "idx": 525,
        "db_id": "car_road_race",
        "question": "Please show the names of drivers and the names of races they participate in.",
        "evidence": "",
        "gold": "SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID",
        "pred": "SELECT D.`Driver_Name`, R.`Race_Name` FROM driver AS D JOIN race AS R ON D.`Driver_ID` = R.`Driver_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT D.`Driver_Name`, R.`Race_Name` FROM driver AS D JOIN race AS R ON D.`Driver_ID` = R.`Driver_ID`",
        "repair_result": 1
    },
    {
        "idx": 526,
        "db_id": "car_road_race",
        "question": "What are the names of drivers and the names of the races they took part in?",
        "evidence": "",
        "gold": "SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID",
        "pred": "SELECT D.`Driver_Name`, R.`Race_Name` FROM driver AS D JOIN race AS R ON D.`Driver_ID` = R.`Driver_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT D.`Driver_Name`, R.`Race_Name` FROM driver AS D JOIN race AS R ON D.`Driver_ID` = R.`Driver_ID`",
        "repair_result": 1
    },
    {
        "idx": 527,
        "db_id": "car_road_race",
        "question": "Please show the names of drivers and the number of races they participate in.",
        "evidence": "",
        "gold": "SELECT T1.Driver_Name ,  COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID",
        "pred": "SELECT T1.`Driver_Name`, COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.`Driver_ID` = T2.`Driver_ID` GROUP BY T1.`Driver_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Driver_Name`, COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.`Driver_ID` = T2.`Driver_ID` GROUP BY T1.`Driver_ID`",
        "repair_result": 1
    },
    {
        "idx": 528,
        "db_id": "car_road_race",
        "question": "How many races did each driver participate in?",
        "evidence": "",
        "gold": "SELECT T1.Driver_Name ,  COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID",
        "pred": "SELECT T1.`Driver_Name`, COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.`Driver_ID` = T2.`Driver_ID` GROUP BY T1.`Driver_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Driver_Name`, COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.`Driver_ID` = T2.`Driver_ID` GROUP BY T1.`Driver_ID`",
        "repair_result": 1
    },
    {
        "idx": 529,
        "db_id": "car_road_race",
        "question": "Please show the age of the driver who participated in the most number of races.",
        "evidence": "",
        "gold": "SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT Age FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "pred_result": 1,
        "repair_sql": "SELECT Age FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "repair_result": 1
    },
    {
        "idx": 530,
        "db_id": "car_road_race",
        "question": "What is the age of the driver who raced in the most races?",
        "evidence": "",
        "gold": "SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT Age FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "pred_result": 1,
        "repair_sql": "SELECT Age FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "repair_result": 1
    },
    {
        "idx": 531,
        "db_id": "car_road_race",
        "question": "Please show the names and ages of the drivers who participated in at least two races.",
        "evidence": "",
        "gold": "SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2",
        "pred": "SELECT `Driver_Name`, `Age` FROM driver WHERE `Driver_ID` IN ( SELECT `Driver_ID` FROM race GROUP BY `Driver_ID` HAVING COUNT(*) >= 2 )",
        "pred_result": 1,
        "repair_sql": "SELECT `Driver_Name`, `Age` FROM driver WHERE `Driver_ID` IN ( SELECT `Driver_ID` FROM race GROUP BY `Driver_ID` HAVING COUNT(*) >= 2 )",
        "repair_result": 1
    },
    {
        "idx": 532,
        "db_id": "car_road_race",
        "question": "What are the names and ages of drivers who raced in two or more races?",
        "evidence": "",
        "gold": "SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2",
        "pred": "SELECT `Driver_Name`, `Age` FROM driver WHERE `Driver_ID` IN ( SELECT `Driver_ID` FROM race GROUP BY `Driver_ID` HAVING COUNT(*) >= 2 )",
        "pred_result": 1,
        "repair_sql": "SELECT `Driver_Name`, `Age` FROM driver WHERE `Driver_ID` IN ( SELECT `Driver_ID` FROM race GROUP BY `Driver_ID` HAVING COUNT(*) >= 2 )",
        "repair_result": 1
    },
    {
        "idx": 533,
        "db_id": "car_road_race",
        "question": "Please list the names of races with drivers aged 26 or older participating.",
        "evidence": "",
        "gold": "SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26",
        "pred": "SELECT DISTINCT `Race_Name` FROM race JOIN driver ON race.`Driver_ID` = driver.`Driver_ID` WHERE driver.`Age` >= 26",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Race_Name` FROM race JOIN driver ON race.`Driver_ID` = driver.`Driver_ID` WHERE driver.`Age` >= 26",
        "repair_result": 1
    },
    {
        "idx": 534,
        "db_id": "car_road_race",
        "question": "What are the names of races in which drivers 26 or older took part?",
        "evidence": "",
        "gold": "SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26",
        "pred": "SELECT DISTINCT `Race_Name` FROM race WHERE `Driver_ID` IN (SELECT `Driver_ID` FROM driver WHERE `Age` >= 26)",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Race_Name` FROM race WHERE `Driver_ID` IN (SELECT `Driver_ID` FROM driver WHERE `Age` >= 26)",
        "repair_result": 1
    },
    {
        "idx": 535,
        "db_id": "car_road_race",
        "question": "List the names of drivers whose constructor is not \"Bugatti\".",
        "evidence": "",
        "gold": "SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != \"Bugatti\"",
        "pred": "SELECT `Driver_Name` FROM driver WHERE Constructor != 'Bugatti'",
        "pred_result": 1,
        "repair_sql": "SELECT `Driver_Name` FROM driver WHERE Constructor != 'Bugatti'",
        "repair_result": 1
    },
    {
        "idx": 536,
        "db_id": "car_road_race",
        "question": "What are the names od drivers who did not have the constructor Bugatti?",
        "evidence": "",
        "gold": "SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != \"Bugatti\"",
        "pred": "SELECT `Driver_Name` FROM driver WHERE Constructor != 'Bugatti'",
        "pred_result": 1,
        "repair_sql": "SELECT `Driver_Name` FROM driver WHERE Constructor != 'Bugatti'",
        "repair_result": 1
    },
    {
        "idx": 537,
        "db_id": "car_road_race",
        "question": "List different constructors and the number of drivers that use each constructor.",
        "evidence": "",
        "gold": "SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR",
        "pred": "SELECT `Constructor`, COUNT(DISTINCT `Driver_ID`) FROM driver GROUP BY `Constructor`",
        "pred_result": 1,
        "repair_sql": "SELECT `Constructor`, COUNT(DISTINCT `Driver_ID`) FROM driver GROUP BY `Constructor`",
        "repair_result": 1
    },
    {
        "idx": 538,
        "db_id": "car_road_race",
        "question": "How many drivers use each constructor?",
        "evidence": "",
        "gold": "SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR",
        "pred": "SELECT Constructor, COUNT(DISTINCT Driver_ID) FROM driver GROUP BY Constructor",
        "pred_result": 1,
        "repair_sql": "SELECT Constructor, COUNT(DISTINCT Driver_ID) FROM driver GROUP BY Constructor",
        "repair_result": 1
    },
    {
        "idx": 539,
        "db_id": "car_road_race",
        "question": "List the most common type of engine used by drivers.",
        "evidence": "",
        "gold": "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT `Engine`, COUNT(*) FROM driver GROUP BY `Engine` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Engine`, COUNT(*) FROM driver GROUP BY `Engine` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 540,
        "db_id": "car_road_race",
        "question": "What is the most common type of engine?",
        "evidence": "",
        "gold": "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT `Engine`, COUNT(*) FROM driver GROUP BY `Engine` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Engine`, COUNT(*) FROM driver GROUP BY `Engine` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 541,
        "db_id": "car_road_race",
        "question": "List the types of engines that are used by at least two drivers.",
        "evidence": "",
        "gold": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
        "pred": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) >= 2",
        "repair_result": 1
    },
    {
        "idx": 542,
        "db_id": "car_road_race",
        "question": "What are the engine types that are used by two or more drivers?",
        "evidence": "",
        "gold": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
        "pred": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) >= 2",
        "repair_result": 1
    },
    {
        "idx": 543,
        "db_id": "car_road_race",
        "question": "List the names of drivers that do not participate in any race.",
        "evidence": "",
        "gold": "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)",
        "pred": "SELECT `Driver_Name` FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM race)",
        "pred_result": 1,
        "repair_sql": "SELECT `Driver_Name` FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM race)",
        "repair_result": 1
    },
    {
        "idx": 544,
        "db_id": "car_road_race",
        "question": "What are names of drivers who did not take part in a race?",
        "evidence": "",
        "gold": "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)",
        "pred": "SELECT `Driver_Name` FROM driver WHERE `Driver_ID` NOT IN (SELECT DISTINCT `Driver_ID` FROM race)",
        "pred_result": 1,
        "repair_sql": "SELECT `Driver_Name` FROM driver WHERE `Driver_ID` NOT IN (SELECT DISTINCT `Driver_ID` FROM race)",
        "repair_result": 1
    },
    {
        "idx": 545,
        "db_id": "car_road_race",
        "question": "Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.",
        "evidence": "",
        "gold": "SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30",
        "pred": "SELECT DISTINCT `Constructor` FROM driver WHERE `Age` < 20 AND `Constructor` IN (SELECT `Constructor` FROM driver WHERE `Age` > 30)",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Constructor` FROM driver WHERE `Age` < 20 AND `Constructor` IN (SELECT `Constructor` FROM driver WHERE `Age` > 30)",
        "repair_result": 1
    },
    {
        "idx": 546,
        "db_id": "car_road_race",
        "question": "What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?",
        "evidence": "",
        "gold": "SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30",
        "pred": "SELECT DISTINCT T1.`Constructor` FROM driver AS T1 JOIN driver AS T2 ON T1.`Constructor` = T2.`Constructor` WHERE (T1.`Age` < 20 AND T2.`Age` > 30)",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`Constructor` FROM driver AS T1 JOIN driver AS T2 ON T1.`Constructor` = T2.`Constructor` WHERE (T1.`Age` < 20 AND T2.`Age` > 30)",
        "repair_result": 1
    },
    {
        "idx": 547,
        "db_id": "car_road_race",
        "question": "Find the teams that won more than once.",
        "evidence": "",
        "gold": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1",
        "pred": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(Winning_team) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(Winning_team) > 1",
        "repair_result": 1
    },
    {
        "idx": 548,
        "db_id": "car_road_race",
        "question": "Which teams won more than 1 race?",
        "evidence": "",
        "gold": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1",
        "pred": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(*) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(*) > 1",
        "repair_result": 1
    },
    {
        "idx": 549,
        "db_id": "car_road_race",
        "question": "Find the names of drivers who were in both \"James Hinchcliffe\" and \"Carl Skerlong\" pole positions before.",
        "evidence": "",
        "gold": "SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"Carl Skerlong\" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
        "pred": "SELECT DISTINCT D.`Driver_Name` FROM driver AS D JOIN race AS R ON D.`Driver_ID` = R.`Driver_ID` WHERE R.`Pole_Position` IN ('James Hinchcliffe', 'Carl Skerlong') GROUP BY D.`Driver_ID` HAVING COUNT(DISTINCT R.`Pole_Position`) = 2",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT D.`Driver_Name` FROM driver AS D JOIN race AS R ON D.`Driver_ID` = R.`Driver_ID` WHERE R.`Pole_Position` IN ('James Hinchcliffe', 'Carl Skerlong') GROUP BY D.`Driver_ID` HAVING COUNT(DISTINCT R.`Pole_Position`) = 2",
        "repair_result": 1
    },
    {
        "idx": 550,
        "db_id": "car_road_race",
        "question": "What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?",
        "evidence": "",
        "gold": "SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"Carl Skerlong\" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
        "pred": "SELECT DISTINCT D1.`Driver_Name` FROM driver AS D1 JOIN race AS R ON D1.`Driver_ID` = R.`Driver_ID` WHERE R.`Pole_Position` = 'James Hinchcliffe' AND EXISTS ( SELECT 1 FROM race AS R2 WHERE R2.`Driver_ID` = D1.`Driver_ID` AND R2.`Pole_Position` = 'Carl Skerlong' )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT D1.`Driver_Name` FROM driver AS D1 JOIN race AS R ON D1.`Driver_ID` = R.`Driver_ID` WHERE R.`Pole_Position` = 'James Hinchcliffe' AND EXISTS ( SELECT 1 FROM race AS R2 WHERE R2.`Driver_ID` = D1.`Driver_ID` AND R2.`Pole_Position` = 'Carl Skerlong' )",
        "repair_result": 1
    },
    {
        "idx": 551,
        "db_id": "car_road_race",
        "question": "find the name of drivers who were never in \"James Hinchcliffe\" pole position before.",
        "evidence": "",
        "gold": "SELECT Driver_Name FROM driver EXCEPT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
        "pred": "SELECT DISTINCT D.`Driver_Name` FROM driver AS D WHERE D.`Driver_ID` NOT IN ( SELECT R.`Driver_ID` FROM race AS R WHERE R.`Pole_Position` = 'James Hinchcliffe' )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT D.`Driver_Name` FROM driver AS D WHERE D.`Driver_ID` NOT IN ( SELECT R.`Driver_ID` FROM race AS R WHERE R.`Pole_Position` = 'James Hinchcliffe' )",
        "repair_result": 1
    },
    {
        "idx": 552,
        "db_id": "car_road_race",
        "question": "What are the names of drivers except for those who had the pole position James Hinchcliffe?",
        "evidence": "",
        "gold": "SELECT Driver_Name FROM driver EXCEPT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
        "pred": "SELECT `Driver_Name` FROM driver WHERE `Driver_Name` != 'James Hinchcliffe'",
        "pred_result": 0,
        "repair_sql": "SELECT `Driver_Name` FROM driver WHERE `Driver_Name` != 'James Hinchcliffe'",
        "repair_result": 0
    },
    {
        "idx": 553,
        "db_id": "bike_racing",
        "question": "How many bikes are heavier than 780 grams?",
        "evidence": "",
        "gold": "SELECT count(*) FROM bike WHERE weight  >  780",
        "pred": "SELECT COUNT(*) FROM bike WHERE weight > 780",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM bike WHERE weight > 780",
        "repair_result": 1
    },
    {
        "idx": 554,
        "db_id": "bike_racing",
        "question": "List the product names and weights of the bikes in ascending order of price.",
        "evidence": "",
        "gold": "SELECT product_name ,  weight FROM bike ORDER BY price ASC",
        "pred": "SELECT `product_name`, `weight` FROM bike ORDER BY `price` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `product_name`, `weight` FROM bike ORDER BY `price` ASC",
        "repair_result": 1
    },
    {
        "idx": 555,
        "db_id": "bike_racing",
        "question": "List the heat, name, and nation for all the cyclists.",
        "evidence": "",
        "gold": "SELECT heat ,  name ,  nation FROM cyclist",
        "pred": "SELECT `heat`, `name`, `nation` FROM cyclist",
        "pred_result": 1,
        "repair_sql": "SELECT `heat`, `name`, `nation` FROM cyclist",
        "repair_result": 1
    },
    {
        "idx": 556,
        "db_id": "bike_racing",
        "question": "What are the maximum and minimum weight of all bikes?",
        "evidence": "",
        "gold": "SELECT max(weight) ,  min(weight) FROM bike",
        "pred": "SELECT MAX(weight) AS max_weight, MIN(weight) AS min_weight FROM bike",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(weight) AS max_weight, MIN(weight) AS min_weight FROM bike",
        "repair_result": 1
    },
    {
        "idx": 557,
        "db_id": "bike_racing",
        "question": "What is the average price of the bikes made of material 'Carbon CC'?",
        "evidence": "",
        "gold": "SELECT avg(price) FROM bike WHERE material  =  'Carbon CC'",
        "pred": "SELECT AVG(price) FROM bike WHERE material = 'Carbon CC'",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(price) FROM bike WHERE material = 'Carbon CC'",
        "repair_result": 1
    },
    {
        "idx": 558,
        "db_id": "bike_racing",
        "question": "What are the name and result of the cyclists not from 'Russia' ?",
        "evidence": "",
        "gold": "SELECT name ,  RESULT FROM cyclist WHERE nation != 'Russia'",
        "pred": "SELECT `name`, `result` FROM cyclist WHERE nation != 'Russia'",
        "pred_result": 1,
        "repair_sql": "SELECT `name`, `result` FROM cyclist WHERE nation != 'Russia'",
        "repair_result": 1
    },
    {
        "idx": 559,
        "db_id": "bike_racing",
        "question": "What are the distinct ids and product names of the bikes that are purchased after year 2015?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id WHERE T2.purchase_year  >  2015",
        "pred": "SELECT DISTINCT `id`, `product_name` FROM bike JOIN cyclists_own_bikes ON bike.`id` = cyclists_own_bikes.`bike_id` WHERE purchase_year > 2015",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `id`, `product_name` FROM bike JOIN cyclists_own_bikes ON bike.`id` = cyclists_own_bikes.`bike_id` WHERE purchase_year > 2015",
        "repair_result": 1
    },
    {
        "idx": 560,
        "db_id": "bike_racing",
        "question": "What are the ids and names of racing bikes that are purchased by at least 4 cyclists?",
        "evidence": "",
        "gold": "SELECT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id GROUP BY T1.id HAVING count(*)  >=  4",
        "pred": "SELECT T1.`id`, T1.`product_name` FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.`id` = T2.`bike_id` GROUP BY T1.`id`, T1.`product_name` HAVING COUNT(T2.`cyclist_id`) >= 4",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`id`, T1.`product_name` FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.`id` = T2.`bike_id` GROUP BY T1.`id`, T1.`product_name` HAVING COUNT(T2.`cyclist_id`) >= 4",
        "repair_result": 1
    },
    {
        "idx": 561,
        "db_id": "bike_racing",
        "question": "What are the id and name of the cyclist who owns the most bikes?",
        "evidence": "",
        "gold": "SELECT T1.id ,  T1.name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T2.`id`, T2.`name` FROM cyclists_own_bikes AS T1 JOIN cyclist AS T2 ON T1.`cyclist_id` = T2.`id` GROUP BY T1.`cyclist_id` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`id`, T2.`name` FROM cyclists_own_bikes AS T1 JOIN cyclist AS T2 ON T1.`cyclist_id` = T2.`id` GROUP BY T1.`cyclist_id` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 562,
        "db_id": "bike_racing",
        "question": "What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?",
        "evidence": "",
        "gold": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Russia' OR T1.nation  =  'Great Britain'",
        "pred": "SELECT DISTINCT T1.`product_name` FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.`id` = T2.`bike_id` JOIN cyclist AS T3 ON T2.`cyclist_id` = T3.`id` WHERE T3.`nation` = 'Russia' OR T3.`nation` = 'Great Britain'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`product_name` FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.`id` = T2.`bike_id` JOIN cyclist AS T3 ON T2.`cyclist_id` = T3.`id` WHERE T3.`nation` = 'Russia' OR T3.`nation` = 'Great Britain'",
        "repair_result": 1
    },
    {
        "idx": 563,
        "db_id": "bike_racing",
        "question": "How many different levels of heat are there for the cyclists?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT heat) FROM cyclist",
        "pred": "SELECT COUNT(DISTINCT heat) FROM cyclist",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT heat) FROM cyclist",
        "repair_result": 1
    },
    {
        "idx": 564,
        "db_id": "bike_racing",
        "question": "How many cyclists did not purchase any bike after year 2015?",
        "evidence": "",
        "gold": "SELECT count(*) FROM cyclist WHERE id NOT IN ( SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year  >  2015 )",
        "pred": "SELECT COUNT(*) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015)",
        "repair_result": 1
    },
    {
        "idx": 565,
        "db_id": "bike_racing",
        "question": "What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558' ?",
        "evidence": "",
        "gold": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.result  <  '4:21.558'",
        "pred": "SELECT DISTINCT T1.`product_name` FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.`id` = T2.`bike_id` JOIN cyclist AS T3 ON T2.`cyclist_id` = T3.`id` WHERE T3.`result` < '4:21.558'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`product_name` FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.`id` = T2.`bike_id` JOIN cyclist AS T3 ON T2.`cyclist_id` = T3.`id` WHERE T3.`result` < '4:21.558'",
        "repair_result": 1
    },
    {
        "idx": 566,
        "db_id": "bike_racing",
        "question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.",
        "evidence": "",
        "gold": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'",
        "pred": "SELECT T1.`product_name`, T1.`price` FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.`id` = T2.`bike_id` JOIN cyclist AS T3 ON T2.`cyclist_id` = T3.`id` WHERE T3.`name` IN ('Bradley Wiggins', 'Antonio Tauler') GROUP BY T1.`id` HAVING COUNT(DISTINCT T3.`name`) = 2",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`product_name`, T1.`price` FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.`id` = T2.`bike_id` JOIN cyclist AS T3 ON T2.`cyclist_id` = T3.`id` WHERE T3.`name` IN ('Bradley Wiggins', 'Antonio Tauler') GROUP BY T1.`id` HAVING COUNT(DISTINCT T3.`name`) = 2",
        "repair_result": 1
    },
    {
        "idx": 567,
        "db_id": "bike_racing",
        "question": "Show the name, nation and result for the cyclists who did not purchase any racing bike.",
        "evidence": "",
        "gold": "SELECT name ,  nation ,  RESULT FROM cyclist EXCEPT SELECT T1.name ,  T1.nation ,  T1.result FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id",
        "pred": "SELECT `name`, `nation`, `result` FROM cyclist WHERE `id` NOT IN (SELECT DISTINCT `cyclist_id` FROM cyclists_own_bikes)",
        "pred_result": 1,
        "repair_sql": "SELECT `name`, `nation`, `result` FROM cyclist WHERE `id` NOT IN (SELECT DISTINCT `cyclist_id` FROM cyclists_own_bikes)",
        "repair_result": 1
    },
    {
        "idx": 568,
        "db_id": "bike_racing",
        "question": "What are the names of the bikes that have substring 'fiber' in their material?",
        "evidence": "",
        "gold": "SELECT product_name FROM bike WHERE material LIKE \"%fiber%\"",
        "pred": "SELECT `product_name` FROM bike WHERE `material` LIKE '%fiber%'",
        "pred_result": 1,
        "repair_sql": "SELECT `product_name` FROM bike WHERE `material` LIKE '%fiber%'",
        "repair_result": 1
    },
    {
        "idx": 569,
        "db_id": "bike_racing",
        "question": "How many bikes does each cyclist own? Order by cyclist id.",
        "evidence": "",
        "gold": "SELECT cyclist_id ,  count(*) FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id",
        "pred": "SELECT `cyclist_id`, COUNT(`bike_id`) AS num_bikes_owned FROM cyclists_own_bikes GROUP BY `cyclist_id` ORDER BY `cyclist_id`",
        "pred_result": 1,
        "repair_sql": "SELECT `cyclist_id`, COUNT(`bike_id`) AS num_bikes_owned FROM cyclists_own_bikes GROUP BY `cyclist_id` ORDER BY `cyclist_id`",
        "repair_result": 1
    },
    {
        "idx": 570,
        "db_id": "bakery_1",
        "question": "What is the most expensive cake and its flavor?",
        "evidence": "",
        "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY price DESC LIMIT 1",
        "pred": "SELECT g.Flavor, g.Price FROM goods AS g JOIN items AS i ON g.Id = i.Item WHERE g.Food = 'Cake' ORDER BY g.Price DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT g.Flavor, g.Price FROM goods AS g JOIN items AS i ON g.Id = i.Item WHERE g.Food = 'Cake' ORDER BY g.Price DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 571,
        "db_id": "bakery_1",
        "question": "Give the id and flavor of the most expensive cake.",
        "evidence": "",
        "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY price DESC LIMIT 1",
        "pred": "SELECT goods.`Id`, goods.`Flavor` FROM goods WHERE goods.`Food` = 'Cake' ORDER BY goods.`Price` DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT goods.`Id`, goods.`Flavor` FROM goods WHERE goods.`Food` = 'Cake' ORDER BY goods.`Price` DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 572,
        "db_id": "bakery_1",
        "question": "What is the cheapest cookie and its flavor?",
        "evidence": "",
        "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1",
        "pred": "SELECT g.Flavor, g.Price FROM goods AS g JOIN items AS i ON g.Id = i.Item WHERE g.Food = 'Cookie' ORDER BY g.Price LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT g.Flavor, g.Price FROM goods AS g JOIN items AS i ON g.Id = i.Item WHERE g.Food = 'Cookie' ORDER BY g.Price LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 573,
        "db_id": "bakery_1",
        "question": "What is the id and flavor of the cheapest cookie?",
        "evidence": "",
        "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1",
        "pred": "SELECT goods.`Id`, goods.`Flavor` FROM goods JOIN items ON goods.`Id` = items.`Item` WHERE goods.`Food` = 'Cookie' ORDER BY goods.`Price` ASC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT goods.`Id`, goods.`Flavor` FROM goods JOIN items ON goods.`Id` = items.`Item` WHERE goods.`Food` = 'Cookie' ORDER BY goods.`Price` ASC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 574,
        "db_id": "bakery_1",
        "question": "Find the ids of goods that have apple flavor.",
        "evidence": "",
        "gold": "SELECT id FROM goods WHERE flavor  =  \"Apple\"",
        "pred": "SELECT Id FROM goods WHERE Flavor = 'Apple'",
        "pred_result": 1,
        "repair_sql": "SELECT Id FROM goods WHERE Flavor = 'Apple'",
        "repair_result": 1
    },
    {
        "idx": 575,
        "db_id": "bakery_1",
        "question": "What are the ids with apple flavor?",
        "evidence": "",
        "gold": "SELECT id FROM goods WHERE flavor  =  \"Apple\"",
        "pred": "SELECT goods.`Id` FROM goods WHERE Flavor = 'Apple'",
        "pred_result": 1,
        "repair_sql": "SELECT goods.`Id` FROM goods WHERE Flavor = 'Apple'",
        "repair_result": 1
    },
    {
        "idx": 576,
        "db_id": "bakery_1",
        "question": "What are the ids of goods that cost less than 3 dollars?",
        "evidence": "",
        "gold": "SELECT id FROM goods WHERE price  <  3",
        "pred": "SELECT Id FROM goods WHERE Price < 3",
        "pred_result": 1,
        "repair_sql": "SELECT Id FROM goods WHERE Price < 3",
        "repair_result": 1
    },
    {
        "idx": 577,
        "db_id": "bakery_1",
        "question": "Give the ids of goods that cost less than 3 dollars.",
        "evidence": "",
        "gold": "SELECT id FROM goods WHERE price  <  3",
        "pred": "SELECT `Id` FROM goods WHERE Price < 3",
        "pred_result": 1,
        "repair_sql": "SELECT `Id` FROM goods WHERE Price < 3",
        "repair_result": 1
    },
    {
        "idx": 578,
        "db_id": "bakery_1",
        "question": "List the distinct ids of all customers who bought a cake with lemon flavor?",
        "evidence": "",
        "gold": "SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  \"Lemon\" AND T1.Food  =  \"Cake\"",
        "pred": "SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'Lemon' AND g.Food = 'Cake'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'Lemon' AND g.Food = 'Cake'",
        "repair_result": 1
    },
    {
        "idx": 579,
        "db_id": "bakery_1",
        "question": "What are the distinct ids of customers who bought lemon flavored cake?",
        "evidence": "",
        "gold": "SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  \"Lemon\" AND T1.Food  =  \"Cake\"",
        "pred": "SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'Lemon' AND g.Food = 'Cake'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'Lemon' AND g.Food = 'Cake'",
        "repair_result": 1
    },
    {
        "idx": 580,
        "db_id": "bakery_1",
        "question": "For each type of food, tell me how many customers have ever bought it.",
        "evidence": "",
        "gold": "SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food",
        "pred": "SELECT g.Food, COUNT(DISTINCT r.CustomerId) AS Num_Customers FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food",
        "pred_result": 1,
        "repair_sql": "SELECT g.Food, COUNT(DISTINCT r.CustomerId) AS Num_Customers FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food",
        "repair_result": 1
    },
    {
        "idx": 581,
        "db_id": "bakery_1",
        "question": "How many customers have bought each food?",
        "evidence": "",
        "gold": "SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food",
        "pred": "SELECT g.Food, COUNT(DISTINCT r.CustomerId) AS Num_Customers FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food",
        "pred_result": 1,
        "repair_sql": "SELECT g.Food, COUNT(DISTINCT r.CustomerId) AS Num_Customers FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food",
        "repair_result": 1
    },
    {
        "idx": 582,
        "db_id": "bakery_1",
        "question": "Find the id of customers who shopped at the bakery at least 15 times.",
        "evidence": "",
        "gold": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15",
        "pred": "SELECT `CustomerId` FROM receipts WHERE `ReceiptNumber` IN (SELECT `Receipt` FROM items WHERE `Item` IN (SELECT `Id` FROM goods WHERE `Food` = 'Bakery') GROUP BY `Receipt` HAVING COUNT(*) >= 15)",
        "pred_result": 0,
        "repair_sql": "SELECT `CustomerId` FROM receipts WHERE `ReceiptNumber` IN (SELECT `Receipt` FROM items WHERE `Item` IN (SELECT `Id` FROM goods WHERE `Food` = 'Bakery') GROUP BY `Receipt` HAVING COUNT(*) >= 15)",
        "repair_result": 0
    },
    {
        "idx": 583,
        "db_id": "bakery_1",
        "question": "What are the customer ids of customers who have at least 15 receipts?",
        "evidence": "",
        "gold": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15",
        "pred": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(*) >= 15",
        "pred_result": 1,
        "repair_sql": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(*) >= 15",
        "repair_result": 1
    },
    {
        "idx": 584,
        "db_id": "bakery_1",
        "question": "What is the last name of the customers who shopped at the bakery more than 10 times?",
        "evidence": "",
        "gold": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10",
        "pred": "SELECT DISTINCT c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt GROUP BY c.Id HAVING COUNT(*) > 10",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt GROUP BY c.Id HAVING COUNT(*) > 10",
        "repair_result": 0
    },
    {
        "idx": 585,
        "db_id": "bakery_1",
        "question": "Give the last names of customers who have been to the bakery more than 10 times?",
        "evidence": "",
        "gold": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10",
        "pred": "SELECT DISTINCT C.`LastName` FROM customers AS C JOIN receipts AS R ON C.`Id` = R.`CustomerId` GROUP BY C.`LastName` HAVING COUNT(R.`ReceiptNumber`) > 10",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT C.`LastName` FROM customers AS C JOIN receipts AS R ON C.`Id` = R.`CustomerId` GROUP BY C.`LastName` HAVING COUNT(R.`ReceiptNumber`) > 10",
        "repair_result": 1
    },
    {
        "idx": 586,
        "db_id": "bakery_1",
        "question": "How many types of Cake does this bakery sell?",
        "evidence": "",
        "gold": "SELECT count(*) FROM goods WHERE food  =  \"Cake\"",
        "pred": "SELECT COUNT(DISTINCT Flavor) FROM goods WHERE Food = 'Cake'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Flavor) FROM goods WHERE Food = 'Cake'",
        "repair_result": 1
    },
    {
        "idx": 587,
        "db_id": "bakery_1",
        "question": "Count the number of types of cake this bakery sells.",
        "evidence": "",
        "gold": "SELECT count(*) FROM goods WHERE food  =  \"Cake\"",
        "pred": "SELECT COUNT(DISTINCT Flavor) FROM goods WHERE Food = 'Cake'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Flavor) FROM goods WHERE Food = 'Cake'",
        "repair_result": 1
    },
    {
        "idx": 588,
        "db_id": "bakery_1",
        "question": "List all the flavors of Croissant available in this bakery.",
        "evidence": "",
        "gold": "SELECT flavor FROM goods WHERE food  =  \"Croissant\"",
        "pred": "SELECT DISTINCT g.Flavor FROM goods g JOIN items i ON g.Id = i.Item WHERE g.Food = 'Croissant'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT g.Flavor FROM goods g JOIN items i ON g.Id = i.Item WHERE g.Food = 'Croissant'",
        "repair_result": 1
    },
    {
        "idx": 589,
        "db_id": "bakery_1",
        "question": "What are all the flavors of croissant?",
        "evidence": "",
        "gold": "SELECT flavor FROM goods WHERE food  =  \"Croissant\"",
        "pred": "SELECT DISTINCT g.Flavor FROM goods g JOIN items i ON g.Id = i.Item WHERE g.Food = 'Croissant'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT g.Flavor FROM goods g JOIN items i ON g.Id = i.Item WHERE g.Food = 'Croissant'",
        "repair_result": 1
    },
    {
        "idx": 590,
        "db_id": "bakery_1",
        "question": "Give me a list of all the distinct items bought by the customer number 15.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15",
        "pred": "SELECT DISTINCT T2.`Flavor`, T2.`Food` FROM items AS T1 JOIN goods AS T2 ON T1.`Item` = T2.`Id` JOIN receipts AS T3 ON T1.`Receipt` = T3.`ReceiptNumber` WHERE T3.`CustomerId` = 15",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T2.`Flavor`, T2.`Food` FROM items AS T1 JOIN goods AS T2 ON T1.`Item` = T2.`Id` JOIN receipts AS T3 ON T1.`Receipt` = T3.`ReceiptNumber` WHERE T3.`CustomerId` = 15",
        "repair_result": 0
    },
    {
        "idx": 591,
        "db_id": "bakery_1",
        "question": "What are all the distinct items bought by customer 15?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15",
        "pred": "SELECT DISTINCT goods.`Flavor`, goods.`Food` FROM items JOIN goods ON items.`Item` = goods.`Id` JOIN receipts ON items.`Receipt` = receipts.`ReceiptNumber` WHERE receipts.`CustomerId` = 15",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT goods.`Flavor`, goods.`Food` FROM items JOIN goods ON items.`Item` = goods.`Id` JOIN receipts ON items.`Receipt` = receipts.`ReceiptNumber` WHERE receipts.`CustomerId` = 15",
        "repair_result": 0
    },
    {
        "idx": 592,
        "db_id": "bakery_1",
        "question": "For each type of food, what are the average, maximum and minimum price?",
        "evidence": "",
        "gold": "SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food",
        "pred": "SELECT goods.`Food`, AVG(goods.`Price`) AS Average_Price, MAX(goods.`Price`) AS Max_Price, MIN(goods.`Price`) AS Min_Price FROM goods GROUP BY goods.`Food`",
        "pred_result": 1,
        "repair_sql": "SELECT goods.`Food`, AVG(goods.`Price`) AS Average_Price, MAX(goods.`Price`) AS Max_Price, MIN(goods.`Price`) AS Min_Price FROM goods GROUP BY goods.`Food`",
        "repair_result": 1
    },
    {
        "idx": 593,
        "db_id": "bakery_1",
        "question": "What are the average, minimum and maximum prices for each food?",
        "evidence": "",
        "gold": "SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food",
        "pred": "SELECT goods.`Food`, AVG(goods.`Price`) AS Average_Price, MIN(goods.`Price`) AS Min_Price, MAX(goods.`Price`) AS Max_Price FROM goods GROUP BY goods.`Food`",
        "pred_result": 0,
        "repair_sql": "SELECT goods.`Food`, AVG(goods.`Price`) AS Average_Price, MIN(goods.`Price`) AS Min_Price, MAX(goods.`Price`) AS Max_Price FROM goods GROUP BY goods.`Food`",
        "repair_result": 0
    },
    {
        "idx": 594,
        "db_id": "bakery_1",
        "question": "Find the receipt numbers where both Cake and Cookie were bought.",
        "evidence": "",
        "gold": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cake\" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cookie\"",
        "pred": "SELECT DISTINCT r.`ReceiptNumber` FROM items AS i1 JOIN items AS i2 ON i1.`Receipt` = i2.`Receipt` AND i1.`Item` = 'Cake' AND i2.`Item` = 'Cookie' JOIN receipts AS r ON i1.`Receipt` = r.`ReceiptNumber`",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT r.`ReceiptNumber` FROM items AS i1 JOIN items AS i2 ON i1.`Receipt` = i2.`Receipt` AND i1.`Item` = 'Cake' AND i2.`Item` = 'Cookie' JOIN receipts AS r ON i1.`Receipt` = r.`ReceiptNumber`",
        "repair_result": 0
    },
    {
        "idx": 595,
        "db_id": "bakery_1",
        "question": "What are the receipt numbers for instances where both cakes and cookies were purchased?",
        "evidence": "",
        "gold": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cake\" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cookie\"",
        "pred": "SELECT DISTINCT r.`ReceiptNumber` FROM items AS i JOIN goods AS g ON i.`Item` = g.`Id` JOIN receipts AS r ON i.`Receipt` = r.`ReceiptNumber` WHERE g.`Food` IN ('Cake', 'Cookie') GROUP BY r.`ReceiptNumber` HAVING COUNT(DISTINCT g.`Food`) = 2",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT r.`ReceiptNumber` FROM items AS i JOIN goods AS g ON i.`Item` = g.`Id` JOIN receipts AS r ON i.`Receipt` = r.`ReceiptNumber` WHERE g.`Food` IN ('Cake', 'Cookie') GROUP BY r.`ReceiptNumber` HAVING COUNT(DISTINCT g.`Food`) = 2",
        "repair_result": 1
    },
    {
        "idx": 596,
        "db_id": "bakery_1",
        "question": "Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.",
        "evidence": "",
        "gold": "SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  \"Croissant\" AND T4.LastName  =  'LOGAN'",
        "pred": "SELECT r.`ReceiptNumber` FROM receipts r JOIN customers c ON r.`CustomerId` = c.`Id` JOIN items i ON r.`ReceiptNumber` = i.`Receipt` JOIN goods g ON i.`Item` = g.`Id` WHERE c.`LastName` = 'LOGAN' AND g.`Food` = 'Croissant'",
        "pred_result": 1,
        "repair_sql": "SELECT r.`ReceiptNumber` FROM receipts r JOIN customers c ON r.`CustomerId` = c.`Id` JOIN items i ON r.`ReceiptNumber` = i.`Receipt` JOIN goods g ON i.`Item` = g.`Id` WHERE c.`LastName` = 'LOGAN' AND g.`Food` = 'Croissant'",
        "repair_result": 1
    },
    {
        "idx": 597,
        "db_id": "bakery_1",
        "question": "What are the receipt numbers for a customer with the last name Logan who purchased a croissant?",
        "evidence": "",
        "gold": "SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  \"Croissant\" AND T4.LastName  =  'LOGAN'",
        "pred": "SELECT r.`ReceiptNumber` FROM receipts r JOIN customers c ON r.`CustomerId` = c.`Id` JOIN items i ON r.`ReceiptNumber` = i.`Receipt` JOIN goods g ON i.`Item` = g.`Id` WHERE c.`LastName` = 'Logan' AND g.`Food` = 'Croissant'",
        "pred_result": 0,
        "repair_sql": "SELECT r.`ReceiptNumber` FROM receipts r JOIN customers c ON r.`CustomerId` = c.`Id` JOIN items i ON r.`ReceiptNumber` = i.`Receipt` JOIN goods g ON i.`Item` = g.`Id` WHERE c.`LastName` = 'Logan' AND g.`Food` = 'Croissant'",
        "repair_result": 0
    },
    {
        "idx": 598,
        "db_id": "bakery_1",
        "question": "What is the receipt number and date of the receipt in which the most expensive item was bought?",
        "evidence": "",
        "gold": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
        "pred": "SELECT `ReceiptNumber`, `Date` FROM receipts WHERE `ReceiptNumber` IN (SELECT `Receipt` FROM items WHERE `Item` = (SELECT MAX(`Price`) FROM goods) )",
        "pred_result": 0,
        "repair_sql": "SELECT `ReceiptNumber`, `Date` FROM receipts WHERE `ReceiptNumber` IN (SELECT `Receipt` FROM items WHERE `Item` = (SELECT MAX(`Price`) FROM goods) )",
        "repair_result": 0
    },
    {
        "idx": 599,
        "db_id": "bakery_1",
        "question": "What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?",
        "evidence": "",
        "gold": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
        "pred": "SELECT `ReceiptNumber`, `Date` FROM receipts WHERE `ReceiptNumber` IN ( SELECT `Receipt` FROM items WHERE `Item` = ( SELECT MAX(`Price`) FROM goods ) )",
        "pred_result": 0,
        "repair_sql": "SELECT `ReceiptNumber`, `Date` FROM receipts WHERE `ReceiptNumber` IN ( SELECT `Receipt` FROM items WHERE `Item` = ( SELECT MAX(`Price`) FROM goods ) )",
        "repair_result": 0
    },
    {
        "idx": 600,
        "db_id": "bakery_1",
        "question": "What is the item that was bought the least number of times?",
        "evidence": "",
        "gold": "SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1",
        "pred": "SELECT `Item`, COUNT(`Item`) AS `Count` FROM items GROUP BY `Item` ORDER BY `Count` ASC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Item`, COUNT(`Item`) AS `Count` FROM items GROUP BY `Item` ORDER BY `Count` ASC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 601,
        "db_id": "bakery_1",
        "question": "Which item was bought the fewest times?",
        "evidence": "",
        "gold": "SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1",
        "pred": "SELECT `Item`, COUNT(`Item`) AS `Times Bought` FROM items GROUP BY `Item` ORDER BY `Times Bought` ASC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Item`, COUNT(`Item`) AS `Times Bought` FROM items GROUP BY `Item` ORDER BY `Times Bought` ASC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 602,
        "db_id": "bakery_1",
        "question": "How many goods are available for each food type?",
        "evidence": "",
        "gold": "SELECT count(*) ,  food FROM goods GROUP BY food",
        "pred": "SELECT `Food`, COUNT(*) FROM goods GROUP BY `Food`",
        "pred_result": 0,
        "repair_sql": "SELECT `Food`, COUNT(*) FROM goods GROUP BY `Food`",
        "repair_result": 0
    },
    {
        "idx": 603,
        "db_id": "bakery_1",
        "question": "Count the number of goods for each food type.",
        "evidence": "",
        "gold": "SELECT count(*) ,  food FROM goods GROUP BY food",
        "pred": "SELECT Food, COUNT(*) FROM goods GROUP BY Food",
        "pred_result": 0,
        "repair_sql": "SELECT Food, COUNT(*) FROM goods GROUP BY Food",
        "repair_result": 0
    },
    {
        "idx": 604,
        "db_id": "bakery_1",
        "question": "What is the average price for each food type?",
        "evidence": "",
        "gold": "SELECT avg(price) ,  food FROM goods GROUP BY food",
        "pred": "SELECT Food, AVG(Price) FROM goods GROUP BY Food",
        "pred_result": 0,
        "repair_sql": "SELECT Food, AVG(Price) FROM goods GROUP BY Food",
        "repair_result": 0
    },
    {
        "idx": 605,
        "db_id": "bakery_1",
        "question": "Give the average price for each food type.",
        "evidence": "",
        "gold": "SELECT avg(price) ,  food FROM goods GROUP BY food",
        "pred": "SELECT `Food`, AVG(`Price`) FROM goods GROUP BY `Food`",
        "pred_result": 0,
        "repair_sql": "SELECT `Food`, AVG(`Price`) FROM goods GROUP BY `Food`",
        "repair_result": 0
    },
    {
        "idx": 606,
        "db_id": "bakery_1",
        "question": "What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?",
        "evidence": "",
        "gold": "SELECT id FROM goods WHERE flavor  =  \"Apricot\" AND price  <  5",
        "pred": "SELECT `Id` FROM goods WHERE `Flavor` = 'Apricot' AND `Price` < 5",
        "pred_result": 1,
        "repair_sql": "SELECT `Id` FROM goods WHERE `Flavor` = 'Apricot' AND `Price` < 5",
        "repair_result": 1
    },
    {
        "idx": 607,
        "db_id": "bakery_1",
        "question": "Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.",
        "evidence": "",
        "gold": "SELECT id FROM goods WHERE flavor  =  \"Apricot\" AND price  <  5",
        "pred": "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5",
        "pred_result": 1,
        "repair_sql": "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5",
        "repair_result": 1
    },
    {
        "idx": 608,
        "db_id": "bakery_1",
        "question": "Find flavor of cakes that cost more than 10 dollars.",
        "evidence": "",
        "gold": "SELECT flavor FROM goods WHERE food  =  \"Cake\" AND price  >  10",
        "pred": "SELECT DISTINCT g.Flavor FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE g.Food = 'Cake' AND g.Price > 10",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT g.Flavor FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE g.Food = 'Cake' AND g.Price > 10",
        "repair_result": 1
    },
    {
        "idx": 609,
        "db_id": "bakery_1",
        "question": "What are the flavors of cakes that cost more than 10 dollars?",
        "evidence": "",
        "gold": "SELECT flavor FROM goods WHERE food  =  \"Cake\" AND price  >  10",
        "pred": "SELECT DISTINCT g.Flavor FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE g.Food = 'Cake' AND g.Price > 10",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT g.Flavor FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE g.Food = 'Cake' AND g.Price > 10",
        "repair_result": 1
    },
    {
        "idx": 610,
        "db_id": "bakery_1",
        "question": "Give me the distinct id and price for all goods whose price is below the average of all goods?",
        "evidence": "",
        "gold": "SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)",
        "pred": "SELECT DISTINCT `Id`, `Price` FROM goods WHERE `Price` < (SELECT AVG(`Price`) FROM goods)",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Id`, `Price` FROM goods WHERE `Price` < (SELECT AVG(`Price`) FROM goods)",
        "repair_result": 1
    },
    {
        "idx": 611,
        "db_id": "bakery_1",
        "question": "What are the distinct ids and prices for goods that cost less than the average good?",
        "evidence": "",
        "gold": "SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)",
        "pred": "SELECT DISTINCT `Id`, `Price` FROM goods WHERE `Price` < (SELECT AVG(`Price`) FROM goods)",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Id`, `Price` FROM goods WHERE `Price` < (SELECT AVG(`Price`) FROM goods)",
        "repair_result": 1
    },
    {
        "idx": 612,
        "db_id": "bakery_1",
        "question": "What are the distinct ids of all goods that are cheaper than some goods of type Tart?",
        "evidence": "",
        "gold": "SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  \"Tart\")",
        "pred": "SELECT DISTINCT g1.`Id` FROM goods AS g1 WHERE g1.`Price` < (SELECT MAX(g2.`Price`) FROM goods AS g2 WHERE g2.`Food` = 'Tart')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT g1.`Id` FROM goods AS g1 WHERE g1.`Price` < (SELECT MAX(g2.`Price`) FROM goods AS g2 WHERE g2.`Food` = 'Tart')",
        "repair_result": 1
    },
    {
        "idx": 613,
        "db_id": "bakery_1",
        "question": "Give the distinct ids for goods that cost less than any Tart.",
        "evidence": "",
        "gold": "SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  \"Tart\")",
        "pred": "SELECT DISTINCT Id FROM goods WHERE Price < (SELECT MIN(Price) FROM goods WHERE Flavor = 'Tart')",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT Id FROM goods WHERE Price < (SELECT MIN(Price) FROM goods WHERE Flavor = 'Tart')",
        "repair_result": 0
    },
    {
        "idx": 614,
        "db_id": "bakery_1",
        "question": "List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13",
        "pred": "SELECT DISTINCT r.`ReceiptNumber` FROM receipts r JOIN items i ON r.`ReceiptNumber` = i.`Receipt` JOIN goods g ON i.`Item` = g.`Id` WHERE g.`Price` > 13",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT r.`ReceiptNumber` FROM receipts r JOIN items i ON r.`ReceiptNumber` = i.`Receipt` JOIN goods g ON i.`Item` = g.`Id` WHERE g.`Price` > 13",
        "repair_result": 1
    },
    {
        "idx": 615,
        "db_id": "bakery_1",
        "question": "What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13",
        "pred": "SELECT DISTINCT r.`ReceiptNumber` FROM receipts r JOIN items i ON r.`ReceiptNumber` = i.`Receipt` JOIN goods g ON i.`Item` = g.`Id` WHERE g.`Price` > 13",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT r.`ReceiptNumber` FROM receipts r JOIN items i ON r.`ReceiptNumber` = i.`Receipt` JOIN goods g ON i.`Item` = g.`Id` WHERE g.`Price` > 13",
        "repair_result": 1
    },
    {
        "idx": 616,
        "db_id": "bakery_1",
        "question": "On which date did some customer buy a good that costs more than 15 dollars?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15",
        "pred": "SELECT DISTINCT r.`Date` FROM receipts r JOIN items i ON r.`ReceiptNumber` = i.`Receipt` JOIN goods g ON i.`Item` = g.`Id` WHERE g.`Price` > 15",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT r.`Date` FROM receipts r JOIN items i ON r.`ReceiptNumber` = i.`Receipt` JOIN goods g ON i.`Item` = g.`Id` WHERE g.`Price` > 15",
        "repair_result": 1
    },
    {
        "idx": 617,
        "db_id": "bakery_1",
        "question": "Which date corresponds to when a customer purchased a good costing over 15 dollars?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15",
        "pred": "SELECT DISTINCT r.`Date` FROM receipts r JOIN items i ON r.`ReceiptNumber` = i.`Receipt` JOIN goods g ON i.`Item` = g.`Id` WHERE g.`Price` > 15",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT r.`Date` FROM receipts r JOIN items i ON r.`ReceiptNumber` = i.`Receipt` JOIN goods g ON i.`Item` = g.`Id` WHERE g.`Price` > 15",
        "repair_result": 1
    },
    {
        "idx": 618,
        "db_id": "bakery_1",
        "question": "Give me the list of ids of all goods whose id has \"APP\".",
        "evidence": "",
        "gold": "SELECT id FROM goods WHERE id LIKE \"%APP%\"",
        "pred": "SELECT Id FROM goods WHERE Flavor LIKE '%APP%'",
        "pred_result": 0,
        "repair_sql": "SELECT Id FROM goods WHERE Flavor LIKE '%APP%'",
        "repair_result": 0
    },
    {
        "idx": 619,
        "db_id": "bakery_1",
        "question": "What are all the ids of goods with an id which contains \"APP\"?",
        "evidence": "",
        "gold": "SELECT id FROM goods WHERE id LIKE \"%APP%\"",
        "pred": "SELECT Id FROM goods WHERE Id LIKE '%APP%'",
        "pred_result": 1,
        "repair_sql": "SELECT Id FROM goods WHERE Id LIKE '%APP%'",
        "repair_result": 1
    },
    {
        "idx": 620,
        "db_id": "bakery_1",
        "question": "Which good has \"70\" in its id? And what is its price?",
        "evidence": "",
        "gold": "SELECT id ,  price FROM goods WHERE id LIKE \"%70%\"",
        "pred": "SELECT `Flavor`, `Price` FROM goods WHERE `Id` = 70",
        "pred_result": 0,
        "repair_sql": "SELECT `Flavor`, `Price` FROM goods WHERE `Id` = 70",
        "repair_result": 0
    },
    {
        "idx": 621,
        "db_id": "bakery_1",
        "question": "What are the id and price for the good with \"70\" in its id?",
        "evidence": "",
        "gold": "SELECT id ,  price FROM goods WHERE id LIKE \"%70%\"",
        "pred": "SELECT Id, Price FROM goods WHERE Id = '70'",
        "pred_result": 0,
        "repair_sql": "SELECT Id, Price FROM goods WHERE Id = '70'",
        "repair_result": 0
    },
    {
        "idx": 622,
        "db_id": "bakery_1",
        "question": "List the last names of all customers in an alphabetical order.",
        "evidence": "",
        "gold": "SELECT DISTINCT LastName FROM customers ORDER BY LastName",
        "pred": "SELECT `LastName` FROM customers ORDER BY `LastName` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `LastName` FROM customers ORDER BY `LastName` ASC",
        "repair_result": 1
    },
    {
        "idx": 623,
        "db_id": "bakery_1",
        "question": "What are the last names of the customers in alphabetical order?",
        "evidence": "",
        "gold": "SELECT DISTINCT LastName FROM customers ORDER BY LastName",
        "pred": "SELECT LastName FROM customers ORDER BY LastName ASC",
        "pred_result": 1,
        "repair_sql": "SELECT LastName FROM customers ORDER BY LastName ASC",
        "repair_result": 1
    },
    {
        "idx": 624,
        "db_id": "bakery_1",
        "question": "Return the ordered list of all good ids.",
        "evidence": "",
        "gold": "SELECT DISTINCT id FROM goods ORDER BY id",
        "pred": "SELECT `Id` FROM goods",
        "pred_result": 1,
        "repair_sql": "SELECT `Id` FROM goods",
        "repair_result": 1
    },
    {
        "idx": 625,
        "db_id": "bakery_1",
        "question": "Order the distinct good ids.",
        "evidence": "",
        "gold": "SELECT DISTINCT id FROM goods ORDER BY id",
        "pred": "SELECT DISTINCT `Id` FROM goods ORDER BY `Id`",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Id` FROM goods ORDER BY `Id`",
        "repair_result": 1
    },
    {
        "idx": 626,
        "db_id": "bakery_1",
        "question": "Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.",
        "evidence": "",
        "gold": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Apple\" AND T2.food  =  \"Pie\" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12",
        "pred": "SELECT * FROM receipts WHERE receipts.`CustomerId` = 12 OR items.`Item` IN (SELECT Id FROM goods WHERE Flavor = 'Apple' AND Food = 'Pie')",
        "pred_result": "no such column: items.Item",
        "repair_sql": "SELECT * FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE receipts.CustomerId = 12 OR items.Item IN (SELECT Id FROM goods WHERE Flavor = 'Apple' AND Food = 'Pie')",
        "repair_result": 0
    },
    {
        "idx": 627,
        "db_id": "bakery_1",
        "question": "What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?",
        "evidence": "",
        "gold": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Apple\" AND T2.food  =  \"Pie\" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12",
        "pred": "SELECT DISTINCT ReceiptNumber FROM receipts WHERE CustomerId = 12 OR CustomerId IN (SELECT CustomerId FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE Flavor = 'Apple' AND Food = 'Pie')",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT ReceiptNumber FROM receipts WHERE CustomerId = 12 OR CustomerId IN (SELECT CustomerId FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE Flavor = 'Apple' AND Food = 'Pie')",
        "repair_result": 0
    },
    {
        "idx": 628,
        "db_id": "bakery_1",
        "question": "Find all receipts which has the latest date. Also tell me that date.",
        "evidence": "",
        "gold": "SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)",
        "pred": "SELECT * FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts)",
        "pred_result": 0,
        "repair_sql": "SELECT * FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts)",
        "repair_result": 0
    },
    {
        "idx": 629,
        "db_id": "bakery_1",
        "question": "What is the receipt number with the latest date, and what is that date?",
        "evidence": "",
        "gold": "SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)",
        "pred": "SELECT `ReceiptNumber`, `Date` FROM receipts ORDER BY `Date` DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `ReceiptNumber`, `Date` FROM receipts ORDER BY `Date` DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 630,
        "db_id": "bakery_1",
        "question": "Find all receipts which either has the earliest date or has a good with price above 10.",
        "evidence": "",
        "gold": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
        "pred": "SELECT * FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) OR ReceiptNumber IN (SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE Price > 10)",
        "pred_result": 0,
        "repair_sql": "SELECT * FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) OR ReceiptNumber IN (SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE Price > 10)",
        "repair_result": 0
    },
    {
        "idx": 631,
        "db_id": "bakery_1",
        "question": "What are all the receipt numbers that have a good with a price above 10 or have the earliest date?",
        "evidence": "",
        "gold": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
        "pred": "SELECT DISTINCT `ReceiptNumber` FROM receipts WHERE EXISTS (SELECT * FROM items JOIN goods ON items.`Item` = goods.`Id` WHERE items.`Receipt` = receipts.`ReceiptNumber` AND goods.`Price` > 10) OR `Date` = (SELECT MIN(`Date`) FROM receipts)",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `ReceiptNumber` FROM receipts WHERE EXISTS (SELECT * FROM items JOIN goods ON items.`Item` = goods.`Id` WHERE items.`Receipt` = receipts.`ReceiptNumber` AND goods.`Price` > 10) OR `Date` = (SELECT MIN(`Date`) FROM receipts)",
        "repair_result": 1
    },
    {
        "idx": 632,
        "db_id": "bakery_1",
        "question": "What are the ids of Cookie and Cake that cost between 3 and 7 dollars.",
        "evidence": "",
        "gold": "SELECT id FROM goods WHERE food  =  \"Cookie\" OR food  =  \"Cake\" AND price BETWEEN 3 AND 7",
        "pred": "SELECT goods.`Id` FROM goods WHERE (Flavor = 'Cookie' OR Flavor = 'Cake') AND Price BETWEEN 3 AND 7",
        "pred_result": 0,
        "repair_sql": "SELECT goods.`Id` FROM goods WHERE (Flavor = 'Cookie' OR Flavor = 'Cake') AND Price BETWEEN 3 AND 7",
        "repair_result": 0
    },
    {
        "idx": 633,
        "db_id": "bakery_1",
        "question": "Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.",
        "evidence": "",
        "gold": "SELECT id FROM goods WHERE food  =  \"Cookie\" OR food  =  \"Cake\" AND price BETWEEN 3 AND 7",
        "pred": "SELECT DISTINCT items.`Item` FROM items JOIN goods ON items.`Item` = goods.`Id` WHERE goods.`Food` IN ('Cookie', 'Cake') AND goods.`Price` BETWEEN 3 AND 7",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT items.`Item` FROM items JOIN goods ON items.`Item` = goods.`Id` WHERE goods.`Food` IN ('Cookie', 'Cake') AND goods.`Price` BETWEEN 3 AND 7",
        "repair_result": 0
    },
    {
        "idx": 634,
        "db_id": "bakery_1",
        "question": "Find the first name and last name of a customer who visited on the earliest date.",
        "evidence": "",
        "gold": "SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1",
        "pred": "SELECT C.`FirstName`, C.`LastName` FROM customers AS C JOIN receipts AS R ON C.`Id` = R.`CustomerId` WHERE R.`Date` = (SELECT MIN(`Date`) FROM receipts)",
        "pred_result": 1,
        "repair_sql": "SELECT C.`FirstName`, C.`LastName` FROM customers AS C JOIN receipts AS R ON C.`Id` = R.`CustomerId` WHERE R.`Date` = (SELECT MIN(`Date`) FROM receipts)",
        "repair_result": 1
    },
    {
        "idx": 635,
        "db_id": "bakery_1",
        "question": "What is the full name of the customer who visited on the earliest date?",
        "evidence": "",
        "gold": "SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1",
        "pred": "SELECT c.`FirstName` || ' ' || c.`LastName` AS Full_Name FROM customers c JOIN receipts r ON c.`Id` = r.`CustomerId` WHERE r.`Date` = (SELECT MIN(`Date`) FROM receipts)",
        "pred_result": 0,
        "repair_sql": "SELECT c.`FirstName` || ' ' || c.`LastName` AS Full_Name FROM customers c JOIN receipts r ON c.`Id` = r.`CustomerId` WHERE r.`Date` = (SELECT MIN(`Date`) FROM receipts)",
        "repair_result": 0
    },
    {
        "idx": 636,
        "db_id": "bakery_1",
        "question": "What is average price of goods whose flavor is blackberry or blueberry?",
        "evidence": "",
        "gold": "SELECT avg(price) FROM goods WHERE flavor  =  \"Blackberry\" OR flavor  =  \"Blueberry\"",
        "pred": "SELECT AVG(Price) FROM goods WHERE Flavor IN ('Blackberry', 'Blueberry')",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Price) FROM goods WHERE Flavor IN ('Blackberry', 'Blueberry')",
        "repair_result": 1
    },
    {
        "idx": 637,
        "db_id": "bakery_1",
        "question": "What are the average prices of goods with blackberry or blueberry flavor?",
        "evidence": "",
        "gold": "SELECT avg(price) FROM goods WHERE flavor  =  \"Blackberry\" OR flavor  =  \"Blueberry\"",
        "pred": "SELECT AVG(Price) FROM goods WHERE Flavor IN ('Blackberry', 'Blueberry')",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Price) FROM goods WHERE Flavor IN ('Blackberry', 'Blueberry')",
        "repair_result": 1
    },
    {
        "idx": 638,
        "db_id": "bakery_1",
        "question": "Return the cheapest price for goods with cheese flavor.",
        "evidence": "",
        "gold": "SELECT min(price) FROM goods WHERE flavor  =  \"Cheese\"",
        "pred": "SELECT MIN(Price) FROM goods WHERE Flavor = 'Cheese'",
        "pred_result": 1,
        "repair_sql": "SELECT MIN(Price) FROM goods WHERE Flavor = 'Cheese'",
        "repair_result": 1
    },
    {
        "idx": 639,
        "db_id": "bakery_1",
        "question": "What is the cheapest good with cheese flavor?",
        "evidence": "",
        "gold": "SELECT min(price) FROM goods WHERE flavor  =  \"Cheese\"",
        "pred": "SELECT `Flavor`, `Food`, MIN(`Price`) FROM goods WHERE `Flavor` = 'Cheese'",
        "pred_result": 0,
        "repair_sql": "SELECT `Flavor`, `Food`, MIN(`Price`) FROM goods WHERE `Flavor` = 'Cheese'",
        "repair_result": 0
    },
    {
        "idx": 640,
        "db_id": "bakery_1",
        "question": "What are highest, lowest, and average prices of goods, grouped and ordered by flavor?",
        "evidence": "",
        "gold": "SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor",
        "pred": "SELECT g.Flavor, MAX(g.Price) AS Highest_Price, MIN(g.Price) AS Lowest_Price, AVG(g.Price) AS Average_Price FROM goods AS g GROUP BY g.Flavor ORDER BY g.Flavor",
        "pred_result": 0,
        "repair_sql": "SELECT g.Flavor, MAX(g.Price) AS Highest_Price, MIN(g.Price) AS Lowest_Price, AVG(g.Price) AS Average_Price FROM goods AS g GROUP BY g.Flavor ORDER BY g.Flavor",
        "repair_result": 0
    },
    {
        "idx": 641,
        "db_id": "bakery_1",
        "question": "What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?",
        "evidence": "",
        "gold": "SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor",
        "pred": "SELECT g.Flavor, MAX(g.Price) AS Max_Price, MIN(g.Price) AS Min_Price, AVG(g.Price) AS Avg_Price FROM goods AS g GROUP BY g.Flavor ORDER BY g.Flavor",
        "pred_result": 0,
        "repair_sql": "SELECT g.Flavor, MAX(g.Price) AS Max_Price, MIN(g.Price) AS Min_Price, AVG(g.Price) AS Avg_Price FROM goods AS g GROUP BY g.Flavor ORDER BY g.Flavor",
        "repair_result": 0
    },
    {
        "idx": 642,
        "db_id": "bakery_1",
        "question": "Return the lowest and highest prices of goods grouped and ordered by food type.",
        "evidence": "",
        "gold": "SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food",
        "pred": "SELECT `Food`, MIN(`Price`) AS Lowest_Price, MAX(`Price`) AS Highest_Price FROM goods GROUP BY `Food` ORDER BY `Food`",
        "pred_result": 0,
        "repair_sql": "SELECT `Food`, MIN(`Price`) AS Lowest_Price, MAX(`Price`) AS Highest_Price FROM goods GROUP BY `Food` ORDER BY `Food`",
        "repair_result": 0
    },
    {
        "idx": 643,
        "db_id": "bakery_1",
        "question": "What are the minimum and maximum prices of food goods, ordered by food?",
        "evidence": "",
        "gold": "SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food",
        "pred": "SELECT Food, MIN(Price) AS Min_Price, MAX(Price) AS Max_Price FROM goods GROUP BY Food ORDER BY Food",
        "pred_result": 0,
        "repair_sql": "SELECT Food, MIN(Price) AS Min_Price, MAX(Price) AS Max_Price FROM goods GROUP BY Food ORDER BY Food",
        "repair_result": 0
    },
    {
        "idx": 644,
        "db_id": "bakery_1",
        "question": "Find the top three dates with the most receipts.",
        "evidence": "",
        "gold": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
        "pred": "SELECT Date, COUNT(ReceiptNumber) AS num_receipts FROM receipts GROUP BY Date ORDER BY num_receipts DESC LIMIT 3",
        "pred_result": 0,
        "repair_sql": "SELECT Date, COUNT(ReceiptNumber) AS num_receipts FROM receipts GROUP BY Date ORDER BY num_receipts DESC LIMIT 3",
        "repair_result": 0
    },
    {
        "idx": 645,
        "db_id": "bakery_1",
        "question": "What are the three dates for which the most receipts were given?",
        "evidence": "",
        "gold": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
        "pred": "SELECT Date, COUNT(*) AS Receipt_Count FROM receipts GROUP BY Date ORDER BY Receipt_Count DESC LIMIT 3",
        "pred_result": 0,
        "repair_sql": "SELECT Date, COUNT(*) AS Receipt_Count FROM receipts GROUP BY Date ORDER BY Receipt_Count DESC LIMIT 3",
        "repair_result": 0
    },
    {
        "idx": 646,
        "db_id": "bakery_1",
        "question": "Which customer shopped most often? How many times?",
        "evidence": "",
        "gold": "SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT c.FirstName, c.LastName, COUNT(*) AS Frequency FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id ORDER BY Frequency DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT c.FirstName, c.LastName, COUNT(*) AS Frequency FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id ORDER BY Frequency DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 647,
        "db_id": "bakery_1",
        "question": "Give the customer id of the customer that made the most purchases, as well as the number of purchases made.",
        "evidence": "",
        "gold": "SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `CustomerId`, COUNT(*) AS num_purchases FROM receipts GROUP BY `CustomerId` ORDER BY num_purchases DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT `CustomerId`, COUNT(*) AS num_purchases FROM receipts GROUP BY `CustomerId` ORDER BY num_purchases DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 648,
        "db_id": "bakery_1",
        "question": "For each date, return how many distinct customers visited on that day.",
        "evidence": "",
        "gold": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
        "pred": "SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date",
        "pred_result": 1,
        "repair_sql": "SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date",
        "repair_result": 1
    },
    {
        "idx": 649,
        "db_id": "bakery_1",
        "question": "How many cusomters visited on each date?",
        "evidence": "",
        "gold": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
        "pred": "SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date",
        "pred_result": 1,
        "repair_sql": "SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date",
        "repair_result": 1
    },
    {
        "idx": 650,
        "db_id": "bakery_1",
        "question": "Give me the first name and last name of customers who have bought apple flavor Tart.",
        "evidence": "",
        "gold": "SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  \"Apple\" AND T1.food  =  \"Tart\"",
        "pred": "SELECT C.`FirstName`, C.`LastName` FROM customers AS C JOIN receipts AS R ON C.`Id` = R.`CustomerId` JOIN items AS I ON R.`ReceiptNumber` = I.`Receipt` JOIN goods AS G ON I.`Item` = G.`Id` WHERE G.`Flavor` = 'Apple' AND G.`Food` = 'Tart'",
        "pred_result": 1,
        "repair_sql": "SELECT C.`FirstName`, C.`LastName` FROM customers AS C JOIN receipts AS R ON C.`Id` = R.`CustomerId` JOIN items AS I ON R.`ReceiptNumber` = I.`Receipt` JOIN goods AS G ON I.`Item` = G.`Id` WHERE G.`Flavor` = 'Apple' AND G.`Food` = 'Tart'",
        "repair_result": 1
    },
    {
        "idx": 651,
        "db_id": "bakery_1",
        "question": "What are the full names of customers who bought apple flavored Tarts?",
        "evidence": "",
        "gold": "SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  \"Apple\" AND T1.food  =  \"Tart\"",
        "pred": "SELECT c.FirstName || ' ' || c.LastName AS Full_Name FROM customers AS c JOIN receipts AS r ON c.Id = r.CustomerId JOIN items AS i ON r.ReceiptNumber = i.Receipt JOIN goods AS g ON i.Item = g.Id WHERE g.Flavor = 'Apple' AND g.Food = 'Tart'",
        "pred_result": 0,
        "repair_sql": "SELECT c.FirstName || ' ' || c.LastName AS Full_Name FROM customers AS c JOIN receipts AS r ON c.Id = r.CustomerId JOIN items AS i ON r.ReceiptNumber = i.Receipt JOIN goods AS g ON i.Item = g.Id WHERE g.Flavor = 'Apple' AND g.Food = 'Tart'",
        "repair_result": 0
    },
    {
        "idx": 652,
        "db_id": "bakery_1",
        "question": "What are the ids of Cookies whose price is lower than any Croissant?",
        "evidence": "",
        "gold": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
        "pred": "SELECT DISTINCT I1.`Item` FROM items AS I1 JOIN goods AS G1 ON I1.`Item` = G1.`Id` WHERE G1.`Food` = 'Cookie' AND G1.`Price` < (SELECT MIN(G2.`Price`) FROM goods AS G2 WHERE G2.`Food` = 'Croissant')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT I1.`Item` FROM items AS I1 JOIN goods AS G1 ON I1.`Item` = G1.`Id` WHERE G1.`Food` = 'Cookie' AND G1.`Price` < (SELECT MIN(G2.`Price`) FROM goods AS G2 WHERE G2.`Food` = 'Croissant')",
        "repair_result": 1
    },
    {
        "idx": 653,
        "db_id": "bakery_1",
        "question": "Give the ids of cookes that are cheaper than any croissant.",
        "evidence": "",
        "gold": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
        "pred": "SELECT DISTINCT goods.`Id` FROM goods WHERE goods.`Food` = 'Cookie' AND goods.`Price` < (SELECT MIN(Price) FROM goods WHERE goods.`Food` = 'Croissant')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT goods.`Id` FROM goods WHERE goods.`Food` = 'Cookie' AND goods.`Price` < (SELECT MIN(Price) FROM goods WHERE goods.`Food` = 'Croissant')",
        "repair_result": 1
    },
    {
        "idx": 654,
        "db_id": "bakery_1",
        "question": "Give me the ids of Cakes whose price is at least as much as the average price of Tart?",
        "evidence": "",
        "gold": "SELECT id FROM goods WHERE food  =  \"Cake\" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  \"Tart\")",
        "pred": "SELECT goods.`Id` FROM goods WHERE goods.`Food` = 'Cake' AND goods.`Price` >= (SELECT AVG(Price) FROM goods WHERE goods.`Food` = 'Tart')",
        "pred_result": 1,
        "repair_sql": "SELECT goods.`Id` FROM goods WHERE goods.`Food` = 'Cake' AND goods.`Price` >= (SELECT AVG(Price) FROM goods WHERE goods.`Food` = 'Tart')",
        "repair_result": 1
    },
    {
        "idx": 655,
        "db_id": "bakery_1",
        "question": "What are the ids of cakes that are at least as expensive as the average Tart?",
        "evidence": "",
        "gold": "SELECT id FROM goods WHERE food  =  \"Cake\" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  \"Tart\")",
        "pred": "SELECT goods.`Id` FROM goods WHERE goods.`Food` = 'Cake' AND goods.`Price` >= (SELECT AVG(Price) FROM goods WHERE goods.`Food` = 'Tart')",
        "pred_result": 1,
        "repair_sql": "SELECT goods.`Id` FROM goods WHERE goods.`Food` = 'Cake' AND goods.`Price` >= (SELECT AVG(Price) FROM goods WHERE goods.`Food` = 'Tart')",
        "repair_result": 1
    },
    {
        "idx": 656,
        "db_id": "bakery_1",
        "question": "What are the ids of goods whose price is above twice the average price of all goods?",
        "evidence": "",
        "gold": "SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)",
        "pred": "SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(Price) FROM goods)",
        "pred_result": 0,
        "repair_sql": "SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(Price) FROM goods)",
        "repair_result": 0
    },
    {
        "idx": 657,
        "db_id": "bakery_1",
        "question": "Give the ids of goods that are more than twice as expensive as the average good.",
        "evidence": "",
        "gold": "SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)",
        "pred": "SELECT `Id` FROM goods WHERE `Price` > 2 * (SELECT AVG(`Price`) FROM goods)",
        "pred_result": 0,
        "repair_sql": "SELECT `Id` FROM goods WHERE `Price` > 2 * (SELECT AVG(`Price`) FROM goods)",
        "repair_result": 0
    },
    {
        "idx": 658,
        "db_id": "bakery_1",
        "question": "List the id, flavor and type of food of goods ordered by price.",
        "evidence": "",
        "gold": "SELECT id ,  flavor ,  food FROM goods ORDER BY price",
        "pred": "SELECT g.Id, g.Flavor, g.Food FROM goods AS g JOIN items AS i ON g.Id = i.Item ORDER BY g.Price",
        "pred_result": 0,
        "repair_sql": "SELECT g.Id, g.Flavor, g.Food FROM goods AS g JOIN items AS i ON g.Id = i.Item ORDER BY g.Price",
        "repair_result": 0
    },
    {
        "idx": 659,
        "db_id": "bakery_1",
        "question": "What are the ids, flavors, and food types of goods, ordered by price?",
        "evidence": "",
        "gold": "SELECT id ,  flavor ,  food FROM goods ORDER BY price",
        "pred": "SELECT goods.`Id`, goods.`Flavor`, goods.`Food` FROM goods ORDER BY goods.`Price`",
        "pred_result": 1,
        "repair_sql": "SELECT goods.`Id`, goods.`Flavor`, goods.`Food` FROM goods ORDER BY goods.`Price`",
        "repair_result": 1
    },
    {
        "idx": 660,
        "db_id": "bakery_1",
        "question": "Return a list of the id and flavor for Cakes ordered by flavor.",
        "evidence": "",
        "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY flavor",
        "pred": "SELECT goods.`Id`, goods.`Flavor` FROM goods JOIN items ON goods.`Id` = items.`Item` WHERE goods.`Food` = 'Cake' ORDER BY goods.`Flavor`",
        "pred_result": 0,
        "repair_sql": "SELECT goods.`Id`, goods.`Flavor` FROM goods JOIN items ON goods.`Id` = items.`Item` WHERE goods.`Food` = 'Cake' ORDER BY goods.`Flavor`",
        "repair_result": 0
    },
    {
        "idx": 661,
        "db_id": "bakery_1",
        "question": "What are the ids and flavors of cakes, ordered by flavor?",
        "evidence": "",
        "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY flavor",
        "pred": "SELECT goods.`Id`, goods.`Flavor` FROM goods WHERE goods.`Food` = 'Cake' ORDER BY goods.`Flavor`",
        "pred_result": 1,
        "repair_sql": "SELECT goods.`Id`, goods.`Flavor` FROM goods WHERE goods.`Food` = 'Cake' ORDER BY goods.`Flavor`",
        "repair_result": 1
    },
    {
        "idx": 662,
        "db_id": "bakery_1",
        "question": "Find all the items that have chocolate flavor but were not bought more than 10 times.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Chocolate\" GROUP BY item HAVING count(*)  <=  10",
        "pred": "SELECT T2.`Flavor`, COUNT(*) AS Total_Bought FROM goods AS T2 JOIN items AS T1 ON T2.`Id` = T1.`Item` WHERE T2.`Flavor` = 'Chocolate' GROUP BY T2.`Flavor` HAVING Total_Bought <= 10",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`Flavor`, COUNT(*) AS Total_Bought FROM goods AS T2 JOIN items AS T1 ON T2.`Id` = T1.`Item` WHERE T2.`Flavor` = 'Chocolate' GROUP BY T2.`Flavor` HAVING Total_Bought <= 10",
        "repair_result": 0
    },
    {
        "idx": 663,
        "db_id": "bakery_1",
        "question": "What are the items with chocolate flavor that were purchased at most 10 times.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Chocolate\" GROUP BY item HAVING count(*)  <=  10",
        "pred": "SELECT T2.`Flavor`, COUNT(*) FROM items AS T1 JOIN goods AS T2 ON T1.`Item` = T2.`Id` WHERE T2.`Flavor` = 'Chocolate' GROUP BY T2.`Flavor` HAVING COUNT(*) <= 10",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`Flavor`, COUNT(*) FROM items AS T1 JOIN goods AS T2 ON T1.`Item` = T2.`Id` WHERE T2.`Flavor` = 'Chocolate' GROUP BY T2.`Flavor` HAVING COUNT(*) <= 10",
        "repair_result": 0
    },
    {
        "idx": 664,
        "db_id": "bakery_1",
        "question": "What are the flavors available for Cake but not for Tart?",
        "evidence": "",
        "gold": "SELECT DISTINCT flavor FROM goods WHERE food  =  \"Cake\" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  \"Tart\"",
        "pred": "SELECT DISTINCT g1.Flavor FROM goods g1 WHERE g1.Food = 'Cake' AND g1.Flavor NOT IN ( SELECT g2.Flavor FROM goods g2 WHERE g2.Food = 'Tart' )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT g1.Flavor FROM goods g1 WHERE g1.Food = 'Cake' AND g1.Flavor NOT IN ( SELECT g2.Flavor FROM goods g2 WHERE g2.Food = 'Tart' )",
        "repair_result": 1
    },
    {
        "idx": 665,
        "db_id": "bakery_1",
        "question": "Give the flavors of Cakes that are not available for Tart.",
        "evidence": "",
        "gold": "SELECT DISTINCT flavor FROM goods WHERE food  =  \"Cake\" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  \"Tart\"",
        "pred": "SELECT DISTINCT g.Flavor FROM goods g WHERE g.Food = 'Cake' AND g.Flavor NOT IN ( SELECT DISTINCT g2.Flavor FROM goods g2 WHERE g2.Food = 'Tart' )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT g.Flavor FROM goods g WHERE g.Food = 'Cake' AND g.Flavor NOT IN ( SELECT DISTINCT g2.Flavor FROM goods g2 WHERE g2.Food = 'Tart' )",
        "repair_result": 1
    },
    {
        "idx": 666,
        "db_id": "bakery_1",
        "question": "What is the three most popular goods in this bakery?",
        "evidence": "",
        "gold": "SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3",
        "pred": "SELECT `Flavor`, `Food`, COUNT(`Item`) AS `Total_Sold` FROM goods JOIN items ON goods.`Id` = items.`Item` GROUP BY `Flavor`, `Food` ORDER BY `Total_Sold` DESC LIMIT 3",
        "pred_result": 0,
        "repair_sql": "SELECT `Flavor`, `Food`, COUNT(`Item`) AS `Total_Sold` FROM goods JOIN items ON goods.`Id` = items.`Item` GROUP BY `Flavor`, `Food` ORDER BY `Total_Sold` DESC LIMIT 3",
        "repair_result": 0
    },
    {
        "idx": 667,
        "db_id": "bakery_1",
        "question": "Give the three most purchased items at this bakery.",
        "evidence": "",
        "gold": "SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3",
        "pred": "SELECT goods.`Flavor`, goods.`Food`, COUNT(items.`Item`) AS Total_Purchased FROM items JOIN goods ON items.`Item` = goods.`Id` GROUP BY items.`Item` ORDER BY Total_Purchased DESC LIMIT 3",
        "pred_result": 0,
        "repair_sql": "SELECT goods.`Flavor`, goods.`Food`, COUNT(items.`Item`) AS Total_Purchased FROM items JOIN goods ON items.`Item` = goods.`Id` GROUP BY items.`Item` ORDER BY Total_Purchased DESC LIMIT 3",
        "repair_result": 0
    },
    {
        "idx": 668,
        "db_id": "bakery_1",
        "question": "Find the ids of customers who have spent more than 150 dollars in total.",
        "evidence": "",
        "gold": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150",
        "pred": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING SUM((SELECT Price FROM goods WHERE Id = items.Item)) > 150",
        "pred_result": "no such column: items.Item",
        "repair_sql": "SELECT CustomerId FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY CustomerId HAVING SUM(goods.Price) > 150",
        "repair_result": 1
    },
    {
        "idx": 669,
        "db_id": "bakery_1",
        "question": "What are the ids of customers who have spent over 150 dollars in total?",
        "evidence": "",
        "gold": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150",
        "pred": "SELECT `CustomerId` FROM receipts GROUP BY `CustomerId` HAVING SUM((SELECT `Price` FROM goods WHERE goods.`Id` = items.`Item`)) > 150",
        "pred_result": "no such column: items.Item",
        "repair_sql": "SELECT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150;",
        "repair_result": 1
    },
    {
        "idx": 670,
        "db_id": "bakery_1",
        "question": "Find the ids of customers whose average spending for each good is above 5.",
        "evidence": "",
        "gold": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5",
        "pred": "SELECT DISTINCT `CustomerId` FROM receipts GROUP BY `CustomerId` HAVING AVG((SELECT `Price` FROM goods WHERE goods.`Id` = items.`Item`)) > 5",
        "pred_result": "no such column: items.Item",
        "repair_sql": "SELECT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING AVG(g.Price) > 5;",
        "repair_result": 1
    },
    {
        "idx": 671,
        "db_id": "bakery_1",
        "question": "What are the ids of customers who spend more than 5 on average for each good?",
        "evidence": "",
        "gold": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5",
        "pred": "SELECT DISTINCT T1.`CustomerId` FROM receipts AS T1 JOIN items AS T2 ON T1.`ReceiptNumber` = T2.`Receipt` JOIN goods AS T3 ON T2.`Item` = T3.`Id` GROUP BY T1.`CustomerId`, T3.`Id` HAVING AVG(T3.`Price`) > 5",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`CustomerId` FROM receipts AS T1 JOIN items AS T2 ON T1.`ReceiptNumber` = T2.`Receipt` JOIN goods AS T3 ON T2.`Item` = T3.`Id` GROUP BY T1.`CustomerId`, T3.`Id` HAVING AVG(T3.`Price`) > 5",
        "repair_result": 0
    },
    {
        "idx": 672,
        "db_id": "bakery_1",
        "question": "On which day did the bakery sell more than 100 dollars in total.",
        "evidence": "",
        "gold": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
        "pred": "SELECT Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY Date HAVING SUM(Price) > 100",
        "pred_result": 1,
        "repair_sql": "SELECT Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY Date HAVING SUM(Price) > 100",
        "repair_result": 1
    },
    {
        "idx": 673,
        "db_id": "bakery_1",
        "question": "On what dates did the bakery sell more than 100 dollars worth of goods in total?",
        "evidence": "",
        "gold": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
        "pred": "SELECT Date FROM receipts WHERE ReceiptNumber IN ( SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id GROUP BY Receipt HAVING SUM(Price) > 100 )",
        "pred_result": 0,
        "repair_sql": "SELECT Date FROM receipts WHERE ReceiptNumber IN ( SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id GROUP BY Receipt HAVING SUM(Price) > 100 )",
        "repair_result": 0
    },
    {
        "idx": 674,
        "db_id": "car_racing",
        "question": "How many drivers are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM driver",
        "pred": "SELECT COUNT(*) FROM driver",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM driver",
        "repair_result": 1
    },
    {
        "idx": 675,
        "db_id": "car_racing",
        "question": "Find the total number of drivers.",
        "evidence": "",
        "gold": "SELECT count(*) FROM driver",
        "pred": "SELECT COUNT(*) FROM driver",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM driver",
        "repair_result": 1
    },
    {
        "idx": 676,
        "db_id": "car_racing",
        "question": "Find the number of drivers whose points are greater than 150 for each make.",
        "evidence": "",
        "gold": "SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make",
        "pred": "SELECT Make, COUNT(*) FROM driver WHERE Points > 150 GROUP BY Make",
        "pred_result": 1,
        "repair_sql": "SELECT Make, COUNT(*) FROM driver WHERE Points > 150 GROUP BY Make",
        "repair_result": 1
    },
    {
        "idx": 677,
        "db_id": "car_racing",
        "question": "How many drivers receive points greater than 150 for each make? Show the make and the count.",
        "evidence": "",
        "gold": "SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make",
        "pred": "SELECT Make, COUNT(*) FROM driver WHERE Points > 150 GROUP BY Make",
        "pred_result": 1,
        "repair_sql": "SELECT Make, COUNT(*) FROM driver WHERE Points > 150 GROUP BY Make",
        "repair_result": 1
    },
    {
        "idx": 678,
        "db_id": "car_racing",
        "question": "Find the average age of drivers for each make.",
        "evidence": "",
        "gold": "SELECT avg(age) ,  Make FROM driver GROUP BY make",
        "pred": "SELECT Make, AVG(Age) AS Average_Age FROM driver GROUP BY Make",
        "pred_result": 0,
        "repair_sql": "SELECT Make, AVG(Age) AS Average_Age FROM driver GROUP BY Make",
        "repair_result": 0
    },
    {
        "idx": 679,
        "db_id": "car_racing",
        "question": "What is the average age of drivers for each make? Return the average age and make.",
        "evidence": "",
        "gold": "SELECT avg(age) ,  Make FROM driver GROUP BY make",
        "pred": "SELECT Make, AVG(Age) AS Average_Age FROM driver GROUP BY Make",
        "pred_result": 0,
        "repair_sql": "SELECT Make, AVG(Age) AS Average_Age FROM driver GROUP BY Make",
        "repair_result": 0
    },
    {
        "idx": 680,
        "db_id": "car_racing",
        "question": "What are the average laps of all the drivers who are younger than 20?",
        "evidence": "",
        "gold": "SELECT avg(Laps) FROM driver WHERE age  <  20",
        "pred": "SELECT AVG(Laps) FROM driver WHERE Age < 20",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Laps) FROM driver WHERE Age < 20",
        "repair_result": 1
    },
    {
        "idx": 681,
        "db_id": "car_racing",
        "question": "Compute the average laps of drivers under the age of 20.",
        "evidence": "",
        "gold": "SELECT avg(Laps) FROM driver WHERE age  <  20",
        "pred": "SELECT AVG(Laps) FROM driver WHERE Age < 20",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Laps) FROM driver WHERE Age < 20",
        "repair_result": 1
    },
    {
        "idx": 682,
        "db_id": "car_racing",
        "question": "What are the managers and sponsors of teams? Sort the results by Car Owners.",
        "evidence": "",
        "gold": "SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner",
        "pred": "SELECT T1.`Manager`, T1.`Sponsor` FROM team AS T1 JOIN team_driver AS T2 ON T1.`Team_ID` = T2.`Team_ID` JOIN driver AS T3 ON T2.`Driver_ID` = T3.`Driver_ID` ORDER BY T1.`Car_Owner`",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`Manager`, T1.`Sponsor` FROM team AS T1 JOIN team_driver AS T2 ON T1.`Team_ID` = T2.`Team_ID` JOIN driver AS T3 ON T2.`Driver_ID` = T3.`Driver_ID` ORDER BY T1.`Car_Owner`",
        "repair_result": 0
    },
    {
        "idx": 683,
        "db_id": "car_racing",
        "question": "Find the manager and sponsor for each team and order them by the car owner.",
        "evidence": "",
        "gold": "SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner",
        "pred": "SELECT T1.`Car_Owner`, T2.`Manager`, T2.`Sponsor` FROM team AS T1 JOIN team_driver AS TD ON T1.`Team_ID` = TD.`Team_ID` JOIN driver AS D ON TD.`Driver_ID` = D.`Driver_ID` JOIN team AS T2 ON TD.`Team_ID` = T2.`Team_ID` ORDER BY T1.`Car_Owner`",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`Car_Owner`, T2.`Manager`, T2.`Sponsor` FROM team AS T1 JOIN team_driver AS TD ON T1.`Team_ID` = TD.`Team_ID` JOIN driver AS D ON TD.`Driver_ID` = D.`Driver_ID` JOIN team AS T2 ON TD.`Team_ID` = T2.`Team_ID` ORDER BY T1.`Car_Owner`",
        "repair_result": 0
    },
    {
        "idx": 684,
        "db_id": "car_racing",
        "question": "Find the make that has more than one team.",
        "evidence": "",
        "gold": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
        "pred": "SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1",
        "pred_result": 0,
        "repair_sql": "SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1",
        "repair_result": 0
    },
    {
        "idx": 685,
        "db_id": "car_racing",
        "question": "Which make has more than one team?",
        "evidence": "",
        "gold": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
        "pred": "SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1",
        "pred_result": 0,
        "repair_sql": "SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1",
        "repair_result": 0
    },
    {
        "idx": 686,
        "db_id": "car_racing",
        "question": "What are the makes of the teams with car owner \"Buddy Arrington\"?",
        "evidence": "",
        "gold": "SELECT Make FROM team WHERE Car_Owner  =  \"Buddy Arrington\"",
        "pred": "SELECT DISTINCT T1.`Make` FROM team AS T1 JOIN team_driver AS T2 ON T1.`Team_ID` = T2.`Team_ID` JOIN driver AS T3 ON T2.`Driver_ID` = T3.`Driver_ID` WHERE T1.`Car_Owner` = 'Buddy Arrington'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`Make` FROM team AS T1 JOIN team_driver AS T2 ON T1.`Team_ID` = T2.`Team_ID` JOIN driver AS T3 ON T2.`Driver_ID` = T3.`Driver_ID` WHERE T1.`Car_Owner` = 'Buddy Arrington'",
        "repair_result": 1
    },
    {
        "idx": 687,
        "db_id": "car_racing",
        "question": "Find the make of the team whose car owner is \"Buddy Arrington\".",
        "evidence": "",
        "gold": "SELECT Make FROM team WHERE Car_Owner  =  \"Buddy Arrington\"",
        "pred": "SELECT T1.`Make` FROM team AS T1 JOIN team_driver AS T2 ON T1.`Team_ID` = T2.`Team_ID` JOIN driver AS T3 ON T2.`Driver_ID` = T3.`Driver_ID` WHERE T1.`Car_Owner` = 'Buddy Arrington'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Make` FROM team AS T1 JOIN team_driver AS T2 ON T1.`Team_ID` = T2.`Team_ID` JOIN driver AS T3 ON T2.`Driver_ID` = T3.`Driver_ID` WHERE T1.`Car_Owner` = 'Buddy Arrington'",
        "repair_result": 1
    },
    {
        "idx": 688,
        "db_id": "car_racing",
        "question": "What are the maximum and minimum points of drivers.",
        "evidence": "",
        "gold": "SELECT max(Points) ,  min(Points) FROM driver",
        "pred": "SELECT MAX(Points) AS Maximum_Points, MIN(Points) AS Minimum_Points FROM driver",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(Points) AS Maximum_Points, MIN(Points) AS Minimum_Points FROM driver",
        "repair_result": 1
    },
    {
        "idx": 689,
        "db_id": "car_racing",
        "question": "Find the highest and lowest points of drivers.",
        "evidence": "",
        "gold": "SELECT max(Points) ,  min(Points) FROM driver",
        "pred": "SELECT MAX(Points) AS Highest_Points, MIN(Points) AS Lowest_Points FROM driver",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(Points) AS Highest_Points, MIN(Points) AS Lowest_Points FROM driver",
        "repair_result": 1
    },
    {
        "idx": 690,
        "db_id": "car_racing",
        "question": "How many drivers have points smaller than 150?",
        "evidence": "",
        "gold": "SELECT count(*) FROM driver WHERE Points  <  150",
        "pred": "SELECT COUNT(*) FROM driver WHERE Points < 150",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM driver WHERE Points < 150",
        "repair_result": 1
    },
    {
        "idx": 691,
        "db_id": "car_racing",
        "question": "Count the number of drivers whose points are below 150.",
        "evidence": "",
        "gold": "SELECT count(*) FROM driver WHERE Points  <  150",
        "pred": "SELECT COUNT(*) FROM driver WHERE Points < 150",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM driver WHERE Points < 150",
        "repair_result": 1
    },
    {
        "idx": 692,
        "db_id": "car_racing",
        "question": "List all the driver names in ascending order of age.",
        "evidence": "",
        "gold": "SELECT Driver FROM driver ORDER BY Age ASC",
        "pred": "SELECT `Driver` FROM driver ORDER BY `Age` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Driver` FROM driver ORDER BY `Age` ASC",
        "repair_result": 1
    },
    {
        "idx": 693,
        "db_id": "car_racing",
        "question": "Sort the driver names by age in ascending order.",
        "evidence": "",
        "gold": "SELECT Driver FROM driver ORDER BY Age ASC",
        "pred": "SELECT `Driver` FROM driver ORDER BY `Age` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Driver` FROM driver ORDER BY `Age` ASC",
        "repair_result": 1
    },
    {
        "idx": 694,
        "db_id": "car_racing",
        "question": "List all the driver names in descending order of points.",
        "evidence": "",
        "gold": "SELECT Driver FROM driver ORDER BY Points DESC",
        "pred": "SELECT `Driver` FROM driver ORDER BY `Points` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Driver` FROM driver ORDER BY `Points` DESC",
        "repair_result": 1
    },
    {
        "idx": 695,
        "db_id": "car_racing",
        "question": "What is the list of drivers ordered by points in descending order?",
        "evidence": "",
        "gold": "SELECT Driver FROM driver ORDER BY Points DESC",
        "pred": "SELECT `Driver` FROM driver ORDER BY `Points` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Driver` FROM driver ORDER BY `Points` DESC",
        "repair_result": 1
    },
    {
        "idx": 696,
        "db_id": "car_racing",
        "question": "Please show the names of drivers, and countries they are from.",
        "evidence": "",
        "gold": "SELECT T2.Driver ,  T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country",
        "pred": "SELECT D.`Driver`, C.`Country` FROM driver AS D JOIN country AS C ON D.`Country` = C.`Country_Id`",
        "pred_result": 1,
        "repair_sql": "SELECT D.`Driver`, C.`Country` FROM driver AS D JOIN country AS C ON D.`Country` = C.`Country_Id`",
        "repair_result": 1
    },
    {
        "idx": 697,
        "db_id": "car_racing",
        "question": "For each driver, return his or her name and country.",
        "evidence": "",
        "gold": "SELECT T2.Driver ,  T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country",
        "pred": "SELECT D.`Driver`, C.`Country` FROM driver AS D JOIN country AS C ON D.`Country` = C.`Country_Id`",
        "pred_result": 1,
        "repair_sql": "SELECT D.`Driver`, C.`Country` FROM driver AS D JOIN country AS C ON D.`Country` = C.`Country_Id`",
        "repair_result": 1
    },
    {
        "idx": 698,
        "db_id": "car_racing",
        "question": "Show the maximum points of the drivers from countries with capital \"Dublin\"",
        "evidence": "",
        "gold": "SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
        "pred": "SELECT MAX(Points) FROM driver WHERE Country = (SELECT Country_Id FROM country WHERE Capital = 'Dublin')",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(Points) FROM driver WHERE Country = (SELECT Country_Id FROM country WHERE Capital = 'Dublin')",
        "repair_result": 1
    },
    {
        "idx": 699,
        "db_id": "car_racing",
        "question": "What is the maximum points of the drivers from a country whose capital is \"Dublin\"?",
        "evidence": "",
        "gold": "SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
        "pred": "SELECT MAX(Points) FROM driver WHERE Country = (SELECT Country_Id FROM country WHERE Capital = 'Dublin')",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(Points) FROM driver WHERE Country = (SELECT Country_Id FROM country WHERE Capital = 'Dublin')",
        "repair_result": 1
    },
    {
        "idx": 700,
        "db_id": "car_racing",
        "question": "What is the average age of drivers from countries with official native language \"English\"",
        "evidence": "",
        "gold": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
        "pred": "SELECT AVG(Age) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Official_native_language LIKE '%English%')",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(Age) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Official_native_language LIKE '%English%')",
        "repair_result": 0
    },
    {
        "idx": 701,
        "db_id": "car_racing",
        "question": "Find the average age of the drivers from the countries that use \"English\" as official native language.",
        "evidence": "",
        "gold": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
        "pred": "SELECT AVG(Age) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Official_native_language LIKE '%English%')",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(Age) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Official_native_language LIKE '%English%')",
        "repair_result": 0
    },
    {
        "idx": 702,
        "db_id": "car_racing",
        "question": "What are the countries that have drivers with points larger than 150?",
        "evidence": "",
        "gold": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
        "pred": "SELECT DISTINCT c.`Country` FROM driver d JOIN country c ON d.`Country` = c.`Country_Id` WHERE d.`Points` > 150",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT c.`Country` FROM driver d JOIN country c ON d.`Country` = c.`Country_Id` WHERE d.`Points` > 150",
        "repair_result": 1
    },
    {
        "idx": 703,
        "db_id": "car_racing",
        "question": "Find all the countries where some drivers have points above 150.",
        "evidence": "",
        "gold": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
        "pred": "SELECT DISTINCT c.`Country` FROM driver d JOIN country c ON d.`Country` = c.`Country_Id` WHERE d.`Points` > 150",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT c.`Country` FROM driver d JOIN country c ON d.`Country` = c.`Country_Id` WHERE d.`Points` > 150",
        "repair_result": 1
    },
    {
        "idx": 704,
        "db_id": "car_racing",
        "question": "What is the capital of the country where the driver with the most points is from?",
        "evidence": "",
        "gold": "SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1",
        "pred": "SELECT c.Capital FROM country c JOIN driver d ON c.Country_Id = d.Country WHERE d.Points = (SELECT MAX(Points) FROM driver)",
        "pred_result": 1,
        "repair_sql": "SELECT c.Capital FROM country c JOIN driver d ON c.Country_Id = d.Country WHERE d.Points = (SELECT MAX(Points) FROM driver)",
        "repair_result": 1
    },
    {
        "idx": 705,
        "db_id": "car_racing",
        "question": "Which country is the driver with the highest points from? Give me the capital of the country.",
        "evidence": "",
        "gold": "SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1",
        "pred": "SELECT c.Capital FROM country c JOIN driver d ON c.Country_Id = d.Country WHERE d.Points = (SELECT MAX(Points) FROM driver)",
        "pred_result": 1,
        "repair_sql": "SELECT c.Capital FROM country c JOIN driver d ON c.Country_Id = d.Country WHERE d.Points = (SELECT MAX(Points) FROM driver)",
        "repair_result": 1
    },
    {
        "idx": 706,
        "db_id": "car_racing",
        "question": "List each make with the number of drivers with that make.",
        "evidence": "",
        "gold": "SELECT Make ,  COUNT(*) FROM driver GROUP BY Make",
        "pred": "SELECT `Make`, COUNT(*) FROM driver GROUP BY `Make`",
        "pred_result": 1,
        "repair_sql": "SELECT `Make`, COUNT(*) FROM driver GROUP BY `Make`",
        "repair_result": 1
    },
    {
        "idx": 707,
        "db_id": "car_racing",
        "question": "For each make, return the make and the count of drivers with that make.",
        "evidence": "",
        "gold": "SELECT Make ,  COUNT(*) FROM driver GROUP BY Make",
        "pred": "SELECT `Make`, COUNT(*) FROM driver GROUP BY `Make`",
        "pred_result": 1,
        "repair_sql": "SELECT `Make`, COUNT(*) FROM driver GROUP BY `Make`",
        "repair_result": 1
    },
    {
        "idx": 708,
        "db_id": "car_racing",
        "question": "List the make that are associated with most drivers.",
        "evidence": "",
        "gold": "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT Make, COUNT(DISTINCT Driver_ID) AS num_drivers FROM team_driver JOIN driver ON team_driver.Driver_ID = driver.Driver_ID GROUP BY Make ORDER BY num_drivers DESC LIMIT 1",
        "pred_result": "ambiguous column name: Driver_ID",
        "repair_sql": "SELECT t.Make, COUNT(DISTINCT td.Driver_ID) AS num_drivers FROM team_driver td JOIN driver d ON td.Driver_ID = d.Driver_ID JOIN team t ON td.Team_ID = t.Team_ID GROUP BY t.Make ORDER BY num_drivers DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 709,
        "db_id": "car_racing",
        "question": "Which make does the most drivers have?",
        "evidence": "",
        "gold": "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT Make, COUNT(*) AS Driver_Count FROM driver GROUP BY Make ORDER BY Driver_Count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT Make, COUNT(*) AS Driver_Count FROM driver GROUP BY Make ORDER BY Driver_Count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 710,
        "db_id": "car_racing",
        "question": "List the driver makes that are associated with at least three drivers.",
        "evidence": "",
        "gold": "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3",
        "pred": "SELECT `Make` FROM driver GROUP BY `Make` HAVING COUNT(*) >= 3",
        "pred_result": 1,
        "repair_sql": "SELECT `Make` FROM driver GROUP BY `Make` HAVING COUNT(*) >= 3",
        "repair_result": 1
    },
    {
        "idx": 711,
        "db_id": "car_racing",
        "question": "Which make is associated with 3 or more drivers?",
        "evidence": "",
        "gold": "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3",
        "pred": "SELECT Make FROM driver GROUP BY Make HAVING COUNT(DISTINCT Driver_ID) >= 3",
        "pred_result": 1,
        "repair_sql": "SELECT Make FROM driver GROUP BY Make HAVING COUNT(DISTINCT Driver_ID) >= 3",
        "repair_result": 1
    },
    {
        "idx": 712,
        "db_id": "car_racing",
        "question": "List the names of teams that do not have any drivers.",
        "evidence": "",
        "gold": "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
        "pred": "SELECT `Team` FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
        "pred_result": 1,
        "repair_sql": "SELECT `Team` FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
        "repair_result": 1
    },
    {
        "idx": 713,
        "db_id": "car_racing",
        "question": "Which team does not have drivers?",
        "evidence": "",
        "gold": "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
        "pred": "SELECT `Team` FROM team WHERE `Team_ID` NOT IN (SELECT `Team_ID` FROM team_driver)",
        "pred_result": 1,
        "repair_sql": "SELECT `Team` FROM team WHERE `Team_ID` NOT IN (SELECT `Team_ID` FROM team_driver)",
        "repair_result": 1
    },
    {
        "idx": 714,
        "db_id": "car_racing",
        "question": "Which country has both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"?",
        "evidence": "",
        "gold": "SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Dodge\" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Chevrolet\"",
        "pred": "SELECT DISTINCT c.`Country` FROM driver d JOIN team_driver td ON d.`Driver_ID` = td.`Driver_ID` JOIN team t ON td.`Team_ID` = t.`Team_ID` JOIN driver d2 ON t.`Team_ID` = td.`Team_ID` JOIN team_driver td2 ON d2.`Driver_ID` = td2.`Driver_ID` JOIN team t2 ON td2.`Team_ID` = t2.`Team_ID` JOIN country c ON d.`Country` = c.`Country_Id` WHERE d.`Make` = 'Dodge' AND d2.`Make` = 'Chevrolet'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT c.`Country` FROM driver d JOIN team_driver td ON d.`Driver_ID` = td.`Driver_ID` JOIN team t ON td.`Team_ID` = t.`Team_ID` JOIN driver d2 ON t.`Team_ID` = td.`Team_ID` JOIN team_driver td2 ON d2.`Driver_ID` = td2.`Driver_ID` JOIN team t2 ON td2.`Team_ID` = t2.`Team_ID` JOIN country c ON d.`Country` = c.`Country_Id` WHERE d.`Make` = 'Dodge' AND d2.`Make` = 'Chevrolet'",
        "repair_result": 0
    },
    {
        "idx": 715,
        "db_id": "car_racing",
        "question": "Find the countries in which there are both drivers with make \"Dodge\" and drivers with make \"Chevrolet\".",
        "evidence": "",
        "gold": "SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Dodge\" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Chevrolet\"",
        "pred": "SELECT DISTINCT d1.`Country` FROM driver d1 JOIN driver d2 ON d1.`Country` = d2.`Country` JOIN team_driver td1 ON d1.`Driver_ID` = td1.`Driver_ID` JOIN team t1 ON td1.`Team_ID` = t1.`Team_ID` AND t1.`Make` = 'Dodge' JOIN team_driver td2 ON d2.`Driver_ID` = td2.`Driver_ID` JOIN team t2 ON td2.`Team_ID` = t2.`Team_ID` AND t2.`Make` = 'Chevrolet'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT d1.`Country` FROM driver d1 JOIN driver d2 ON d1.`Country` = d2.`Country` JOIN team_driver td1 ON d1.`Driver_ID` = td1.`Driver_ID` JOIN team t1 ON td1.`Team_ID` = t1.`Team_ID` AND t1.`Make` = 'Dodge' JOIN team_driver td2 ON d2.`Driver_ID` = td2.`Driver_ID` JOIN team t2 ON td2.`Team_ID` = t2.`Team_ID` AND t2.`Make` = 'Chevrolet'",
        "repair_result": 0
    },
    {
        "idx": 716,
        "db_id": "car_racing",
        "question": "Show total and average points of all drivers.",
        "evidence": "",
        "gold": "SELECT sum(Points) ,  avg(Points) FROM driver",
        "pred": "SELECT SUM(Points) AS Total_Points, AVG(Points) AS Average_Points FROM driver",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(Points) AS Total_Points, AVG(Points) AS Average_Points FROM driver",
        "repair_result": 1
    },
    {
        "idx": 717,
        "db_id": "car_racing",
        "question": "What are the total and average points of drivers?",
        "evidence": "",
        "gold": "SELECT sum(Points) ,  avg(Points) FROM driver",
        "pred": "SELECT SUM(Points) AS Total_Points, AVG(Points) AS Average_Points FROM driver",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(Points) AS Total_Points, AVG(Points) AS Average_Points FROM driver",
        "repair_result": 1
    },
    {
        "idx": 718,
        "db_id": "car_racing",
        "question": "Find the countries where no driver come from.",
        "evidence": "",
        "gold": "SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)",
        "pred": "SELECT DISTINCT Country FROM country WHERE Country NOT IN (SELECT DISTINCT Country FROM driver)",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT Country FROM country WHERE Country NOT IN (SELECT DISTINCT Country FROM driver)",
        "repair_result": 0
    },
    {
        "idx": 719,
        "db_id": "car_racing",
        "question": "Which countries do not have any drivers?",
        "evidence": "",
        "gold": "SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)",
        "pred": "SELECT DISTINCT c.Country FROM country c LEFT JOIN driver d ON c.Country_Id = d.Country WHERE d.Country IS NULL",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT c.Country FROM country c LEFT JOIN driver d ON c.Country_Id = d.Country WHERE d.Country IS NULL",
        "repair_result": 1
    },
    {
        "idx": 720,
        "db_id": "car_racing",
        "question": "What are the manager and sponsor of the team that has the most drivers?",
        "evidence": "",
        "gold": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`Manager`, T1.`Sponsor` FROM team AS T1 JOIN team_driver AS T2 ON T1.`Team_ID` = T2.`Team_ID` GROUP BY T1.`Team_ID` ORDER BY COUNT(T2.`Driver_ID`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Manager`, T1.`Sponsor` FROM team AS T1 JOIN team_driver AS T2 ON T1.`Team_ID` = T2.`Team_ID` GROUP BY T1.`Team_ID` ORDER BY COUNT(T2.`Driver_ID`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 721,
        "db_id": "car_racing",
        "question": "Find the manager and sponsor of the team that has the most drivers.",
        "evidence": "",
        "gold": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`Manager`, T1.`Sponsor` FROM team AS T1 JOIN team_driver AS T2 ON T1.`Team_ID` = T2.`Team_ID` GROUP BY T1.`Team_ID` ORDER BY COUNT(T2.`Driver_ID`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Manager`, T1.`Sponsor` FROM team AS T1 JOIN team_driver AS T2 ON T1.`Team_ID` = T2.`Team_ID` GROUP BY T1.`Team_ID` ORDER BY COUNT(T2.`Driver_ID`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 722,
        "db_id": "car_racing",
        "question": "What are the manager and car owner of the team that has at least 2 drivers?",
        "evidence": "",
        "gold": "SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2",
        "pred": "SELECT T1.`Manager`, T1.`Car_Owner` FROM team AS T1 WHERE T1.`Team_ID` IN ( SELECT T2.`Team_ID` FROM team_driver AS T2 GROUP BY T2.`Team_ID` HAVING COUNT(*) >= 2 )",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Manager`, T1.`Car_Owner` FROM team AS T1 WHERE T1.`Team_ID` IN ( SELECT T2.`Team_ID` FROM team_driver AS T2 GROUP BY T2.`Team_ID` HAVING COUNT(*) >= 2 )",
        "repair_result": 1
    },
    {
        "idx": 723,
        "db_id": "car_racing",
        "question": "Find the team with two or more drivers and return the the manager and car owner of the team.",
        "evidence": "",
        "gold": "SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2",
        "pred": "SELECT T1.`Manager`, T1.`Car_Owner` FROM team AS T1 JOIN team_driver AS T2 ON T1.`Team_ID` = T2.`Team_ID` GROUP BY T1.`Team_ID` HAVING COUNT(T2.`Driver_ID`) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Manager`, T1.`Car_Owner` FROM team AS T1 JOIN team_driver AS T2 ON T1.`Team_ID` = T2.`Team_ID` GROUP BY T1.`Team_ID` HAVING COUNT(T2.`Driver_ID`) >= 2",
        "repair_result": 1
    },
    {
        "idx": 724,
        "db_id": "institution_sports",
        "question": "How many institutions are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM institution",
        "pred": "SELECT COUNT(*) FROM institution",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM institution",
        "repair_result": 1
    },
    {
        "idx": 725,
        "db_id": "institution_sports",
        "question": "Count the number of institutions.",
        "evidence": "",
        "gold": "SELECT count(*) FROM institution",
        "pred": "SELECT COUNT(*) FROM institution",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM institution",
        "repair_result": 1
    },
    {
        "idx": 726,
        "db_id": "institution_sports",
        "question": "List the names of institutions in ascending alphabetical order.",
        "evidence": "",
        "gold": "SELECT Name FROM institution ORDER BY Name ASC",
        "pred": "SELECT `Name` FROM institution ORDER BY `Name` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM institution ORDER BY `Name` ASC",
        "repair_result": 1
    },
    {
        "idx": 727,
        "db_id": "institution_sports",
        "question": "What are the names of institutions, ordered alphabetically?",
        "evidence": "",
        "gold": "SELECT Name FROM institution ORDER BY Name ASC",
        "pred": "SELECT `Name` FROM institution ORDER BY `Name` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM institution ORDER BY `Name` ASC",
        "repair_result": 1
    },
    {
        "idx": 728,
        "db_id": "institution_sports",
        "question": "List the names of institutions in ascending order of founded year.",
        "evidence": "",
        "gold": "SELECT Name FROM institution ORDER BY Founded ASC",
        "pred": "SELECT `Name` FROM institution ORDER BY `Founded` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM institution ORDER BY `Founded` ASC",
        "repair_result": 1
    },
    {
        "idx": 729,
        "db_id": "institution_sports",
        "question": "What are the names of institutions, ordered by the years in which they were founded?",
        "evidence": "",
        "gold": "SELECT Name FROM institution ORDER BY Founded ASC",
        "pred": "SELECT `Name` FROM institution ORDER BY `Founded`",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM institution ORDER BY `Founded`",
        "repair_result": 1
    },
    {
        "idx": 730,
        "db_id": "institution_sports",
        "question": "What are the cities and provinces of institutions?",
        "evidence": "",
        "gold": "SELECT City ,  Province FROM institution",
        "pred": "SELECT `City`, `Province` FROM institution",
        "pred_result": 1,
        "repair_sql": "SELECT `City`, `Province` FROM institution",
        "repair_result": 1
    },
    {
        "idx": 731,
        "db_id": "institution_sports",
        "question": "Return the cities and provinces of institutions.",
        "evidence": "",
        "gold": "SELECT City ,  Province FROM institution",
        "pred": "SELECT `City`, `Province` FROM institution",
        "pred_result": 1,
        "repair_sql": "SELECT `City`, `Province` FROM institution",
        "repair_result": 1
    },
    {
        "idx": 732,
        "db_id": "institution_sports",
        "question": "What are the maximum and minimum enrollment of all institutions?",
        "evidence": "",
        "gold": "SELECT max(Enrollment) ,  min(Enrollment) FROM institution",
        "pred": "SELECT MAX(Enrollment) AS Maximum_Enrollment, MIN(Enrollment) AS Minimum_Enrollment FROM institution",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(Enrollment) AS Maximum_Enrollment, MIN(Enrollment) AS Minimum_Enrollment FROM institution",
        "repair_result": 1
    },
    {
        "idx": 733,
        "db_id": "institution_sports",
        "question": "Return the maximum and minimum enrollment across all institutions.",
        "evidence": "",
        "gold": "SELECT max(Enrollment) ,  min(Enrollment) FROM institution",
        "pred": "SELECT MAX(Enrollment) AS Max_Enrollment, MIN(Enrollment) AS Min_Enrollment FROM institution",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(Enrollment) AS Max_Enrollment, MIN(Enrollment) AS Min_Enrollment FROM institution",
        "repair_result": 1
    },
    {
        "idx": 734,
        "db_id": "institution_sports",
        "question": "What are the affiliations of institutions that are not in city \"Vancouver\"?",
        "evidence": "",
        "gold": "SELECT Affiliation FROM institution WHERE City != \"Vancouver\"",
        "pred": "SELECT DISTINCT `Affiliation` FROM institution WHERE City != 'Vancouver'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Affiliation` FROM institution WHERE City != 'Vancouver'",
        "repair_result": 1
    },
    {
        "idx": 735,
        "db_id": "institution_sports",
        "question": "Return the affiliations of instituions that are not in the city of Vancouver.",
        "evidence": "",
        "gold": "SELECT Affiliation FROM institution WHERE City != \"Vancouver\"",
        "pred": "SELECT DISTINCT `Affiliation` FROM institution WHERE City != 'Vancouver'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Affiliation` FROM institution WHERE City != 'Vancouver'",
        "repair_result": 1
    },
    {
        "idx": 736,
        "db_id": "institution_sports",
        "question": "What are the stadiums of institutions in descending order of the capacity.",
        "evidence": "",
        "gold": "SELECT Stadium FROM institution ORDER BY Capacity DESC",
        "pred": "SELECT `Stadium` FROM institution ORDER BY `Capacity` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Stadium` FROM institution ORDER BY `Capacity` DESC",
        "repair_result": 1
    },
    {
        "idx": 737,
        "db_id": "institution_sports",
        "question": "Return the stadiums of institutions, ordered by capacity descending.",
        "evidence": "",
        "gold": "SELECT Stadium FROM institution ORDER BY Capacity DESC",
        "pred": "SELECT `Stadium` FROM institution ORDER BY `Capacity` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Stadium` FROM institution ORDER BY `Capacity` DESC",
        "repair_result": 1
    },
    {
        "idx": 738,
        "db_id": "institution_sports",
        "question": "What is the stadium of the institution with the largest enrollment?",
        "evidence": "",
        "gold": "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1",
        "pred": "SELECT `Stadium` FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution)",
        "pred_result": 1,
        "repair_sql": "SELECT `Stadium` FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution)",
        "repair_result": 1
    },
    {
        "idx": 739,
        "db_id": "institution_sports",
        "question": "Give the stadium of the institution which is the greatest enrollment.",
        "evidence": "",
        "gold": "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1",
        "pred": "SELECT `Stadium` FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution)",
        "pred_result": 1,
        "repair_sql": "SELECT `Stadium` FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution)",
        "repair_result": 1
    },
    {
        "idx": 740,
        "db_id": "institution_sports",
        "question": "What are the names and nicknames of institutions?",
        "evidence": "",
        "gold": "SELECT T2.Name ,  T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID",
        "pred": "SELECT `Name`, `Nickname` FROM institution JOIN Championship ON institution.`Institution_ID` = Championship.`Institution_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT `Name`, `Nickname` FROM institution JOIN Championship ON institution.`Institution_ID` = Championship.`Institution_ID`",
        "repair_result": 1
    },
    {
        "idx": 741,
        "db_id": "institution_sports",
        "question": "Return the names of institutions, as well as their nicknames.",
        "evidence": "",
        "gold": "SELECT T2.Name ,  T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID",
        "pred": "SELECT `Name`, `Nickname` FROM institution JOIN Championship ON institution.`Institution_ID` = Championship.`Institution_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT `Name`, `Nickname` FROM institution JOIN Championship ON institution.`Institution_ID` = Championship.`Institution_ID`",
        "repair_result": 1
    },
    {
        "idx": 742,
        "db_id": "institution_sports",
        "question": "What is the nickname of the institution with the smallest enrollment?",
        "evidence": "",
        "gold": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1",
        "pred": "SELECT `Nickname` FROM Championship WHERE Institution_ID = (SELECT Institution_ID FROM institution ORDER BY Enrollment ASC LIMIT 1)",
        "pred_result": 0,
        "repair_sql": "SELECT `Nickname` FROM Championship WHERE Institution_ID = (SELECT Institution_ID FROM institution ORDER BY Enrollment ASC LIMIT 1)",
        "repair_result": 0
    },
    {
        "idx": 743,
        "db_id": "institution_sports",
        "question": "Return the nickname of the institution with the lowest enrollment.",
        "evidence": "",
        "gold": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1",
        "pred": "SELECT `Nickname` FROM Championship WHERE Institution_ID = (SELECT Institution_ID FROM institution ORDER BY Enrollment ASC LIMIT 1)",
        "pred_result": 0,
        "repair_sql": "SELECT `Nickname` FROM Championship WHERE Institution_ID = (SELECT Institution_ID FROM institution ORDER BY Enrollment ASC LIMIT 1)",
        "repair_result": 0
    },
    {
        "idx": 744,
        "db_id": "institution_sports",
        "question": "List the names of institutions in descending order of the number of championships.",
        "evidence": "",
        "gold": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC",
        "pred": "SELECT T1.`Name` FROM institution AS T1 JOIN Championship AS T2 ON T1.`Institution_ID` = T2.`Institution_ID` ORDER BY T2.`Number_of_Championships` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Name` FROM institution AS T1 JOIN Championship AS T2 ON T1.`Institution_ID` = T2.`Institution_ID` ORDER BY T2.`Number_of_Championships` DESC",
        "repair_result": 1
    },
    {
        "idx": 745,
        "db_id": "institution_sports",
        "question": "What are the names of institutions, ordered descending by their number of championships?",
        "evidence": "",
        "gold": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC",
        "pred": "SELECT `Name` FROM institution JOIN Championship ON institution.`Institution_ID` = Championship.`Institution_ID` ORDER BY Championship.`Number_of_Championships` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM institution JOIN Championship ON institution.`Institution_ID` = Championship.`Institution_ID` ORDER BY Championship.`Number_of_Championships` DESC",
        "repair_result": 1
    },
    {
        "idx": 746,
        "db_id": "institution_sports",
        "question": "List the names of institutions with at least one championship.",
        "evidence": "",
        "gold": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1",
        "pred": "SELECT `Name` FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship WHERE Number_of_Championships > 0)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship WHERE Number_of_Championships > 0)",
        "repair_result": 1
    },
    {
        "idx": 747,
        "db_id": "institution_sports",
        "question": "What are the names of institutions that have 1 or more championships?",
        "evidence": "",
        "gold": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1",
        "pred": "SELECT `Name` FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship WHERE Number_of_Championships >= 1)",
        "pred_result": 1,
        "repair_sql": "SELECT `Name` FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship WHERE Number_of_Championships >= 1)",
        "repair_result": 1
    },
    {
        "idx": 748,
        "db_id": "institution_sports",
        "question": "What is the total number of championship of institution with public affiliation?",
        "evidence": "",
        "gold": "SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  \"Public\"",
        "pred": "SELECT SUM(Number_of_Championships) FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE institution.Affiliation = 'Public'",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(Number_of_Championships) FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE institution.Affiliation = 'Public'",
        "repair_result": 1
    },
    {
        "idx": 749,
        "db_id": "institution_sports",
        "question": "Return the total number of championships of institutions that have a Public affiliation.",
        "evidence": "",
        "gold": "SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  \"Public\"",
        "pred": "SELECT SUM(Number_of_Championships) FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution WHERE Affiliation = 'Public')",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(Number_of_Championships) FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution WHERE Affiliation = 'Public')",
        "repair_result": 1
    },
    {
        "idx": 750,
        "db_id": "institution_sports",
        "question": "What are different types of affiliations of institutions and the corresponding number of institutions?",
        "evidence": "",
        "gold": "SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation",
        "pred": "SELECT `Affiliation`, COUNT(DISTINCT `Institution_ID`) FROM institution GROUP BY `Affiliation`",
        "pred_result": 1,
        "repair_sql": "SELECT `Affiliation`, COUNT(DISTINCT `Institution_ID`) FROM institution GROUP BY `Affiliation`",
        "repair_result": 1
    },
    {
        "idx": 751,
        "db_id": "institution_sports",
        "question": "How many institutions are there for each type of affiliation?",
        "evidence": "",
        "gold": "SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation",
        "pred": "SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation",
        "pred_result": 1,
        "repair_sql": "SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation",
        "repair_result": 1
    },
    {
        "idx": 752,
        "db_id": "institution_sports",
        "question": "What is the most common type of affiliation for institutions?",
        "evidence": "",
        "gold": "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT Affiliation, COUNT(*) AS Count FROM institution GROUP BY Affiliation ORDER BY Count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT Affiliation, COUNT(*) AS Count FROM institution GROUP BY Affiliation ORDER BY Count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 753,
        "db_id": "institution_sports",
        "question": "Return the most common type of affiliation across all institutions.",
        "evidence": "",
        "gold": "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT Affiliation, COUNT(*) AS count FROM institution GROUP BY Affiliation ORDER BY count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT Affiliation, COUNT(*) AS count FROM institution GROUP BY Affiliation ORDER BY count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 754,
        "db_id": "institution_sports",
        "question": "In which years were more than one institution founded?",
        "evidence": "",
        "gold": "SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1",
        "pred": "SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(*) > 1",
        "pred_result": 0,
        "repair_sql": "SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(*) > 1",
        "repair_result": 0
    },
    {
        "idx": 755,
        "db_id": "institution_sports",
        "question": "Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.",
        "evidence": "",
        "gold": "SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1",
        "pred": "SELECT Founded, COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*) > 1",
        "pred_result": 1,
        "repair_sql": "SELECT Founded, COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*) > 1",
        "repair_result": 1
    },
    {
        "idx": 756,
        "db_id": "institution_sports",
        "question": "List the nicknames of institutions in descending order of capacity.",
        "evidence": "",
        "gold": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC",
        "pred": "SELECT T2.`Nickname` FROM institution AS T1 JOIN Championship AS T2 ON T1.`Institution_ID` = T2.`Institution_ID` ORDER BY T1.`Capacity` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Nickname` FROM institution AS T1 JOIN Championship AS T2 ON T1.`Institution_ID` = T2.`Institution_ID` ORDER BY T1.`Capacity` DESC",
        "repair_result": 1
    },
    {
        "idx": 757,
        "db_id": "institution_sports",
        "question": "What are the nicknames of institutions, ordered descending by their capacities?",
        "evidence": "",
        "gold": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC",
        "pred": "SELECT T2.`Nickname` FROM institution AS T1 JOIN Championship AS T2 ON T1.`Institution_ID` = T2.`Institution_ID` ORDER BY T1.`Capacity` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Nickname` FROM institution AS T1 JOIN Championship AS T2 ON T1.`Institution_ID` = T2.`Institution_ID` ORDER BY T1.`Capacity` DESC",
        "repair_result": 1
    },
    {
        "idx": 758,
        "db_id": "institution_sports",
        "question": "What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary '' ?",
        "evidence": "",
        "gold": "select sum(enrollment) from institution where city  =  \"vancouver\" or city  =  \"calgary\"",
        "pred": "SELECT SUM(Enrollment) FROM institution WHERE Name LIKE '%Vancouver%' OR Name LIKE '%Calgary%'",
        "pred_result": 0,
        "repair_sql": "SELECT SUM(Enrollment) FROM institution WHERE Name LIKE '%Vancouver%' OR Name LIKE '%Calgary%'",
        "repair_result": 0
    },
    {
        "idx": 759,
        "db_id": "institution_sports",
        "question": "Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary .",
        "evidence": "",
        "gold": "select sum(enrollment) from institution where city  =  \"vancouver\" or city  =  \"calgary\"",
        "pred": "SELECT `Enrollment` FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'",
        "pred_result": 0,
        "repair_sql": "SELECT `Enrollment` FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'",
        "repair_result": 0
    },
    {
        "idx": 760,
        "db_id": "institution_sports",
        "question": "Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.",
        "evidence": "",
        "gold": "SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950",
        "pred": "SELECT DISTINCT Province FROM institution WHERE Founded < 1920 AND Founded > 1950",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT Province FROM institution WHERE Founded < 1920 AND Founded > 1950",
        "repair_result": 0
    },
    {
        "idx": 761,
        "db_id": "institution_sports",
        "question": "What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?",
        "evidence": "",
        "gold": "SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950",
        "pred": "SELECT DISTINCT `Province` FROM institution WHERE `Founded` < 1920 AND `Founded` > 1950",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT `Province` FROM institution WHERE `Founded` < 1920 AND `Founded` > 1950",
        "repair_result": 0
    },
    {
        "idx": 762,
        "db_id": "institution_sports",
        "question": "How many distinct provinces are the institutions in?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT Province) FROM institution",
        "pred": "SELECT COUNT(DISTINCT Province) FROM institution",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Province) FROM institution",
        "repair_result": 1
    },
    {
        "idx": 763,
        "db_id": "institution_sports",
        "question": "Count the number of different provinces that have institutions.",
        "evidence": "",
        "gold": "SELECT count(DISTINCT Province) FROM institution",
        "pred": "SELECT COUNT(DISTINCT Province) FROM institution",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Province) FROM institution",
        "repair_result": 1
    },
    {
        "idx": 764,
        "db_id": "university_rank",
        "question": "Show name, city, and state for all universities in  alphabetical order of university name.",
        "evidence": "",
        "gold": "SELECT university_name ,  city ,  state FROM University ORDER BY university_name",
        "pred": "SELECT `University_Name`, `City`, `State` FROM university ORDER BY `University_Name` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `University_Name`, `City`, `State` FROM university ORDER BY `University_Name` ASC",
        "repair_result": 1
    },
    {
        "idx": 765,
        "db_id": "university_rank",
        "question": "What are the names, cities, and states of all universities in alphabetical order (by name of the university).",
        "evidence": "",
        "gold": "SELECT university_name ,  city ,  state FROM University ORDER BY university_name",
        "pred": "SELECT `University_Name`, `City`, `State` FROM university ORDER BY `University_Name` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `University_Name`, `City`, `State` FROM university ORDER BY `University_Name` ASC",
        "repair_result": 1
    },
    {
        "idx": 766,
        "db_id": "university_rank",
        "question": "How many universities are in Illinois or Ohio?",
        "evidence": "",
        "gold": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'",
        "pred": "SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio')",
        "repair_result": 1
    },
    {
        "idx": 767,
        "db_id": "university_rank",
        "question": "What is the total number of universities located in Illinois or Ohio?",
        "evidence": "",
        "gold": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'",
        "pred": "SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio')",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio')",
        "repair_result": 1
    },
    {
        "idx": 768,
        "db_id": "university_rank",
        "question": "What is the maximum, average, and minimum enrollment for universities?",
        "evidence": "",
        "gold": "SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University",
        "pred": "SELECT MAX(Enrollment) AS Maximum_Enrollment, AVG(Enrollment) AS Average_Enrollment, MIN(Enrollment) AS Minimum_Enrollment FROM university",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(Enrollment) AS Maximum_Enrollment, AVG(Enrollment) AS Average_Enrollment, MIN(Enrollment) AS Minimum_Enrollment FROM university",
        "repair_result": 1
    },
    {
        "idx": 769,
        "db_id": "university_rank",
        "question": "What is the maximum, average, and minimum enrollment for all universities?",
        "evidence": "",
        "gold": "SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University",
        "pred": "SELECT MAX(Enrollment) AS Maximum_Enrollment, AVG(Enrollment) AS Average_Enrollment, MIN(Enrollment) AS Minimum_Enrollment FROM university",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(Enrollment) AS Maximum_Enrollment, AVG(Enrollment) AS Average_Enrollment, MIN(Enrollment) AS Minimum_Enrollment FROM university",
        "repair_result": 1
    },
    {
        "idx": 770,
        "db_id": "university_rank",
        "question": "List team name for all universities with enrollments above the average.",
        "evidence": "",
        "gold": "SELECT team_name FROM University WHERE enrollment  >  (SELECT avg(enrollment) FROM University)",
        "pred": "SELECT `Team_Name` FROM university WHERE `Enrollment` > (SELECT AVG(`Enrollment`) FROM university)",
        "pred_result": 1,
        "repair_sql": "SELECT `Team_Name` FROM university WHERE `Enrollment` > (SELECT AVG(`Enrollment`) FROM university)",
        "repair_result": 1
    },
    {
        "idx": 771,
        "db_id": "university_rank",
        "question": "What are the names of all teams from universities that have more people enrolled than average ?",
        "evidence": "",
        "gold": "select team_name from university where enrollment  >  (select avg(enrollment) from university)",
        "pred": "SELECT `Team_Name` FROM university WHERE `Enrollment` > (SELECT AVG(`Enrollment`) FROM university)",
        "pred_result": 1,
        "repair_sql": "SELECT `Team_Name` FROM university WHERE `Enrollment` > (SELECT AVG(`Enrollment`) FROM university)",
        "repair_result": 1
    },
    {
        "idx": 772,
        "db_id": "university_rank",
        "question": "Show all home conferences.",
        "evidence": "",
        "gold": "SELECT DISTINCT home_conference FROM University",
        "pred": "SELECT DISTINCT `Home_Conference` FROM university",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Home_Conference` FROM university",
        "repair_result": 1
    },
    {
        "idx": 773,
        "db_id": "university_rank",
        "question": "What are the different home conferences from the university table?",
        "evidence": "",
        "gold": "SELECT DISTINCT home_conference FROM University",
        "pred": "SELECT DISTINCT `Home_Conference` FROM university",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Home_Conference` FROM university",
        "repair_result": 1
    },
    {
        "idx": 774,
        "db_id": "university_rank",
        "question": "Show all home conferences and the number of universities in each conference.",
        "evidence": "",
        "gold": "SELECT home_conference ,  count(*) FROM University GROUP BY home_conference",
        "pred": "SELECT `Home_Conference`, COUNT(*) FROM university GROUP BY `Home_Conference`",
        "pred_result": 1,
        "repair_sql": "SELECT `Home_Conference`, COUNT(*) FROM university GROUP BY `Home_Conference`",
        "repair_result": 1
    },
    {
        "idx": 775,
        "db_id": "university_rank",
        "question": "For every home conference, how many universities attended that conference?",
        "evidence": "",
        "gold": "SELECT home_conference ,  count(*) FROM University GROUP BY home_conference",
        "pred": "SELECT Home_Conference, COUNT(DISTINCT University_ID) FROM university GROUP BY Home_Conference",
        "pred_result": 1,
        "repair_sql": "SELECT Home_Conference, COUNT(DISTINCT University_ID) FROM university GROUP BY Home_Conference",
        "repair_result": 1
    },
    {
        "idx": 776,
        "db_id": "university_rank",
        "question": "Which state has most number of universities?",
        "evidence": "",
        "gold": "SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT State, COUNT(*) AS Num_Universities FROM university GROUP BY State ORDER BY Num_Universities DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT State, COUNT(*) AS Num_Universities FROM university GROUP BY State ORDER BY Num_Universities DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 777,
        "db_id": "university_rank",
        "question": "What is the state with the most universities?",
        "evidence": "",
        "gold": "SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT State, COUNT(*) AS University_Count FROM university GROUP BY State ORDER BY University_Count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT State, COUNT(*) AS University_Count FROM university GROUP BY State ORDER BY University_Count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 778,
        "db_id": "university_rank",
        "question": "Show all home conferences with average enrollment of universities above 2000.",
        "evidence": "",
        "gold": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000",
        "pred": "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000",
        "pred_result": 1,
        "repair_sql": "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000",
        "repair_result": 1
    },
    {
        "idx": 779,
        "db_id": "university_rank",
        "question": "What are the home conferences that have an average university enrollment above 2000?",
        "evidence": "",
        "gold": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000",
        "pred": "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000",
        "pred_result": 1,
        "repair_sql": "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000",
        "repair_result": 1
    },
    {
        "idx": 780,
        "db_id": "university_rank",
        "question": "Which conference has the least number of total enrollment?",
        "evidence": "",
        "gold": "SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1",
        "pred": "SELECT Home_Conference, SUM(Enrollment) AS Total_Enrollment FROM university GROUP BY Home_Conference ORDER BY Total_Enrollment LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT Home_Conference, SUM(Enrollment) AS Total_Enrollment FROM university GROUP BY Home_Conference ORDER BY Total_Enrollment LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 781,
        "db_id": "university_rank",
        "question": "What are the home conferences with the fewest number of people enrolled?",
        "evidence": "",
        "gold": "SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1",
        "pred": "SELECT `Home_Conference`, MIN(`Enrollment`) FROM university GROUP BY `Home_Conference`",
        "pred_result": 0,
        "repair_sql": "SELECT `Home_Conference`, MIN(`Enrollment`) FROM university GROUP BY `Home_Conference`",
        "repair_result": 0
    },
    {
        "idx": 782,
        "db_id": "university_rank",
        "question": "List all major name and major code in the order of their major code",
        "evidence": "",
        "gold": "SELECT major_name ,  major_code FROM Major ORDER BY major_code",
        "pred": "SELECT `Major_Name`, `Major_Code` FROM major ORDER BY `Major_Code`",
        "pred_result": 1,
        "repair_sql": "SELECT `Major_Name`, `Major_Code` FROM major ORDER BY `Major_Code`",
        "repair_result": 1
    },
    {
        "idx": 783,
        "db_id": "university_rank",
        "question": "What are the names and codes for all majors ordered by their code?",
        "evidence": "",
        "gold": "SELECT major_name ,  major_code FROM Major ORDER BY major_code",
        "pred": "SELECT `Major_Name`, `Major_Code` FROM major ORDER BY `Major_Code`",
        "pred_result": 1,
        "repair_sql": "SELECT `Major_Name`, `Major_Code` FROM major ORDER BY `Major_Code`",
        "repair_result": 1
    },
    {
        "idx": 784,
        "db_id": "university_rank",
        "question": "Show all majors and major ranks for the university with name Augustana College.",
        "evidence": "",
        "gold": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
        "pred": "SELECT T2.`Major_Name`, T3.`Rank` FROM university AS T1 JOIN major_ranking AS T3 ON T1.`University_ID` = T3.`University_ID` JOIN major AS T2 ON T3.`Major_ID` = T2.`Major_ID` WHERE T1.`University_Name` = 'Augustana College'",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`Major_Name`, T3.`Rank` FROM university AS T1 JOIN major_ranking AS T3 ON T1.`University_ID` = T3.`University_ID` JOIN major AS T2 ON T3.`Major_ID` = T2.`Major_ID` WHERE T1.`University_Name` = 'Augustana College'",
        "repair_result": 0
    },
    {
        "idx": 785,
        "db_id": "university_rank",
        "question": "What are the ranks and names of all majors at Augustana College?",
        "evidence": "",
        "gold": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
        "pred": "SELECT major_ranking.`Rank`, major.`Major_Name` FROM major_ranking JOIN major ON major_ranking.`Major_ID` = major.`Major_ID` WHERE major_ranking.`University_ID` = (SELECT University_ID FROM university WHERE University_Name = 'Augustana College')",
        "pred_result": 1,
        "repair_sql": "SELECT major_ranking.`Rank`, major.`Major_Name` FROM major_ranking JOIN major ON major_ranking.`Major_ID` = major.`Major_ID` WHERE major_ranking.`University_ID` = (SELECT University_ID FROM university WHERE University_Name = 'Augustana College')",
        "repair_result": 1
    },
    {
        "idx": 786,
        "db_id": "university_rank",
        "question": "What is the name, city, state of the university with a rank 1 on Accounting major?",
        "evidence": "",
        "gold": "SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'",
        "pred": "SELECT University_Name, City, State FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank = 1)",
        "pred_result": 1,
        "repair_sql": "SELECT University_Name, City, State FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank = 1)",
        "repair_result": 1
    },
    {
        "idx": 787,
        "db_id": "university_rank",
        "question": "What is the name, city, and state of the university with number 1 ranked Accounting major?",
        "evidence": "",
        "gold": "SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'",
        "pred": "SELECT University_Name, City, State FROM university WHERE University_ID = ( SELECT University_ID FROM major_ranking WHERE Major_ID = ( SELECT Major_ID FROM major WHERE Major_Name = 'Accounting' ) AND Rank = 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT University_Name, City, State FROM university WHERE University_ID = ( SELECT University_ID FROM major_ranking WHERE Major_ID = ( SELECT Major_ID FROM major WHERE Major_Name = 'Accounting' ) AND Rank = 1 )",
        "repair_result": 0
    },
    {
        "idx": 788,
        "db_id": "university_rank",
        "question": "What is the name of the university that has most number of majors with rank 1?",
        "evidence": "",
        "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT University_Name FROM university WHERE University_ID IN ( SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) = ( SELECT COUNT(*) FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1 ) )",
        "pred_result": 0,
        "repair_sql": "SELECT University_Name FROM university WHERE University_ID IN ( SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) = ( SELECT COUNT(*) FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1 ) )",
        "repair_result": 0
    },
    {
        "idx": 789,
        "db_id": "university_rank",
        "question": "What is the name of the university with the most majors ranked number 1?",
        "evidence": "",
        "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT University_Name FROM university WHERE University_ID IN ( SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) = ( SELECT MAX(cnt) FROM ( SELECT University_ID, COUNT(*) as cnt FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ) ) )",
        "pred_result": 0,
        "repair_sql": "SELECT University_Name FROM university WHERE University_ID IN ( SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) = ( SELECT MAX(cnt) FROM ( SELECT University_ID, COUNT(*) as cnt FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ) ) )",
        "repair_result": 0
    },
    {
        "idx": 790,
        "db_id": "university_rank",
        "question": "Show all university names without a major with rank 1?",
        "evidence": "",
        "gold": "SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1",
        "pred": "SELECT `University_Name` FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)",
        "pred_result": 1,
        "repair_sql": "SELECT `University_Name` FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)",
        "repair_result": 1
    },
    {
        "idx": 791,
        "db_id": "university_rank",
        "question": "What are the names of all universities without any majors ranked number 1?",
        "evidence": "",
        "gold": "SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1",
        "pred": "SELECT `University_Name` FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)",
        "pred_result": 1,
        "repair_sql": "SELECT `University_Name` FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)",
        "repair_result": 1
    },
    {
        "idx": 792,
        "db_id": "university_rank",
        "question": "Show all university names with both major Accounting and major Urban Education.",
        "evidence": "",
        "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'",
        "pred": "SELECT University_Name FROM university WHERE University_ID IN ( SELECT University_ID FROM major_ranking WHERE Major_ID IN ( SELECT Major_ID FROM major WHERE Major_Name IN ('Accounting', 'Urban Education') ) GROUP BY University_ID HAVING COUNT(DISTINCT Major_ID) = 2 )",
        "pred_result": 1,
        "repair_sql": "SELECT University_Name FROM university WHERE University_ID IN ( SELECT University_ID FROM major_ranking WHERE Major_ID IN ( SELECT Major_ID FROM major WHERE Major_Name IN ('Accounting', 'Urban Education') ) GROUP BY University_ID HAVING COUNT(DISTINCT Major_ID) = 2 )",
        "repair_result": 1
    },
    {
        "idx": 793,
        "db_id": "university_rank",
        "question": "What are the names of all universities that have both Accounting and Urban Education majors?",
        "evidence": "",
        "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'",
        "pred": "SELECT DISTINCT U.`University_Name` FROM university U JOIN major_ranking MR1 ON U.`University_ID` = MR1.`University_ID` JOIN major M1 ON MR1.`Major_ID` = M1.`Major_ID` AND M1.`Major_Name` = 'Accounting' JOIN major_ranking MR2 ON U.`University_ID` = MR2.`University_ID` JOIN major M2 ON MR2.`Major_ID` = M2.`Major_ID` AND M2.`Major_Name` = 'Urban Education'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT U.`University_Name` FROM university U JOIN major_ranking MR1 ON U.`University_ID` = MR1.`University_ID` JOIN major M1 ON MR1.`Major_ID` = M1.`Major_ID` AND M1.`Major_Name` = 'Accounting' JOIN major_ranking MR2 ON U.`University_ID` = MR2.`University_ID` JOIN major M2 ON MR2.`Major_ID` = M2.`Major_ID` AND M2.`Major_Name` = 'Urban Education'",
        "repair_result": 1
    },
    {
        "idx": 794,
        "db_id": "university_rank",
        "question": "What is the name and overall ranking of universities in Wisconsin state?",
        "evidence": "",
        "gold": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'",
        "pred": "SELECT University_Name, Rank FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE State = 'Wisconsin'",
        "pred_result": 1,
        "repair_sql": "SELECT University_Name, Rank FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE State = 'Wisconsin'",
        "repair_result": 1
    },
    {
        "idx": 795,
        "db_id": "university_rank",
        "question": "What is the name and rank of every university in Wisconsin?",
        "evidence": "",
        "gold": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'",
        "pred": "SELECT University_Name, Rank FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE State = 'Wisconsin'",
        "pred_result": 1,
        "repair_sql": "SELECT University_Name, Rank FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE State = 'Wisconsin'",
        "repair_result": 1
    },
    {
        "idx": 796,
        "db_id": "university_rank",
        "question": "What is the university name with highest research point?",
        "evidence": "",
        "gold": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1",
        "pred": "SELECT University_Name FROM university WHERE University_ID = ( SELECT University_ID FROM overall_ranking WHERE Research_point = ( SELECT MAX(Research_point) FROM overall_ranking ) )",
        "pred_result": 1,
        "repair_sql": "SELECT University_Name FROM university WHERE University_ID = ( SELECT University_ID FROM overall_ranking WHERE Research_point = ( SELECT MAX(Research_point) FROM overall_ranking ) )",
        "repair_result": 1
    },
    {
        "idx": 797,
        "db_id": "university_rank",
        "question": "What is the name of the university with the most research points?",
        "evidence": "",
        "gold": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1",
        "pred": "SELECT `University_Name` FROM university WHERE University_ID = (SELECT University_ID FROM overall_ranking ORDER BY Research_point DESC LIMIT 1)",
        "pred_result": 1,
        "repair_sql": "SELECT `University_Name` FROM university WHERE University_ID = (SELECT University_ID FROM overall_ranking ORDER BY Research_point DESC LIMIT 1)",
        "repair_result": 1
    },
    {
        "idx": 798,
        "db_id": "university_rank",
        "question": "List all university names in ascending order of their reputation points.",
        "evidence": "",
        "gold": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point",
        "pred": "SELECT `University_Name` FROM university JOIN overall_ranking ON university.`University_ID` = overall_ranking.`University_ID` ORDER BY `Reputation_point` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `University_Name` FROM university JOIN overall_ranking ON university.`University_ID` = overall_ranking.`University_ID` ORDER BY `Reputation_point` ASC",
        "repair_result": 1
    },
    {
        "idx": 799,
        "db_id": "university_rank",
        "question": "What are the names of all universities in ascending order of reputation points?",
        "evidence": "",
        "gold": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point",
        "pred": "SELECT University_Name FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY Reputation_point ASC",
        "pred_result": 1,
        "repair_sql": "SELECT University_Name FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY Reputation_point ASC",
        "repair_result": 1
    },
    {
        "idx": 800,
        "db_id": "university_rank",
        "question": "What is the name of university with major Accounting ranked 3 or above?",
        "evidence": "",
        "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  \"Accounting\"",
        "pred": "SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank >= 3)",
        "pred_result": 0,
        "repair_sql": "SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank >= 3)",
        "repair_result": 0
    },
    {
        "idx": 801,
        "db_id": "university_rank",
        "question": "What are the names of the university with an Accounting major ranked 3 or higher?",
        "evidence": "",
        "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  \"Accounting\"",
        "pred": "SELECT DISTINCT U.`University_Name` FROM university AS U JOIN major_ranking AS MR ON U.`University_ID` = MR.`University_ID` JOIN major AS M ON MR.`Major_ID` = M.`Major_ID` WHERE M.`Major_Name` = 'Accounting' AND MR.`Rank` >= 3",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT U.`University_Name` FROM university AS U JOIN major_ranking AS MR ON U.`University_ID` = MR.`University_ID` JOIN major AS M ON MR.`Major_ID` = M.`Major_ID` WHERE M.`Major_Name` = 'Accounting' AND MR.`Rank` >= 3",
        "repair_result": 0
    },
    {
        "idx": 802,
        "db_id": "university_rank",
        "question": "What is the total enrollment of universities with a overall rank 5 or below?",
        "evidence": "",
        "gold": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
        "pred": "SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5)",
        "pred_result": 0,
        "repair_sql": "SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5)",
        "repair_result": 0
    },
    {
        "idx": 803,
        "db_id": "university_rank",
        "question": "What is the total number of students enrolled in an university with a rank of 5 or below?",
        "evidence": "",
        "gold": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
        "pred": "SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5)",
        "pred_result": 0,
        "repair_sql": "SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5)",
        "repair_result": 0
    },
    {
        "idx": 804,
        "db_id": "university_rank",
        "question": "Find the name and Citation point of the universities whose reputation points are top 3 and above.",
        "evidence": "",
        "gold": "SELECT T1.University_Name ,  T2.Citation_point FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.Reputation_point DESC LIMIT 3",
        "pred": "SELECT `University_Name`, `Citation_point` FROM university JOIN overall_ranking ON university.`University_ID` = overall_ranking.`University_ID` WHERE `Reputation_point` >= 3 ORDER BY `Reputation_point` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `University_Name`, `Citation_point` FROM university JOIN overall_ranking ON university.`University_ID` = overall_ranking.`University_ID` WHERE `Reputation_point` >= 3 ORDER BY `Reputation_point` DESC",
        "repair_result": 1
    },
    {
        "idx": 805,
        "db_id": "university_rank",
        "question": "What is the name and citation point of the unversities with the top 3 reputation points?",
        "evidence": "",
        "gold": "SELECT T1.University_Name ,  T2.Citation_point FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.Reputation_point DESC LIMIT 3",
        "pred": "SELECT U.`University_Name`, OR.`Citation_point` FROM university AS U JOIN overall_ranking AS OR ON U.`University_ID` = OR.`University_ID` WHERE OR.`Rank` <= 3",
        "pred_result": "near \"OR\": syntax error",
        "repair_sql": "SELECT U.`University_Name`, OR.`Citation_point` FROM university AS U JOIN overall_ranking AS OR ON U.`University_ID` = OR.`University_ID` WHERE OR.`Rank` <= 3 ORDER BY OR.`Citation_point` DESC LIMIT 3;",
        "repair_result": "near \"OR\": syntax error"
    },
    {
        "idx": 806,
        "db_id": "university_rank",
        "question": "which states do have more than two universities with enrollment smaller than 3000?",
        "evidence": "",
        "gold": "SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2",
        "pred": "SELECT DISTINCT State FROM university WHERE University_ID IN ( SELECT University_ID FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2 )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT State FROM university WHERE University_ID IN ( SELECT University_ID FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2 )",
        "repair_result": 1
    },
    {
        "idx": 807,
        "db_id": "university_rank",
        "question": "What are the states that have more than 2 universities with an enrollment less than 3000?",
        "evidence": "",
        "gold": "SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2",
        "pred": "SELECT DISTINCT `State` FROM university WHERE `Enrollment` < 3000 GROUP BY `State` HAVING COUNT(`University_ID`) > 2",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `State` FROM university WHERE `Enrollment` < 3000 GROUP BY `State` HAVING COUNT(`University_ID`) > 2",
        "repair_result": 1
    },
    {
        "idx": 808,
        "db_id": "movie_2",
        "question": "Find the titles of movies that don\u2019t have any rating.",
        "evidence": "",
        "gold": "SELECT title FROM movies WHERE rating  =  'null'",
        "pred": "SELECT Title FROM Movies WHERE Rating = 'None'",
        "pred_result": 1,
        "repair_sql": "SELECT Title FROM Movies WHERE Rating = 'None'",
        "repair_result": 1
    },
    {
        "idx": 809,
        "db_id": "movie_2",
        "question": "What are the names of movies that do not have any ratings?",
        "evidence": "",
        "gold": "SELECT title FROM movies WHERE rating  =  'null'",
        "pred": "SELECT `Title` FROM Movies WHERE `Rating` = 'None'",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM Movies WHERE `Rating` = 'None'",
        "repair_result": 1
    },
    {
        "idx": 810,
        "db_id": "movie_2",
        "question": "Find the names of movies whose rating is \u2018G\u2019.",
        "evidence": "",
        "gold": "SELECT title FROM movies WHERE rating  =  'G'",
        "pred": "SELECT `Title` FROM Movies WHERE `Rating` = 'G'",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM Movies WHERE `Rating` = 'G'",
        "repair_result": 1
    },
    {
        "idx": 811,
        "db_id": "movie_2",
        "question": "What are names of movies that have a 'G' ratings?",
        "evidence": "",
        "gold": "SELECT title FROM movies WHERE rating  =  'G'",
        "pred": "SELECT `Title` FROM Movies WHERE `Rating` = 'G'",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM Movies WHERE `Rating` = 'G'",
        "repair_result": 1
    },
    {
        "idx": 812,
        "db_id": "movie_2",
        "question": "Find the title of the movie that is played in the Odeon theater.",
        "evidence": "",
        "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "pred": "SELECT M.Title FROM Movies AS M JOIN MovieTheaters AS MT ON M.Code = MT.Movie WHERE MT.Name = 'Odeon'",
        "pred_result": 1,
        "repair_sql": "SELECT M.Title FROM Movies AS M JOIN MovieTheaters AS MT ON M.Code = MT.Movie WHERE MT.Name = 'Odeon'",
        "repair_result": 1
    },
    {
        "idx": 813,
        "db_id": "movie_2",
        "question": "What are the movie titles for ones that are played in the Odeon theater?",
        "evidence": "",
        "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "pred": "SELECT M.`Title` FROM Movies AS M JOIN MovieTheaters AS MT ON M.`Code` = MT.`Movie` WHERE MT.`Name` = 'Odeon'",
        "pred_result": 1,
        "repair_sql": "SELECT M.`Title` FROM Movies AS M JOIN MovieTheaters AS MT ON M.`Code` = MT.`Movie` WHERE MT.`Name` = 'Odeon'",
        "repair_result": 1
    },
    {
        "idx": 814,
        "db_id": "movie_2",
        "question": "Find the names of movies that are played in any theater and the name of the corresponding theater.",
        "evidence": "",
        "gold": "SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
        "pred": "SELECT M.`Title`, MT.`Name` FROM Movies AS M JOIN MovieTheaters AS MT ON M.`Code` = MT.`Movie`",
        "pred_result": 1,
        "repair_sql": "SELECT M.`Title`, MT.`Name` FROM Movies AS M JOIN MovieTheaters AS MT ON M.`Code` = MT.`Movie`",
        "repair_result": 1
    },
    {
        "idx": 815,
        "db_id": "movie_2",
        "question": "What are the names of the movies that are played in any theater and the name of the corresponding theater?",
        "evidence": "",
        "gold": "SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
        "pred": "SELECT M.`Title`, MT.`Name` FROM Movies AS M JOIN MovieTheaters AS MT ON M.`Code` = MT.`Movie`",
        "pred_result": 1,
        "repair_sql": "SELECT M.`Title`, MT.`Name` FROM Movies AS M JOIN MovieTheaters AS MT ON M.`Code` = MT.`Movie`",
        "repair_result": 1
    },
    {
        "idx": 816,
        "db_id": "movie_2",
        "question": "Find the number of movies whose rating is \u2018G\u2019.",
        "evidence": "",
        "gold": "SELECT count(*) FROM movies WHERE rating  =  'G'",
        "pred": "SELECT COUNT(*) FROM Movies WHERE Rating = 'G'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Movies WHERE Rating = 'G'",
        "repair_result": 1
    },
    {
        "idx": 817,
        "db_id": "movie_2",
        "question": "How many movies had a 'G' rating?",
        "evidence": "",
        "gold": "SELECT count(*) FROM movies WHERE rating  =  'G'",
        "pred": "SELECT COUNT(*) FROM Movies WHERE Rating = 'G'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Movies WHERE Rating = 'G'",
        "repair_result": 1
    },
    {
        "idx": 818,
        "db_id": "movie_2",
        "question": "How many movies are playing across all theaters?",
        "evidence": "",
        "gold": "SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
        "pred": "SELECT COUNT(DISTINCT Movie) FROM MovieTheaters",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Movie) FROM MovieTheaters",
        "repair_result": 1
    },
    {
        "idx": 819,
        "db_id": "movie_2",
        "question": "How many movies are playing in theaters?",
        "evidence": "",
        "gold": "SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
        "pred": "SELECT COUNT(DISTINCT Movie) FROM MovieTheaters",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Movie) FROM MovieTheaters",
        "repair_result": 1
    },
    {
        "idx": 820,
        "db_id": "movie_2",
        "question": "How many distinct movies are on in theaters?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
        "pred": "SELECT COUNT(DISTINCT Title) FROM Movies",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT Title) FROM Movies",
        "repair_result": 0
    },
    {
        "idx": 821,
        "db_id": "movie_2",
        "question": "How many different movies are playing?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
        "pred": "SELECT COUNT(DISTINCT Title) FROM Movies",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT Title) FROM Movies",
        "repair_result": 0
    },
    {
        "idx": 822,
        "db_id": "movie_2",
        "question": "How many distinct movie theaters are there?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT name) FROM movietheaters",
        "pred": "SELECT COUNT(DISTINCT Name) FROM MovieTheaters",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Name) FROM MovieTheaters",
        "repair_result": 1
    },
    {
        "idx": 823,
        "db_id": "movie_2",
        "question": "How many different movie theaters exist?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT name) FROM movietheaters",
        "pred": "SELECT COUNT(DISTINCT Name) FROM MovieTheaters",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT Name) FROM MovieTheaters",
        "repair_result": 1
    },
    {
        "idx": 824,
        "db_id": "movie_2",
        "question": "Find the rating of the movie whose name includes the word \u2018Citizen\u2019.",
        "evidence": "",
        "gold": "SELECT rating FROM movies WHERE title LIKE '%Citizen%'",
        "pred": "SELECT `Rating` FROM Movies WHERE `Title` LIKE '%Citizen%'",
        "pred_result": 1,
        "repair_sql": "SELECT `Rating` FROM Movies WHERE `Title` LIKE '%Citizen%'",
        "repair_result": 1
    },
    {
        "idx": 825,
        "db_id": "movie_2",
        "question": "What is the rating of the movie what has a name including a word like 'Citizen'?",
        "evidence": "",
        "gold": "SELECT rating FROM movies WHERE title LIKE '%Citizen%'",
        "pred": "SELECT M.`Rating` FROM Movies AS M JOIN MovieTheaters AS MT ON M.`Code` = MT.`Movie` WHERE M.`Title` LIKE '%Citizen%'",
        "pred_result": 1,
        "repair_sql": "SELECT M.`Rating` FROM Movies AS M JOIN MovieTheaters AS MT ON M.`Code` = MT.`Movie` WHERE M.`Title` LIKE '%Citizen%'",
        "repair_result": 1
    },
    {
        "idx": 826,
        "db_id": "movie_2",
        "question": "Find the name of the cinemas that are playing movies with either rating \u2018G\u2019 or rating \u2018PG\u2019.",
        "evidence": "",
        "gold": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'",
        "pred": "SELECT DISTINCT T2.`Name` FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.`Movie` = T2.`Code` WHERE T2.`Rating` = 'G' OR T2.`Rating` = 'PG'",
        "pred_result": "no such column: T2.Name",
        "repair_sql": "SELECT DISTINCT T1.`Name` FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.`Movie` = T2.`Code` WHERE T2.`Rating` = 'G' OR T2.`Rating` = 'PG'",
        "repair_result": 0
    },
    {
        "idx": 827,
        "db_id": "movie_2",
        "question": "What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?",
        "evidence": "",
        "gold": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'",
        "pred": "SELECT DISTINCT `Name` FROM MovieTheaters JOIN Movies ON MovieTheaters.`Movie` = Movies.`Code` WHERE Movies.`Rating` IN ('G', 'PG')",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT `Name` FROM MovieTheaters JOIN Movies ON MovieTheaters.`Movie` = Movies.`Code` WHERE Movies.`Rating` IN ('G', 'PG')",
        "repair_result": 0
    },
    {
        "idx": 828,
        "db_id": "movie_2",
        "question": "Find the name of the movies that are played in either cinema Odeon or Imperial.",
        "evidence": "",
        "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
        "pred": "SELECT DISTINCT M.`Title` FROM Movies AS M JOIN MovieTheaters AS MT ON M.`Code` = MT.`Movie` WHERE MT.`Name` IN ('Odeon', 'Imperial')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT M.`Title` FROM Movies AS M JOIN MovieTheaters AS MT ON M.`Code` = MT.`Movie` WHERE MT.`Name` IN ('Odeon', 'Imperial')",
        "repair_result": 1
    },
    {
        "idx": 829,
        "db_id": "movie_2",
        "question": "What are the titles of all the movies that played at the Odeon or Imperial theater?",
        "evidence": "",
        "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
        "pred": "SELECT Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial')",
        "pred_result": 1,
        "repair_sql": "SELECT Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial')",
        "repair_result": 1
    },
    {
        "idx": 830,
        "db_id": "movie_2",
        "question": "Find the name of the movie that is on in both Odeon and Imperial theaters.",
        "evidence": "",
        "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
        "pred": "SELECT M1.`Title` FROM Movies AS M1 JOIN MovieTheaters AS MT1 ON M1.`Code` = MT1.`Movie` JOIN MovieTheaters AS MT2 ON M1.`Code` = MT2.`Movie` WHERE MT1.`Name` = 'Odeon' AND MT2.`Name` = 'Imperial'",
        "pred_result": 1,
        "repair_sql": "SELECT M1.`Title` FROM Movies AS M1 JOIN MovieTheaters AS MT1 ON M1.`Code` = MT1.`Movie` JOIN MovieTheaters AS MT2 ON M1.`Code` = MT2.`Movie` WHERE MT1.`Name` = 'Odeon' AND MT2.`Name` = 'Imperial'",
        "repair_result": 1
    },
    {
        "idx": 831,
        "db_id": "movie_2",
        "question": "What movie is playing at both the Odeon and Imperial theater?",
        "evidence": "",
        "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
        "pred": "SELECT M1.`Title` FROM Movies AS M1 JOIN MovieTheaters AS MT1 ON M1.`Code` = MT1.`Movie` JOIN MovieTheaters AS MT2 ON MT1.`Movie` = MT2.`Movie` WHERE MT1.`Name` = 'Odeon' AND MT2.`Name` = 'Imperial'",
        "pred_result": 1,
        "repair_sql": "SELECT M1.`Title` FROM Movies AS M1 JOIN MovieTheaters AS MT1 ON M1.`Code` = MT1.`Movie` JOIN MovieTheaters AS MT2 ON MT1.`Movie` = MT2.`Movie` WHERE MT1.`Name` = 'Odeon' AND MT2.`Name` = 'Imperial'",
        "repair_result": 1
    },
    {
        "idx": 832,
        "db_id": "movie_2",
        "question": "Find the name of all movies that are not played in Odeon theater.",
        "evidence": "",
        "gold": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "pred": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')",
        "pred_result": 1,
        "repair_sql": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')",
        "repair_result": 1
    },
    {
        "idx": 833,
        "db_id": "movie_2",
        "question": "What are the names of every movie that is not playing at the Odeon theater?",
        "evidence": "",
        "gold": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "pred": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')",
        "pred_result": 1,
        "repair_sql": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')",
        "repair_result": 1
    },
    {
        "idx": 834,
        "db_id": "movie_2",
        "question": "List in alphabetical order the titles of all movies.",
        "evidence": "",
        "gold": "SELECT title FROM movies ORDER BY title",
        "pred": "SELECT `Title` FROM Movies ORDER BY `Title` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM Movies ORDER BY `Title` ASC",
        "repair_result": 1
    },
    {
        "idx": 835,
        "db_id": "movie_2",
        "question": "What are the movie names in alphabetical order?",
        "evidence": "",
        "gold": "SELECT title FROM movies ORDER BY title",
        "pred": "SELECT `Title` FROM Movies ORDER BY `Title` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM Movies ORDER BY `Title` ASC",
        "repair_result": 1
    },
    {
        "idx": 836,
        "db_id": "movie_2",
        "question": "Find the titles of all movies sorted by their ratings.",
        "evidence": "",
        "gold": "SELECT title FROM movies ORDER BY rating",
        "pred": "SELECT `Title` FROM Movies ORDER BY `Rating`",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM Movies ORDER BY `Rating`",
        "repair_result": 1
    },
    {
        "idx": 837,
        "db_id": "movie_2",
        "question": "What are the movie names sorted by rating?",
        "evidence": "",
        "gold": "SELECT title FROM movies ORDER BY rating",
        "pred": "SELECT `Title` FROM Movies ORDER BY `Rating`",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM Movies ORDER BY `Rating`",
        "repair_result": 1
    },
    {
        "idx": 838,
        "db_id": "movie_2",
        "question": "Find the name of the theater that is playing the most number of movies.",
        "evidence": "",
        "gold": "SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T2.`Name` FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.`Movie` = T2.`Code` GROUP BY T1.`Name` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": "no such column: T2.Name",
        "repair_sql": "SELECT T1.`Name` FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.`Movie` = T2.`Code` GROUP BY T1.`Name` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 839,
        "db_id": "movie_2",
        "question": "What is the name of the theater playing the most movies?",
        "evidence": "",
        "gold": "SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`Name` FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.`Movie` = T2.`Code` GROUP BY T1.`Name` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Name` FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.`Movie` = T2.`Code` GROUP BY T1.`Name` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 840,
        "db_id": "movie_2",
        "question": "Find the name of the movie that is played in the most number of theaters.",
        "evidence": "",
        "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT M.Title FROM Movies AS M JOIN MovieTheaters AS MT ON M.Code = MT.Movie GROUP BY M.Title ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT M.Title FROM Movies AS M JOIN MovieTheaters AS MT ON M.Code = MT.Movie GROUP BY M.Title ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 841,
        "db_id": "movie_2",
        "question": "What is the name of the film playing at the most number of theaters?",
        "evidence": "",
        "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT M.Title FROM Movies AS M JOIN MovieTheaters AS MT ON M.Code = MT.Movie GROUP BY M.Title ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT M.Title FROM Movies AS M JOIN MovieTheaters AS MT ON M.Code = MT.Movie GROUP BY M.Title ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 842,
        "db_id": "movie_2",
        "question": "Find the number of movies in each rating.",
        "evidence": "",
        "gold": "SELECT count(*) ,  rating FROM movies GROUP BY rating",
        "pred": "SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating",
        "pred_result": 0,
        "repair_sql": "SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating",
        "repair_result": 0
    },
    {
        "idx": 843,
        "db_id": "movie_2",
        "question": "How many movies exist for each rating?",
        "evidence": "",
        "gold": "SELECT count(*) ,  rating FROM movies GROUP BY rating",
        "pred": "SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating",
        "pred_result": 0,
        "repair_sql": "SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating",
        "repair_result": 0
    },
    {
        "idx": 844,
        "db_id": "movie_2",
        "question": "Find the number of movies whose rating is not null.",
        "evidence": "",
        "gold": "SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating",
        "pred": "SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL",
        "repair_result": 0
    },
    {
        "idx": 845,
        "db_id": "movie_2",
        "question": "How many movies have a rating that is not null?",
        "evidence": "",
        "gold": "SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating",
        "pred": "SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL",
        "repair_result": 0
    },
    {
        "idx": 846,
        "db_id": "movie_2",
        "question": "Find the name of theaters that has at least one movie playing.",
        "evidence": "",
        "gold": "SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1",
        "pred": "SELECT DISTINCT `Name` FROM MovieTheaters",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Name` FROM MovieTheaters",
        "repair_result": 1
    },
    {
        "idx": 847,
        "db_id": "movie_2",
        "question": "What are the names of every theater with at least one movie playing?",
        "evidence": "",
        "gold": "SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1",
        "pred": "SELECT DISTINCT `Name` FROM MovieTheaters",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Name` FROM MovieTheaters",
        "repair_result": 1
    },
    {
        "idx": 848,
        "db_id": "movie_2",
        "question": "Select the name of all movie theaters that are not currently showing a movie.",
        "evidence": "",
        "gold": "SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'",
        "pred": "SELECT Name FROM MovieTheaters WHERE Movie IS NULL",
        "pred_result": 0,
        "repair_sql": "SELECT Name FROM MovieTheaters WHERE Movie IS NULL",
        "repair_result": 0
    },
    {
        "idx": 849,
        "db_id": "movie_2",
        "question": "What are the names of all cinemas not showing any movies?",
        "evidence": "",
        "gold": "SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'",
        "pred": "SELECT Name FROM MovieTheaters WHERE Movie IS NULL",
        "pred_result": 0,
        "repair_sql": "SELECT Name FROM MovieTheaters WHERE Movie IS NULL",
        "repair_result": 0
    },
    {
        "idx": 850,
        "db_id": "movie_2",
        "question": "Find the name of the movie theaters that are playing the movies whose rating is \u2018G\u2019.",
        "evidence": "",
        "gold": "SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'",
        "pred": "SELECT DISTINCT T2.`Name` FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.`Code` = T2.`Movie` WHERE T1.`Rating` = 'G'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.`Name` FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.`Code` = T2.`Movie` WHERE T1.`Rating` = 'G'",
        "repair_result": 1
    },
    {
        "idx": 851,
        "db_id": "movie_2",
        "question": "What are the names of theaters playing 'G' rated movies?",
        "evidence": "",
        "gold": "SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'",
        "pred": "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G')",
        "pred_result": 1,
        "repair_sql": "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G')",
        "repair_result": 1
    },
    {
        "idx": 852,
        "db_id": "movie_2",
        "question": "Select the title of all movies.",
        "evidence": "",
        "gold": "SELECT title FROM movies",
        "pred": "SELECT `Title` FROM Movies",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM Movies",
        "repair_result": 1
    },
    {
        "idx": 853,
        "db_id": "movie_2",
        "question": "What are all of the movie names?",
        "evidence": "",
        "gold": "SELECT title FROM movies",
        "pred": "SELECT `Title` FROM Movies",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM Movies",
        "repair_result": 1
    },
    {
        "idx": 854,
        "db_id": "movie_2",
        "question": "Show all the distinct ratings in the database.",
        "evidence": "",
        "gold": "SELECT DISTINCT rating FROM movies",
        "pred": "SELECT DISTINCT `Rating` FROM Movies",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Rating` FROM Movies",
        "repair_result": 1
    },
    {
        "idx": 855,
        "db_id": "movie_2",
        "question": "What are the different movie ratings?",
        "evidence": "",
        "gold": "SELECT DISTINCT rating FROM movies",
        "pred": "SELECT DISTINCT `Rating` FROM Movies",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Rating` FROM Movies",
        "repair_result": 1
    },
    {
        "idx": 856,
        "db_id": "movie_2",
        "question": "Show all information of all unrated movies.",
        "evidence": "",
        "gold": "SELECT * FROM movies WHERE rating  =  'null'",
        "pred": "SELECT * FROM Movies WHERE Rating = 'None'",
        "pred_result": 1,
        "repair_sql": "SELECT * FROM Movies WHERE Rating = 'None'",
        "repair_result": 1
    },
    {
        "idx": 857,
        "db_id": "movie_2",
        "question": "What is all the information about the unrated movies?",
        "evidence": "",
        "gold": "SELECT * FROM movies WHERE rating  =  'null'",
        "pred": "SELECT * FROM Movies WHERE Rating = 'None'",
        "pred_result": 1,
        "repair_sql": "SELECT * FROM Movies WHERE Rating = 'None'",
        "repair_result": 1
    },
    {
        "idx": 858,
        "db_id": "movie_2",
        "question": "Show the titles of movies not currently being shown in any theaters.",
        "evidence": "",
        "gold": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie != 'null')",
        "pred": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)",
        "pred_result": 0,
        "repair_sql": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)",
        "repair_result": 0
    },
    {
        "idx": 859,
        "db_id": "movie_2",
        "question": "What are the names of the movies not being shown in any theaters?",
        "evidence": "",
        "gold": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie != 'null')",
        "pred": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)",
        "pred_result": 0,
        "repair_sql": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)",
        "repair_result": 0
    },
    {
        "idx": 860,
        "db_id": "video_game",
        "question": "How many games are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM game",
        "pred": "SELECT COUNT(*) FROM game",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM game",
        "repair_result": 1
    },
    {
        "idx": 861,
        "db_id": "video_game",
        "question": "Count the number of games.",
        "evidence": "",
        "gold": "SELECT count(*) FROM game",
        "pred": "SELECT COUNT(*) FROM game",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM game",
        "repair_result": 1
    },
    {
        "idx": 862,
        "db_id": "video_game",
        "question": "List the Title and Developers of all games ordered by units sold from large to small.",
        "evidence": "",
        "gold": "SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC",
        "pred": "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC",
        "pred_result": 1,
        "repair_sql": "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC",
        "repair_result": 1
    },
    {
        "idx": 863,
        "db_id": "video_game",
        "question": "What are the titles and developers of all games, sorted by units sold descending?",
        "evidence": "",
        "gold": "SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC",
        "pred": "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC",
        "pred_result": 1,
        "repair_sql": "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC",
        "repair_result": 1
    },
    {
        "idx": 864,
        "db_id": "video_game",
        "question": "What is the average units sold in millions of the games that are not developed by Nintendo?",
        "evidence": "",
        "gold": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'",
        "pred": "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers != 'Nintendo'",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers != 'Nintendo'",
        "repair_result": 1
    },
    {
        "idx": 865,
        "db_id": "video_game",
        "question": "Return the average number of units sold in millions for games not developed by Nintendo.",
        "evidence": "",
        "gold": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'",
        "pred": "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers != 'Nintendo'",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers != 'Nintendo'",
        "repair_result": 1
    },
    {
        "idx": 866,
        "db_id": "video_game",
        "question": "What are the names and market districts of all platforms?",
        "evidence": "",
        "gold": "SELECT Platform_name ,  Market_district FROM platform",
        "pred": "SELECT `Platform_name`, `Market_district` FROM platform",
        "pred_result": 1,
        "repair_sql": "SELECT `Platform_name`, `Market_district` FROM platform",
        "repair_result": 1
    },
    {
        "idx": 867,
        "db_id": "video_game",
        "question": "Return all platform names and corresponding market districts.",
        "evidence": "",
        "gold": "SELECT Platform_name ,  Market_district FROM platform",
        "pred": "SELECT `Platform_name`, `Market_district` FROM platform",
        "pred_result": 1,
        "repair_sql": "SELECT `Platform_name`, `Market_district` FROM platform",
        "repair_result": 1
    },
    {
        "idx": 868,
        "db_id": "video_game",
        "question": "What are the names and id of platforms whose download rank is 1?",
        "evidence": "",
        "gold": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
        "pred": "SELECT `Platform_ID`, `Platform_name` FROM platform WHERE `Download_rank` = 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Platform_ID`, `Platform_name` FROM platform WHERE `Download_rank` = 1",
        "repair_result": 0
    },
    {
        "idx": 869,
        "db_id": "video_game",
        "question": "Return the names and ids of all platforms with the download rank of 1.",
        "evidence": "",
        "gold": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
        "pred": "SELECT `Platform_ID`, `Platform_name` FROM platform WHERE `Download_rank` = 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Platform_ID`, `Platform_name` FROM platform WHERE `Download_rank` = 1",
        "repair_result": 0
    },
    {
        "idx": 870,
        "db_id": "video_game",
        "question": "What are the maximum and minimum rank of the year of players.",
        "evidence": "",
        "gold": "SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player",
        "pred": "SELECT MAX(`Rank_of_the_year`), MIN(`Rank_of_the_year`) FROM player",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(`Rank_of_the_year`), MIN(`Rank_of_the_year`) FROM player",
        "repair_result": 1
    },
    {
        "idx": 871,
        "db_id": "video_game",
        "question": "Give the maximum and minimum rank of the year across all players.",
        "evidence": "",
        "gold": "SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player",
        "pred": "SELECT MAX(Rank_of_the_year) AS Maximum_Rank, MIN(Rank_of_the_year) AS Minimum_Rank FROM player",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(Rank_of_the_year) AS Maximum_Rank, MIN(Rank_of_the_year) AS Minimum_Rank FROM player",
        "repair_result": 1
    },
    {
        "idx": 872,
        "db_id": "video_game",
        "question": "How many players have rank of the year smaller than 3?",
        "evidence": "",
        "gold": "SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3",
        "pred": "SELECT COUNT(*) FROM player WHERE Rank_of_the_year < 3",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM player WHERE Rank_of_the_year < 3",
        "repair_result": 1
    },
    {
        "idx": 873,
        "db_id": "video_game",
        "question": "Count the number of players that have a rank of year of at most 3.",
        "evidence": "",
        "gold": "SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3",
        "pred": "SELECT COUNT(*) FROM player WHERE Rank_of_the_year <= 3",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM player WHERE Rank_of_the_year <= 3",
        "repair_result": 1
    },
    {
        "idx": 874,
        "db_id": "video_game",
        "question": "List all player names in ascending alphabetical order.",
        "evidence": "",
        "gold": "SELECT Player_name FROM player ORDER BY Player_name ASC",
        "pred": "SELECT `Player_name` FROM player ORDER BY `Player_name` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Player_name` FROM player ORDER BY `Player_name` ASC",
        "repair_result": 1
    },
    {
        "idx": 875,
        "db_id": "video_game",
        "question": "What are the names of all players in alphabetical order?",
        "evidence": "",
        "gold": "SELECT Player_name FROM player ORDER BY Player_name ASC",
        "pred": "SELECT `Player_name` FROM player ORDER BY `Player_name` ASC",
        "pred_result": 1,
        "repair_sql": "SELECT `Player_name` FROM player ORDER BY `Player_name` ASC",
        "repair_result": 1
    },
    {
        "idx": 876,
        "db_id": "video_game",
        "question": "List names and colleges of all players in descending order of rank of the year.",
        "evidence": "",
        "gold": "SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC",
        "pred": "SELECT `Player_name`, `College` FROM player ORDER BY `Rank_of_the_year` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Player_name`, `College` FROM player ORDER BY `Rank_of_the_year` DESC",
        "repair_result": 1
    },
    {
        "idx": 877,
        "db_id": "video_game",
        "question": "What are the names and colleges of all players, ordered by rank of year descending?",
        "evidence": "",
        "gold": "SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC",
        "pred": "SELECT `Player_name`, `College` FROM player ORDER BY `Rank_of_the_year` DESC",
        "pred_result": 1,
        "repair_sql": "SELECT `Player_name`, `College` FROM player ORDER BY `Rank_of_the_year` DESC",
        "repair_result": 1
    },
    {
        "idx": 878,
        "db_id": "video_game",
        "question": "Please show the names and rank of players that have played the game titled \"Super Mario World\".",
        "evidence": "",
        "gold": "SELECT T3.Player_name ,  T3.rank_of_the_year FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T1.Title  =  \"Super Mario World\"",
        "pred": "SELECT player.`Player_name`, player.`Rank_of_the_year` FROM player JOIN game_player ON player.`Player_ID` = game_player.`Player_ID` JOIN game ON game_player.`Game_ID` = game.`Game_ID` WHERE game.`Title` = 'Super Mario World'",
        "pred_result": 1,
        "repair_sql": "SELECT player.`Player_name`, player.`Rank_of_the_year` FROM player JOIN game_player ON player.`Player_ID` = game_player.`Player_ID` JOIN game ON game_player.`Game_ID` = game.`Game_ID` WHERE game.`Title` = 'Super Mario World'",
        "repair_result": 1
    },
    {
        "idx": 879,
        "db_id": "video_game",
        "question": "What are the names and ranks of players who have played the game with the title \"Super Mario World\"?",
        "evidence": "",
        "gold": "SELECT T3.Player_name ,  T3.rank_of_the_year FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T1.Title  =  \"Super Mario World\"",
        "pred": "SELECT P.`Player_name`, P.`Rank_of_the_year` FROM player AS P JOIN game_player AS GP ON P.`Player_ID` = GP.`Player_ID` JOIN game AS G ON GP.`Game_ID` = G.`Game_ID` WHERE G.`Title` = 'Super Mario World'",
        "pred_result": 1,
        "repair_sql": "SELECT P.`Player_name`, P.`Rank_of_the_year` FROM player AS P JOIN game_player AS GP ON P.`Player_ID` = GP.`Player_ID` JOIN game AS G ON GP.`Game_ID` = G.`Game_ID` WHERE G.`Title` = 'Super Mario World'",
        "repair_result": 1
    },
    {
        "idx": 880,
        "db_id": "video_game",
        "question": "Show the distinct developer of games played by players that go to college \"Auburn\".",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
        "pred": "SELECT DISTINCT g.`Developers` FROM game_player gp JOIN game g ON gp.`Game_ID` = g.`Game_ID` JOIN player p ON gp.`Player_ID` = p.`Player_ID` WHERE p.`College` = 'Auburn'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT g.`Developers` FROM game_player gp JOIN game g ON gp.`Game_ID` = g.`Game_ID` JOIN player p ON gp.`Player_ID` = p.`Player_ID` WHERE p.`College` = 'Auburn'",
        "repair_result": 1
    },
    {
        "idx": 881,
        "db_id": "video_game",
        "question": "What are the different developers of games that are played by players that attend Auburn college?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
        "pred": "SELECT DISTINCT g.`Developers` FROM game_player AS gp JOIN game AS g ON gp.`Game_ID` = g.`Game_ID` JOIN player AS p ON gp.`Player_ID` = p.`Player_ID` WHERE p.`College` = 'Auburn'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT g.`Developers` FROM game_player AS gp JOIN game AS g ON gp.`Game_ID` = g.`Game_ID` JOIN player AS p ON gp.`Player_ID` = p.`Player_ID` WHERE p.`College` = 'Auburn'",
        "repair_result": 1
    },
    {
        "idx": 882,
        "db_id": "video_game",
        "question": "What is the average number of units sold in millions of games played by players with position \"Guard\"?",
        "evidence": "",
        "gold": "SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
        "pred": "SELECT AVG(g.Units_sold_Millions) FROM game AS g JOIN game_player AS gp ON g.Game_ID = gp.Game_ID JOIN player AS p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard'",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(g.Units_sold_Millions) FROM game AS g JOIN game_player AS gp ON g.Game_ID = gp.Game_ID JOIN player AS p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard'",
        "repair_result": 1
    },
    {
        "idx": 883,
        "db_id": "video_game",
        "question": "Return the average number of units sold in millions among games played by players who have the position Guard.",
        "evidence": "",
        "gold": "SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
        "pred": "SELECT AVG(Units_sold_Millions) FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.Position = 'Guard'",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(Units_sold_Millions) FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.Position = 'Guard'",
        "repair_result": 1
    },
    {
        "idx": 884,
        "db_id": "video_game",
        "question": "Please list the title and platform name of games.",
        "evidence": "",
        "gold": "SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID",
        "pred": "SELECT T1.`Title`, T2.`Platform_name` FROM game AS T1 JOIN platform AS T2 ON T1.`Platform_ID` = T2.`Platform_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Title`, T2.`Platform_name` FROM game AS T1 JOIN platform AS T2 ON T1.`Platform_ID` = T2.`Platform_ID`",
        "repair_result": 1
    },
    {
        "idx": 885,
        "db_id": "video_game",
        "question": "What are the titles and platform names of all games?",
        "evidence": "",
        "gold": "SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID",
        "pred": "SELECT G.`Title`, P.`Platform_name` FROM game AS G JOIN platform AS P ON G.`Platform_ID` = P.`Platform_ID`",
        "pred_result": 1,
        "repair_sql": "SELECT G.`Title`, P.`Platform_name` FROM game AS G JOIN platform AS P ON G.`Platform_ID` = P.`Platform_ID`",
        "repair_result": 1
    },
    {
        "idx": 886,
        "db_id": "video_game",
        "question": "Please list the title of games with platforms that have market district in Asia or USA.",
        "evidence": "",
        "gold": "SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  \"Asia\" OR T2.Market_district  =  \"USA\"",
        "pred": "SELECT DISTINCT G.`Title` FROM game AS G JOIN platform AS P ON G.`Platform_ID` = P.`Platform_ID` WHERE P.`Market_district` IN ('Asia', 'USA')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT G.`Title` FROM game AS G JOIN platform AS P ON G.`Platform_ID` = P.`Platform_ID` WHERE P.`Market_district` IN ('Asia', 'USA')",
        "repair_result": 1
    },
    {
        "idx": 887,
        "db_id": "video_game",
        "question": "What are the titles of games that have platforms in the market districts of Asia or the USA?",
        "evidence": "",
        "gold": "SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  \"Asia\" OR T2.Market_district  =  \"USA\"",
        "pred": "SELECT DISTINCT T2.`Title` FROM game AS T2 JOIN platform AS T1 ON T2.`Platform_ID` = T1.`Platform_ID` WHERE T1.`Market_district` IN ('Asia', 'USA')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.`Title` FROM game AS T2 JOIN platform AS T1 ON T2.`Platform_ID` = T1.`Platform_ID` WHERE T1.`Market_district` IN ('Asia', 'USA')",
        "repair_result": 1
    },
    {
        "idx": 888,
        "db_id": "video_game",
        "question": "List the name of each franchise and the number of games belonging to that franchise.",
        "evidence": "",
        "gold": "SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise",
        "pred": "SELECT `Franchise`, COUNT(*) FROM game GROUP BY `Franchise`",
        "pred_result": 1,
        "repair_sql": "SELECT `Franchise`, COUNT(*) FROM game GROUP BY `Franchise`",
        "repair_result": 1
    },
    {
        "idx": 889,
        "db_id": "video_game",
        "question": "How many games are there from each Franchise?",
        "evidence": "",
        "gold": "SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise",
        "pred": "SELECT `Franchise`, COUNT(*) FROM game GROUP BY `Franchise`",
        "pred_result": 1,
        "repair_sql": "SELECT `Franchise`, COUNT(*) FROM game GROUP BY `Franchise`",
        "repair_result": 1
    },
    {
        "idx": 890,
        "db_id": "video_game",
        "question": "List the name of franchise that have the most number of games.",
        "evidence": "",
        "gold": "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT `Franchise`, COUNT(*) AS num_games FROM game GROUP BY `Franchise` ORDER BY num_games DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Franchise`, COUNT(*) AS num_games FROM game GROUP BY `Franchise` ORDER BY num_games DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 891,
        "db_id": "video_game",
        "question": "Which franchise has the most games?",
        "evidence": "",
        "gold": "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT `Franchise`, COUNT(*) AS num_games FROM game GROUP BY `Franchise` ORDER BY num_games DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `Franchise`, COUNT(*) AS num_games FROM game GROUP BY `Franchise` ORDER BY num_games DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 892,
        "db_id": "video_game",
        "question": "List the names of franchises that have at least two games.",
        "evidence": "",
        "gold": "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2",
        "pred": "SELECT `Franchise` FROM game GROUP BY `Franchise` HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT `Franchise` FROM game GROUP BY `Franchise` HAVING COUNT(*) >= 2",
        "repair_result": 1
    },
    {
        "idx": 893,
        "db_id": "video_game",
        "question": "What are the names of franchises that have two or more games?",
        "evidence": "",
        "gold": "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2",
        "pred": "SELECT `Franchise` FROM game GROUP BY `Franchise` HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT `Franchise` FROM game GROUP BY `Franchise` HAVING COUNT(*) >= 2",
        "repair_result": 1
    },
    {
        "idx": 894,
        "db_id": "video_game",
        "question": "List the name of players that do not play any game.",
        "evidence": "",
        "gold": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)",
        "pred": "SELECT `Player_name` FROM player WHERE `Player_ID` NOT IN (SELECT `Player_ID` FROM game_player)",
        "pred_result": 1,
        "repair_sql": "SELECT `Player_name` FROM player WHERE `Player_ID` NOT IN (SELECT `Player_ID` FROM game_player)",
        "repair_result": 1
    },
    {
        "idx": 895,
        "db_id": "video_game",
        "question": "What are the names of players who do not play any games?",
        "evidence": "",
        "gold": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)",
        "pred": "SELECT `Player_name` FROM player WHERE `Player_ID` NOT IN (SELECT `Player_ID` FROM game_player)",
        "pred_result": 1,
        "repair_sql": "SELECT `Player_name` FROM player WHERE `Player_ID` NOT IN (SELECT `Player_ID` FROM game_player)",
        "repair_result": 1
    },
    {
        "idx": 896,
        "db_id": "video_game",
        "question": "Show the title of games that are played by both players from college \"Oklahoma\" and players from college \"Auburn\".",
        "evidence": "",
        "gold": "SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Oklahoma\" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
        "pred": "SELECT DISTINCT G.`Title` FROM game_player AS GP1 JOIN game_player AS GP2 ON GP1.`Game_ID` = GP2.`Game_ID` JOIN game AS G ON GP1.`Game_ID` = G.`Game_ID` JOIN player AS P1 ON GP1.`Player_ID` = P1.`Player_ID` JOIN player AS P2 ON GP2.`Player_ID` = P2.`Player_ID` WHERE P1.`College` = 'Oklahoma' AND P2.`College` = 'Auburn'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT G.`Title` FROM game_player AS GP1 JOIN game_player AS GP2 ON GP1.`Game_ID` = GP2.`Game_ID` JOIN game AS G ON GP1.`Game_ID` = G.`Game_ID` JOIN player AS P1 ON GP1.`Player_ID` = P1.`Player_ID` JOIN player AS P2 ON GP2.`Player_ID` = P2.`Player_ID` WHERE P1.`College` = 'Oklahoma' AND P2.`College` = 'Auburn'",
        "repair_result": 1
    },
    {
        "idx": 897,
        "db_id": "video_game",
        "question": "What are the titles of games that are played by players from Oklahoma college or Auburn college?",
        "evidence": "",
        "gold": "SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Oklahoma\" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
        "pred": "SELECT DISTINCT T2.`Title` FROM game AS T2 JOIN game_player AS T3 ON T2.`Game_ID` = T3.`Game_ID` JOIN player AS T4 ON T3.`Player_ID` = T4.`Player_ID` WHERE T4.`College` IN ('Oklahoma', 'Auburn')",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T2.`Title` FROM game AS T2 JOIN game_player AS T3 ON T2.`Game_ID` = T3.`Game_ID` JOIN player AS T4 ON T3.`Player_ID` = T4.`Player_ID` WHERE T4.`College` IN ('Oklahoma', 'Auburn')",
        "repair_result": 0
    },
    {
        "idx": 898,
        "db_id": "video_game",
        "question": "Show all distinct franchises of games.",
        "evidence": "",
        "gold": "SELECT DISTINCT Franchise FROM game",
        "pred": "SELECT DISTINCT `Franchise` FROM game",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `Franchise` FROM game",
        "repair_result": 1
    },
    {
        "idx": 899,
        "db_id": "video_game",
        "question": "What are all the distinct franchises?",
        "evidence": "",
        "gold": "SELECT DISTINCT Franchise FROM game",
        "pred": "SELECT DISTINCT Franchise FROM game",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT Franchise FROM game",
        "repair_result": 1
    },
    {
        "idx": 900,
        "db_id": "video_game",
        "question": "Show the title of games that are not played by any player who is in the Guard position.",
        "evidence": "",
        "gold": "SELECT Title FROM game EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
        "pred": "SELECT DISTINCT T1.`Title` FROM game AS T1 LEFT JOIN game_player AS T2 ON T1.`Game_ID` = T2.`Game_ID` LEFT JOIN player AS T3 ON T2.`Player_ID` = T3.`Player_ID` WHERE T3.`Position` != 'Guard' OR T3.`Position` IS NULL",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`Title` FROM game AS T1 LEFT JOIN game_player AS T2 ON T1.`Game_ID` = T2.`Game_ID` LEFT JOIN player AS T3 ON T2.`Player_ID` = T3.`Player_ID` WHERE T3.`Position` != 'Guard' OR T3.`Position` IS NULL",
        "repair_result": 0
    },
    {
        "idx": 901,
        "db_id": "video_game",
        "question": "What are the titles of games not played by any players who play the Guard position?",
        "evidence": "",
        "gold": "SELECT Title FROM game EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
        "pred": "SELECT DISTINCT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE Position = 'Guard')",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE Position = 'Guard')",
        "repair_result": 1
    },
    {
        "idx": 902,
        "db_id": "cre_Doc_Workflow",
        "question": "How many authors do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Authors",
        "pred": "SELECT COUNT(DISTINCT author_name) FROM Authors",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT author_name) FROM Authors",
        "repair_result": 1
    },
    {
        "idx": 903,
        "db_id": "cre_Doc_Workflow",
        "question": "Show all author names.",
        "evidence": "",
        "gold": "SELECT author_name FROM Authors",
        "pred": "SELECT DISTINCT `author_name` FROM Documents",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT `author_name` FROM Documents",
        "repair_result": 0
    },
    {
        "idx": 904,
        "db_id": "cre_Doc_Workflow",
        "question": "Show the names and other details for all authors.",
        "evidence": "",
        "gold": "SELECT author_name ,  other_details FROM Authors",
        "pred": "SELECT `author_name`, `other_details` FROM Authors",
        "pred_result": 1,
        "repair_sql": "SELECT `author_name`, `other_details` FROM Authors",
        "repair_result": 1
    },
    {
        "idx": 905,
        "db_id": "cre_Doc_Workflow",
        "question": "Show the other details for the author Addison Denesik.",
        "evidence": "",
        "gold": "SELECT other_details FROM Authors WHERE author_name  =  \"Addison Denesik\"",
        "pred": "SELECT `other_details` FROM Authors WHERE author_name = 'Addison Denesik'",
        "pred_result": 1,
        "repair_sql": "SELECT `other_details` FROM Authors WHERE author_name = 'Addison Denesik'",
        "repair_result": 1
    },
    {
        "idx": 906,
        "db_id": "cre_Doc_Workflow",
        "question": "Show the number of documents.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Documents",
        "pred": "SELECT COUNT(*) FROM Documents",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Documents",
        "repair_result": 1
    },
    {
        "idx": 907,
        "db_id": "cre_Doc_Workflow",
        "question": "Who is the author of the document with id 4?",
        "evidence": "",
        "gold": "SELECT author_name FROM Documents WHERE document_id  =  4",
        "pred": "SELECT `author_name` FROM Documents WHERE document_id = 4",
        "pred_result": 1,
        "repair_sql": "SELECT `author_name` FROM Documents WHERE document_id = 4",
        "repair_result": 1
    },
    {
        "idx": 908,
        "db_id": "cre_Doc_Workflow",
        "question": "Who is the author of the document \"Travel to Brazil\"?",
        "evidence": "",
        "gold": "SELECT author_name FROM Documents WHERE document_name  =  \"Travel to Brazil\"",
        "pred": "SELECT `author_name` FROM Documents WHERE `document_name` = 'Travel to Brazil'",
        "pred_result": 1,
        "repair_sql": "SELECT `author_name` FROM Documents WHERE `document_name` = 'Travel to Brazil'",
        "repair_result": 1
    },
    {
        "idx": 909,
        "db_id": "cre_Doc_Workflow",
        "question": "How many documents does has the author Era Kerluke written?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Documents WHERE author_name  =  \"Era Kerluke\"",
        "pred": "SELECT COUNT(*) FROM Documents WHERE author_name = 'Era Kerluke'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Documents WHERE author_name = 'Era Kerluke'",
        "repair_result": 1
    },
    {
        "idx": 910,
        "db_id": "cre_Doc_Workflow",
        "question": "Show the names and descriptions for all documents.",
        "evidence": "",
        "gold": "SELECT document_name ,  document_description FROM Documents",
        "pred": "SELECT `document_name`, `document_description` FROM Documents",
        "pred_result": 1,
        "repair_sql": "SELECT `document_name`, `document_description` FROM Documents",
        "repair_result": 1
    },
    {
        "idx": 911,
        "db_id": "cre_Doc_Workflow",
        "question": "Show the ids and names for all documents by author Bianka Cummings.",
        "evidence": "",
        "gold": "SELECT document_id ,  document_name FROM Documents WHERE author_name  =  \"Bianka Cummings\"",
        "pred": "SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings'",
        "pred_result": 1,
        "repair_sql": "SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings'",
        "repair_result": 1
    },
    {
        "idx": 912,
        "db_id": "cre_Doc_Workflow",
        "question": "Show the author name and details for the document \"Travel to China\".",
        "evidence": "",
        "gold": "SELECT T2.author_name ,  T2.other_details FROM Documents AS T1 JOIN Authors AS T2 ON T1.author_name  =  T2.author_name WHERE document_name  =  \"Travel to China\"",
        "pred": "SELECT `author_name`, `other_details` FROM Documents WHERE `document_name` = 'Travel to China'",
        "pred_result": 0,
        "repair_sql": "SELECT `author_name`, `other_details` FROM Documents WHERE `document_name` = 'Travel to China'",
        "repair_result": 0
    },
    {
        "idx": 913,
        "db_id": "cre_Doc_Workflow",
        "question": "Show all author names and number of documents corresponding to each.",
        "evidence": "",
        "gold": "SELECT author_name ,  count(*) FROM Documents GROUP BY author_name",
        "pred": "SELECT A.`author_name`, COUNT(D.`document_id`) FROM Authors AS A JOIN Documents AS D ON A.`author_name` = D.`author_name` GROUP BY A.`author_name`",
        "pred_result": 1,
        "repair_sql": "SELECT A.`author_name`, COUNT(D.`document_id`) FROM Authors AS A JOIN Documents AS D ON A.`author_name` = D.`author_name` GROUP BY A.`author_name`",
        "repair_result": 1
    },
    {
        "idx": 914,
        "db_id": "cre_Doc_Workflow",
        "question": "What is the name of the author with most number of documents?",
        "evidence": "",
        "gold": "SELECT author_name FROM Documents GROUP BY author_name ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `author_name` FROM Documents GROUP BY `author_name` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT `author_name` FROM Documents GROUP BY `author_name` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 915,
        "db_id": "cre_Doc_Workflow",
        "question": "Show the names for authors with at least two documents.",
        "evidence": "",
        "gold": "SELECT author_name FROM Documents GROUP BY author_name HAVING count(*)  >=  2",
        "pred": "SELECT author_name FROM Documents GROUP BY author_name HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT author_name FROM Documents GROUP BY author_name HAVING COUNT(*) >= 2",
        "repair_result": 1
    },
    {
        "idx": 916,
        "db_id": "cre_Doc_Workflow",
        "question": "How many business processes do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Business_processes",
        "pred": "SELECT COUNT(*) FROM Business_Processes",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Business_Processes",
        "repair_result": 1
    },
    {
        "idx": 917,
        "db_id": "cre_Doc_Workflow",
        "question": "Show the next process id, process name, process description for process with id 9.",
        "evidence": "",
        "gold": "SELECT next_process_id ,  process_name ,  process_description FROM Business_processes WHERE process_id  =  9",
        "pred": "SELECT `next_process_id`, `process_name`, `process_description` FROM Business_Processes WHERE `process_id` = 9",
        "pred_result": 1,
        "repair_sql": "SELECT `next_process_id`, `process_name`, `process_description` FROM Business_Processes WHERE `process_id` = 9",
        "repair_result": 1
    },
    {
        "idx": 918,
        "db_id": "cre_Doc_Workflow",
        "question": "What is the process name for the next process of the process with id 9?",
        "evidence": "",
        "gold": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)",
        "pred": "SELECT T1.`process_name` FROM Business_Processes AS T1 WHERE T1.`next_process_id` = 9",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`process_name` FROM Business_Processes AS T1 WHERE T1.`next_process_id` = 9",
        "repair_result": 1
    },
    {
        "idx": 919,
        "db_id": "cre_Doc_Workflow",
        "question": "Show the number of process outcomes.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Process_outcomes",
        "pred": "SELECT COUNT(DISTINCT process_outcome_code) FROM Documents_Processes",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT process_outcome_code) FROM Documents_Processes",
        "repair_result": 1
    },
    {
        "idx": 920,
        "db_id": "cre_Doc_Workflow",
        "question": "List the codes and descriptions for all process outcomes.",
        "evidence": "",
        "gold": "SELECT process_outcome_code ,  process_outcome_description FROM Process_outcomes",
        "pred": "SELECT `process_outcome_code`, `process_outcome_description` FROM Process_Outcomes",
        "pred_result": 1,
        "repair_sql": "SELECT `process_outcome_code`, `process_outcome_description` FROM Process_Outcomes",
        "repair_result": 1
    },
    {
        "idx": 921,
        "db_id": "cre_Doc_Workflow",
        "question": "What is the description for the process outcome code working?",
        "evidence": "",
        "gold": "SELECT process_outcome_description FROM Process_outcomes WHERE process_outcome_code  =  \"working\"",
        "pred": "SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working on'",
        "pred_result": 0,
        "repair_sql": "SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working on'",
        "repair_result": 0
    },
    {
        "idx": 922,
        "db_id": "cre_Doc_Workflow",
        "question": "Show the number of process status.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Process_status",
        "pred": "SELECT COUNT(DISTINCT process_status_code) FROM Process_Status",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT process_status_code) FROM Process_Status",
        "repair_result": 1
    },
    {
        "idx": 923,
        "db_id": "cre_Doc_Workflow",
        "question": "List the codes and descriptions for all process status.",
        "evidence": "",
        "gold": "SELECT process_status_code ,  process_status_description FROM Process_status",
        "pred": "SELECT process_status_code, process_status_description FROM Process_Status",
        "pred_result": 1,
        "repair_sql": "SELECT process_status_code, process_status_description FROM Process_Status",
        "repair_result": 1
    },
    {
        "idx": 924,
        "db_id": "cre_Doc_Workflow",
        "question": "What is the description for process status code ct?",
        "evidence": "",
        "gold": "SELECT process_status_description FROM Process_status WHERE process_status_code  =  \"ct\"",
        "pred": "SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct'",
        "pred_result": 1,
        "repair_sql": "SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct'",
        "repair_result": 1
    },
    {
        "idx": 925,
        "db_id": "cre_Doc_Workflow",
        "question": "How many staff do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Staff",
        "pred": "SELECT COUNT(*) FROM Staff",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Staff",
        "repair_result": 1
    },
    {
        "idx": 926,
        "db_id": "cre_Doc_Workflow",
        "question": "Show the ids and details for all staff.",
        "evidence": "",
        "gold": "SELECT staff_id ,  staff_details FROM Staff",
        "pred": "SELECT `staff_id`, `staff_details` FROM Staff",
        "pred_result": 1,
        "repair_sql": "SELECT `staff_id`, `staff_details` FROM Staff",
        "repair_result": 1
    },
    {
        "idx": 927,
        "db_id": "cre_Doc_Workflow",
        "question": "What are the details for the staff member with id 100.",
        "evidence": "",
        "gold": "SELECT staff_details FROM Staff WHERE staff_id  =  100",
        "pred": "SELECT * FROM Staff WHERE staff_id = 100",
        "pred_result": 0,
        "repair_sql": "SELECT * FROM Staff WHERE staff_id = 100",
        "repair_result": 0
    },
    {
        "idx": 928,
        "db_id": "cre_Doc_Workflow",
        "question": "Show the number of staff roles.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Ref_staff_roles",
        "pred": "SELECT COUNT(DISTINCT staff_role_code) FROM Ref_Staff_Roles",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT staff_role_code) FROM Ref_Staff_Roles",
        "repair_result": 1
    },
    {
        "idx": 929,
        "db_id": "cre_Doc_Workflow",
        "question": "List the codes and descriptions for all staff roles.",
        "evidence": "",
        "gold": "SELECT staff_role_code ,  staff_role_description FROM Ref_staff_roles",
        "pred": "SELECT `staff_role_code`, `staff_role_description` FROM Ref_Staff_Roles",
        "pred_result": 1,
        "repair_sql": "SELECT `staff_role_code`, `staff_role_description` FROM Ref_Staff_Roles",
        "repair_result": 1
    },
    {
        "idx": 930,
        "db_id": "cre_Doc_Workflow",
        "question": "What is the description for staff role code HR?",
        "evidence": "",
        "gold": "SELECT staff_role_description FROM Ref_staff_roles WHERE staff_role_code  =  \"HR\"",
        "pred": "SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'",
        "pred_result": 1,
        "repair_sql": "SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'",
        "repair_result": 1
    },
    {
        "idx": 931,
        "db_id": "cre_Doc_Workflow",
        "question": "How many documents have a process?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT document_id) FROM Documents_processes",
        "pred": "SELECT COUNT(DISTINCT document_id) FROM Documents_Processes",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT document_id) FROM Documents_Processes",
        "repair_result": 1
    },
    {
        "idx": 932,
        "db_id": "cre_Doc_Workflow",
        "question": "List all process ids with a document.",
        "evidence": "",
        "gold": "SELECT DISTINCT process_id FROM Documents_processes",
        "pred": "SELECT DISTINCT T1.`process_id` FROM Documents_Processes AS T1",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`process_id` FROM Documents_Processes AS T1",
        "repair_result": 1
    },
    {
        "idx": 933,
        "db_id": "cre_Doc_Workflow",
        "question": "Show all document ids without a process.",
        "evidence": "",
        "gold": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_processes",
        "pred": "SELECT D.document_id FROM Documents D LEFT JOIN Documents_Processes DP ON D.document_id = DP.document_id WHERE DP.document_id IS NULL",
        "pred_result": 1,
        "repair_sql": "SELECT D.document_id FROM Documents D LEFT JOIN Documents_Processes DP ON D.document_id = DP.document_id WHERE DP.document_id IS NULL",
        "repair_result": 1
    },
    {
        "idx": 934,
        "db_id": "cre_Doc_Workflow",
        "question": "List all process ids with no document.",
        "evidence": "",
        "gold": "SELECT process_id FROM Business_processes EXCEPT SELECT process_id FROM Documents_processes",
        "pred": "SELECT DISTINCT T1.`process_id` FROM Business_Processes AS T1 LEFT JOIN Documents_Processes AS T2 ON T1.`process_id` = T2.`process_id` WHERE T2.`document_id` IS NULL",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`process_id` FROM Business_Processes AS T1 LEFT JOIN Documents_Processes AS T2 ON T1.`process_id` = T2.`process_id` WHERE T2.`document_id` IS NULL",
        "repair_result": 1
    },
    {
        "idx": 935,
        "db_id": "cre_Doc_Workflow",
        "question": "What is the process outcome description and process status description for the document with id 0?",
        "evidence": "",
        "gold": "SELECT T2.process_outcome_description ,  T3.process_status_description FROM Documents_processes AS T1 JOIN Process_outcomes AS T2 ON T1.process_outcome_code  =  T2.process_outcome_code JOIN Process_Status AS T3 ON T1.process_status_code  =  T3.process_status_code WHERE T1.document_id  =  0",
        "pred": "SELECT Process_Outcomes.process_outcome_description, Process_Status.process_status_description FROM Documents_Processes JOIN Process_Outcomes ON Documents_Processes.process_outcome_code = Process_Outcomes.process_outcome_code JOIN Process_Status ON Documents_Processes.process_status_code = Process_Status.process_status_code WHERE Documents_Processes.document_id = 0",
        "pred_result": 1,
        "repair_sql": "SELECT Process_Outcomes.process_outcome_description, Process_Status.process_status_description FROM Documents_Processes JOIN Process_Outcomes ON Documents_Processes.process_outcome_code = Process_Outcomes.process_outcome_code JOIN Process_Status ON Documents_Processes.process_status_code = Process_Status.process_status_code WHERE Documents_Processes.document_id = 0",
        "repair_result": 1
    },
    {
        "idx": 936,
        "db_id": "cre_Doc_Workflow",
        "question": "What is the process name for the document \"Travel to Brazil\"?",
        "evidence": "",
        "gold": "SELECT T3.process_name FROM Documents_processes AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id JOIN Business_processes AS T3 ON T1.process_id  =  T3.process_id WHERE T2.document_name  =  \"Travel to Brazil\"",
        "pred": "SELECT BP.process_name FROM Business_Processes BP JOIN Documents_Processes DP ON BP.process_id = DP.process_id JOIN Documents D ON DP.document_id = D.document_id WHERE D.document_name = 'Travel to Brazil'",
        "pred_result": 1,
        "repair_sql": "SELECT BP.process_name FROM Business_Processes BP JOIN Documents_Processes DP ON BP.process_id = DP.process_id JOIN Documents D ON DP.document_id = D.document_id WHERE D.document_name = 'Travel to Brazil'",
        "repair_result": 1
    },
    {
        "idx": 937,
        "db_id": "cre_Doc_Workflow",
        "question": "Show all process ids and the number of documents in each process.",
        "evidence": "",
        "gold": "SELECT process_id ,  count(*) FROM Documents_processes GROUP BY process_id",
        "pred": "SELECT T1.`process_id`, COUNT(*) FROM Business_Processes AS T1 JOIN Documents_Processes AS T2 ON T1.`process_id` = T2.`process_id` GROUP BY T1.`process_id`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`process_id`, COUNT(*) FROM Business_Processes AS T1 JOIN Documents_Processes AS T2 ON T1.`process_id` = T2.`process_id` GROUP BY T1.`process_id`",
        "repair_result": 1
    },
    {
        "idx": 938,
        "db_id": "cre_Doc_Workflow",
        "question": "How many staff are the document with id 0 and process with id 9.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Staff_in_processes WHERE document_id  =  0 AND process_id  =  9",
        "pred": "SELECT COUNT(*) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9",
        "repair_result": 1
    },
    {
        "idx": 939,
        "db_id": "cre_Doc_Workflow",
        "question": "Show all staff ids and the number of document processes for each staff.",
        "evidence": "",
        "gold": "SELECT staff_id ,  count(*) FROM Staff_in_processes GROUP BY staff_id",
        "pred": "SELECT T1.`staff_id`, COUNT(*) FROM Staff AS T1 JOIN Staff_in_Processes AS T2 ON T1.`staff_id` = T2.`staff_id` GROUP BY T1.`staff_id`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`staff_id`, COUNT(*) FROM Staff AS T1 JOIN Staff_in_Processes AS T2 ON T1.`staff_id` = T2.`staff_id` GROUP BY T1.`staff_id`",
        "repair_result": 1
    },
    {
        "idx": 940,
        "db_id": "cre_Doc_Workflow",
        "question": "Show all staff role codes and the number of document processes for each role.",
        "evidence": "",
        "gold": "SELECT staff_role_code ,  count(*) FROM Staff_in_processes GROUP BY staff_role_code",
        "pred": "SELECT T2.`staff_role_code`, COUNT(*) FROM Ref_Staff_Roles AS T2 JOIN Staff_in_Processes AS T1 ON T2.`staff_role_code` = T1.`staff_role_code` GROUP BY T2.`staff_role_code`",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`staff_role_code`, COUNT(*) FROM Ref_Staff_Roles AS T2 JOIN Staff_in_Processes AS T1 ON T2.`staff_role_code` = T1.`staff_role_code` GROUP BY T2.`staff_role_code`",
        "repair_result": 1
    },
    {
        "idx": 941,
        "db_id": "cre_Doc_Workflow",
        "question": "How many different roles does the staff with id 3 have?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT staff_role_code) FROM Staff_in_processes WHERE staff_id  =  3",
        "pred": "SELECT COUNT(DISTINCT `staff_role_code`) FROM Staff_in_Processes WHERE `staff_id` = 3",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT `staff_role_code`) FROM Staff_in_Processes WHERE `staff_id` = 3",
        "repair_result": 1
    },
    {
        "idx": 942,
        "db_id": "advertising_agencies",
        "question": "How many agencies do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Agencies",
        "pred": "SELECT COUNT(*) FROM Agencies",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Agencies",
        "repair_result": 1
    },
    {
        "idx": 943,
        "db_id": "advertising_agencies",
        "question": "Count the number of agencies.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Agencies",
        "pred": "SELECT COUNT(*) FROM Agencies",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Agencies",
        "repair_result": 1
    },
    {
        "idx": 944,
        "db_id": "advertising_agencies",
        "question": "Show all agency ids and details.",
        "evidence": "",
        "gold": "SELECT agency_id ,  agency_details FROM Agencies",
        "pred": "SELECT `agency_id`, `agency_details` FROM Agencies",
        "pred_result": 1,
        "repair_sql": "SELECT `agency_id`, `agency_details` FROM Agencies",
        "repair_result": 1
    },
    {
        "idx": 945,
        "db_id": "advertising_agencies",
        "question": "What are all the agency ids and details?",
        "evidence": "",
        "gold": "SELECT agency_id ,  agency_details FROM Agencies",
        "pred": "SELECT `agency_id`, `agency_details` FROM Agencies",
        "pred_result": 1,
        "repair_sql": "SELECT `agency_id`, `agency_details` FROM Agencies",
        "repair_result": 1
    },
    {
        "idx": 946,
        "db_id": "advertising_agencies",
        "question": "Show the number of clients.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Clients",
        "pred": "SELECT COUNT(*) FROM Clients",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Clients",
        "repair_result": 1
    },
    {
        "idx": 947,
        "db_id": "advertising_agencies",
        "question": "How many clients are there?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Clients",
        "pred": "SELECT COUNT(*) FROM Clients",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Clients",
        "repair_result": 1
    },
    {
        "idx": 948,
        "db_id": "advertising_agencies",
        "question": "List all client ids and client details.",
        "evidence": "",
        "gold": "SELECT client_id ,  client_details FROM Clients",
        "pred": "SELECT `client_id`, `client_details` FROM Clients",
        "pred_result": 1,
        "repair_sql": "SELECT `client_id`, `client_details` FROM Clients",
        "repair_result": 1
    },
    {
        "idx": 949,
        "db_id": "advertising_agencies",
        "question": "What are all the client ids and details?",
        "evidence": "",
        "gold": "SELECT client_id ,  client_details FROM Clients",
        "pred": "SELECT `client_id`, `client_details` FROM Clients",
        "pred_result": 1,
        "repair_sql": "SELECT `client_id`, `client_details` FROM Clients",
        "repair_result": 1
    },
    {
        "idx": 950,
        "db_id": "advertising_agencies",
        "question": "Show agency ids and the number of clients for each agency.",
        "evidence": "",
        "gold": "SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id",
        "pred": "SELECT T1.`agency_id`, COUNT(*) FROM Agencies AS T1 JOIN Clients AS T2 ON T1.`agency_id` = T2.`agency_id` GROUP BY T1.`agency_id`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`agency_id`, COUNT(*) FROM Agencies AS T1 JOIN Clients AS T2 ON T1.`agency_id` = T2.`agency_id` GROUP BY T1.`agency_id`",
        "repair_result": 1
    },
    {
        "idx": 951,
        "db_id": "advertising_agencies",
        "question": "How many clients does each agency have?",
        "evidence": "",
        "gold": "SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id",
        "pred": "SELECT A.`agency_details`, COUNT(C.`client_id`) AS num_clients FROM Agencies A LEFT JOIN Clients C ON A.`agency_id` = C.`agency_id` GROUP BY A.`agency_id`",
        "pred_result": 0,
        "repair_sql": "SELECT A.`agency_details`, COUNT(C.`client_id`) AS num_clients FROM Agencies A LEFT JOIN Clients C ON A.`agency_id` = C.`agency_id` GROUP BY A.`agency_id`",
        "repair_result": 0
    },
    {
        "idx": 952,
        "db_id": "advertising_agencies",
        "question": "What is the agency id and details with most number of clients?",
        "evidence": "",
        "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT A.`agency_id`, A.`agency_details` FROM Agencies A JOIN Clients C ON A.`agency_id` = C.`agency_id` GROUP BY A.`agency_id` ORDER BY COUNT(C.`client_id`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT A.`agency_id`, A.`agency_details` FROM Agencies A JOIN Clients C ON A.`agency_id` = C.`agency_id` GROUP BY A.`agency_id` ORDER BY COUNT(C.`client_id`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 953,
        "db_id": "advertising_agencies",
        "question": "Return the agency id and details for the agency with the greatest number of clients.",
        "evidence": "",
        "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = ( SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = ( SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 954,
        "db_id": "advertising_agencies",
        "question": "Show agency ids and details with at least 2 clients.",
        "evidence": "",
        "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2",
        "pred": "SELECT A.`agency_id`, A.`agency_details` FROM Agencies A JOIN Clients C ON A.`agency_id` = C.`agency_id` GROUP BY A.`agency_id` HAVING COUNT(C.`client_id`) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT A.`agency_id`, A.`agency_details` FROM Agencies A JOIN Clients C ON A.`agency_id` = C.`agency_id` GROUP BY A.`agency_id` HAVING COUNT(C.`client_id`) >= 2",
        "repair_result": 1
    },
    {
        "idx": 955,
        "db_id": "advertising_agencies",
        "question": "What are the agency ids and details agencies with at least 2 clients?",
        "evidence": "",
        "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2",
        "pred": "SELECT A.`agency_id`, A.`agency_details` FROM Agencies AS A JOIN Clients AS C ON A.`agency_id` = C.`agency_id` GROUP BY A.`agency_id` HAVING COUNT(C.`client_id`) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT A.`agency_id`, A.`agency_details` FROM Agencies AS A JOIN Clients AS C ON A.`agency_id` = C.`agency_id` GROUP BY A.`agency_id` HAVING COUNT(C.`client_id`) >= 2",
        "repair_result": 1
    },
    {
        "idx": 956,
        "db_id": "advertising_agencies",
        "question": "Show agency details for client with detail 'Mac'.",
        "evidence": "",
        "gold": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
        "pred": "SELECT A.`agency_details` FROM Agencies AS A JOIN Clients AS C ON A.`agency_id` = C.`agency_id` WHERE C.`client_details` = 'Mac'",
        "pred_result": 1,
        "repair_sql": "SELECT A.`agency_details` FROM Agencies AS A JOIN Clients AS C ON A.`agency_id` = C.`agency_id` WHERE C.`client_details` = 'Mac'",
        "repair_result": 1
    },
    {
        "idx": 957,
        "db_id": "advertising_agencies",
        "question": "What are the agency details for clients with the detail Mac?",
        "evidence": "",
        "gold": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
        "pred": "SELECT A.`agency_details` FROM Agencies AS A JOIN Clients AS C ON A.`agency_id` = C.`agency_id` WHERE C.`client_details` = 'Mac'",
        "pred_result": 1,
        "repair_sql": "SELECT A.`agency_details` FROM Agencies AS A JOIN Clients AS C ON A.`agency_id` = C.`agency_id` WHERE C.`client_details` = 'Mac'",
        "repair_result": 1
    },
    {
        "idx": 958,
        "db_id": "advertising_agencies",
        "question": "Show details for all clients and the details of their corresponding agents.",
        "evidence": "",
        "gold": "SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id",
        "pred": "SELECT C.client_details, A.agency_details FROM Clients AS C JOIN Agencies AS A ON C.agency_id = A.agency_id",
        "pred_result": 1,
        "repair_sql": "SELECT C.client_details, A.agency_details FROM Clients AS C JOIN Agencies AS A ON C.agency_id = A.agency_id",
        "repair_result": 1
    },
    {
        "idx": 959,
        "db_id": "advertising_agencies",
        "question": "What are the client details for each client and the corresponding details of their agencies?",
        "evidence": "",
        "gold": "SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id",
        "pred": "SELECT C.client_details, A.agency_details FROM Clients AS C JOIN Agencies AS A ON C.agency_id = A.agency_id",
        "pred_result": 1,
        "repair_sql": "SELECT C.client_details, A.agency_details FROM Clients AS C JOIN Agencies AS A ON C.agency_id = A.agency_id",
        "repair_result": 1
    },
    {
        "idx": 960,
        "db_id": "advertising_agencies",
        "question": "Show all sic codes and the number of clients with each code.",
        "evidence": "",
        "gold": "SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code",
        "pred": "SELECT sic_code, COUNT(*) FROM Clients GROUP BY sic_code",
        "pred_result": 1,
        "repair_sql": "SELECT sic_code, COUNT(*) FROM Clients GROUP BY sic_code",
        "repair_result": 1
    },
    {
        "idx": 961,
        "db_id": "advertising_agencies",
        "question": "How many clients are there for each sic code?",
        "evidence": "",
        "gold": "SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code",
        "pred": "SELECT sic_code, COUNT(*) FROM Clients GROUP BY sic_code",
        "pred_result": 1,
        "repair_sql": "SELECT sic_code, COUNT(*) FROM Clients GROUP BY sic_code",
        "repair_result": 1
    },
    {
        "idx": 962,
        "db_id": "advertising_agencies",
        "question": "Show all client ids and details with sic code \"Bad\".",
        "evidence": "",
        "gold": "SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  \"Bad\";",
        "pred": "SELECT `client_id`, `client_details` FROM Clients WHERE `sic_code` = 'Bad'",
        "pred_result": 1,
        "repair_sql": "SELECT `client_id`, `client_details` FROM Clients WHERE `sic_code` = 'Bad'",
        "repair_result": 1
    },
    {
        "idx": 963,
        "db_id": "advertising_agencies",
        "question": "What are the client ideas and details for clients with the sic code Bad?",
        "evidence": "",
        "gold": "SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  \"Bad\";",
        "pred": "SELECT `client_id`, `client_details` FROM Clients WHERE sic_code = 'Bad'",
        "pred_result": 1,
        "repair_sql": "SELECT `client_id`, `client_details` FROM Clients WHERE sic_code = 'Bad'",
        "repair_result": 1
    },
    {
        "idx": 964,
        "db_id": "advertising_agencies",
        "question": "Show all agency ids and details for agencies with a client.",
        "evidence": "",
        "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id",
        "pred": "SELECT A.`agency_id`, A.`agency_details` FROM Agencies AS A JOIN Clients AS C ON A.`agency_id` = C.`agency_id`",
        "pred_result": 1,
        "repair_sql": "SELECT A.`agency_id`, A.`agency_details` FROM Agencies AS A JOIN Clients AS C ON A.`agency_id` = C.`agency_id`",
        "repair_result": 1
    },
    {
        "idx": 965,
        "db_id": "advertising_agencies",
        "question": "What are the agency ids and agency details for all agencies who have a client?",
        "evidence": "",
        "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id",
        "pred": "SELECT DISTINCT A.`agency_id`, A.`agency_details` FROM Agencies AS A JOIN Clients AS C ON A.`agency_id` = C.`agency_id`",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT A.`agency_id`, A.`agency_details` FROM Agencies AS A JOIN Clients AS C ON A.`agency_id` = C.`agency_id`",
        "repair_result": 1
    },
    {
        "idx": 966,
        "db_id": "advertising_agencies",
        "question": "Show all agency ids without any client.",
        "evidence": "",
        "gold": "SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients",
        "pred": "SELECT A.`agency_id` FROM Agencies A LEFT JOIN Clients C ON A.`agency_id` = C.`agency_id` WHERE C.`client_id` IS NULL",
        "pred_result": 1,
        "repair_sql": "SELECT A.`agency_id` FROM Agencies A LEFT JOIN Clients C ON A.`agency_id` = C.`agency_id` WHERE C.`client_id` IS NULL",
        "repair_result": 1
    },
    {
        "idx": 967,
        "db_id": "advertising_agencies",
        "question": "What are ids of agencies that do not have any clients?",
        "evidence": "",
        "gold": "SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients",
        "pred": "SELECT A.`agency_id` FROM Agencies A LEFT JOIN Clients C ON A.`agency_id` = C.`agency_id` WHERE C.`agency_id` IS NULL",
        "pred_result": 1,
        "repair_sql": "SELECT A.`agency_id` FROM Agencies A LEFT JOIN Clients C ON A.`agency_id` = C.`agency_id` WHERE C.`agency_id` IS NULL",
        "repair_result": 1
    },
    {
        "idx": 968,
        "db_id": "advertising_agencies",
        "question": "How many invoices do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Invoices",
        "pred": "SELECT COUNT(*) FROM Invoices",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Invoices",
        "repair_result": 1
    },
    {
        "idx": 969,
        "db_id": "advertising_agencies",
        "question": "Count the number of invoices.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Invoices",
        "pred": "SELECT COUNT(*) FROM Invoices",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Invoices",
        "repair_result": 1
    },
    {
        "idx": 970,
        "db_id": "advertising_agencies",
        "question": "Show ids, status codes, and details for all invoices for clients.",
        "evidence": "",
        "gold": "SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices",
        "pred": "SELECT `invoice_id`, `invoice_status`, `invoice_details` FROM Invoices",
        "pred_result": 1,
        "repair_sql": "SELECT `invoice_id`, `invoice_status`, `invoice_details` FROM Invoices",
        "repair_result": 1
    },
    {
        "idx": 971,
        "db_id": "advertising_agencies",
        "question": "What are the ids, statuses, and details for all invoices?",
        "evidence": "",
        "gold": "SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices",
        "pred": "SELECT `invoice_id`, `invoice_status`, `invoice_details` FROM Invoices",
        "pred_result": 1,
        "repair_sql": "SELECT `invoice_id`, `invoice_status`, `invoice_details` FROM Invoices",
        "repair_result": 1
    },
    {
        "idx": 972,
        "db_id": "advertising_agencies",
        "question": "Show all client ids and the number of invoices for each client.",
        "evidence": "",
        "gold": "SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id",
        "pred": "SELECT C.client_id, COUNT(*) FROM Clients AS C JOIN Invoices AS I ON C.client_id = I.client_id GROUP BY C.client_id",
        "pred_result": 1,
        "repair_sql": "SELECT C.client_id, COUNT(*) FROM Clients AS C JOIN Invoices AS I ON C.client_id = I.client_id GROUP BY C.client_id",
        "repair_result": 1
    },
    {
        "idx": 973,
        "db_id": "advertising_agencies",
        "question": "How many invoices are there for each client id?",
        "evidence": "",
        "gold": "SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id",
        "pred": "SELECT `client_id`, COUNT(*) FROM Invoices GROUP BY `client_id`",
        "pred_result": 1,
        "repair_sql": "SELECT `client_id`, COUNT(*) FROM Invoices GROUP BY `client_id`",
        "repair_result": 1
    },
    {
        "idx": 974,
        "db_id": "advertising_agencies",
        "question": "List the client id and detail with most number of invoices.",
        "evidence": "",
        "gold": "SELECT T1.client_id ,  T2.client_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT client_id, client_details FROM Clients WHERE client_id = ( SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT client_id, client_details FROM Clients WHERE client_id = ( SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 975,
        "db_id": "advertising_agencies",
        "question": "What are the client id and details for the client with the most invoices?",
        "evidence": "",
        "gold": "SELECT T1.client_id ,  T2.client_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT client_id, client_details FROM Clients WHERE client_id = ( SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT client_id, client_details FROM Clients WHERE client_id = ( SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 976,
        "db_id": "advertising_agencies",
        "question": "What are client ids for clients with at least 2 invoices.",
        "evidence": "",
        "gold": "SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2",
        "pred": "SELECT DISTINCT Clients.client_id FROM Clients JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id HAVING COUNT(Invoices.invoice_id) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT Clients.client_id FROM Clients JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id HAVING COUNT(Invoices.invoice_id) >= 2",
        "repair_result": 1
    },
    {
        "idx": 977,
        "db_id": "advertising_agencies",
        "question": "Return the client ids for clients with two or more invoices?",
        "evidence": "",
        "gold": "SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2",
        "pred": "SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2",
        "pred_result": 1,
        "repair_sql": "SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2",
        "repair_result": 1
    },
    {
        "idx": 978,
        "db_id": "advertising_agencies",
        "question": "Show all invoice status codes and the number of invoices with each status.",
        "evidence": "",
        "gold": "SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status",
        "pred": "SELECT `invoice_status`, COUNT(*) FROM Invoices GROUP BY `invoice_status`",
        "pred_result": 1,
        "repair_sql": "SELECT `invoice_status`, COUNT(*) FROM Invoices GROUP BY `invoice_status`",
        "repair_result": 1
    },
    {
        "idx": 979,
        "db_id": "advertising_agencies",
        "question": "How many invoices are there for each status code?",
        "evidence": "",
        "gold": "SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status",
        "pred": "SELECT `invoice_status`, COUNT(*) FROM Invoices GROUP BY `invoice_status`",
        "pred_result": 1,
        "repair_sql": "SELECT `invoice_status`, COUNT(*) FROM Invoices GROUP BY `invoice_status`",
        "repair_result": 1
    },
    {
        "idx": 980,
        "db_id": "advertising_agencies",
        "question": "What is the invoice status code with most number of invoices.",
        "evidence": "",
        "gold": "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `invoice_status`, COUNT(*) AS `num_invoices` FROM Invoices GROUP BY `invoice_status` ORDER BY `num_invoices` DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `invoice_status`, COUNT(*) AS `num_invoices` FROM Invoices GROUP BY `invoice_status` ORDER BY `num_invoices` DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 981,
        "db_id": "advertising_agencies",
        "question": "Return the invoice status that has the most invoices.",
        "evidence": "",
        "gold": "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT `invoice_status`, COUNT(*) AS total_invoices FROM Invoices GROUP BY `invoice_status` ORDER BY total_invoices DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT `invoice_status`, COUNT(*) AS total_invoices FROM Invoices GROUP BY `invoice_status` ORDER BY total_invoices DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 982,
        "db_id": "advertising_agencies",
        "question": "Show all invoice status codes and details and the corresponding client id and details and agency id and details.",
        "evidence": "",
        "gold": "SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id",
        "pred": "SELECT I.invoice_status, I.invoice_details, C.client_id, C.client_details, C.agency_id, A.agency_details FROM Invoices AS I JOIN Clients AS C ON I.client_id = C.client_id JOIN Agencies AS A ON C.agency_id = A.agency_id",
        "pred_result": 1,
        "repair_sql": "SELECT I.invoice_status, I.invoice_details, C.client_id, C.client_details, C.agency_id, A.agency_details FROM Invoices AS I JOIN Clients AS C ON I.client_id = C.client_id JOIN Agencies AS A ON C.agency_id = A.agency_id",
        "repair_result": 1
    },
    {
        "idx": 983,
        "db_id": "advertising_agencies",
        "question": "What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?",
        "evidence": "",
        "gold": "SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id",
        "pred": "SELECT Invoices.`invoice_status`, Invoices.`invoice_details`, Clients.`client_id`, Clients.`client_details`, Agencies.`agency_id`, Agencies.`agency_details` FROM Invoices JOIN Clients ON Invoices.`client_id` = Clients.`client_id` JOIN Agencies ON Clients.`agency_id` = Agencies.`agency_id`",
        "pred_result": 1,
        "repair_sql": "SELECT Invoices.`invoice_status`, Invoices.`invoice_details`, Clients.`client_id`, Clients.`client_details`, Agencies.`agency_id`, Agencies.`agency_details` FROM Invoices JOIN Clients ON Invoices.`client_id` = Clients.`client_id` JOIN Agencies ON Clients.`agency_id` = Agencies.`agency_id`",
        "repair_result": 1
    },
    {
        "idx": 984,
        "db_id": "advertising_agencies",
        "question": "List all meeting type codes and details.",
        "evidence": "",
        "gold": "SELECT meeting_type ,  other_details FROM meetings",
        "pred": "SELECT DISTINCT `meeting_type`, `purpose_of_meeting` FROM Meetings",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT `meeting_type`, `purpose_of_meeting` FROM Meetings",
        "repair_result": 0
    },
    {
        "idx": 985,
        "db_id": "advertising_agencies",
        "question": "What are all meeting types and other details?",
        "evidence": "",
        "gold": "SELECT meeting_type ,  other_details FROM meetings",
        "pred": "SELECT DISTINCT `meeting_type`, `other_details` FROM Meetings",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `meeting_type`, `other_details` FROM Meetings",
        "repair_result": 1
    },
    {
        "idx": 986,
        "db_id": "advertising_agencies",
        "question": "Show all meeting outcomes and purposes.",
        "evidence": "",
        "gold": "SELECT meeting_outcome ,  purpose_of_meeting FROM meetings",
        "pred": "SELECT `meeting_outcome`, `purpose_of_meeting` FROM Meetings",
        "pred_result": 1,
        "repair_sql": "SELECT `meeting_outcome`, `purpose_of_meeting` FROM Meetings",
        "repair_result": 1
    },
    {
        "idx": 987,
        "db_id": "advertising_agencies",
        "question": "What are all meeting outcomes and purposes?",
        "evidence": "",
        "gold": "SELECT meeting_outcome ,  purpose_of_meeting FROM meetings",
        "pred": "SELECT DISTINCT `meeting_outcome`, `purpose_of_meeting` FROM Meetings",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `meeting_outcome`, `purpose_of_meeting` FROM Meetings",
        "repair_result": 1
    },
    {
        "idx": 988,
        "db_id": "advertising_agencies",
        "question": "Show all payment ids and details for invoices whose status is 'Working'.",
        "evidence": "",
        "gold": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'",
        "pred": "SELECT `payment_id`, `payment_details` FROM Payments WHERE `invoice_id` IN (SELECT `invoice_id` FROM Invoices WHERE `invoice_status` = 'Working')",
        "pred_result": 1,
        "repair_sql": "SELECT `payment_id`, `payment_details` FROM Payments WHERE `invoice_id` IN (SELECT `invoice_id` FROM Invoices WHERE `invoice_status` = 'Working')",
        "repair_result": 1
    },
    {
        "idx": 989,
        "db_id": "advertising_agencies",
        "question": "What are all payment ids and payment details for invoices with status Working?",
        "evidence": "",
        "gold": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'",
        "pred": "SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working')",
        "pred_result": 1,
        "repair_sql": "SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working')",
        "repair_result": 1
    },
    {
        "idx": 990,
        "db_id": "advertising_agencies",
        "question": "Show all invoice ids and statuses without a payment.",
        "evidence": "",
        "gold": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
        "pred": "SELECT `invoice_id`, `invoice_status` FROM Invoices WHERE `invoice_id` NOT IN (SELECT `invoice_id` FROM Payments)",
        "pred_result": 1,
        "repair_sql": "SELECT `invoice_id`, `invoice_status` FROM Invoices WHERE `invoice_id` NOT IN (SELECT `invoice_id` FROM Payments)",
        "repair_result": 1
    },
    {
        "idx": 991,
        "db_id": "advertising_agencies",
        "question": "What are the invoice ids and statuses for invoices without a payment?",
        "evidence": "",
        "gold": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
        "pred": "SELECT `invoice_id`, `invoice_status` FROM Invoices WHERE `invoice_id` NOT IN (SELECT `invoice_id` FROM Payments)",
        "pred_result": 1,
        "repair_sql": "SELECT `invoice_id`, `invoice_status` FROM Invoices WHERE `invoice_id` NOT IN (SELECT `invoice_id` FROM Payments)",
        "repair_result": 1
    },
    {
        "idx": 992,
        "db_id": "advertising_agencies",
        "question": "How many payments do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Payments",
        "pred": "SELECT COUNT(*) FROM Payments",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Payments",
        "repair_result": 1
    },
    {
        "idx": 993,
        "db_id": "advertising_agencies",
        "question": "Count the number of payments.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Payments",
        "pred": "SELECT COUNT(*) FROM Payments",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Payments",
        "repair_result": 1
    },
    {
        "idx": 994,
        "db_id": "advertising_agencies",
        "question": "List all payment ids and its corresponding invoice ids and details.",
        "evidence": "",
        "gold": "SELECT payment_id ,  invoice_id ,  payment_details FROM Payments",
        "pred": "SELECT `payment_id`, `invoice_id`, `invoice_details` FROM Invoices JOIN Payments ON Invoices.`invoice_id` = Payments.`invoice_id`",
        "pred_result": "ambiguous column name: invoice_id",
        "repair_sql": "SELECT Payments.payment_id, Payments.invoice_id, Invoices.invoice_details FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id",
        "repair_result": 0
    },
    {
        "idx": 995,
        "db_id": "advertising_agencies",
        "question": "What are the payment ids, invoice ids, and payment details for all payments?",
        "evidence": "",
        "gold": "SELECT payment_id ,  invoice_id ,  payment_details FROM Payments",
        "pred": "SELECT payment_id, invoice_id, payment_details FROM Payments",
        "pred_result": 1,
        "repair_sql": "SELECT payment_id, invoice_id, payment_details FROM Payments",
        "repair_result": 1
    },
    {
        "idx": 996,
        "db_id": "advertising_agencies",
        "question": "Show all the different invoice ids and statuses of the payments",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
        "pred": "SELECT DISTINCT `invoice_id`, `invoice_status` FROM Invoices",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT `invoice_id`, `invoice_status` FROM Invoices",
        "repair_result": 0
    },
    {
        "idx": 997,
        "db_id": "advertising_agencies",
        "question": "What are the distinct invoice ids and statuses for all payments?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
        "pred": "SELECT DISTINCT P.`invoice_id`, I.`invoice_status` FROM Payments AS P JOIN Invoices AS I ON P.`invoice_id` = I.`invoice_id`",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT P.`invoice_id`, I.`invoice_status` FROM Payments AS P JOIN Invoices AS I ON P.`invoice_id` = I.`invoice_id`",
        "repair_result": 1
    },
    {
        "idx": 998,
        "db_id": "advertising_agencies",
        "question": "Show all invoice ids and the number of payments for each invoice.",
        "evidence": "",
        "gold": "SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id",
        "pred": "SELECT T1.`invoice_id`, COUNT(*) FROM Invoices AS T1 JOIN Payments AS T2 ON T1.`invoice_id` = T2.`invoice_id` GROUP BY T1.`invoice_id`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`invoice_id`, COUNT(*) FROM Invoices AS T1 JOIN Payments AS T2 ON T1.`invoice_id` = T2.`invoice_id` GROUP BY T1.`invoice_id`",
        "repair_result": 1
    },
    {
        "idx": 999,
        "db_id": "advertising_agencies",
        "question": "How many payments are there for each invoice?",
        "evidence": "",
        "gold": "SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id",
        "pred": "SELECT `invoice_id`, COUNT(*) FROM Payments GROUP BY `invoice_id`",
        "pred_result": 1,
        "repair_sql": "SELECT `invoice_id`, COUNT(*) FROM Payments GROUP BY `invoice_id`",
        "repair_result": 1
    },
    {
        "idx": 1000,
        "db_id": "advertising_agencies",
        "question": "What is the invoice id, status code, and details for the invoice with most number of payments.",
        "evidence": "",
        "gold": "SELECT T1.invoice_id ,  T2.invoice_status ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`invoice_id`, T1.`invoice_status`, T1.`invoice_details` FROM Invoices AS T1 WHERE T1.`invoice_id` = ( SELECT T2.`invoice_id` FROM Payments GROUP BY T2.`invoice_id` ORDER BY COUNT(*) DESC LIMIT 1 )",
        "pred_result": "no such column: T2.invoice_id",
        "repair_sql": "SELECT T1.`invoice_id`, T1.`invoice_status`, T1.`invoice_details` FROM Invoices AS T1 JOIN ( SELECT invoice_id, COUNT(*) AS payment_count FROM Payments GROUP BY invoice_id ORDER BY COUNT(*) DESC LIMIT 1 ) AS T2 ON T1.invoice_id = T2.invoice_id",
        "repair_result": 1
    },
    {
        "idx": 1001,
        "db_id": "advertising_agencies",
        "question": "Return the invoice ids, statuses, and details for invoices with the most payments?",
        "evidence": "",
        "gold": "SELECT T1.invoice_id ,  T2.invoice_status ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments GROUP BY invoice_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "pred_result": 1,
        "repair_sql": "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments GROUP BY invoice_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "repair_result": 1
    },
    {
        "idx": 1002,
        "db_id": "advertising_agencies",
        "question": "How many staff do we have?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Staff",
        "pred": "SELECT COUNT(*) FROM Staff",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Staff",
        "repair_result": 1
    },
    {
        "idx": 1003,
        "db_id": "advertising_agencies",
        "question": "Count the number of staff.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Staff",
        "pred": "SELECT COUNT(*) FROM Staff",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Staff",
        "repair_result": 1
    },
    {
        "idx": 1004,
        "db_id": "advertising_agencies",
        "question": "Show the agency ids and the number of staff in each agent?",
        "evidence": "",
        "gold": "SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id",
        "pred": "SELECT T1.`agency_id`, COUNT(*) FROM Agencies AS T1 JOIN Staff AS T2 ON T1.`agency_id` = T2.`agency_id` GROUP BY T1.`agency_id`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`agency_id`, COUNT(*) FROM Agencies AS T1 JOIN Staff AS T2 ON T1.`agency_id` = T2.`agency_id` GROUP BY T1.`agency_id`",
        "repair_result": 1
    },
    {
        "idx": 1005,
        "db_id": "advertising_agencies",
        "question": "Return the agency ids and number of staff in each.",
        "evidence": "",
        "gold": "SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id",
        "pred": "SELECT T1.`agency_id`, COUNT(*) FROM Agencies AS T1 JOIN Staff AS T2 ON T1.`agency_id` = T2.`agency_id` GROUP BY T1.`agency_id`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`agency_id`, COUNT(*) FROM Agencies AS T1 JOIN Staff AS T2 ON T1.`agency_id` = T2.`agency_id` GROUP BY T1.`agency_id`",
        "repair_result": 1
    },
    {
        "idx": 1006,
        "db_id": "advertising_agencies",
        "question": "What is the agent id and details for the agency with most staff?",
        "evidence": "",
        "gold": "SELECT T1.agency_id ,  T2.agency_details FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT T1.`agency_id`, T1.`agency_details` FROM Agencies AS T1 JOIN Staff AS T2 ON T1.`agency_id` = T2.`agency_id` GROUP BY T1.`agency_id` ORDER BY COUNT(T2.`staff_id`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`agency_id`, T1.`agency_details` FROM Agencies AS T1 JOIN Staff AS T2 ON T1.`agency_id` = T2.`agency_id` GROUP BY T1.`agency_id` ORDER BY COUNT(T2.`staff_id`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 1007,
        "db_id": "advertising_agencies",
        "question": "Return the id and detail for the agency with the most staff.",
        "evidence": "",
        "gold": "SELECT T1.agency_id ,  T2.agency_details FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
        "pred": "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = ( SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = ( SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 1008,
        "db_id": "advertising_agencies",
        "question": "Show meeting outcome codes and the number of meeting in each outcome.",
        "evidence": "",
        "gold": "SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome",
        "pred": "SELECT `meeting_outcome`, COUNT(*) FROM Meetings GROUP BY `meeting_outcome`",
        "pred_result": 1,
        "repair_sql": "SELECT `meeting_outcome`, COUNT(*) FROM Meetings GROUP BY `meeting_outcome`",
        "repair_result": 1
    },
    {
        "idx": 1009,
        "db_id": "advertising_agencies",
        "question": "How many meetings had each meeting outcome?",
        "evidence": "",
        "gold": "SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome",
        "pred": "SELECT `meeting_outcome`, COUNT(*) FROM Meetings GROUP BY `meeting_outcome`",
        "pred_result": 1,
        "repair_sql": "SELECT `meeting_outcome`, COUNT(*) FROM Meetings GROUP BY `meeting_outcome`",
        "repair_result": 1
    },
    {
        "idx": 1010,
        "db_id": "advertising_agencies",
        "question": "List the client ids and the number of meeting for each client.",
        "evidence": "",
        "gold": "SELECT client_id ,  count(*) FROM Meetings GROUP BY client_id",
        "pred": "SELECT C.client_id, COUNT(*) FROM Clients AS C JOIN Meetings AS M ON C.client_id = M.client_id GROUP BY C.client_id",
        "pred_result": 1,
        "repair_sql": "SELECT C.client_id, COUNT(*) FROM Clients AS C JOIN Meetings AS M ON C.client_id = M.client_id GROUP BY C.client_id",
        "repair_result": 1
    },
    {
        "idx": 1011,
        "db_id": "advertising_agencies",
        "question": "How many meetings are there for each client id?",
        "evidence": "",
        "gold": "SELECT client_id ,  count(*) FROM Meetings GROUP BY client_id",
        "pred": "SELECT `client_id`, COUNT(*) FROM Meetings GROUP BY `client_id`",
        "pred_result": 1,
        "repair_sql": "SELECT `client_id`, COUNT(*) FROM Meetings GROUP BY `client_id`",
        "repair_result": 1
    },
    {
        "idx": 1012,
        "db_id": "advertising_agencies",
        "question": "Show the meeting type codes and the number of meeting for each client.",
        "evidence": "",
        "gold": "SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type",
        "pred": "SELECT T1.client_id, T2.meeting_type, COUNT(*) FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id, T2.meeting_type",
        "pred_result": 0,
        "repair_sql": "SELECT T1.client_id, T2.meeting_type, COUNT(*) FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id, T2.meeting_type",
        "repair_result": 0
    },
    {
        "idx": 1013,
        "db_id": "advertising_agencies",
        "question": "How many meetings are there for each meeting type?",
        "evidence": "",
        "gold": "SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type",
        "pred": "SELECT `meeting_type`, COUNT(*) FROM Meetings GROUP BY `meeting_type`",
        "pred_result": 1,
        "repair_sql": "SELECT `meeting_type`, COUNT(*) FROM Meetings GROUP BY `meeting_type`",
        "repair_result": 1
    },
    {
        "idx": 1014,
        "db_id": "advertising_agencies",
        "question": "Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.",
        "evidence": "",
        "gold": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
        "pred": "SELECT M.`meeting_id`, M.`meeting_outcome`, M.`meeting_type`, C.`client_details` FROM Meetings AS M JOIN Clients AS C ON M.`client_id` = C.`client_id`",
        "pred_result": 1,
        "repair_sql": "SELECT M.`meeting_id`, M.`meeting_outcome`, M.`meeting_type`, C.`client_details` FROM Meetings AS M JOIN Clients AS C ON M.`client_id` = C.`client_id`",
        "repair_result": 1
    },
    {
        "idx": 1015,
        "db_id": "advertising_agencies",
        "question": "What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?",
        "evidence": "",
        "gold": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
        "pred": "SELECT M.`meeting_id`, M.`meeting_outcome`, M.`meeting_type`, C.`client_details` FROM Meetings AS M JOIN Clients AS C ON M.`client_id` = C.`client_id`",
        "pred_result": 1,
        "repair_sql": "SELECT M.`meeting_id`, M.`meeting_outcome`, M.`meeting_type`, C.`client_details` FROM Meetings AS M JOIN Clients AS C ON M.`client_id` = C.`client_id`",
        "repair_result": 1
    },
    {
        "idx": 1016,
        "db_id": "advertising_agencies",
        "question": "Show the meeting ids and the number of staff in each meeting.",
        "evidence": "",
        "gold": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
        "pred": "SELECT `meeting_id`, COUNT(`staff_id`) FROM Staff_in_Meetings GROUP BY `meeting_id`",
        "pred_result": 1,
        "repair_sql": "SELECT `meeting_id`, COUNT(`staff_id`) FROM Staff_in_Meetings GROUP BY `meeting_id`",
        "repair_result": 1
    },
    {
        "idx": 1017,
        "db_id": "advertising_agencies",
        "question": "Count the number of staff in each meeting by meeting id.",
        "evidence": "",
        "gold": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
        "pred": "SELECT T1.`meeting_id`, COUNT(T2.`staff_id`) FROM Meetings AS T1 JOIN Staff_in_Meetings AS T2 ON T1.`meeting_id` = T2.`meeting_id` GROUP BY T1.`meeting_id`",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`meeting_id`, COUNT(T2.`staff_id`) FROM Meetings AS T1 JOIN Staff_in_Meetings AS T2 ON T1.`meeting_id` = T2.`meeting_id` GROUP BY T1.`meeting_id`",
        "repair_result": 1
    },
    {
        "idx": 1018,
        "db_id": "advertising_agencies",
        "question": "Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.",
        "evidence": "",
        "gold": "SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;",
        "pred": "SELECT `staff_id`, COUNT(*) FROM Staff_in_Meetings WHERE `staff_id` IN ( SELECT `staff_id` FROM Staff_in_Meetings GROUP BY `staff_id` HAVING COUNT(*) = ( SELECT MIN(meeting_count) FROM ( SELECT `staff_id`, COUNT(*) as meeting_count FROM Staff_in_Meetings GROUP BY `staff_id` ) ) ) GROUP BY `staff_id`",
        "pred_result": 0,
        "repair_sql": "SELECT `staff_id`, COUNT(*) FROM Staff_in_Meetings WHERE `staff_id` IN ( SELECT `staff_id` FROM Staff_in_Meetings GROUP BY `staff_id` HAVING COUNT(*) = ( SELECT MIN(meeting_count) FROM ( SELECT `staff_id`, COUNT(*) as meeting_count FROM Staff_in_Meetings GROUP BY `staff_id` ) ) ) GROUP BY `staff_id`",
        "repair_result": 0
    },
    {
        "idx": 1019,
        "db_id": "advertising_agencies",
        "question": "What is the staff id of the staff who attended the least meetings but attended some meeting?",
        "evidence": "",
        "gold": "SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;",
        "pred": "SELECT T1.`staff_id` FROM Staff AS T1 LEFT JOIN Staff_in_Meetings AS T2 ON T1.`staff_id` = T2.`staff_id` GROUP BY T1.`staff_id` ORDER BY COUNT(T2.`meeting_id`) ASC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`staff_id` FROM Staff AS T1 LEFT JOIN Staff_in_Meetings AS T2 ON T1.`staff_id` = T2.`staff_id` GROUP BY T1.`staff_id` ORDER BY COUNT(T2.`meeting_id`) ASC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 1020,
        "db_id": "advertising_agencies",
        "question": "How many staff have attended a meeting?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT staff_id) FROM Staff_in_meetings",
        "pred": "SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings",
        "repair_result": 1
    },
    {
        "idx": 1021,
        "db_id": "advertising_agencies",
        "question": "Return the number of distinct staff who have attended a meeting?",
        "evidence": "",
        "gold": "SELECT count(DISTINCT staff_id) FROM Staff_in_meetings",
        "pred": "SELECT COUNT(DISTINCT `staff_id`) FROM Staff_in_Meetings",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT `staff_id`) FROM Staff_in_Meetings",
        "repair_result": 1
    },
    {
        "idx": 1022,
        "db_id": "advertising_agencies",
        "question": "How many staff did not attend any meeting?",
        "evidence": "",
        "gold": "SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )",
        "pred": "SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT DISTINCT staff_id FROM Staff_in_Meetings)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT DISTINCT staff_id FROM Staff_in_Meetings)",
        "repair_result": 1
    },
    {
        "idx": 1023,
        "db_id": "advertising_agencies",
        "question": "Count the number of staff who did not attend any meeting.",
        "evidence": "",
        "gold": "SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )",
        "pred": "SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings)",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings)",
        "repair_result": 1
    },
    {
        "idx": 1024,
        "db_id": "advertising_agencies",
        "question": "What are the ids and details of the clients who have attended any meeting or have any invoice?",
        "evidence": "",
        "gold": "SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
        "pred": "SELECT DISTINCT C.client_id, C.client_details FROM Clients AS C JOIN Invoices AS I ON C.client_id = I.client_id JOIN Meetings AS M ON C.client_id = M.client_id",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT C.client_id, C.client_details FROM Clients AS C JOIN Invoices AS I ON C.client_id = I.client_id JOIN Meetings AS M ON C.client_id = M.client_id",
        "repair_result": 0
    },
    {
        "idx": 1025,
        "db_id": "advertising_agencies",
        "question": "Return the ids and details of clients who have attended a meeting or had an invoice.",
        "evidence": "",
        "gold": "SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
        "pred": "SELECT DISTINCT C.client_id, C.client_details FROM Clients AS C JOIN Meetings AS M ON C.client_id = M.client_id UNION SELECT DISTINCT C.client_id, C.client_details FROM Clients AS C JOIN Invoices AS I ON C.client_id = I.client_id",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT C.client_id, C.client_details FROM Clients AS C JOIN Meetings AS M ON C.client_id = M.client_id UNION SELECT DISTINCT C.client_id, C.client_details FROM Clients AS C JOIN Invoices AS I ON C.client_id = I.client_id",
        "repair_result": 1
    },
    {
        "idx": 1026,
        "db_id": "advertising_agencies",
        "question": "What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter 's'?",
        "evidence": "",
        "gold": "SELECT staff_id ,  staff_details FROM staff WHERE staff_details LIKE \"%s%\" GROUP BY staff_id HAVING count(*)  >=  1",
        "pred": "SELECT DISTINCT T1.`staff_id`, T1.`staff_details` FROM Staff AS T1 JOIN Staff_in_Meetings AS T2 ON T1.`staff_id` = T2.`staff_id` JOIN Meetings AS T3 ON T2.`meeting_id` = T3.`meeting_id` WHERE T1.`staff_details` LIKE '%s%'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`staff_id`, T1.`staff_details` FROM Staff AS T1 JOIN Staff_in_Meetings AS T2 ON T1.`staff_id` = T2.`staff_id` JOIN Meetings AS T3 ON T2.`meeting_id` = T3.`meeting_id` WHERE T1.`staff_details` LIKE '%s%'",
        "repair_result": 0
    },
    {
        "idx": 1027,
        "db_id": "advertising_agencies",
        "question": "Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?",
        "evidence": "",
        "gold": "SELECT staff_id ,  staff_details FROM staff WHERE staff_details LIKE \"%s%\" GROUP BY staff_id HAVING count(*)  >=  1",
        "pred": "SELECT DISTINCT S.`staff_id`, S.`staff_details` FROM Staff AS S JOIN Staff_in_Meetings AS SIM ON S.`staff_id` = SIM.`staff_id` WHERE S.`staff_details` LIKE '%s%'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT S.`staff_id`, S.`staff_details` FROM Staff AS S JOIN Staff_in_Meetings AS SIM ON S.`staff_id` = SIM.`staff_id` WHERE S.`staff_details` LIKE '%s%'",
        "repair_result": 0
    },
    {
        "idx": 1028,
        "db_id": "advertising_agencies",
        "question": "What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.",
        "evidence": "",
        "gold": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
        "pred": "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients AS C JOIN Meetings AS M ON C.client_id = M.client_id JOIN Invoices AS I ON C.client_id = I.client_id GROUP BY C.client_id HAVING COUNT(DISTINCT M.meeting_id) = 1",
        "pred_result": 1,
        "repair_sql": "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients AS C JOIN Meetings AS M ON C.client_id = M.client_id JOIN Invoices AS I ON C.client_id = I.client_id GROUP BY C.client_id HAVING COUNT(DISTINCT M.meeting_id) = 1",
        "repair_result": 1
    },
    {
        "idx": 1029,
        "db_id": "advertising_agencies",
        "question": "Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.",
        "evidence": "",
        "gold": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
        "pred": "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients AS C JOIN Meetings AS M ON C.client_id = M.client_id JOIN Invoices AS I ON C.client_id = I.client_id GROUP BY C.client_id HAVING COUNT(DISTINCT M.meeting_id) = 1",
        "pred_result": 1,
        "repair_sql": "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients AS C JOIN Meetings AS M ON C.client_id = M.client_id JOIN Invoices AS I ON C.client_id = I.client_id GROUP BY C.client_id HAVING COUNT(DISTINCT M.meeting_id) = 1",
        "repair_result": 1
    },
    {
        "idx": 1030,
        "db_id": "advertising_agencies",
        "question": "List the start time, end time of each meeting, and the corresponding client detail and staff detail.",
        "evidence": "",
        "gold": "SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id",
        "pred": "SELECT M.start_date_time, M.end_date_time, C.client_details, S.staff_details FROM Meetings AS M JOIN Clients AS C ON M.client_id = C.client_id JOIN Staff AS S ON S.agency_id = C.agency_id JOIN Staff_in_Meetings AS SM ON SM.meeting_id = M.meeting_id",
        "pred_result": 0,
        "repair_sql": "SELECT M.start_date_time, M.end_date_time, C.client_details, S.staff_details FROM Meetings AS M JOIN Clients AS C ON M.client_id = C.client_id JOIN Staff AS S ON S.agency_id = C.agency_id JOIN Staff_in_Meetings AS SM ON SM.meeting_id = M.meeting_id",
        "repair_result": 0
    },
    {
        "idx": 1031,
        "db_id": "advertising_agencies",
        "question": "What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?",
        "evidence": "",
        "gold": "SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id",
        "pred": "SELECT M.start_date_time, M.end_date_time, C.client_details, S.staff_details FROM Meetings AS M JOIN Clients AS C ON M.client_id = C.client_id JOIN Staff_in_Meetings AS SM ON M.meeting_id = SM.meeting_id JOIN Staff AS S ON SM.staff_id = S.staff_id",
        "pred_result": 1,
        "repair_sql": "SELECT M.start_date_time, M.end_date_time, C.client_details, S.staff_details FROM Meetings AS M JOIN Clients AS C ON M.client_id = C.client_id JOIN Staff_in_Meetings AS SM ON M.meeting_id = SM.meeting_id JOIN Staff AS S ON SM.staff_id = S.staff_id",
        "repair_result": 1
    }
]