[
    {
        "idx": 0,
        "db_id": "codebase_comments",
        "question": "How many English language codes whose comments for the method are in the XML format?",
        "evidence": "English language refers to Lang = 'en'; the comments for this method is XML format refers to CommentIsXml = 1;",
        "gold": "SELECT COUNT(Lang) FROM Method WHERE Lang = 'en' AND CommentIsXml = 1",
        "pred": "SELECT COUNT(*) FROM Method AS T1 WHERE T1.`Lang` = 'en' AND T1.`CommentIsXml` = 1",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Method AS T1 WHERE T1.`Lang` = 'en' AND T1.`CommentIsXml` = 1",
        "repair_result": 1
    },
    {
        "idx": 1,
        "db_id": "codebase_comments",
        "question": "What is the task of the method whose tokenized name is \"online median filter test median window filling\"?",
        "evidence": "tokenized name refers to NameTokenized; task of the method refers to the second part of name deliminated by \".\"; for example, the task of 'LinqToDelicious.HttpWebRequestFactory.Create' is 'HttpWebRequestFactory'",
        "gold": "SELECT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE NameTokenized = 'online median filter test median window filling'",
        "pred": "SELECT SUBSTR(Name, INSTR(Name, '.') + 1) AS Task FROM Method WHERE NameTokenized = 'online median filter test median window filling'",
        "pred_result": 0,
        "repair_sql": "SELECT SUBSTR(Name, INSTR(Name, '.') + 1) AS Task FROM Method WHERE NameTokenized = 'online median filter test median window filling'",
        "repair_result": 0
    },
    {
        "idx": 2,
        "db_id": "codebase_comments",
        "question": "What is the time of sampling of the solution with the highest sampling time? Indicate the id number of the solution.",
        "evidence": "highest sampling time refers to max(SampledAt); id number of the solution refers to SolutionId;",
        "gold": "SELECT DISTINCT SampledAt, SolutionId FROM Method WHERE SampledAt = ( SELECT MAX(SampledAt) FROM Method )",
        "pred": "SELECT T1.`Id`, T1.`SampledAt` FROM Method AS T1 WHERE T1.`SampledAt` = ( SELECT MAX(`SampledAt`) FROM Method )",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`Id`, T1.`SampledAt` FROM Method AS T1 WHERE T1.`SampledAt` = ( SELECT MAX(`SampledAt`) FROM Method )",
        "repair_result": 0
    },
    {
        "idx": 3,
        "db_id": "codebase_comments",
        "question": "How many followers do the most followed repository on Github have? Give the github address of the repository.",
        "evidence": "more forks refers to more people follow this repository; most followed repository refers to max(Forks);\u00a0 the github address of the repository refers to Url;",
        "gold": "SELECT Forks, Url FROM Repo WHERE Forks = ( SELECT MAX(Forks) FROM Repo )",
        "pred": "SELECT `Url` FROM Repo WHERE `Forks` = ( SELECT MAX(`Forks`) FROM Repo )",
        "pred_result": 0,
        "repair_sql": "SELECT `Url` FROM Repo WHERE `Forks` = ( SELECT MAX(`Forks`) FROM Repo )",
        "repair_result": 0
    },
    {
        "idx": 4,
        "db_id": "codebase_comments",
        "question": "What is the id of the repository with the highest number of solution path?",
        "evidence": "highest number of solution path refers to max(count(Path)); id of the repository refers to RepoId",
        "gold": "SELECT RepoId FROM solution GROUP BY RepoId ORDER BY COUNT(Path) DESC LIMIT 1",
        "pred": "SELECT T1.`RepoId` FROM ( SELECT T1.`RepoId`, COUNT(T2.`Path`) AS num_paths FROM Solution AS T2 INNER JOIN Repo AS T1 ON T1.`Id` = T2.`RepoId` GROUP BY T1.`RepoId` ) AS T3 ORDER BY T3.num_paths DESC LIMIT 1",
        "pred_result": "no such column: T1.RepoId",
        "repair_sql": "SELECT T3.RepoId FROM ( SELECT T1.RepoId, COUNT(T2.Path) AS num_paths FROM Solution AS T2 INNER JOIN Repo AS T1 ON T1.Id = T2.RepoId GROUP BY T1.RepoId ) AS T3 ORDER BY T3.num_paths DESC LIMIT 1",
        "repair_result": "no such column: T1.RepoId"
    },
    {
        "idx": 5,
        "db_id": "codebase_comments",
        "question": "What is the most liked repository? Indicate its github address and the amount of stars it has received.",
        "evidence": "more stars mean more people like this repository; most liked refers to max(Stars); the github address of repository refers to Url;",
        "gold": "SELECT Url, Stars FROM Repo WHERE Stars = ( SELECT MAX(Stars) FROM Repo )",
        "pred": "SELECT T1.`Url`, T1.`Stars` FROM Repo AS T1 ORDER BY T1.`Stars` DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Url`, T1.`Stars` FROM Repo AS T1 ORDER BY T1.`Stars` DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 6,
        "db_id": "codebase_comments",
        "question": "What is the name of the solution path with the highest processed time?",
        "evidence": "highest processed time refers to max(ProcessedTime);",
        "gold": "SELECT Path FROM Solution WHERE ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Solution )",
        "pred": "SELECT T2.`Name` FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.`Id` = T2.`SolutionId` WHERE T1.`Path` = ( SELECT T1.`Path` FROM Solution AS T1 ORDER BY T1.`ProcessedTime` DESC LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`Name` FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.`Id` = T2.`SolutionId` WHERE T1.`Path` = ( SELECT T1.`Path` FROM Solution AS T1 ORDER BY T1.`ProcessedTime` DESC LIMIT 1 ) ORDER BY T1.`ProcessedTime` DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 7,
        "db_id": "codebase_comments",
        "question": "How much is the processed time of downloading the most popular repository?",
        "evidence": "more watchers mean that this repository is more popular;",
        "gold": "SELECT ProcessedTime FROM Repo WHERE Watchers = ( SELECT MAX(Watchers) FROM Repo )",
        "pred": "SELECT `ProcessedTime` FROM Solution WHERE `RepoId` = ( SELECT `RepoId` FROM Solution INNER JOIN Repo ON Solution.`RepoId` = Repo.`Id` ORDER BY Repo.`Watchers` DESC LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT `ProcessedTime` FROM Solution WHERE `RepoId` = ( SELECT `RepoId` FROM Solution INNER JOIN Repo ON Solution.`RepoId` = Repo.`Id` ORDER BY Repo.`Watchers` DESC LIMIT 1 )",
        "repair_result": 0
    },
    {
        "idx": 8,
        "db_id": "codebase_comments",
        "question": "What is the github address of the \"nofear_Mara\\Mara.sln\" solution path?",
        "evidence": "github address of repository refers to Url;",
        "gold": "SELECT Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE Path = 'nofear_MaraMara.sln'",
        "pred": "SELECT T2.`Url` FROM Repo AS T2 WHERE T2.`Id` = ( SELECT T1.`RepoId` FROM Solution AS T1 WHERE T1.`Path` = 'nofear_Mara\\Mara.sln' )",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`Url` FROM Repo AS T2 WHERE T2.`Id` = ( SELECT T1.`RepoId` FROM Solution AS T1 WHERE T1.`Path` = 'nofear_Mara\\Mara.sln' )",
        "repair_result": 0
    },
    {
        "idx": 9,
        "db_id": "codebase_comments",
        "question": "Which repository has the longest amount of processed time of downloading? Indicate whether the solution paths in the repository can be implemented without needs of compilation.",
        "evidence": "longest amount of processed time refers to max(ProcessedTime); the repository can be implemented without needs of compilation refers to WasCompiled = 1;",
        "gold": "SELECT DISTINCT T1.id, T2.WasCompiled FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Repo )",
        "pred": "SELECT T2.`Path`, CASE WHEN T2.`WasCompiled` = 1 THEN 'Yes' ELSE 'No' END AS `Can be implemented without compilation` FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`RepoId` WHERE T1.`Url` = ( SELECT T1.`Url` FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`RepoId` ORDER BY T2.`ProcessedTime` DESC LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`Path`, CASE WHEN T2.`WasCompiled` = 1 THEN 'Yes' ELSE 'No' END AS `Can be implemented without compilation` FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`RepoId` WHERE T1.`Url` = ( SELECT T1.`Url` FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`RepoId` ORDER BY T2.`ProcessedTime` DESC LIMIT 1 )",
        "repair_result": 0
    },
    {
        "idx": 10,
        "db_id": "codebase_comments",
        "question": "What is the tokenized name of the solution whose path is \"maravillas_linq-to-delicious\\tasty.sln\"?",
        "evidence": "tokenized name refers to NameTokenized",
        "gold": "SELECT DISTINCT T2.NameTokenized FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'maravillas_linq-to-delicious'",
        "pred": "SELECT NameTokenized FROM Method WHERE SolutionId = ( SELECT Id FROM Solution WHERE Path = \"maravillas_linq-to-delicious\\tasty.sln\" )",
        "pred_result": 0,
        "repair_sql": "SELECT NameTokenized FROM Method WHERE SolutionId = ( SELECT Id FROM Solution WHERE Path = \"maravillas_linq-to-delicious\\tasty.sln\" )",
        "repair_result": 0
    },
    {
        "idx": 11,
        "db_id": "codebase_comments",
        "question": "Among the repositories whose number of stars received are between 6,000 to 9,000, which repository has the highest number of solution paths and many of those solution paths needs to be compiled if user wants to implement it?",
        "evidence": "Stars between 6,000 to 9,000; highest number of solution paths refers to max(count(Path)); needs to be compiled if user wants to implement it refers to WasCompiled = 0;",
        "gold": "SELECT T2.RepoId, COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars BETWEEN 6000 AND 9000 AND T2.WasCompiled = 0 GROUP BY T2.RepoId ORDER BY COUNT(T2.RepoId) DESC LIMIT 1",
        "pred": "SELECT T2.`RepoId` FROM Solution AS T2 WHERE T2.`RepoId` IN ( SELECT T1.`Id` FROM Repo AS T1 WHERE T1.`Stars` BETWEEN 6000 AND 9000 ) AND T2.`WasCompiled` = 0 GROUP BY T2.`RepoId` ORDER BY COUNT(T2.`Path`) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`RepoId` FROM Solution AS T2 WHERE T2.`RepoId` IN ( SELECT T1.`Id` FROM Repo AS T1 WHERE T1.`Stars` BETWEEN 6000 AND 9000 ) AND T2.`WasCompiled` = 0 GROUP BY T2.`RepoId` ORDER BY COUNT(T2.`Path`) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 12,
        "db_id": "codebase_comments",
        "question": "In the \"https://github.com/wallerdev/htmlsharp.git\", give all the linearized sequenced of API calls.",
        "evidence": "linearized sequenced of API calls refers to ApiCalls; 'https://github.com/wallerdev/htmlsharp.git' is url of repository",
        "gold": "SELECT T3.ApiCalls FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T1.Url = 'https://github.com/wallerdev/htmlsharp.git'",
        "pred": "SELECT `ApiCalls` FROM Method WHERE `Id` IN ( SELECT `MethodId` FROM MethodParameter WHERE `MethodId` IN ( SELECT `Id` FROM Method WHERE `SolutionId` = ( SELECT `Id` FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Url` = 'https://github.com/wallerdev/htmlsharp.git' ) ) ) )",
        "pred_result": 1,
        "repair_sql": "SELECT `ApiCalls` FROM Method WHERE `Id` IN ( SELECT `MethodId` FROM MethodParameter WHERE `MethodId` IN ( SELECT `Id` FROM Method WHERE `SolutionId` = ( SELECT `Id` FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Url` = 'https://github.com/wallerdev/htmlsharp.git' ) ) ) )",
        "repair_result": 1
    },
    {
        "idx": 13,
        "db_id": "codebase_comments",
        "question": "How many solution paths are there inside the 2nd most popular repository?",
        "evidence": "more watchers mean that this repository is more popular; most popular repository refers to max(Watchers);",
        "gold": "SELECT COUNT(DISTINCT T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = ( SELECT Watchers FROM Repo ORDER BY Watchers DESC LIMIT 1, 1 )",
        "pred": "SELECT COUNT(*) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo ORDER BY `Watchers` DESC LIMIT 1 OFFSET 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo ORDER BY `Watchers` DESC LIMIT 1 OFFSET 1 )",
        "repair_result": 1
    },
    {
        "idx": 14,
        "db_id": "codebase_comments",
        "question": "What is the average processed time of the solution paths inside the \"https://github.com/zphingphong/DiscardCustomerApp.git\"?",
        "evidence": "average processed time = avg(Solution.ProcessedTime);",
        "gold": "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/zphingphong/DiscardCustomerApp.git'",
        "pred": "SELECT AVG(`ProcessedTime`) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Url` = 'https://github.com/zphingphong/DiscardCustomerApp.git' )",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(`ProcessedTime`) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Url` = 'https://github.com/zphingphong/DiscardCustomerApp.git' )",
        "repair_result": 1
    },
    {
        "idx": 15,
        "db_id": "codebase_comments",
        "question": "What is the full comment on the method whose solution path is \"bmatzelle_nini\\Source\\Nini.sln\" with a tokenized name of \"alias text add alias\"?",
        "evidence": "",
        "gold": "SELECT T2.FullComment FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'bmatzelle_niniSourceNini.sln' AND T2.NameTokenized = 'alias text add alias'",
        "pred": "SELECT T1.`FullComment` FROM Method AS T1 WHERE T1.`Id` = ( SELECT T1.`Id` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T2.`Path` = 'bmatzelle_nini\\Source\\Nini.sln' AND T1.`NameTokenized` = 'alias text add alias' )",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`FullComment` FROM Method AS T1 WHERE T1.`Id` = ( SELECT T1.`Id` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T2.`Path` = 'bmatzelle_nini\\Source\\Nini.sln' AND T1.`NameTokenized` = 'alias text add alias' )",
        "repair_result": 0
    },
    {
        "idx": 16,
        "db_id": "codebase_comments",
        "question": "What is the linearized sequenced of API calls of the method whose solution path is \"mauriciodeamorim_tdd.encontro2\\Tdd.Encontro2.sln\"?",
        "evidence": "linearized sequenced of API calls refers to ApiCalls;",
        "gold": "SELECT T2.ApiCalls FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'mauriciodeamorim_tdd.encontro2Tdd.Encontro2.sln'",
        "pred": "SELECT T1.`ApiCalls` FROM Method AS T1 WHERE T1.`Id` = ( SELECT T2.`Id` FROM Method AS T2 INNER JOIN Solution AS T3 ON T2.`SolutionId` = T3.`Id` WHERE T3.`Path` = 'mauriciodeamorim_tdd.encontro2\\Tdd.Encontro2.sln' )",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`ApiCalls` FROM Method AS T1 WHERE T1.`Id` = ( SELECT T2.`Id` FROM Method AS T2 INNER JOIN Solution AS T3 ON T2.`SolutionId` = T3.`Id` WHERE T3.`Path` = 'mauriciodeamorim_tdd.encontro2\\Tdd.Encontro2.sln' )",
        "repair_result": 0
    },
    {
        "idx": 17,
        "db_id": "codebase_comments",
        "question": "How many solution paths that needs to be compiled if user wants to implement it in \"https://github.com/jeffdik/tachy.git\"?",
        "evidence": "needs to be compiled if user wants to implement refers to WasCompiled = 0; https://github.com/jeffdik/tachy.git is url of repository",
        "gold": "SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git' AND T2.WasCompiled = 0",
        "pred": "SELECT COUNT(*) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Url` = 'https://github.com/jeffdik/tachy.git' ) AND `WasCompiled` = 0",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Url` = 'https://github.com/jeffdik/tachy.git' ) AND `WasCompiled` = 0",
        "repair_result": 1
    },
    {
        "idx": 18,
        "db_id": "codebase_comments",
        "question": "How much is the processed time of the method whose tokenized name is \"about box1 dispose\"? Indicate the language of the method.",
        "evidence": "language refers to Lang;",
        "gold": "SELECT DISTINCT T1.ProcessedTime, T2.Lang FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'about box1 dispose'",
        "pred": "SELECT T1.`ProcessedTime`, T1.`Lang` FROM Method AS T1 WHERE T1.`NameTokenized` = 'about box1 dispose'",
        "pred_result": "no such column: T1.ProcessedTime",
        "repair_sql": "SELECT S.ProcessedTime, M.Lang FROM Method AS M JOIN Solution AS S ON M.SolutionId = S.Id WHERE M.NameTokenized = 'about box1 dispose'",
        "repair_result": 1
    },
    {
        "idx": 19,
        "db_id": "codebase_comments",
        "question": "In \"maxild_playground\\Playground.sln\", what is the time of sampling for the method \"GitHubRepo.Cli.GitHubClientWrapper.GetReleases\"?",
        "evidence": "the time of sampling refers to SampledAt; 'maxild_playground\\Playground.sln' is the path of a solution",
        "gold": "SELECT T2.SampledAt FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'maxild_playgroundPlayground.sln' AND T2.Name = 'GitHubRepo.Cli.GitHubClientWrapper.GetReleases'",
        "pred": "SELECT `SampledAt` FROM Method WHERE `SolutionId` = ( SELECT `Id` FROM Solution WHERE `Path` = 'maxild_playground\\Playground.sln' ) AND `Name` = 'GitHubRepo.Cli.GitHubClientWrapper.GetReleases'",
        "pred_result": 0,
        "repair_sql": "SELECT `SampledAt` FROM Method WHERE `SolutionId` = ( SELECT `Id` FROM Solution WHERE `Path` = 'maxild_playground\\Playground.sln' ) AND `Name` = 'GitHubRepo.Cli.GitHubClientWrapper.GetReleases'",
        "repair_result": 0
    },
    {
        "idx": 20,
        "db_id": "codebase_comments",
        "question": "What is the language of the method used in the solution path \"opendns_diagnosticapp\\windows\\OpenDnsDiagnostic.sln\"?",
        "evidence": "language refers to Lang;",
        "gold": "SELECT T2.Lang FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'opendns_diagnosticappwindowsOpenDnsDiagnostic.sln'",
        "pred": "SELECT T1.`Lang` FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.`Id` = T2.`MethodId` INNER JOIN Solution AS T3 ON T1.`SolutionId` = T3.`Id` WHERE T3.`Path` = 'opendns_diagnosticapp\\windows\\OpenDnsDiagnostic.sln'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`Lang` FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.`Id` = T2.`MethodId` INNER JOIN Solution AS T3 ON T1.`SolutionId` = T3.`Id` WHERE T3.`Path` = 'opendns_diagnosticapp\\windows\\OpenDnsDiagnostic.sln' AND T1.`Lang` IS NOT NULL",
        "repair_result": 0
    },
    {
        "idx": 21,
        "db_id": "codebase_comments",
        "question": "What's the task of the method whose tokenized name is \"html parser feed\"?",
        "evidence": "tokenized name refers to NameTokenized; task of the method refers to the second part of name deliminated by \".\"; for example, the task of 'LinqToDelicious.HttpWebRequestFactory.Create' is 'HttpWebRequestFactory'",
        "gold": "SELECT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE NameTokenized = 'html parser feed'",
        "pred": "SELECT SUBSTR(Name, INSTR(Name, '.') + 1) AS Task FROM Method WHERE NameTokenized = 'html parser feed'",
        "pred_result": 0,
        "repair_sql": "SELECT SUBSTR(Name, INSTR(Name, '.') + 1) AS Task FROM Method WHERE NameTokenized = 'html parser feed'",
        "repair_result": 0
    },
    {
        "idx": 22,
        "db_id": "codebase_comments",
        "question": "Are the comments for the method \"HtmlSharp.HtmlParser.Feed\" in XML format?",
        "evidence": "the comment for this method is not XML refers to CommentsXML = 0; the comments for this method is XML refers to CommentsXML = 1",
        "gold": "SELECT CASE WHEN CommentIsXml = 0 THEN 'No' WHEN CommentIsXml = 1 THEN 'Yes' END isXMLFormat FROM Method WHERE Name = 'HtmlSharp.HtmlParser.Feed'",
        "pred": "SELECT CASE WHEN T1.`CommentIsXml` = 1 THEN 'Yes' ELSE 'No' END AS Comments_In_XML_Format FROM Method AS T1 WHERE T1.`Name` = 'HtmlSharp.HtmlParser.Feed'",
        "pred_result": 1,
        "repair_sql": "SELECT CASE WHEN T1.`CommentIsXml` = 1 THEN 'Yes' ELSE 'No' END AS Comments_In_XML_Format FROM Method AS T1 WHERE T1.`Name` = 'HtmlSharp.HtmlParser.Feed'",
        "repair_result": 1
    },
    {
        "idx": 23,
        "db_id": "codebase_comments",
        "question": "Which method has the summary \"Write a command to the log\"?",
        "evidence": "",
        "gold": "SELECT Name FROM Method WHERE Summary = 'Write a command to the log'",
        "pred": "SELECT T1.`Name` FROM Method AS T1 WHERE T1.`Summary` = 'Write a command to the log'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Name` FROM Method AS T1 WHERE T1.`Summary` = 'Write a command to the log'",
        "repair_result": 1
    },
    {
        "idx": 24,
        "db_id": "codebase_comments",
        "question": "How many solutions contain files found within the repository most people like?",
        "evidence": "more stars mean more people like this repository; most people like refers to max(Stars);",
        "gold": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = ( SELECT MAX(Stars) FROM Repo )",
        "pred": "SELECT COUNT(DISTINCT T1.`Id`) FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T2.`Id` = ( SELECT `Id` FROM Repo ORDER BY `Stars` DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`Id`) FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T2.`Id` = ( SELECT `Id` FROM Repo ORDER BY `Stars` DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 25,
        "db_id": "codebase_comments",
        "question": "Please list the path of the solution that contains files found within the repository most people like.",
        "evidence": "more stars mean more people like this repository; most people like refers to max(Stars);",
        "gold": "SELECT DISTINCT T2.Path FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = ( SELECT MAX(Stars) FROM Repo )",
        "pred": "SELECT T3.`Path` FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T2.`Id` = ( SELECT `RepoId` FROM Repo ORDER BY `Stars` DESC LIMIT 1 )",
        "pred_result": "no such column: T3.Path",
        "repair_sql": "SELECT T1.`Path` FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T2.`Id` = ( SELECT `Id` FROM Repo ORDER BY `Stars` DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 26,
        "db_id": "codebase_comments",
        "question": "What is the github address of the repository that contains files used by solution ID12?",
        "evidence": "github address refers to Url;",
        "gold": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 12",
        "pred": "SELECT `Url` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Id` = 12 )",
        "pred_result": 1,
        "repair_sql": "SELECT `Url` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Id` = 12 )",
        "repair_result": 1
    },
    {
        "idx": 27,
        "db_id": "codebase_comments",
        "question": "Among the solutions that contain files within the repository followed by over 1000 people, how many of them can be\nimplemented without needs of compilation?",
        "evidence": "followed by over 1000 people refers to Forks >1000; can be\nimplemented without needs of compilation refers to WasCompiled = 1;",
        "gold": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks > 1000 AND T2.WasCompiled = 1",
        "pred": "SELECT COUNT(*) FROM ( SELECT T1.* FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T2.`Forks` > 1000 ) AS Subquery WHERE Subquery.`WasCompiled` = 1",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM ( SELECT T1.* FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T2.`Forks` > 1000 ) AS Subquery WHERE Subquery.`WasCompiled` = 1",
        "repair_result": 1
    },
    {
        "idx": 28,
        "db_id": "codebase_comments",
        "question": "Which solution contains files within a more popular repository, the solution ID18 or solution ID19?",
        "evidence": "more watchers mean that this repository is more popular;",
        "gold": "SELECT CASE WHEN SUM(CASE WHEN T2.Id = 18 THEN T1.Watchers ELSE 0 END) > SUM(CASE WHEN T2.Id = 19 THEN T1.Watchers ELSE 0 END) THEN 'SolutionID18' WHEN SUM(CASE WHEN T2.Id = 18 THEN T1.Watchers ELSE 0 END) < SUM(CASE WHEN T2.Id = 19 THEN T1.Watchers ELSE 0 END) THEN 'SolutionID19' END isMorePopular FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId",
        "pred": "SELECT CASE WHEN ( SELECT T1.`Watchers` FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`RepoId` WHERE T2.`Id` = 18 ) > ( SELECT T1.`Watchers` FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`RepoId` WHERE T2.`Id` = 19 ) THEN 'ID18' ELSE 'ID19' END AS More_Popular_Solution",
        "pred_result": 0,
        "repair_sql": "SELECT CASE WHEN ( SELECT T1.`Watchers` FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`RepoId` WHERE T2.`Id` = 18 ) > ( SELECT T1.`Watchers` FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`RepoId` WHERE T2.`Id` = 19 ) THEN 'ID18' ELSE 'ID19' END AS More_Popular_Solution",
        "repair_result": 0
    },
    {
        "idx": 29,
        "db_id": "codebase_comments",
        "question": "Among the solutions that contain files within the repository needing the longest processed time to download, how many of them doesn't need to be\ncompiled if user wants to implement it?",
        "evidence": "longest processed time refers to max(Solution.ProcessedTime); needs to be compiled if user wants to implement it refers to WasCompiled = 0\uff1b",
        "gold": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Repo ) AND T2.WasCompiled = 1",
        "pred": "SELECT COUNT(*) FROM ( SELECT T1.* FROM Solution AS T1 WHERE T1.`ProcessedTime` = ( SELECT MAX(`ProcessedTime`) FROM Solution ) ) AS T2 WHERE T2.`WasCompiled` = 0",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM ( SELECT T1.* FROM Solution AS T1 WHERE T1.`ProcessedTime` = ( SELECT MAX(`ProcessedTime`) FROM Solution ) ) AS T2 WHERE T2.`WasCompiled` = 0",
        "repair_result": 0
    },
    {
        "idx": 30,
        "db_id": "codebase_comments",
        "question": "What is the processed time to download the repository whose files are contained in the solution with the path \"jeffdik_tachy\\src\\Tachy.sln\".",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.ProcessedTime FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'jeffdik_tachysrcTachy.sln'",
        "pred": "SELECT `ProcessedTime` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Path` = 'jeffdik_tachy\\src\\Tachy.sln' )",
        "pred_result": 0,
        "repair_sql": "SELECT `ProcessedTime` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Path` = 'jeffdik_tachy\\src\\Tachy.sln' )",
        "repair_result": 0
    },
    {
        "idx": 31,
        "db_id": "codebase_comments",
        "question": "Please give the url of the repository whose files are contained in solution ID 9?",
        "evidence": "",
        "gold": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 9",
        "pred": "SELECT `Url` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Id` = 9 )",
        "pred_result": 1,
        "repair_sql": "SELECT `Url` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Id` = 9 )",
        "repair_result": 1
    },
    {
        "idx": 32,
        "db_id": "codebase_comments",
        "question": "Please list all the paths of the solutions containing files within the repository whose url is \"https://github.com/maxild/playground.git\".",
        "evidence": "",
        "gold": "SELECT T2.Path FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/maxild/playground.git'",
        "pred": "SELECT T2.`Path` FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T2.`Url` = 'https://github.com/maxild/playground.git'",
        "pred_result": "no such column: T2.Path",
        "repair_sql": "SELECT T1.`Path` FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T2.`Url` = 'https://github.com/maxild/playground.git'",
        "repair_result": 1
    },
    {
        "idx": 33,
        "db_id": "codebase_comments",
        "question": "Among the repositories with over 200 likes, how many of them have files contained by solutions with a processed time of under 636439500080712000?",
        "evidence": "over 200 likes refers to Stars > 200; ProcessedTime<636439500080712000;",
        "gold": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.ProcessedTime < 636439500080712000 AND T1.Stars > 200",
        "pred": "SELECT COUNT(*) FROM ( SELECT T1.`Id` FROM Repo AS T1 WHERE T1.`Stars` > 200 INTERSECT SELECT T2.`RepoId` FROM Solution AS T2 WHERE T2.`ProcessedTime` < 636439500080712000 ) AS T",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM ( SELECT T1.`Id` FROM Repo AS T1 WHERE T1.`Stars` > 200 INTERSECT SELECT T2.`RepoId` FROM Solution AS T2 WHERE T2.`ProcessedTime` < 636439500080712000 ) AS T",
        "repair_result": 0
    },
    {
        "idx": 34,
        "db_id": "codebase_comments",
        "question": "Please list the IDs of the solutions that contain files within the top 3 followed repositories.",
        "evidence": "more forks refers to more people follow this repository;",
        "gold": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId ORDER BY T1.Forks DESC LIMIT 3",
        "pred": "SELECT DISTINCT T1.`Id` FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T2.`Id` IN ( SELECT `Id` FROM Repo ORDER BY `Forks` DESC LIMIT 3 )",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`Id` FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T2.`Id` IN ( SELECT `Id` FROM Repo ORDER BY `Forks` DESC LIMIT 3 )",
        "repair_result": 0
    },
    {
        "idx": 35,
        "db_id": "codebase_comments",
        "question": "What is the average time needed for the solutions containing files within the repository whose url is \"https://github.com/jeffdik/tachy.git\" to be processd?",
        "evidence": "average time = avg(ProcessedTime)\uff1b",
        "gold": "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git'",
        "pred": "SELECT AVG(`ProcessedTime`) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Url` = 'https://github.com/jeffdik/tachy.git' )",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(`ProcessedTime`) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Url` = 'https://github.com/jeffdik/tachy.git' )",
        "repair_result": 1
    },
    {
        "idx": 36,
        "db_id": "codebase_comments",
        "question": "How many more followers in percentage are there for the repository used by solution ID 18 than solution ID19?",
        "evidence": "followers refers to Forks; percentage = divide(SUBTRACT(Forks(Solution.ID = 18), Forks(Solution.ID = 19)), Forks(Solution.ID = 19))*100%",
        "gold": "SELECT CAST((SUM(CASE WHEN T2.Id = 18 THEN T1.Forks ELSE 0 END) - SUM(CASE WHEN T2.Id = 19 THEN T1.Forks ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 19 THEN T1.Forks ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId",
        "pred": "SELECT ((T1 - T2) / T2) * 100 AS percentage_difference FROM ( SELECT ( SELECT T4.`Forks` FROM Solution AS T3 INNER JOIN Repo AS T4 ON T3.`RepoId` = T4.`Id` WHERE T3.`Id` = 18 ) AS T1, ( SELECT T6.`Forks` FROM Solution AS T5 INNER JOIN Repo AS T6 ON T5.`RepoId` = T6.`Id` WHERE T5.`Id` = 19 ) AS T2 )",
        "pred_result": 0,
        "repair_sql": "SELECT ((T1 - T2) / T2) * 100 AS percentage_difference FROM ( SELECT ( SELECT T4.`Forks` FROM Solution AS T3 INNER JOIN Repo AS T4 ON T3.`RepoId` = T4.`Id` WHERE T3.`Id` = 18 ) AS T1, ( SELECT T6.`Forks` FROM Solution AS T5 INNER JOIN Repo AS T6 ON T5.`RepoId` = T6.`Id` WHERE T5.`Id` = 19 ) AS T2 )",
        "repair_result": 0
    },
    {
        "idx": 37,
        "db_id": "codebase_comments",
        "question": "What is the language of the method ''PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn\"?",
        "evidence": "language refers to Lang\uff1b",
        "gold": "SELECT Lang FROM Method WHERE Name = 'PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn'",
        "pred": "SELECT T1.`Lang` FROM Method AS T1 WHERE T1.`Id` = ( SELECT T2.`MethodId` FROM MethodParameter AS T2 WHERE T2.`Name` = 'PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn' )",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`Lang` FROM Method AS T1 JOIN MethodParameter AS T2 ON T1.`Id` = T2.`MethodId` WHERE T2.`Name` = 'PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn'",
        "repair_result": 0
    },
    {
        "idx": 38,
        "db_id": "codebase_comments",
        "question": "Show the full Comment of the method \"DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows\".",
        "evidence": "",
        "gold": "SELECT FullComment FROM Method WHERE Name = 'DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows'",
        "pred": "SELECT FullComment FROM Method WHERE Name = 'DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows'",
        "pred_result": 1,
        "repair_sql": "SELECT FullComment FROM Method WHERE Name = 'DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows'",
        "repair_result": 1
    },
    {
        "idx": 39,
        "db_id": "codebase_comments",
        "question": "List the summary of the method \"Castle.MonoRail.Framework.Test.StubViewComponentContext.RenderSection\".",
        "evidence": "",
        "gold": "SELECT DISTINCT Summary FROM Method WHERE Name = 'Castle.MonoRail.Framework.Test.StubViewComponentContext.RenderSection'",
        "pred": "SELECT Summary FROM Method WHERE Name = 'Castle.MonoRail.Framework.Test.StubViewComponentContext.RenderSection'",
        "pred_result": 1,
        "repair_sql": "SELECT Summary FROM Method WHERE Name = 'Castle.MonoRail.Framework.Test.StubViewComponentContext.RenderSection'",
        "repair_result": 1
    },
    {
        "idx": 40,
        "db_id": "codebase_comments",
        "question": "Give the tokenized name for the method \"Supay.Irc.Messages.KnockMessage.GetTokens\".",
        "evidence": "",
        "gold": "SELECT NameTokenized FROM Method WHERE Name = 'Supay.Irc.Messages.KnockMessage.GetTokens'",
        "pred": "SELECT NameTokenized FROM Method WHERE Id = ( SELECT MethodId FROM MethodParameter WHERE Name = 'Supay.Irc.Messages.KnockMessage.GetTokens' )",
        "pred_result": 0,
        "repair_sql": "SELECT m.NameTokenized FROM Method m JOIN MethodParameter mp ON m.Id = mp.MethodId WHERE mp.Name = 'Supay.Irc.Messages.KnockMessage.GetTokens'",
        "repair_result": 0
    },
    {
        "idx": 41,
        "db_id": "codebase_comments",
        "question": "How many stars does the repository of the solution No. 45997 have?",
        "evidence": "repository of solution no. refers to Id",
        "gold": "SELECT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 45997",
        "pred": "SELECT `Stars` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Id` = 45997 )",
        "pred_result": 1,
        "repair_sql": "SELECT `Stars` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Id` = 45997 )",
        "repair_result": 1
    },
    {
        "idx": 42,
        "db_id": "codebase_comments",
        "question": "For the repository which got '8094' Stars, how many solutions does it contain?",
        "evidence": "repository refers to Repo.Id;",
        "gold": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 8094",
        "pred": "SELECT COUNT(*) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Stars` = 8094 )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Stars` = 8094 )",
        "repair_result": 1
    },
    {
        "idx": 43,
        "db_id": "codebase_comments",
        "question": "What is the solution path for the method \"IQ.Data.DbQueryProvider.CanBeEvaluatedLocally\"?",
        "evidence": "solution path refers to Path; method refers to Name; Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally'",
        "gold": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally'",
        "pred": "SELECT T2.Path FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.SolutionId = T2.Id WHERE T1.Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.Path FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.SolutionId = T2.Id WHERE T1.Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally'",
        "repair_result": 1
    },
    {
        "idx": 44,
        "db_id": "codebase_comments",
        "question": "For the method which got the tokenized name as 'interp parser expr', what is the processed time for its solution?",
        "evidence": "tokenized name refers to NameTokenized; NameTokenized = 'interp parser expr'; processed time for its solution refers to ProcessedTime;",
        "gold": "SELECT T1.ProcessedTime FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'interp parser expr'",
        "pred": "SELECT T4.ProcessedTime FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.Id = T2.MethodId INNER JOIN Solution AS T3 ON T1.Id = T3.Id WHERE T1.NameTokenized = 'interp parser expr'",
        "pred_result": "no such column: T4.ProcessedTime",
        "repair_sql": "SELECT T3.ProcessedTime FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.Id = T2.MethodId INNER JOIN Solution AS T3 ON T1.SolutionId = T3.Id WHERE T1.NameTokenized = 'interp parser expr'",
        "repair_result": 0
    },
    {
        "idx": 45,
        "db_id": "codebase_comments",
        "question": "What is the repository number for the solution of method \"SCore.Poisson.ngtIndex\"?",
        "evidence": "repository number refers to RepoId; method refers to Name; Name = \u2018SCore.Poisson.ngtIndex\u2019",
        "gold": "SELECT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'SCore.Poisson.ngtIndex'",
        "pred": "SELECT RepoId FROM Solution WHERE MethodId = ( SELECT Id FROM Method WHERE Name = 'SCore.Poisson.ngtIndex' )",
        "pred_result": "no such column: MethodId",
        "repair_sql": "SELECT RepoId FROM Solution WHERE Id = ( SELECT SolutionId FROM Method WHERE Name = 'SCore.Poisson.ngtIndex' )",
        "repair_result": 1
    },
    {
        "idx": 46,
        "db_id": "codebase_comments",
        "question": "Tell the path of the solution for the method \"ExportToRTF.RTFStyleSheet.H6Write\".",
        "evidence": "path of the solution refers to Path; method refers to Name; Name = 'ExportToRTF.RTFStyleSheet.H6Write';",
        "gold": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'ExportToRTF.RTFStyleSheet.H6Write'",
        "pred": "SELECT Path FROM Solution WHERE Id = ( SELECT SolutionId FROM Method WHERE Name = 'ExportToRTF.RTFStyleSheet.H6Write' )",
        "pred_result": 1,
        "repair_sql": "SELECT Path FROM Solution WHERE Id = ( SELECT SolutionId FROM Method WHERE Name = 'ExportToRTF.RTFStyleSheet.H6Write' )",
        "repair_result": 1
    },
    {
        "idx": 47,
        "db_id": "codebase_comments",
        "question": "For the repository with '8094' watchers , how many solutions does it contain?",
        "evidence": "repository refers to Repo.Id and RepoId; solutions a repository contains refers to Solution.Id;",
        "gold": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = 8094",
        "pred": "SELECT COUNT(*) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Watchers` = 8094 )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Watchers` = 8094 )",
        "repair_result": 1
    },
    {
        "idx": 48,
        "db_id": "codebase_comments",
        "question": "Give the repository Url of the one with most solutions.",
        "evidence": "repository URL refers to Url; repository Url with most solutions refers to MAX(COUNT(Solution.Id));",
        "gold": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId GROUP BY T2.RepoId ORDER BY COUNT(T2.RepoId) DESC LIMIT 1",
        "pred": "SELECT T3.`Url` FROM Repo AS T3 LEFT JOIN Solution AS T4 ON T3.`Id` = T4.`RepoId` GROUP BY T3.`Url` ORDER BY COUNT(T4.`Id`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T3.`Url` FROM Repo AS T3 LEFT JOIN Solution AS T4 ON T3.`Id` = T4.`RepoId` GROUP BY T3.`Url` ORDER BY COUNT(T4.`Id`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 49,
        "db_id": "codebase_comments",
        "question": "How many solutions does the repository which has 1445 Forks contain?",
        "evidence": "solutions refers to Solution.Id; repository refers to Repository.Id;",
        "gold": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = 1445",
        "pred": "SELECT COUNT(*) FROM Solution WHERE `RepoId` = ( SELECT `RepoId` FROM Repo WHERE `Forks` = 1445 )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Solution WHERE `RepoId` = ( SELECT `RepoId` FROM Repo WHERE `Forks` = 1445 )",
        "repair_result": 0
    },
    {
        "idx": 50,
        "db_id": "codebase_comments",
        "question": "Among all the solution of the 'zh-cn' methods, which path is most often used?",
        "evidence": "solution refers to SolutionId; zh-cn refers to Lang = 'zh-cn'; path that is most often used refers to MAX(COUNT(Path));",
        "gold": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'zh-cn' GROUP BY T1.Path ORDER BY COUNT(T1.Path) DESC LIMIT 1",
        "pred": "SELECT T3.`Path` FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.`Id` = T2.`MethodId` INNER JOIN Solution AS T3 ON T1.`SolutionId` = T3.`Id` WHERE T1.`Lang` = 'zh-cn' GROUP BY T3.`Path` ORDER BY COUNT(T3.`Path`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T3.`Path` FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.`Id` = T2.`MethodId` INNER JOIN Solution AS T3 ON T1.`SolutionId` = T3.`Id` WHERE T1.`Lang` = 'zh-cn' GROUP BY T3.`Path` ORDER BY COUNT(T3.`Path`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 51,
        "db_id": "codebase_comments",
        "question": "Give the number of watchers that the repository of the solution No. 338082 have.",
        "evidence": "number of watchers refers to Watchers; solution number refers to Solution.Id;",
        "gold": "SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 338082",
        "pred": "SELECT `Watchers` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Id` = 338082 )",
        "pred_result": 1,
        "repair_sql": "SELECT `Watchers` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Id` = 338082 )",
        "repair_result": 1
    },
    {
        "idx": 52,
        "db_id": "codebase_comments",
        "question": "For the repository which got '189' Stars, how many solutions which needs to be compiled does it contain?",
        "evidence": "repository refers to Repository.Id; solution needs to be compiled refers to WasCompiled = 0;",
        "gold": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 189 AND T2.WasCompiled = 0",
        "pred": "SELECT COUNT(*) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Stars` = 189 ) AND `WasCompiled` = 0",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Stars` = 189 ) AND `WasCompiled` = 0",
        "repair_result": 0
    },
    {
        "idx": 53,
        "db_id": "codebase_comments",
        "question": "Show the solution path for the method \"Mosa.Platform.x86.Instructions.IMul.EmitLegacy\"?",
        "evidence": "solution path refers to Path; method refers to Name; Name = 'Mosa.Platform.x86.Instructions.IMul.EmitLegacy';",
        "gold": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'Mosa.Platform.x86.Instructions.IMul.EmitLegacy'",
        "pred": "SELECT T4.Path FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.Id = T2.MethodId INNER JOIN Solution AS T3 ON T1.Id = T3.Id INNER JOIN Repo AS T4 ON T3.RepoId = T4.Id WHERE T1.Name = 'Mosa.Platform.x86.Instructions.IMul.EmitLegacy'",
        "pred_result": "no such column: T4.Path",
        "repair_sql": "SELECT T4.Path FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.Id = T2.MethodId INNER JOIN Solution AS T3 ON T1.SolutionId = T3.Id INNER JOIN Repo AS T4 ON T3.RepoId = T4.Id WHERE T1.Name = 'Mosa.Platform.x86.Instructions.IMul.EmitLegacy'",
        "repair_result": "no such column: T4.Path"
    },
    {
        "idx": 54,
        "db_id": "codebase_comments",
        "question": "For the method which got the tokenized name as 't jadwal entity get single mpic', what is the path time for its solution?",
        "evidence": "tokenized name refers to NameTokenized; NameTokenized = 't jadwal entity get single mpic'; path time for its solution refers to ProcessedTime;",
        "gold": "SELECT DISTINCT T1.ProcessedTime FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 't jadwal entity get single mpic'",
        "pred": "SELECT T4.ProcessedTime FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.Id = T2.MethodId INNER JOIN Solution AS T3 ON T1.Id = T3.Id INNER JOIN Repo AS T4 ON T3.RepoId = T4.Id WHERE T1.NameTokenized = 't jadwal entity get single mpic'",
        "pred_result": 0,
        "repair_sql": "SELECT T4.ProcessedTime FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.Id = T2.MethodId INNER JOIN Solution AS T3 ON T1.Id = T3.Id INNER JOIN Repo AS T4 ON T3.RepoId = T4.Id WHERE T1.NameTokenized = 't jadwal entity get single mpic'",
        "repair_result": 0
    },
    {
        "idx": 55,
        "db_id": "codebase_comments",
        "question": "Give the repository ID for the solution of method \"Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal\".",
        "evidence": "repository ID refers to RepoID; method refers to Name; Name = 'Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal';",
        "gold": "SELECT DISTINCT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal'",
        "pred": "SELECT T3.`RepoId` FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.`Id` = T2.`SolutionId` INNER JOIN Repo AS T3 ON T1.`RepoId` = T3.`Id` WHERE T2.`Name` = 'Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal'",
        "pred_result": "no such column: T3.RepoId",
        "repair_sql": "SELECT T1.`RepoId` FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.`Id` = T2.`SolutionId` WHERE T2.`Name` = 'Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal'",
        "repair_result": 1
    },
    {
        "idx": 56,
        "db_id": "codebase_comments",
        "question": "For the method has the summary of \"Refetches the Entity from the persistent storage. Refetch is used to re-load an Entity which is marked \"Out-of-sync\", due to a save action. Refetching an empty Entity has no effect.\", what is its solution path?",
        "evidence": "solution path refers to Path;",
        "gold": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Summary = 'Refetches the Entity FROM the persistent storage. Refetch is used to re-load an Entity which is marked \"Out-of-sync\", due to a save action. Refetching an empty Entity has no effect.'",
        "pred": "SELECT T2.`Path` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T1.`Summary` = 'Refetches the Entity from the persistent storage. Refetch is used to re-load an Entity which is marked \"Out-of-sync\", due to a save action. Refetching an empty Entity has no effect.'",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`Path` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T1.`Summary` = 'Refetches the Entity from the persistent storage. Refetch is used to re-load an Entity which is marked \"Out-of-sync\", due to a save action. Refetching an empty Entity has no effect.'",
        "repair_result": 0
    },
    {
        "idx": 57,
        "db_id": "codebase_comments",
        "question": "Give the number of solutions that the repository which has 3060 Stars contains.",
        "evidence": "solutions refers to Solution.Id; repository refers to Repository.Id;",
        "gold": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 3060",
        "pred": "SELECT COUNT(*) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Stars` = 3060 )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Stars` = 3060 )",
        "repair_result": 1
    },
    {
        "idx": 58,
        "db_id": "codebase_comments",
        "question": "For the solution of the most 'sw' methods, what is its path?",
        "evidence": "solution refers to SolutionId; sw refers to Lang = 'sw'; solution with the most 'sw' methods refers to MAX(COUNT(Lang = 'sw'));",
        "gold": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'sw'",
        "pred": "SELECT T2.`Path` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T1.`Lang` = 'sw' AND T2.`SolutionId` = ( SELECT T2.`SolutionId` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T1.`Lang` = 'sw' GROUP BY T2.`SolutionId` ORDER BY COUNT(T1.`Lang`) DESC LIMIT 1 )",
        "pred_result": "no such column: T2.SolutionId",
        "repair_sql": "SELECT T2.`Path` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T1.`Lang` = 'sw' GROUP BY T2.`Id` ORDER BY COUNT(T1.`Lang`) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 59,
        "db_id": "codebase_comments",
        "question": "How many percent more of the watchers for the repository of solution No.83855 than No.1502?",
        "evidence": "solution No. refers to Solution.Id; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 83855), SUM(Solution.Id = 1502)), 100)), SUM(Soltution.Id = 1502);",
        "gold": "SELECT CAST(SUM(CASE WHEN T2.Id = 83855 THEN T1.Watchers ELSE 0 END) - SUM(CASE WHEN T2.Id = 1502 THEN T1.Watchers ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 1502 THEN T1.Watchers ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId",
        "pred": "SELECT (MAX(CASE WHEN T2.`Id` = 83855 THEN T1.`Watchers` ELSE 0 END) - MAX(CASE WHEN T2.`Id` = 1502 THEN T1.`Watchers` ELSE 0 END)) * 100.0 / MAX(CASE WHEN T2.`Id` = 1502 THEN T1.`Watchers` ELSE 1 END) AS percentage FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`RepoId` WHERE T2.`Id` IN (83855, 1502)",
        "pred_result": 1,
        "repair_sql": "SELECT (MAX(CASE WHEN T2.`Id` = 83855 THEN T1.`Watchers` ELSE 0 END) - MAX(CASE WHEN T2.`Id` = 1502 THEN T1.`Watchers` ELSE 0 END)) * 100.0 / MAX(CASE WHEN T2.`Id` = 1502 THEN T1.`Watchers` ELSE 1 END) AS percentage FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`RepoId` WHERE T2.`Id` IN (83855, 1502)",
        "repair_result": 1
    },
    {
        "idx": 60,
        "db_id": "codebase_comments",
        "question": "How many percent more of the stars for the repository of solution No.51424 than No.167053?",
        "evidence": "solution No. refers to Solution.Id; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 51424), SUM(Solution.Id = 167053)), 100)), SUM(Solution.Id = 167053);",
        "gold": "SELECT CAST(SUM(CASE WHEN T2.Id = 51424 THEN T1.Stars ELSE 0 END) - SUM(CASE WHEN T2.Id = 167053 THEN T1.Stars ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 167053 THEN T1.Stars ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId",
        "pred": "SELECT (T1.Stars - T2.Stars) * 100.0 / T2.Stars AS Percentage FROM ( SELECT T1.`Stars` FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`RepoId` WHERE T2.`Id` = 51424 ) AS T1, ( SELECT T1.`Stars` FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`RepoId` WHERE T2.`Id` = 167053 ) AS T2",
        "pred_result": 1,
        "repair_sql": "SELECT (T1.Stars - T2.Stars) * 100.0 / T2.Stars AS Percentage FROM ( SELECT T1.`Stars` FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`RepoId` WHERE T2.`Id` = 51424 ) AS T1, ( SELECT T1.`Stars` FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`RepoId` WHERE T2.`Id` = 167053 ) AS T2",
        "repair_result": 1
    },
    {
        "idx": 61,
        "db_id": "codebase_comments",
        "question": "How many percent more of the Forks for the repository of solution No.53546 than No.1502?",
        "evidence": "solution No. refers to Solution.Id; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 53546), SUM(Solution.Id = 1502)), 100)), SUM(Solution.Id = 1502);",
        "gold": "SELECT CAST(SUM(CASE WHEN T2.Id = 53546 THEN T1.Forks ELSE 0 END) - SUM(CASE WHEN T2.Id = 1502 THEN T1.Forks ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 1502 THEN T1.Forks ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId",
        "pred": "SELECT (T1 - T2) * 100.0 / T2 AS Percentage_More_Forks FROM ( SELECT ( SELECT T3.`Forks` FROM Repo AS T3 INNER JOIN Solution AS T4 ON T3.`Id` = T4.`RepoId` WHERE T4.`Id` = 53546 ) AS T1, ( SELECT T5.`Forks` FROM Repo AS T5 INNER JOIN Solution AS T6 ON T5.`Id` = T6.`RepoId` WHERE T6.`Id` = 1502 ) AS T2 )",
        "pred_result": 1,
        "repair_sql": "SELECT (T1 - T2) * 100.0 / T2 AS Percentage_More_Forks FROM ( SELECT ( SELECT T3.`Forks` FROM Repo AS T3 INNER JOIN Solution AS T4 ON T3.`Id` = T4.`RepoId` WHERE T4.`Id` = 53546 ) AS T1, ( SELECT T5.`Forks` FROM Repo AS T5 INNER JOIN Solution AS T6 ON T5.`Id` = T6.`RepoId` WHERE T6.`Id` = 1502 ) AS T2 )",
        "repair_result": 1
    },
    {
        "idx": 62,
        "db_id": "codebase_comments",
        "question": "List all the methods with a solution with a \"636449700980488000\" processed time.",
        "evidence": "methods refers to Name; solution refers to SolutionId;",
        "gold": "SELECT DISTINCT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.ProcessedTime = 636449700980488000",
        "pred": "SELECT T1.`Name` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T2.`ProcessedTime` = '636449700980488000'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Name` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T2.`ProcessedTime` = 636449700980488000",
        "repair_result": 1
    },
    {
        "idx": 63,
        "db_id": "codebase_comments",
        "question": "How many solutions are in \"https://github.com/derickbailey/presentations-and-training.git\"?",
        "evidence": "solutions refers to Solution.Id; https://github.com/derickbailey/presentations-and-training.git refers to Url; Url; = 'https://github.com/derickbailey/presentations-and-training.git';",
        "gold": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/derickbailey/presentations-and-training.git'",
        "pred": "SELECT COUNT(*) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Url` = 'https://github.com/derickbailey/presentations-and-training.git' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Url` = 'https://github.com/derickbailey/presentations-and-training.git' )",
        "repair_result": 1
    },
    {
        "idx": 64,
        "db_id": "codebase_comments",
        "question": "What is the total processed time of all solutions from the repository with the most forks?",
        "evidence": "total processed time = AVG(ProcessedTime where MAX(COUNT(Forks))); repository with the most forks refers to MAX(COUNT(Forks));",
        "gold": "SELECT SUM(T2.ProcessedTime) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = ( SELECT MAX(Forks) FROM Repo )",
        "pred": "SELECT SUM(Solution.`ProcessedTime`) FROM Solution WHERE Solution.`RepoId` = ( SELECT `RepoId` FROM Solution INNER JOIN Repo ON Solution.`RepoId` = Repo.`Id` GROUP BY `RepoId` ORDER BY COUNT(Repo.`Forks`) DESC LIMIT 1 )",
        "pred_result": "integer overflow",
        "repair_sql": "SELECT SUM(Solution.`ProcessedTime`) FROM Solution INNER JOIN Repo ON Solution.`RepoId` = Repo.`Id` GROUP BY Repo.`Id` ORDER BY COUNT(Repo.`Forks`) DESC LIMIT 1",
        "repair_result": "integer overflow"
    },
    {
        "idx": 65,
        "db_id": "codebase_comments",
        "question": "List all the path of solution from all the \"it\" lang code method.",
        "evidence": "path of the solution refers to Path; solution refers to Solution.Id;",
        "gold": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'it'",
        "pred": "SELECT T3.`Path` FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.`Id` = T2.`MethodId` INNER JOIN Solution AS T3 ON T1.`SolutionId` = T3.`Id` WHERE T1.`Lang` = 'it'",
        "pred_result": 0,
        "repair_sql": "SELECT T3.`Path` FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.`Id` = T2.`MethodId` INNER JOIN Solution AS T3 ON T1.`SolutionId` = T3.`Id` WHERE T1.`Lang` = 'it'",
        "repair_result": 0
    },
    {
        "idx": 66,
        "db_id": "codebase_comments",
        "question": "What is the path of solution of \"spinachLexer.mT__55\" method?",
        "evidence": "path of the solution refers to Path; solution refers to Solution.Id; method refers to Name; Name = 'spinachLexer.mT__55';",
        "gold": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'spinachLexer.mT__55'",
        "pred": "SELECT T3.`Path` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`MethodId` INNER JOIN Repo AS T3 ON T2.`RepoId` = T3.`Id` WHERE T1.`Name` = 'spinachLexer.mT__55'",
        "pred_result": "no such column: T3.Path",
        "repair_sql": "SELECT T2.`Path` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T1.`Name` = 'spinachLexer.mT__55'",
        "repair_result": 1
    },
    {
        "idx": 67,
        "db_id": "codebase_comments",
        "question": "What are the \"en\" methods with solutions from repository \"1093\"",
        "evidence": "en methods refers to lang = 'en'; solution refers to Solution.Id; repository refers to RepoId; RepoId = 1093;",
        "gold": "SELECT DISTINCT T2.id FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.RepoId = 1093 AND T2.Lang = 'en'",
        "pred": "SELECT T1.`Name` FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.`Id` = T2.`MethodId` WHERE T1.`Lang` = 'en' AND T1.`SolutionId` IN ( SELECT `Id` FROM Solution WHERE `RepoId` = 1093 )",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`Name` FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.`Id` = T2.`MethodId` WHERE T1.`Lang` = 'en' AND T1.`SolutionId` IN ( SELECT `Id` FROM Solution WHERE `RepoId` = 1093 )",
        "repair_result": 0
    },
    {
        "idx": 68,
        "db_id": "codebase_comments",
        "question": "What are the paths of solutions in repository \"https://github.com/ecoffey/Bebop.git\"",
        "evidence": "path of solutions refers to Path; https://github.com/ecoffey/Bebop.git refers to Url; Url = 'https://github.com/ecoffey/Bebop.git';",
        "gold": "SELECT DISTINCT T2.Path FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/ecoffey/Bebop.git'",
        "pred": "SELECT `Path` FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Url` = 'https://github.com/ecoffey/Bebop.git' )",
        "pred_result": 1,
        "repair_sql": "SELECT `Path` FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Url` = 'https://github.com/ecoffey/Bebop.git' )",
        "repair_result": 1
    },
    {
        "idx": 69,
        "db_id": "codebase_comments",
        "question": "List all the ids of repositories for solutions with \"ro\" methods.",
        "evidence": "ids of repositories refers to RepoId; ro refers to lang = 'ro';",
        "gold": "SELECT DISTINCT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'ro'",
        "pred": "SELECT DISTINCT T3.`RepoId` FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.`Id` = T2.`SolutionId` INNER JOIN Repo AS T3 ON T1.`RepoId` = T3.`Id` WHERE T2.`Lang` = 'ro'",
        "pred_result": "no such column: T3.RepoId",
        "repair_sql": "SELECT DISTINCT T1.`RepoId` FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.`Id` = T2.`SolutionId` INNER JOIN Repo AS T3 ON T1.`RepoId` = T3.`Id` WHERE T2.`Lang` = 'ro'",
        "repair_result": 1
    },
    {
        "idx": 70,
        "db_id": "codebase_comments",
        "question": "What is the repository id of the method with tokenized name \"crc parameters get hash code\"?",
        "evidence": "repository id refers to RepoId; tokenized name refers to NameTokenized; NameTokenized = 'crc parameters get hash code';",
        "gold": "SELECT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'crc parameters get hash code'",
        "pred": "SELECT T2.`RepoId` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`Id` WHERE T1.`NameTokenized` = 'crc parameters get hash code'",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`RepoId` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`Id` WHERE T1.`NameTokenized` = 'crc parameters get hash code'",
        "repair_result": 0
    },
    {
        "idx": 71,
        "db_id": "codebase_comments",
        "question": "How many methods with solutions with path 'maravillas_linq-to-delicious\\tasty.sln'?",
        "evidence": "solution refers to SolutionId;",
        "gold": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'maravillas_linq-to-delicious\\tasty.sln'",
        "pred": "SELECT COUNT(*) FROM Method WHERE `SolutionId` = ( SELECT `Id` FROM Solution WHERE `Path` = 'maravillas_linq-to-delicious\\tasty.sln' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Method WHERE `SolutionId` = ( SELECT `Id` FROM Solution WHERE `Path` = 'maravillas_linq-to-delicious\\tasty.sln' )",
        "repair_result": 1
    },
    {
        "idx": 72,
        "db_id": "codebase_comments",
        "question": "List all the solutions ids of the repository with \"636430969128176000\" processed time",
        "evidence": "solution ids refers to Solution.Id;",
        "gold": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.ProcessedTime = 636430969128176000",
        "pred": "SELECT `Id` FROM Solution WHERE `RepoId` = ( SELECT `RepoId` FROM Solution WHERE `ProcessedTime` = '636430969128176000' )",
        "pred_result": 1,
        "repair_sql": "SELECT Id FROM Solution WHERE ProcessedTime = '636430969128176000'",
        "repair_result": 1
    },
    {
        "idx": 73,
        "db_id": "codebase_comments",
        "question": "What is the url for repository that has the longest processed time solution?",
        "evidence": "Url for repository refers to Url; longest processed toe trefers to MAX(ProcessedTime);",
        "gold": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Solution )",
        "pred": "SELECT `Url` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `ProcessedTime` = ( SELECT MAX(`ProcessedTime`) FROM Solution ) )",
        "pred_result": 1,
        "repair_sql": "SELECT `Url` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `ProcessedTime` = ( SELECT MAX(`ProcessedTime`) FROM Solution ) )",
        "repair_result": 1
    },
    {
        "idx": 74,
        "db_id": "codebase_comments",
        "question": "List all the solutions of repositories with the Forks higher than half of the watchers.",
        "evidence": "solutions refers to Solution.Id; forks higher than half of the watchers refers tto Forks>(Watchers/2);;",
        "gold": "SELECT DISTINCT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks > T1.Watchers / 2",
        "pred": "SELECT T2.* FROM Solution AS T2 INNER JOIN Repo AS T1 ON T2.`RepoId` = T1.`Id` WHERE T1.`Forks` > (T1.`Watchers` / 2)",
        "pred_result": 0,
        "repair_sql": "SELECT T2.* FROM Solution AS T2 INNER JOIN Repo AS T1 ON T2.`RepoId` = T1.`Id` WHERE T1.`Forks` > (T1.`Watchers` / 2)",
        "repair_result": 0
    },
    {
        "idx": 75,
        "db_id": "codebase_comments",
        "question": "What is the percentage of Forks to Stars of repository for solution \"104086\"?",
        "evidence": "solution refers to Solution.Id; Solution.Id = 104086; percentage = MULTIPLY(DIVIDE(Forkk, Stars), 100);",
        "gold": "SELECT CAST(T1.Forks AS REAL) * 100 / T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 104086",
        "pred": "SELECT (T1.`Forks` * 1.0 / T1.`Stars`) * 100 AS Forks_to_Stars_Percentage FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`RepoId` WHERE T2.`Id` = 104086",
        "pred_result": 1,
        "repair_sql": "SELECT (T1.`Forks` * 1.0 / T1.`Stars`) * 100 AS Forks_to_Stars_Percentage FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`RepoId` WHERE T2.`Id` = 104086",
        "repair_result": 1
    },
    {
        "idx": 76,
        "db_id": "codebase_comments",
        "question": "Please provide the id of the respository that the most people like.",
        "evidence": "repository that the most people like refers to MAX(Stars);",
        "gold": "SELECT Id FROM Repo WHERE Stars = ( SELECT MAX(Stars) FROM Repo )",
        "pred": "SELECT T1.`RepoId` FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T2.`Stars` = ( SELECT MAX(`Stars`) FROM Repo )",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`RepoId` FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T2.`Stars` = ( SELECT MAX(`Stars`) FROM Repo )",
        "repair_result": 1
    },
    {
        "idx": 77,
        "db_id": "codebase_comments",
        "question": "What is the solution's path of method \"HtmlSharp.HtmlParser.Feed\"?",
        "evidence": "solution's path refers to Path; method refers to Name; Name = 'HtmlSharp.HtmlParser.Feed';",
        "gold": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'HtmlSharp.HtmlParser.Feed'",
        "pred": "SELECT Path FROM Solution WHERE Id = ( SELECT SolutionId FROM Method WHERE Name = 'HtmlSharp.HtmlParser.Feed' )",
        "pred_result": 1,
        "repair_sql": "SELECT Path FROM Solution WHERE Id = ( SELECT SolutionId FROM Method WHERE Name = 'HtmlSharp.HtmlParser.Feed' )",
        "repair_result": 1
    },
    {
        "idx": 78,
        "db_id": "codebase_comments",
        "question": "Please provide the number of forks that the repository of the solution 35 have.",
        "evidence": "solution refers to Solution.Id; Solution.Id = 35;",
        "gold": "SELECT T1.Forks FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 35",
        "pred": "SELECT `Forks` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Id` = 35 )",
        "pred_result": 1,
        "repair_sql": "SELECT `Forks` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Id` = 35 )",
        "repair_result": 1
    },
    {
        "idx": 79,
        "db_id": "codebase_comments",
        "question": "Please provide the id of the solution whose repository has the most watchers.",
        "evidence": "id of the solution refers to Solution.Id; repository has the most watchers refers to MAX(Watchers);",
        "gold": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = ( SELECT MAX(Watchers) FROM Repo )",
        "pred": "SELECT `Id` FROM Solution WHERE `RepoId` = ( SELECT `RepoId` FROM Solution INNER JOIN Repo ON Solution.`RepoId` = Repo.`Id` ORDER BY Repo.`Watchers` DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT `Id` FROM Solution WHERE `RepoId` = ( SELECT `RepoId` FROM Solution INNER JOIN Repo ON Solution.`RepoId` = Repo.`Id` ORDER BY Repo.`Watchers` DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 80,
        "db_id": "codebase_comments",
        "question": "Please provide the number of stars that the repository of the solution 20 have.",
        "evidence": "solution refers to Solution.ID; Solution.Id = 20;",
        "gold": "SELECT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 20",
        "pred": "SELECT `Stars` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Id` = 20 )",
        "pred_result": 1,
        "repair_sql": "SELECT `Stars` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Id` = 20 )",
        "repair_result": 1
    },
    {
        "idx": 81,
        "db_id": "codebase_comments",
        "question": "How many methods does solution 1 have? And please tell me if solution 1 needs to be compiled.",
        "evidence": "method refers to Name; solution refers to Solution.Id; Solution.Id = 1; solution needs to be compiled refers to WasCompiled = 0;",
        "gold": "SELECT COUNT(T2.SolutionId) , CASE WHEN T1.WasCompiled = 0 THEN 'Needs' ELSE 'NoNeeds' END needToCompile FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.SolutionId = 1",
        "pred": "SELECT CASE WHEN WasCompiled = 1 THEN 'No' ELSE 'Yes' END AS Needs_Compilation FROM Solution WHERE Id = 1",
        "pred_result": 0,
        "repair_sql": "SELECT CASE WHEN WasCompiled = 1 THEN 'No' ELSE 'Yes' END AS Needs_Compilation FROM Solution WHERE Id = 1",
        "repair_result": 0
    },
    {
        "idx": 82,
        "db_id": "codebase_comments",
        "question": "What is the percentage of the methods' solutions that need to be compiled among the methods whose comments is XML format?",
        "evidence": "comment is XML format refers to CommentIsXml = 1; solution needs to be compiled refesr to WasCompiled = 0; percentage = MULTIPLY(DIVIDE(SUM(WasCompiled = 0), COUNT(Solution.Id)), 100);",
        "gold": "SELECT CAST(SUM(CASE WHEN T1.WasCompiled = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.CommentIsXml = 1",
        "pred": "SELECT (COUNT(T1.Id) * 100.0) / ( SELECT COUNT(*) FROM Method WHERE CommentIsXml = 1 ) FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.SolutionId = T2.Id WHERE T1.CommentIsXml = 1 AND T2.WasCompiled = 0",
        "pred_result": 1,
        "repair_sql": "SELECT (COUNT(T1.Id) * 100.0) / ( SELECT COUNT(*) FROM Method WHERE CommentIsXml = 1 ) FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.SolutionId = T2.Id WHERE T1.CommentIsXml = 1 AND T2.WasCompiled = 0",
        "repair_result": 1
    },
    {
        "idx": 83,
        "db_id": "codebase_comments",
        "question": "Please list the names of methods with the solution path \"wallerdev_htmlsharp\\HtmlSharp.sln\".",
        "evidence": "name of the methods refers to Name; solution path refers to Path; Path = 'wallerdev_htmlsharp\\HtmlSharp.sln';",
        "gold": "SELECT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'wallerdev_htmlsharpHtmlSharp.sln'",
        "pred": "SELECT T1.Name FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.Id = T2.MethodId INNER JOIN Solution AS T3 ON T1.SolutionId = T3.Id WHERE T3.Path = 'wallerdev_htmlsharp\\HtmlSharp.sln'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.Name FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.Id = T2.MethodId INNER JOIN Solution AS T3 ON T1.SolutionId = T3.Id WHERE T3.Path = 'wallerdev_htmlsharp\\HtmlSharp.sln'",
        "repair_result": 0
    },
    {
        "idx": 84,
        "db_id": "codebase_comments",
        "question": "What is the percentage of respositories that receive more than 2,000 stars?",
        "evidence": "stars>2000; percentage = DIVIDE(MULTIPLY(COUNT(Stars>2000), 100), COUNT(Id));",
        "gold": "SELECT CAST(SUM(CASE WHEN Stars > 2000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Stars) FROM Repo",
        "pred": "SELECT (COUNT(Stars > 2000) * 100) / COUNT(*) FROM Repo",
        "pred_result": 0,
        "repair_sql": "SELECT (COUNT(Stars > 2000) * 100) / COUNT(*) FROM Repo",
        "repair_result": 0
    },
    {
        "idx": 85,
        "db_id": "codebase_comments",
        "question": "What is the url of solution 1?",
        "evidence": "solution refers to Solution.Id; Solution.Id = 1;",
        "gold": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 1",
        "pred": "SELECT T3.`Url` FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T1.`Id` = 1",
        "pred_result": "no such column: T3.Url",
        "repair_sql": "SELECT T2.`Url` FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T1.`Id` = 1",
        "repair_result": 1
    },
    {
        "idx": 86,
        "db_id": "codebase_comments",
        "question": "Please provide the id of the respository that received the most forks among the respositories that receive 21 stars.",
        "evidence": "repository that received the most forks refers to MAX(Forks);",
        "gold": "SELECT Id FROM Repo WHERE Stars = 21 AND Forks = ( SELECT MAX(Forks) FROM Repo WHERE Stars = 21 )",
        "pred": "SELECT `RepoId` FROM Solution WHERE `RepoId` IN ( SELECT `Id` FROM Repo WHERE `Stars` = 21 ) ORDER BY `Forks` DESC LIMIT 1",
        "pred_result": "no such column: Forks",
        "repair_sql": "SELECT r.Id FROM Repo r JOIN Solution s ON r.Id = s.RepoId WHERE r.Stars = 21 ORDER BY r.Forks DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 87,
        "db_id": "codebase_comments",
        "question": "What the percentage of the english methods among the methods whose comments is XML format?",
        "evidence": "english methods refers to lang = 'en'; comment is XML format refers to CommentIsXml = 1;",
        "gold": "SELECT CAST(SUM(CASE WHEN Lang = 'en' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Name) FROM Method WHERE CommentIsXml = 1",
        "pred": "SELECT (CAST(( SELECT COUNT(*) FROM Method AS T1 WHERE T1.`CommentIsXml` = 1 AND T1.`Lang` = 'en' ) AS REAL) / ( SELECT COUNT(*) FROM Method WHERE `CommentIsXml` = 1 )) * 100 AS Percentage",
        "pred_result": 0,
        "repair_sql": "SELECT (CAST(( SELECT COUNT(*) FROM Method AS T1 WHERE T1.`CommentIsXml` = 1 AND T1.`Lang` = 'en' ) AS REAL) / ( SELECT COUNT(*) FROM Method WHERE `CommentIsXml` = 1 )) * 100 AS Percentage",
        "repair_result": 0
    },
    {
        "idx": 88,
        "db_id": "codebase_comments",
        "question": "Please provide the path of solution of method whose tokenized name is html parser feed.",
        "evidence": "path of solution refers to Path; method refers to Name; tokenized name refers to NameTokenized; Name = ''html parser feed';",
        "gold": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'html parser feed'",
        "pred": "SELECT T3.Path FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.Id = T2.MethodId INNER JOIN Solution AS T3 ON T1.SolutionId = T3.Id WHERE T1.NameTokenized = 'html parser feed'",
        "pred_result": 1,
        "repair_sql": "SELECT T3.Path FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.Id = T2.MethodId INNER JOIN Solution AS T3 ON T1.SolutionId = T3.Id WHERE T1.NameTokenized = 'html parser feed'",
        "repair_result": 1
    },
    {
        "idx": 89,
        "db_id": "codebase_comments",
        "question": "Please provide the solution id of the respository among the respository that receive 238 forks.",
        "evidence": "solution id of the repository refers to solution.Id;",
        "gold": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = 238",
        "pred": "SELECT T1.`SolutionId` FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T2.`Forks` = 238",
        "pred_result": "no such column: T1.SolutionId",
        "repair_sql": "SELECT T1.`Id` AS SolutionId FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T2.`Forks` = 238",
        "repair_result": 1
    },
    {
        "idx": 90,
        "db_id": "codebase_comments",
        "question": "Among the english methods,please list the tokenized names of methods whose solutions need to be compiled.",
        "evidence": "english methods refers to lang = 'en'; tokenized name refers to NameTokenized; methods refers to Name; solution needs to be compiled refers to WasCompiled = 0;",
        "gold": "SELECT NameTokenized FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE Lang = 'en' AND WasCompiled = 0",
        "pred": "SELECT T1.`NameTokenized` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T1.`Lang` = 'en' AND T2.`WasCompiled` = 0",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`NameTokenized` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T1.`Lang` = 'en' AND T2.`WasCompiled` = 0 AND T1.`Name` LIKE '%.java'",
        "repair_result": 1
    },
    {
        "idx": 91,
        "db_id": "codebase_comments",
        "question": "How many solutions whose repository's stars are a third more than forks?",
        "evidence": "solutions refers to Solution.Id; repository stars are a third more than forks = (MULTIPLY(Stars, 1/3))>Forks;",
        "gold": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks < T1.Stars * 1 / 3",
        "pred": "SELECT COUNT(T3.`Id`) FROM Solution AS T3 INNER JOIN Repo AS T2 ON T3.`RepoId` = T2.`Id` WHERE T2.`Forks` < (T2.`Stars` * (1/3))",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(T3.`Id`) FROM Solution AS T3 INNER JOIN Repo AS T2 ON T3.`RepoId` = T2.`Id` WHERE T2.`Forks` < (T2.`Stars` * (1/3))",
        "repair_result": 0
    },
    {
        "idx": 92,
        "db_id": "codebase_comments",
        "question": "Please provide the path of solution of method whose full comment is Feeds data into the parser.",
        "evidence": "path of solution refers to Path; method refers to name; full comment = 'Feeds data into the parser';",
        "gold": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.FullComment = 'Feeds data into the parser'",
        "pred": "SELECT T3.Path FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.MethodId INNER JOIN Repo AS T3 ON T2.RepoId = T3.Id WHERE T1.FullComment = 'Feeds data into the parser'",
        "pred_result": "no such column: T3.Path",
        "repair_sql": "SELECT T2.Path FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.MethodId INNER JOIN Repo AS T3 ON T2.RepoId = T3.Id WHERE T1.FullComment = 'Feeds data into the parser'",
        "repair_result": "no such column: T2.MethodId"
    },
    {
        "idx": 93,
        "db_id": "codebase_comments",
        "question": "Among the repository \"3\", how many methods whose comments is XML format?",
        "evidence": "repository refers to RepoId; RepoId = 3; method refers to Name; method whose comment is XML format refers to CommentIsXml = 1;",
        "gold": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.RepoId = 3 AND T2.CommentIsXml = 1",
        "pred": "SELECT COUNT(*) FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T2.`RepoId` = 3 AND T1.`CommentIsXml` = 1",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T2.`RepoId` = 3 AND T1.`CommentIsXml` = 1",
        "repair_result": 1
    },
    {
        "idx": 94,
        "db_id": "codebase_comments",
        "question": "What is the percentage of solutions for the method that needs to be compiled in the English methods?",
        "evidence": "method that needs to be compiled refers to WasCompiled = 0; English method refers to Lang = 'en'; percentage of solutions = MULTIPLY(DIVIDE(SUM(WasCompiled = 0), COUNT(Solution.Id)), 100);",
        "gold": "SELECT CAST(SUM(CASE WHEN T1.WasCompiled = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Lang) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'en'",
        "pred": "SELECT (CAST(COUNT(T4.`Id`) AS REAL) / COUNT(T3.`Id`)) * 100 FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.`Id` = T2.`MethodId` INNER JOIN Solution AS T3 ON T1.`Id` = T3.`SolutionId` INNER JOIN Solution AS T4 ON T1.`Id` = T4.`SolutionId` WHERE T1.`Lang` = 'en' AND T4.`WasCompiled` = 0",
        "pred_result": "no such column: T3.SolutionId",
        "repair_sql": "SELECT (CAST(SUM(T4.`WasCompiled` = 0) AS REAL) / COUNT(T3.`Id`)) * 100 FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.`Id` = T2.`MethodId` INNER JOIN Solution AS T3 ON T1.`SolutionId` = T3.`Id` INNER JOIN Solution AS T4 ON T1.`SolutionId` = T4.`Id` WHERE T1.`Lang` = 'en'",
        "repair_result": 1
    },
    {
        "idx": 95,
        "db_id": "codebase_comments",
        "question": "How many more stars in percentage are there for the repository of solution \"1\" than solution \"2\"?",
        "evidence": "solution refers to Solution.Id; Solution.Id = 1 OR 2; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 1), SUM(Solution.Id = 2)), 100)), SUM(Solution.Id = 2);",
        "gold": "SELECT CAST(SUM(CASE WHEN T2.Id = 1 THEN T1.Stars ELSE 0 END) - SUM(CASE WHEN T2.Id = 2 THEN T1.Stars ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 2 THEN T1.Stars ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId",
        "pred": "SELECT (T1 - T2) * 100.0 / T2 AS percentage FROM ( SELECT ( SELECT T1.`Stars` FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`RepoId` WHERE T2.`Id` = 1 ) - ( SELECT T1.`Stars` FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`RepoId` WHERE T2.`Id` = 2 ) AS diff )",
        "pred_result": "no such column: T1",
        "repair_sql": "SELECT (T1.Stars - T2.Stars) * 100.0 / T2.Stars AS percentage FROM ( SELECT ( SELECT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 1 ) AS T1, ( SELECT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 2 ) AS T2 )",
        "repair_result": "no such column: T1.Stars"
    },
    {
        "idx": 96,
        "db_id": "codebase_comments",
        "question": "How many solutions are there whose respositories received the number of stars more than one third of the number of forks?",
        "evidence": "number of solutions are there whose repositories received the number of stars more than one third of the number of forks refers to Stars>DIVIDE(Forks, 3);",
        "gold": "SELECT COUNT(DISTINCT T1.Id) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars > CAST(T1.Forks AS REAL) / 3",
        "pred": "SELECT COUNT(*) FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T2.`Stars` > (SELECT `Forks` / 3 FROM Repo)",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T2.`Stars` > (SELECT `Forks` / 3 FROM Repo)",
        "repair_result": 0
    },
    {
        "idx": 97,
        "db_id": "codebase_comments",
        "question": "What is the task of method number 2?",
        "evidence": "task of the method refers to the second part of the Name after the \".\"; method number refers to Method_100k.Id; Method_100k.Id = 2;",
        "gold": "SELECT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE Id = 2",
        "pred": "SELECT SUBSTR(T1.`Name`, INSTR(T1.`Name`, '.') + 1) AS Task FROM Method AS T1 WHERE T1.`Id` = 2",
        "pred_result": 0,
        "repair_sql": "SELECT SUBSTR(T1.`Name`, INSTR(T1.`Name`, '.') + 1) AS Task FROM Method AS T1 WHERE T1.`Id` = 2",
        "repair_result": 0
    },
    {
        "idx": 98,
        "db_id": "codebase_comments",
        "question": "What format does the method number 8's comment have?",
        "evidence": "format refers CommentIsXml; method number refers to Method_100k.Id; Method_100k.Id = 8;",
        "gold": "SELECT CASE WHEN CommentIsXml = 0 THEN 'isNotXMLFormat' WHEN CommentIsXml = 1 THEN 'isXMLFormat' END format FROM Method WHERE Id = 8",
        "pred": "SELECT CASE WHEN T1.`CommentIsXml` = 1 THEN 'XML' ELSE 'Non-XML' END AS Comment_Format FROM Method AS T1 WHERE T1.`Id` = 8",
        "pred_result": 0,
        "repair_sql": "SELECT CASE WHEN T1.`CommentIsXml` = 1 THEN 'XML' ELSE 'Non-XML' END AS Comment_Format FROM Method AS T1 WHERE T1.`Id` = 8",
        "repair_result": 0
    },
    {
        "idx": 99,
        "db_id": "codebase_comments",
        "question": "Please provide a link to the most well-known repository's Github address.",
        "evidence": "link refers to Url; well-known repository refers to MAX(Watchers);",
        "gold": "SELECT Url FROM Repo WHERE Watchers = ( SELECT MAX(Watchers) FROM Repo )",
        "pred": "SELECT `Url` FROM Repo WHERE `Watchers` = ( SELECT MAX(`Watchers`) FROM Repo )",
        "pred_result": 1,
        "repair_sql": "SELECT `Url` FROM Repo WHERE `Watchers` = ( SELECT MAX(`Watchers`) FROM Repo )",
        "repair_result": 1
    },
    {
        "idx": 100,
        "db_id": "codebase_comments",
        "question": "What is the task of the method that is in the Czech language?",
        "evidence": "method refers to Name; task of the method refers to the second part of the Name after the \".\"; Czech language refers to Lang = 'cs'",
        "gold": "SELECT DISTINCT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE Lang = 'cs'",
        "pred": "SELECT SUBSTR(T1.`Name`, INSTR(T1.`Name`, '.') + 1) AS Task FROM Method AS T1 WHERE T1.`Lang` = 'cs'",
        "pred_result": 0,
        "repair_sql": "SELECT SUBSTR(T1.`Name`, INSTR(T1.`Name`, '.') + 1) AS Task FROM Method AS T1 WHERE T1.`Lang` = 'cs'",
        "repair_result": 0
    },
    {
        "idx": 101,
        "db_id": "codebase_comments",
        "question": "What is the solution path for method number 3?",
        "evidence": "solution path refers to Path; method number refers to Method_100k.Id; Method_100k.Id = 3;",
        "gold": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 3",
        "pred": "SELECT T2.`Path` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T1.`Id` = 3",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Path` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T1.`Id` = 3",
        "repair_result": 1
    },
    {
        "idx": 102,
        "db_id": "codebase_comments",
        "question": "What is the language of method number 28 that can be found in the repository number 3?",
        "evidence": "language of method refers to Lang; method number refers to Method_100k.Id; Method_100k.Id = 28; repository number refers to RepoId; RepoID = 3;",
        "gold": "SELECT T2.Lang FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 28 AND T1.RepoId = 3",
        "pred": "SELECT T1.`Lang` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`Id` = T2.`Id` WHERE T1.`Id` = 28 AND T2.`RepoId` = 3",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`Lang` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T1.`Id` = 28 AND T2.`RepoId` = 3",
        "repair_result": 1
    },
    {
        "idx": 103,
        "db_id": "codebase_comments",
        "question": "What is solution 1's processing time and how many methods have been using this solution?",
        "evidence": "solution refers to Solution.Id and SolutionId; Solution.Id = 1; SolutionId = 1; processing time refers to ProcessedTime; methods refers to Name;",
        "gold": "SELECT T1.ProcessedTime, COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.SolutionId = 1",
        "pred": "SELECT COUNT(*) FROM Method WHERE `SolutionId` = 1",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Method WHERE `SolutionId` = 1",
        "repair_result": 0
    },
    {
        "idx": 104,
        "db_id": "codebase_comments",
        "question": "How many methods in the same repository share a tokenized name that begins with \"query language...\"?",
        "evidence": "methods refers to Name; tokenized name refers to NameTokenized; NameTokenized LIKE 'query language%';",
        "gold": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized LIKE 'query language%'",
        "pred": "SELECT COUNT(*) FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T1.`RepoId` IN ( SELECT DISTINCT T3.`RepoId` FROM Method AS T3 WHERE T3.`NameTokenized` LIKE 'query language%' )",
        "pred_result": "no such column: T3.RepoId",
        "repair_sql": "SELECT COUNT(*) FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.SolutionId = T2.Id WHERE T2.RepoId IN ( SELECT DISTINCT T3.RepoId FROM Method AS T3 WHERE T3.NameTokenized LIKE 'query language%' )",
        "repair_result": "no such column: T3.RepoId"
    },
    {
        "idx": 105,
        "db_id": "codebase_comments",
        "question": "Please state the API calls for method number 10 and its intended course of action.",
        "evidence": "method number refers to Method_100k.Id; Method_100k.Id = 10; intended course of action refers to Path;",
        "gold": "SELECT T2.ApiCalls, T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 10",
        "pred": "SELECT T2.`Path` FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.`Id` = T2.`SolutionId` WHERE T2.`Id` = 10",
        "pred_result": "no such column: T2.Path",
        "repair_sql": "SELECT T1.`Path` FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.`Id` = T2.`SolutionId` WHERE T2.`Id` = 10",
        "repair_result": 0
    },
    {
        "idx": 106,
        "db_id": "codebase_comments",
        "question": "How many methods in repository 150 did not have a comment and a summary?",
        "evidence": "methods refers to Name; repository that did not have a comment and a summary refers to FullComment IS NULL AND Summary IS NULL;",
        "gold": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.RepoId = 150 AND T2.FullComment IS NULL AND T2.Summary IS NULL",
        "pred": "SELECT COUNT(T1.`Id`) FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T2.`RepoId` = 150 AND T1.`FullComment` IS NULL AND T1.`Summary` IS NULL",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(T1.`Id`) FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T2.`RepoId` = 150 AND T1.`FullComment` IS NULL AND T1.`Summary` IS NULL",
        "repair_result": 1
    },
    {
        "idx": 107,
        "db_id": "codebase_comments",
        "question": "What is the comment format of method number 50 with the solution path \"managedfusion_managedfusion\\ManagedFusion.sln\"?",
        "evidence": "comment format refers to CommentIsXml; method number refers to Method_100k.Id; Method_100k.Id = 50; solution path refers to Path; Path = 'managedfusion_managedfusion\\ManagedFusion.sln';",
        "gold": "SELECT CASE WHEN T2.CommentIsXml = 0 THEN 'isNotXMLFormat' WHEN T2.CommentIsXml = 1 THEN 'isXMLFormat' END format FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 50 AND T1.Path = 'managedfusion_managedfusionManagedFusion.sln'",
        "pred": "SELECT T1.`CommentIsXml` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T1.`Id` = 50 AND T2.`Path` = 'managedfusion_managedfusion\\ManagedFusion.sln'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`CommentIsXml` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T1.`Id` = 50 AND T2.`Path` = 'managedfusion_managedfusion\\ManagedFusion.sln'",
        "repair_result": 0
    },
    {
        "idx": 108,
        "db_id": "codebase_comments",
        "question": "What is the task method of the tokenized name \"string extensions to pascal case\n\"?",
        "evidence": "method refers to Name; task of the method refers to the second part of the Name after the \".\"; tokenized name refers to NameTokenized; NameTokenized = 'string extensions to pascal case';",
        "gold": "SELECT DISTINCT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE NameTokenized = 'string extensions to pascal case'",
        "pred": "SELECT SUBSTR(T1.`Name`, INSTR(T1.`Name`, '.') + 1) AS Task_Method FROM Method AS T1 WHERE T1.`NameTokenized` = 'string extensions to pascal case'",
        "pred_result": 0,
        "repair_sql": "SELECT SUBSTR(T1.`Name`, INSTR(T1.`Name`, '.') + 1) AS Task_Method FROM Method AS T1 WHERE T1.`NameTokenized` = 'string extensions to pascal case'",
        "repair_result": 0
    },
    {
        "idx": 109,
        "db_id": "codebase_comments",
        "question": "Provide the tokenized name of the method \"Sky.Excel.ExcelBook.TypeConvert\".",
        "evidence": "tokenized name refers to NameTokenized; NameTokenized = 'Sky.Excel.ExcelBook.TypeConvert';",
        "gold": "SELECT NameTokenized FROM Method WHERE Name = 'Sky.Excel.ExcelBook.TypeConvert'",
        "pred": "SELECT NameTokenized FROM Method WHERE Name = 'Sky.Excel.ExcelBook.TypeConvert'",
        "pred_result": 1,
        "repair_sql": "SELECT NameTokenized FROM Method WHERE Name = 'Sky.Excel.ExcelBook.TypeConvert'",
        "repair_result": 1
    },
    {
        "idx": 110,
        "db_id": "codebase_comments",
        "question": "How many path does the github address \"https://github.com/jeffdik/tachy.git\" have?",
        "evidence": "github address refers to Url; Url = 'https://github.com/jeffdik/tachy.git';",
        "gold": "SELECT COUNT(DISTINCT T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git'",
        "pred": "SELECT COUNT(`Path`) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Url` = 'https://github.com/jeffdik/tachy.git' )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(`Path`) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Url` = 'https://github.com/jeffdik/tachy.git' )",
        "repair_result": 0
    },
    {
        "idx": 111,
        "db_id": "codebase_comments",
        "question": "How many watchers does the path \"maff_se3ue7\\US7.sln\" have?",
        "evidence": "",
        "gold": "SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'maff_se3ue7US7.sln'",
        "pred": "SELECT `Watchers` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Path` = 'maff_se3ue7\\US7.sln' )",
        "pred_result": 0,
        "repair_sql": "SELECT `Watchers` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Path` = 'maff_se3ue7\\US7.sln' )",
        "repair_result": 0
    },
    {
        "idx": 112,
        "db_id": "codebase_comments",
        "question": "List 5 github address that the solutions can be implemented without the need of compilation.",
        "evidence": "github address refers to Url; solution can be implemented without the need of compliation refers to WasCompiled = 1;",
        "gold": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.WasCompiled = 1 LIMIT 5",
        "pred": "SELECT T2.`Url` FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T1.`WasCompiled` = 1 LIMIT 5",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Url` FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T1.`WasCompiled` = 1 LIMIT 5",
        "repair_result": 1
    },
    {
        "idx": 113,
        "db_id": "codebase_comments",
        "question": "What are the solution path of the tokenized name \"matrix multiply\"?",
        "evidence": "solution path refers to Path; tokenized name refers to NameTokenized; NameTokenized = 'matrix multiply';",
        "gold": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'matrix multiply'",
        "pred": "SELECT T2.`Path` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T1.`NameTokenized` = 'matrix multiply'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Path` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` WHERE T1.`NameTokenized` = 'matrix multiply'",
        "repair_result": 1
    },
    {
        "idx": 114,
        "db_id": "codebase_comments",
        "question": "How many XML format does the github address \"https://github.com/dogeth/vss2git.git\" have?",
        "evidence": "Xml format refers to CommentisXml, github address refers to Url; Url = 'https://github.com/dogeth/vss2git.git';",
        "gold": "SELECT COUNT(T3.CommentIsXml) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T1.Url = 'https://github.com/dogeth/vss2git.git' AND T3.CommentIsXml = 1",
        "pred": "SELECT COUNT(*) FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.`Id` = T2.`MethodId` INNER JOIN Solution AS T3 ON T1.`SolutionId` = T3.`Id` WHERE T1.`CommentIsXml` = 1 AND T3.`RepoId` = ( SELECT `Id` FROM Repo WHERE `Url` = 'https://github.com/dogeth/vss2git.git' )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.`Id` = T2.`MethodId` INNER JOIN Solution AS T3 ON T1.`SolutionId` = T3.`Id` WHERE T1.`CommentIsXml` = 1 AND T3.`RepoId` = ( SELECT `Id` FROM Repo WHERE `Url` = 'https://github.com/dogeth/vss2git.git' )",
        "repair_result": 0
    },
    {
        "idx": 115,
        "db_id": "codebase_comments",
        "question": "List 5 solution path that has sampling time of 636431758961741000.",
        "evidence": "solution path refers to Path; sampling time refers to SampledAt; SampledAt = '636431758961741000';",
        "gold": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.SampledAt = 636431758961741000 LIMIT 5",
        "pred": "SELECT `Path` FROM Solution WHERE `Id` IN ( SELECT `Id` FROM Method WHERE `SampledAt` = '636431758961741000' ) LIMIT 5",
        "pred_result": 1,
        "repair_sql": "SELECT Path FROM Solution WHERE SolutionId IN ( SELECT Id FROM Method WHERE SampledAt = '636431758961741000' ) LIMIT 5;",
        "repair_result": "no such column: SolutionId"
    },
    {
        "idx": 116,
        "db_id": "codebase_comments",
        "question": "What is the github address of the solution path \"joeyrobert_bloomfilter\\DataTypes.BloomFilter.sln\"?",
        "evidence": "github address refers to Url; solution path refers to Path; Path = 'joeyrobert_bloomfilter\\DataTypes.BloomFilter.sln';",
        "gold": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'joeyrobert_bloomfilterDataTypes.BloomFilter.sln'",
        "pred": "SELECT `Url` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Path` = 'joeyrobert_bloomfilter\\DataTypes.BloomFilter.sln' )",
        "pred_result": 0,
        "repair_sql": "SELECT `Url` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Path` = 'joeyrobert_bloomfilter\\DataTypes.BloomFilter.sln' )",
        "repair_result": 0
    },
    {
        "idx": 117,
        "db_id": "codebase_comments",
        "question": "List all the method name of the solution path \"graffen_NLog.Targets.Syslog\\src\\NLog.Targets.Syslog.sln\n\".",
        "evidence": "method name refers to Name; solution path refers to Path; Path = 'graffen_NLog.Targets.Syslog\\src\\NLog.Targets.Syslog.sln';",
        "gold": "SELECT DISTINCT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'graffen_NLog.Targets.SyslogsrcNLog.Targets.Syslog.sln'",
        "pred": "SELECT T1.`Name` FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.`Id` = T2.`MethodId` INNER JOIN Solution AS T3 ON T1.`SolutionId` = T3.`Id` WHERE T3.`Path` = 'graffen_NLog.Targets.Syslog\\src\\NLog.Targets.Syslog.sln'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`Name` FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.`Id` = T2.`MethodId` INNER JOIN Solution AS T3 ON T1.`SolutionId` = T3.`Id` WHERE T3.`Path` = 'graffen_NLog.Targets.Syslog\\src\\NLog.Targets.Syslog.sln'",
        "repair_result": 0
    },
    {
        "idx": 118,
        "db_id": "codebase_comments",
        "question": "List all the tokenized name of the solution path \"jurney_P4Backup\\P4Backup\\P4Backup.sln\n\".",
        "evidence": "tokenized name refers to NameTokenized; solution path refers to Path; Path = 'jurney_P4Backup\\P4Backup\\P4Backup.sln';",
        "gold": "SELECT DISTINCT T2.NameTokenized FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'jurney_P4BackupP4BackupP4Backup.sln'",
        "pred": "SELECT DISTINCT T1.NameTokenized FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.Id = T2.MethodId WHERE T1.SolutionId = ( SELECT Id FROM Solution WHERE Path = 'jurney_P4Backup\\P4Backup\\P4Backup.sln' )",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.NameTokenized FROM Method AS T1 INNER JOIN MethodParameter AS T2 ON T1.Id = T2.MethodId WHERE T1.SolutionId = ( SELECT Id FROM Solution WHERE Path = 'jurney_P4Backup\\P4Backup\\P4Backup.sln' )",
        "repair_result": 0
    },
    {
        "idx": 119,
        "db_id": "codebase_comments",
        "question": "Provide the github address with the summary of method \"A test for Decompose\n\".",
        "evidence": "github address refers to Url; summary of method refers to Summary; Summary = 'A test for Decompose';",
        "gold": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T3.Summary = 'A test for Decompose'",
        "pred": "SELECT `Url` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Id` = ( SELECT `Id` FROM Method WHERE `Summary` = 'A test for Decompose' ) )",
        "pred_result": 0,
        "repair_sql": "SELECT `Url` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Id` = ( SELECT `Id` FROM Method WHERE `Summary` = 'A test for Decompose' ) )",
        "repair_result": 0
    },
    {
        "idx": 120,
        "db_id": "codebase_comments",
        "question": "How many liked by people does the solution path \"ninject_Ninject\\Ninject.sln\n\" have?",
        "evidence": "how many liked by people refers to Stars; solution path refers to Path; Path = 'ninject_Ninject\\Ninject.sln';",
        "gold": "SELECT DISTINCT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'ninject_NinjectNinject.sln'",
        "pred": "SELECT `Stars` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Path` = 'ninject_Ninject\\Ninject.sln' )",
        "pred_result": 0,
        "repair_sql": "SELECT `Stars` FROM Repo WHERE `Id` = ( SELECT `RepoId` FROM Solution WHERE `Path` = 'ninject_Ninject\\Ninject.sln' )",
        "repair_result": 0
    },
    {
        "idx": 121,
        "db_id": "codebase_comments",
        "question": "How many solution path does the repository with 111 stars, 58 forks, and 111 watchers?",
        "evidence": "solution path refers to Path;",
        "gold": "SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 111 AND T1.Forks = 58 AND T1.Watchers = 111",
        "pred": "SELECT COUNT(`Path`) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Stars` = 111 AND `Forks` = 58 AND `Watchers` = 111 )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(`Path`) FROM Solution WHERE `RepoId` = ( SELECT `Id` FROM Repo WHERE `Stars` = 111 AND `Forks` = 58 AND `Watchers` = 111 )",
        "repair_result": 1
    },
    {
        "idx": 122,
        "db_id": "codebase_comments",
        "question": "What is the average processed time of the solution with a repository of 254 likes, 88 followers, and 254 watchers?",
        "evidence": "average processed time = AVG(ProcessedTime);",
        "gold": "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.ProcessedTime) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 254 AND T1.Forks = 88 AND T1.Watchers = 254",
        "pred": "SELECT AVG(T1.`ProcessedTime`) FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T2.`Stars` = 254 AND T2.`Forks` = 88 AND T2.`Watchers` = 254",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(T1.`ProcessedTime`) FROM Solution AS T1 INNER JOIN Repo AS T2 ON T1.`RepoId` = T2.`Id` WHERE T2.`Stars` = 254 AND T2.`Forks` = 88 AND T2.`Watchers` = 254",
        "repair_result": 1
    },
    {
        "idx": 123,
        "db_id": "codebase_comments",
        "question": "How many language code of method is used for the github address \"https://github.com/managedfusion/managedfusion.git\n\"?",
        "evidence": "language code of method refers to Lang; github address refers to Url; Url = 'https://github.com/managedfusion/managedfusion.git';",
        "gold": "SELECT COUNT(DISTINCT T3.Lang) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T1.Url = 'https://github.com/managedfusion/managedfusion.git'",
        "pred": "SELECT COUNT(DISTINCT T1.`Lang`) FROM Method AS T1 WHERE T1.`Id` = ( SELECT T1.`Id` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` INNER JOIN Repo AS T3 ON T2.`RepoId` = T3.`Id` WHERE T3.`Url` = 'https://github.com/managedfusion/managedfusion.git' )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`Lang`) FROM Method AS T1 WHERE T1.`Id` = ( SELECT T1.`Id` FROM Method AS T1 INNER JOIN Solution AS T2 ON T1.`SolutionId` = T2.`Id` INNER JOIN Repo AS T3 ON T2.`RepoId` = T3.`Id` WHERE T3.`Url` = 'https://github.com/managedfusion/managedfusion.git' )",
        "repair_result": 0
    },
    {
        "idx": 124,
        "db_id": "restaurant",
        "question": "How many restaurants have not obtained a minimum of 3 in their reviews?",
        "evidence": "have not obtained a minimum of 3 in review refers to review < 3",
        "gold": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE review < 3",
        "pred": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`review` < 3",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`review` < 3",
        "repair_result": 0
    },
    {
        "idx": 125,
        "db_id": "restaurant",
        "question": "What types of food are served at the 4 top-reviewed restaurants?",
        "evidence": "top-reviewed refers to review = 4; type of food refers to food_type\n\n",
        "gold": "SELECT food_type FROM generalinfo WHERE review = ( SELECT MAX(review) FROM generalinfo ) LIMIT 4",
        "pred": "SELECT DISTINCT T1.`food_type` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`id_restaurant` IN ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 WHERE T1.`review` = 4 ORDER BY T1.`review` DESC LIMIT 4 )",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`food_type` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`id_restaurant` IN ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 WHERE T1.`review` = 4 ORDER BY T1.`review` DESC LIMIT 4 )",
        "repair_result": 0
    },
    {
        "idx": 126,
        "db_id": "restaurant",
        "question": "How many restaurants in the city of Richmond serve Mediterranean food?",
        "evidence": "Mediterranean food refers to food_type = \u00a0 'mediterranean'",
        "gold": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE food_type = 'mediterranean' AND city = 'richmond'",
        "pred": "SELECT COUNT(*) FROM ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`food_type` = 'mediterranean' AND T2.`city` = 'Richmond' ) AS subquery",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`food_type` = 'mediterranean' AND T2.`city` = 'Richmond' ) AS subquery",
        "repair_result": 0
    },
    {
        "idx": 127,
        "db_id": "restaurant",
        "question": "List all the cities in Sonoma County.",
        "evidence": "",
        "gold": "SELECT city FROM geographic WHERE county = 'sonoma county'",
        "pred": "SELECT DISTINCT T1.`city` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` WHERE T1.`county` = 'sonoma county'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`city` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` WHERE T1.`county` = 'sonoma county'",
        "repair_result": 1
    },
    {
        "idx": 128,
        "db_id": "restaurant",
        "question": "What counties are not in the Bay Area Region?",
        "evidence": "not in the Bay Area region refers to region ! = 'bay area'",
        "gold": "SELECT DISTINCT county FROM geographic WHERE region != 'bay area'",
        "pred": "SELECT DISTINCT T1.`county` FROM geographic AS T1 WHERE T1.`region` != 'bay area'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`county` FROM geographic AS T1 WHERE T1.`region` != 'bay area'",
        "repair_result": 1
    },
    {
        "idx": 129,
        "db_id": "restaurant",
        "question": "List all cities in the Northern California Region.",
        "evidence": "",
        "gold": "SELECT city FROM geographic WHERE region = 'northern california'",
        "pred": "SELECT DISTINCT T1.`city` FROM geographic AS T1 WHERE T1.`region` = 'northern california'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`city` FROM geographic AS T1 WHERE T1.`region` = 'northern california'",
        "repair_result": 1
    },
    {
        "idx": 130,
        "db_id": "restaurant",
        "question": "List by its ID number all restaurants on 11th Street in Oakland.",
        "evidence": "11th Street refers to street_name = '11th street'; Oakland refers to city = 'oakland'; ID number of restaurant refers to id_restaurant\n\n",
        "gold": "SELECT id_restaurant FROM location WHERE city = 'oakland' AND street_name = '11th street'",
        "pred": "SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T2.`street_name` = '11th street' AND T3.`city` = 'oakland'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T2.`city` = T3.`city` WHERE T2.`street_name` = '11th street' AND T3.`county` = 'alameda county'",
        "repair_result": 1
    },
    {
        "idx": 131,
        "db_id": "restaurant",
        "question": "How many restaurants can we find at number 871 on its street?",
        "evidence": "number 871 on its street refers to street_num = 871",
        "gold": "SELECT COUNT(id_restaurant) FROM location WHERE street_num = 871",
        "pred": "SELECT COUNT(*) FROM location AS T1 WHERE T1.`street_num` = 871",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM location AS T1 WHERE T1.`street_num` = 871",
        "repair_result": 1
    },
    {
        "idx": 132,
        "db_id": "restaurant",
        "question": "At what numbers on 9th Avenue of San Francisco there are restaurants?",
        "evidence": "9th Avenue refers to street_name = '9th avenue'; San Francisco refers to City = 'san francisco'",
        "gold": "SELECT id_restaurant FROM location WHERE City = 'san francisco' AND street_name = '9th avenue'",
        "pred": "SELECT DISTINCT T2.`street_num` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T2.`street_name` = '9th avenue' AND T3.`city` = 'san francisco'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T2.`street_num` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T2.`street_name` = '9th avenue' AND T3.`city` = 'san francisco'",
        "repair_result": 0
    },
    {
        "idx": 133,
        "db_id": "restaurant",
        "question": "What type of food is there in the restaurants on Adeline Street in Berkeley city?",
        "evidence": "Adeline Street refers to street_name = 'adeline st'; type of food refers to food_type\n\n",
        "gold": "SELECT T1.food_type FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'adeline st' AND T2.city = 'berkeley'",
        "pred": "SELECT DISTINCT T2.`food_type` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`id_restaurant` IN ( SELECT T1.`id_restaurant` FROM location AS T1 WHERE T1.`street_name` = 'adeline st' AND T1.`city` = 'berkeley' )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.`food_type` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`id_restaurant` IN ( SELECT T1.`id_restaurant` FROM location AS T1 WHERE T1.`street_name` = 'adeline st' AND T1.`city` = 'berkeley' )",
        "repair_result": 1
    },
    {
        "idx": 134,
        "db_id": "restaurant",
        "question": "In which regions are there no African food restaurants?",
        "evidence": "no African food restaurants refers to food_type <> 'african'",
        "gold": "SELECT DISTINCT T2.region FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type != 'african'",
        "pred": "SELECT DISTINCT T1.`region` FROM geographic AS T1 WHERE T1.`region` NOT IN ( SELECT DISTINCT T3.`region` FROM geographic AS T3 INNER JOIN generalinfo AS T4 ON T3.`city` = T4.`city` WHERE T4.`food_type` = 'african' )",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`region` FROM geographic AS T1 WHERE T1.`region` NOT IN ( SELECT DISTINCT T3.`region` FROM geographic AS T3 INNER JOIN generalinfo AS T4 ON T3.`city` = T4.`city` WHERE T4.`food_type` = 'african' )",
        "repair_result": 0
    },
    {
        "idx": 135,
        "db_id": "restaurant",
        "question": "In which counties are there A&W Root Beer Restaurants?",
        "evidence": "A&W Root Beer Restaurant refers to label = 'a & w root beer'",
        "gold": "SELECT DISTINCT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'a & w root beer'",
        "pred": "SELECT DISTINCT T3.`county` FROM geographic AS T3 WHERE T3.`city` IN ( SELECT T2.`city` FROM location AS T2 WHERE T2.`id_restaurant` IN ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 WHERE T1.`label` = 'a & w root beer' ) )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T3.`county` FROM geographic AS T3 WHERE T3.`city` IN ( SELECT T2.`city` FROM location AS T2 WHERE T2.`id_restaurant` IN ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 WHERE T1.`label` = 'a & w root beer' ) )",
        "repair_result": 1
    },
    {
        "idx": 136,
        "db_id": "restaurant",
        "question": "Indicate street and number of the Adelitas Taqueria Restaurants.",
        "evidence": "street refers to street_name; number refers to street_num; Adelitas Taqueria Restaurant refers to label = 'adelitas taqueria'",
        "gold": "SELECT T1.street_name, T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'adelitas taqueria'",
        "pred": "SELECT T2.`street_name`, T2.`street_num` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`label` = 'adelitas taqueria'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`street_name`, T2.`street_num` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`label` = 'adelitas taqueria'",
        "repair_result": 1
    },
    {
        "idx": 137,
        "db_id": "restaurant",
        "question": "What type of food is served at the restaurant located at 3140, Alpine Road at San Mateo County?",
        "evidence": "3140 Alpine Road at San Mateo County refers to street_num = 3140 AND street_name = 'alpine rd' AND County = 'san mateo county'; type of food refers to food_type",
        "gold": "SELECT T2.food_type FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant INNER JOIN geographic AS T3 ON T2.city = T3.city WHERE T3.County = 'san mateo county' AND T1.street_name = 'alpine rd' AND T1.street_num = 3140",
        "pred": "SELECT T2.`food_type` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`street_num` = 3140 AND T1.`street_name` = 'alpine rd' AND T3.`county` = 'san mateo county'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`food_type` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`street_num` = 3140 AND T1.`street_name` = 'alpine rd' AND T3.`county` = 'san mateo county'",
        "repair_result": 1
    },
    {
        "idx": 138,
        "db_id": "restaurant",
        "question": "In which streets of the city of San Francisco are there restaurants that serve seafood?",
        "evidence": "street refers to street_name; seafood refers to food_type = 'seafood'",
        "gold": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T2.food_type = 'seafood' AND street_name IS NOT NULL",
        "pred": "SELECT DISTINCT T2.`street_name` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`food_type` = 'seafood' AND T2.`city` = 'san francisco'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T2.`street_name` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`food_type` = 'seafood' AND T2.`city` = 'san francisco'",
        "repair_result": 0
    },
    {
        "idx": 139,
        "db_id": "restaurant",
        "question": "List all counties where there is no Bakers Square Restaurant & Pie Shop.",
        "evidence": "no Bakers Square Restaurant & Pie Shop refers to label <> 'bakers square restaurant & pie shop'",
        "gold": "SELECT DISTINCT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label != 'bakers square restaurant & pie shop'",
        "pred": "SELECT DISTINCT T1.`county` FROM geographic AS T1 WHERE T1.`county` NOT IN ( SELECT DISTINCT T3.`county` FROM geographic AS T3 INNER JOIN generalinfo AS T4 ON T3.`city` = T4.`city` WHERE T4.`label` = 'bakers square restaurant & pie shop' )",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`county` FROM geographic AS T1 WHERE T1.`county` NOT IN ( SELECT DISTINCT T3.`county` FROM geographic AS T3 INNER JOIN generalinfo AS T4 ON T3.`city` = T4.`city` WHERE T4.`label` = 'bakers square restaurant & pie shop' )",
        "repair_result": 0
    },
    {
        "idx": 140,
        "db_id": "restaurant",
        "question": "In how many counties is there a street called Appian Way?",
        "evidence": "a street called Appian Way refers to street_name = 'appian way'",
        "gold": "SELECT COUNT(DISTINCT T2.county) FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_name = 'appian way'",
        "pred": "SELECT COUNT(DISTINCT T2.`county`) FROM geographic AS T2 INNER JOIN location AS T1 ON T1.`city` = T2.`city` WHERE T1.`street_name` = 'appian way'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T2.`county`) FROM geographic AS T2 INNER JOIN location AS T1 ON T1.`city` = T2.`city` WHERE T1.`street_name` = 'appian way'",
        "repair_result": 1
    },
    {
        "idx": 141,
        "db_id": "restaurant",
        "question": "What is the rating of each restaurant reviews on Atlantic Ave?",
        "evidence": "Atlantic Ave refers to street_name = 'atlantic ave'; rating refers to review",
        "gold": "SELECT T1.review FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'atlantic ave'",
        "pred": "SELECT T2.`review` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`street_name` = 'atlantic ave'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`review` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`street_name` = 'atlantic ave'",
        "repair_result": 1
    },
    {
        "idx": 142,
        "db_id": "restaurant",
        "question": "Identify all restaurants in Contra Costa County by id.",
        "evidence": "",
        "gold": "SELECT T1.id_restaurant FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'contra costa county'",
        "pred": "SELECT DISTINCT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`county` = 'contra costa county'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`county` = 'contra costa county'",
        "repair_result": 0
    },
    {
        "idx": 143,
        "db_id": "restaurant",
        "question": "Identify all the restaurants in Yolo County by their label.",
        "evidence": "",
        "gold": "SELECT T1.id_restaurant, T1.label FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'yolo county'",
        "pred": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`county` = 'yolo county'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`county` = 'yolo county'",
        "repair_result": 0
    },
    {
        "idx": 144,
        "db_id": "restaurant",
        "question": "What restaurant on Drive Street in San Rafael doesn't serve American food?",
        "evidence": "Drive Street refers to street_name = 'drive'; San Rafael refers to city = 'san rafael'; American food refers to food_type\u00a0<> 'american'",
        "gold": "SELECT T1.label FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'drive' AND T1.food_type != 'american' AND T2.city = 'san rafael'",
        "pred": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T2.`street_name` = 'drive' AND T3.`county` = 'san mateo county' AND T1.`food_type` <> 'american'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T2.`street_name` = 'drive' AND T3.`county` = 'san mateo county' AND T1.`food_type` <> 'american' AND T1.`city` = 'san rafael'",
        "repair_result": 0
    },
    {
        "idx": 145,
        "db_id": "restaurant",
        "question": "On which streets in the city of San Francisco are there restaurants with a review of 1.7?",
        "evidence": "street refers to street_name; review of 1.7 refers to review = 1.7",
        "gold": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.review = 1.7",
        "pred": "SELECT DISTINCT T3.`street_name` FROM generalinfo AS T1 INNER JOIN location AS T3 ON T1.`id_restaurant` = T3.`id_restaurant` INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T1.`review` = 1.7 AND T2.`city` = 'san francisco'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T3.`street_name` FROM generalinfo AS T1 INNER JOIN location AS T3 ON T1.`id_restaurant` = T3.`id_restaurant` INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T1.`review` = 1.7 AND T2.`city` = 'san francisco'",
        "repair_result": 1
    },
    {
        "idx": 146,
        "db_id": "restaurant",
        "question": "Which restaurant on the street Alameda de las Pulgas in the city of Menlo Park is the worst rated?",
        "evidence": "restaurant refers to label; street Alameda de las Pulgas refers to street_name = 'avenida de las pulgas'; the worst rated refers to min(review)",
        "gold": "SELECT T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'avenida de las pulgas' AND T2.city = 'menlo park' ORDER BY review LIMIT 1",
        "pred": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`id_restaurant` = ( SELECT T4.`id_restaurant` FROM generalinfo AS T4 INNER JOIN location AS T5 ON T4.`id_restaurant` = T5.`id_restaurant` INNER JOIN geographic AS T6 ON T4.`city` = T6.`city` WHERE T5.`street_name` = 'Alameda de las Pulgas' AND T5.`city` = 'Menlo Park' ORDER BY T4.`review` ASC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T2.`street_name` = 'Alameda de las Pulgas' AND T2.`city` = 'Menlo Park' AND T1.`review` = ( SELECT MIN(T4.`review`) FROM generalinfo AS T4 INNER JOIN location AS T5 ON T4.`id_restaurant` = T5.`id_restaurant` INNER JOIN geographic AS T6 ON T4.`city` = T6.`city` WHERE T5.`street_name` = 'Alameda de las Pulgas' AND T5.`city` = 'Menlo Park' )",
        "repair_result": 1
    },
    {
        "idx": 147,
        "db_id": "restaurant",
        "question": "On what street in Tuolumne County is Good Heavens restaurant located?",
        "evidence": "street refers to street_name; Good Heavens restaurant refers to label = 'good heavens'",
        "gold": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant INNER JOIN geographic AS T3 ON T2.city = T3.city WHERE T2.label = 'good heavens' AND T3.county = 'tuolumne county'",
        "pred": "SELECT T2.`street_name` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`label` = 'Good Heavens' AND T3.`county` = 'Tuolumne County'",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`street_name` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T2.`city` = T3.`city` WHERE T1.`label` = 'Good Heavens' AND T3.`county` = 'Tuolumne County'",
        "repair_result": 0
    },
    {
        "idx": 148,
        "db_id": "restaurant",
        "question": "Indicate the street numbers where Aux Delices Vietnamese Restaurant are located.",
        "evidence": "street numbers refers to street_num; Aux Delices Vietnamese Restaurant refers to label = 'aux delices vietnamese restaurant'",
        "gold": "SELECT DISTINCT T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'aux delices vietnamese restaurant'",
        "pred": "SELECT `street_num` FROM location WHERE `id_restaurant` = ( SELECT `id_restaurant` FROM generalinfo WHERE `label` = 'aux delices vietnamese restaurant' )",
        "pred_result": 0,
        "repair_sql": "SELECT `street_num` FROM location WHERE `id_restaurant` = ( SELECT `id_restaurant` FROM generalinfo WHERE `label` = 'aux delices vietnamese restaurant' )",
        "repair_result": 0
    },
    {
        "idx": 149,
        "db_id": "restaurant",
        "question": "Identify all the restaurants in Marin County by their id.",
        "evidence": "",
        "gold": "SELECT T1.id_restaurant FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'marin county'",
        "pred": "SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`county` = 'marin county'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`county` = 'marin county'",
        "repair_result": 0
    },
    {
        "idx": 150,
        "db_id": "restaurant",
        "question": "In which regions are there no pizza restaurants?",
        "evidence": "no pizza restaurants refers to food_type = 'pizza'",
        "gold": "SELECT DISTINCT T2.region FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type = 'pizza' AND T2.region != 'unknown'",
        "pred": "SELECT T1.`region` FROM ( SELECT DISTINCT `region` FROM geographic ) AS T1 LEFT JOIN ( SELECT DISTINCT T3.`region` FROM geographic AS T2 INNER JOIN generalinfo AS T3 ON T2.`city` = T3.`city` WHERE T3.`food_type` = 'pizza' ) AS T4 ON T1.`region` = T4.`region` WHERE T4.`region` IS NULL",
        "pred_result": "no such column: T3.region",
        "repair_sql": "SELECT T1.`region` FROM ( SELECT DISTINCT `region` FROM geographic ) AS T1 LEFT JOIN ( SELECT DISTINCT T2.`region` FROM generalinfo AS T3 JOIN geographic AS T2 ON T2.`city` = T3.`city` WHERE T3.`food_type` = 'pizza' ) AS T4 ON T1.`region` = T4.`region` WHERE T4.`region` IS NULL",
        "repair_result": 0
    },
    {
        "idx": 151,
        "db_id": "restaurant",
        "question": "Calculate the average rating of reviews for restaurants in Santa Cruz County.",
        "evidence": "average rating = divide(sum(review where county = 'santa cruz county'), count(id_restaurant where county = 'santa cruz county'))",
        "gold": "SELECT AVG(T2.review) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.county = 'santa cruz county'",
        "pred": "SELECT SUM(T1.`review`) / COUNT(T2.`id_restaurant`) AS average_rating FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`county` = 'santa cruz county'",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(T1.`review`) / COUNT(T2.`id_restaurant`) AS average_rating FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`county` = 'santa cruz county'",
        "repair_result": 1
    },
    {
        "idx": 152,
        "db_id": "restaurant",
        "question": "What percentage of restaurants in Monterey County have Mexican food?",
        "evidence": "Mexican food refers to food_type = 'mexican'; percentage = divide(count(id_restaurant where food_type = 'mexican'), count(id_restaurant)) where county = 'monterey county' * 100%",
        "gold": "SELECT CAST(SUM(IIF(T2.food_type = 'mexican', 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.county = 'monterey county'",
        "pred": "SELECT (COUNT(T1.`id_restaurant`) * 100.0) / ( SELECT COUNT(T3.`id_restaurant`) FROM generalinfo AS T3 INNER JOIN geographic AS T4 ON T3.`city` = T4.`city` WHERE T4.`county` = 'monterey county' ) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T2.`county` = 'monterey county' AND T1.`food_type` = 'mexican'",
        "pred_result": 1,
        "repair_sql": "SELECT (COUNT(T1.`id_restaurant`) * 100.0) / ( SELECT COUNT(T3.`id_restaurant`) FROM generalinfo AS T3 INNER JOIN geographic AS T4 ON T3.`city` = T4.`city` WHERE T4.`county` = 'monterey county' ) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T2.`county` = 'monterey county' AND T1.`food_type` = 'mexican'",
        "repair_result": 1
    },
    {
        "idx": 153,
        "db_id": "restaurant",
        "question": "What percentage of streets named 11th Street are in Alameda County?",
        "evidence": "street named 11th Street refers to street_name = '11th st'; percentage = divide(count(street_name = '11th st' and County = 'alameda county'), count(street_name where County = 'alameda county')) * 100%",
        "gold": "SELECT CAST(SUM(IIF(T1.street_name = '11th st', 1, 0)) AS REAL) * 100 / COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.County = 'alameda county'",
        "pred": "SELECT (COUNT(T1.`street_name`) * 100.0) / ( SELECT COUNT(*) FROM location AS T2 INNER JOIN generalinfo AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` INNER JOIN geographic AS T4 ON T3.`city` = T4.`city` WHERE T4.`county` = 'alameda county' ) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T2.`city` = T3.`city` WHERE T1.`street_name` = '11th st' AND T3.`county` = 'alameda county'",
        "pred_result": 0,
        "repair_sql": "SELECT (COUNT(T1.`street_name`) * 100.0) / ( SELECT COUNT(*) FROM location AS T2 INNER JOIN generalinfo AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` INNER JOIN geographic AS T4 ON T3.`city` = T4.`city` WHERE T4.`county` = 'alameda county' ) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T2.`city` = T3.`city` WHERE T1.`street_name` = '11th st' AND T3.`county` = 'alameda county'",
        "repair_result": 0
    },
    {
        "idx": 154,
        "db_id": "restaurant",
        "question": "Please list all of the restaurants that serve European food.",
        "evidence": "restaurant refers to label; European food refers to food_type = 'european'",
        "gold": "SELECT label FROM generalinfo WHERE food_type = 'european'",
        "pred": "SELECT T1.`label` FROM generalinfo AS T1 WHERE T1.`id_restaurant` IN ( SELECT T2.`id_restaurant` FROM generalinfo AS T2 WHERE T2.`food_type` = 'european' )",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`label` FROM generalinfo AS T1 WHERE T1.`id_restaurant` IN ( SELECT T2.`id_restaurant` FROM generalinfo AS T2 WHERE T2.`food_type` = 'european' )",
        "repair_result": 1
    },
    {
        "idx": 155,
        "db_id": "restaurant",
        "question": "What cities are located in Northern California?",
        "evidence": "Northern California refers to region = 'northern california'",
        "gold": "SELECT city FROM geographic WHERE region = 'northern california'",
        "pred": "SELECT DISTINCT T1.`city` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` WHERE T1.`region` = 'northern california'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`city` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` WHERE T1.`region` = 'northern california'",
        "repair_result": 1
    },
    {
        "idx": 156,
        "db_id": "restaurant",
        "question": "What does the one and only 24-hour diner's name?",
        "evidence": "24-hour diner refers to food_type = '24 hour diner'; diner name refers to label",
        "gold": "SELECT label FROM generalinfo WHERE food_type = '24 hour diner'",
        "pred": "SELECT T1.`label` FROM generalinfo AS T1 WHERE T1.`food_type` = '24 hour diner'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`label` FROM generalinfo AS T1 WHERE T1.`food_type` = '24 hour diner'",
        "repair_result": 1
    },
    {
        "idx": 157,
        "db_id": "restaurant",
        "question": "Please list any five cities that have an unidentified county and region.",
        "evidence": "unidentified county and region refers to county = 'unknown' AND region = 'unknown'",
        "gold": "SELECT city FROM geographic WHERE county = 'unknown' AND region = 'unknown' LIMIT 5",
        "pred": "SELECT DISTINCT T1.`city` FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T2.`county` = 'unknown' AND T2.`region` = 'unknown' LIMIT 5",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`city` FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T2.`county` = 'unknown' AND T2.`region` = 'unknown' LIMIT 5",
        "repair_result": 0
    },
    {
        "idx": 158,
        "db_id": "restaurant",
        "question": "What is the county and region of Davis City?",
        "evidence": "",
        "gold": "SELECT county, region FROM geographic WHERE city = 'Davis'",
        "pred": "SELECT `region` FROM geographic WHERE `city` = 'Davis City'",
        "pred_result": 1,
        "repair_sql": "SELECT `county`, `region` FROM geographic WHERE `city` = 'Davis City'",
        "repair_result": 1
    },
    {
        "idx": 159,
        "db_id": "restaurant",
        "question": "Please list all of the street names in Clayton City.",
        "evidence": "",
        "gold": "SELECT street_name FROM location WHERE city = 'Clayton'",
        "pred": "SELECT DISTINCT `street_name` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`city` = 'Clayton City'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`street_name` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`city` = 'Clayton City'",
        "repair_result": 1
    },
    {
        "idx": 160,
        "db_id": "restaurant",
        "question": "What are the most popular restaurants in San Francisco among diners?",
        "evidence": "the most popular refers to max(review); restaurant refers to label; San Francisco refers to city = 'San Francisco'",
        "gold": "SELECT id_restaurant, label FROM generalinfo WHERE city = 'San Francisco' AND review = ( SELECT MAX(review) FROM generalinfo WHERE city = 'San Francisco' )",
        "pred": "SELECT T2.`label` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` INNER JOIN location AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` WHERE T1.`city` = 'San Francisco' AND T3.`review` = ( SELECT MAX(T5.`review`) FROM geographic AS T4 INNER JOIN generalinfo AS T5 ON T4.`city` = T5.`city` INNER JOIN location AS T6 ON T5.`id_restaurant` = T6.`id_restaurant` WHERE T4.`city` = 'San Francisco' )",
        "pred_result": "no such column: T3.review",
        "repair_sql": "SELECT T2.`label` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` INNER JOIN location AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` WHERE T1.`city` = 'San Francisco' AND T2.`review` = ( SELECT MAX(T5.`review`) FROM geographic AS T4 INNER JOIN generalinfo AS T5 ON T4.`city` = T5.`city` INNER JOIN location AS T6 ON T5.`id_restaurant` = T6.`id_restaurant` WHERE T4.`city` = 'San Francisco' )",
        "repair_result": 1
    },
    {
        "idx": 161,
        "db_id": "restaurant",
        "question": "How many American food restaurants are unpopular in Carmel?",
        "evidence": "American Food Restaurant refers to food_type = 'ameraican'; unpopular refers to min(review); Carmel refers to city = 'Carmel'",
        "gold": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE food_type = 'american' AND city = 'carmel' AND review = ( SELECT MIN(review) FROM generalinfo WHERE food_type = 'american' AND city = 'carmel' )",
        "pred": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T1.`food_type` = 'american' AND T2.`city` = 'Carmel' AND T1.`review` = ( SELECT MIN(T3.`review`) FROM generalinfo AS T3 INNER JOIN geographic AS T4 ON T3.`city` = T4.`city` WHERE T3.`food_type` = 'american' AND T4.`city` = 'Carmel' )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T1.`food_type` = 'american' AND T2.`city` = 'Carmel' AND T1.`review` = ( SELECT MIN(T3.`review`) FROM generalinfo AS T3 INNER JOIN geographic AS T4 ON T3.`city` = T4.`city` WHERE T3.`food_type` = 'american' AND T4.`city` = 'Carmel' )",
        "repair_result": 0
    },
    {
        "idx": 162,
        "db_id": "restaurant",
        "question": "What is the percentage of restaurants that serve American food in Dublin city?",
        "evidence": "American food refers to food_type = 'american food'; percentage = divide(count(id_restaurant), count(id_restaurant where food_type = 'american food')) where city = 'dublin' * 100%",
        "gold": "SELECT CAST(SUM(IIF(food_type = 'american food', 1, 0)) AS REAL) * 100 / COUNT(id_restaurant) FROM generalinfo WHERE city = 'dublin'",
        "pred": "SELECT (COUNT(T1.`id_restaurant`) * 100.0) / ( SELECT COUNT(T2.`id_restaurant`) FROM generalinfo AS T2 INNER JOIN location AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` INNER JOIN geographic AS T4 ON T2.`city` = T4.`city` WHERE T4.`city` = 'dublin' ) FROM generalinfo AS T1 INNER JOIN location AS T5 ON T1.`id_restaurant` = T5.`id_restaurant` INNER JOIN geographic AS T6 ON T1.`city` = T6.`city` WHERE T1.`food_type` = 'american food' AND T6.`city` = 'dublin'",
        "pred_result": 1,
        "repair_sql": "SELECT (COUNT(T1.`id_restaurant`) * 100.0) / ( SELECT COUNT(T2.`id_restaurant`) FROM generalinfo AS T2 INNER JOIN location AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` INNER JOIN geographic AS T4 ON T2.`city` = T4.`city` WHERE T4.`city` = 'dublin' ) FROM generalinfo AS T1 INNER JOIN location AS T5 ON T1.`id_restaurant` = T5.`id_restaurant` INNER JOIN geographic AS T6 ON T1.`city` = T6.`city` WHERE T1.`food_type` = 'american food' AND T6.`city` = 'dublin'",
        "repair_result": 1
    },
    {
        "idx": 163,
        "db_id": "restaurant",
        "question": "What is the full address of Albert's Caf\u00e9?",
        "evidence": "full address = street_num, street_name, city; Albert's Caf\u00e9 refers to label = 'Albert's Caf\u00e9'",
        "gold": "SELECT T2.street_num, T2.street_name, T1.city FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.label = 'Albert''s Caf\u00e9'",
        "pred": "SELECT `street_num`, `street_name`, T1.`city` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T2.`label` = 'Albert\\'s Caf\u00e9'",
        "pred_result": "near \"s\": syntax error",
        "repair_sql": "SELECT T1.`street_num`, T1.`street_name`, T1.`city` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T2.`label` = 'Albert''s Caf\u00e9'",
        "repair_result": 1
    },
    {
        "idx": 164,
        "db_id": "restaurant",
        "question": "What are the restaurants that are located at \"19th St. Oakland\"?",
        "evidence": "restaurant refers to label; \"19th St. Oakland\" refers to street_name = '19th St' AND city = 'Oakland'",
        "gold": "SELECT T1.id_restaurant FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'Oakland' AND T2.street_name = '19th St'",
        "pred": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T2.`street_name` = '19th St' AND T2.`city` = 'Oakland'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T2.`street_name` = '19th St' AND T2.`city` = 'Oakland'",
        "repair_result": 1
    },
    {
        "idx": 165,
        "db_id": "restaurant",
        "question": "What kind of restaurants can be found at \"106 E 25th Ave\"?",
        "evidence": "kind of restaurant refers to food_type; \"106 E 25th Ave\" refers to street_name = 'e 25th ave'",
        "gold": "SELECT T1.food_type FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_num = 106 AND T2.street_name = 'e 25th ave'",
        "pred": "SELECT DISTINCT T1.`food_type` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T2.`street_num` = '106' AND T2.`street_name` = 'e 25th ave'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`food_type` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T2.`street_num` = '106' AND T2.`street_name` = 'e 25th ave'",
        "repair_result": 1
    },
    {
        "idx": 166,
        "db_id": "restaurant",
        "question": "Please name any three restaurants that have an unidentified region.",
        "evidence": "restaurant name refers to label; unidentified region refers to region = 'unknown'",
        "gold": "SELECT T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant INNER JOIN geographic AS T3 ON T2.city = T3.city WHERE T3.region = 'unknown' LIMIT 3",
        "pred": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T2.`region` = 'unknown' LIMIT 3",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T2.`region` = 'unknown' LIMIT 3",
        "repair_result": 1
    },
    {
        "idx": 167,
        "db_id": "restaurant",
        "question": "What is the name of the Chinese restaurant that can be found at 104 San Tomas Aquino Road, Campbell?",
        "evidence": "restaurant name refers to label; Chinese restaurant refers to food_type = 'chinese'; 104 San Tomas Aquino Road Campbell refers to street_num = 104 AND street_name = 'san tomas aquino road' AND city = 'campbell'",
        "gold": "SELECT T1.label FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_num = 104 AND T1.city = 'campbell' AND T2.street_name = 'san tomas aquino road'",
        "pred": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`food_type` = 'chinese' AND T2.`street_num` = 104 AND T2.`street_name` = 'san tomas aquino road' AND T2.`city` = 'campbell'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`food_type` = 'chinese' AND T2.`street_num` = 104 AND T2.`street_name` = 'san tomas aquino road' AND T2.`city` = 'campbell' AND T2.`city` = 'campbell'",
        "repair_result": 1
    },
    {
        "idx": 168,
        "db_id": "restaurant",
        "question": "How many Thai restaurants can be found in San Pablo Ave, Albany?",
        "evidence": "Thai restaurant refers to food_type = 'thai'; San Pablo Ave Albany refers to street_name = 'san pablo ave' AND T1.city = 'albany'",
        "gold": "SELECT COUNT(T1.id_restaurant) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.food_type = 'thai' AND T1.city = 'albany' AND T2.street_name = 'san pablo ave'",
        "pred": "SELECT COUNT(*) FROM ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = 'thai' AND T2.`street_name` = 'san pablo ave' AND T3.`county` = 'alameda county' ) AS T",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = 'thai' AND T2.`street_name` = 'san pablo ave' AND T3.`county` = 'alameda county' ) AS T",
        "repair_result": 1
    },
    {
        "idx": 169,
        "db_id": "restaurant",
        "question": "What is the county and region of Plearn-Thai Cuisine restaurant?",
        "evidence": "Plearn-Thai Cuisine restaurant refers to label = 'plearn-thai cuisine'",
        "gold": "SELECT T1.county, T1.region, T2.label FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.label = 'plearn-thai cuisine'",
        "pred": "SELECT T1.`county`, T1.`region` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` WHERE T2.`id_restaurant` = ( SELECT `id_restaurant` FROM generalinfo WHERE `label` = 'plearn-thai cuisine' )",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`county`, T1.`region` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` WHERE T2.`id_restaurant` = ( SELECT `id_restaurant` FROM generalinfo WHERE `label` = 'plearn-thai cuisine' )",
        "repair_result": 0
    },
    {
        "idx": 170,
        "db_id": "restaurant",
        "question": "What is the name of the restaurant that is located in El Dorado County, Lake Tahoe region?",
        "evidence": "restaurant name refers to label",
        "gold": "SELECT T2.label FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'lake tahoe' AND T1.county = 'el dorado county'",
        "pred": "SELECT T2.`label` FROM generalinfo AS T2 INNER JOIN location AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` INNER JOIN geographic AS T1 ON T2.`city` = T1.`city` WHERE T1.`county` = 'el dorado county' AND T1.`region` = 'lake tahoe region' AND T3.`street_name` = 'el camino real'",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`label` FROM generalinfo AS T2 INNER JOIN location AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` INNER JOIN geographic AS T1 ON T2.`city` = T1.`city` WHERE T1.`county` = 'el dorado county' AND T1.`region` = 'lake tahoe region' AND T3.`street_name` = 'el camino real' AND T1.`city` = T3.`city`",
        "repair_result": 0
    },
    {
        "idx": 171,
        "db_id": "restaurant",
        "question": "Which county and region does the street E. El Camino Real belong to?",
        "evidence": "street E. El Camino Real refers to street_name = 'E. El Camino Real'",
        "gold": "SELECT DISTINCT T2.county, T2.region FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_name = 'E. El Camino Real'",
        "pred": "SELECT T2.`county`, T2.`region` FROM geographic AS T2 INNER JOIN generalinfo AS T3 ON T2.`city` = T3.`city` INNER JOIN location AS T1 ON T3.`id_restaurant` = T1.`id_restaurant` WHERE T1.`street_name` = 'E. El Camino Real'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`county`, T2.`region` FROM geographic AS T2 INNER JOIN location AS T1 ON T2.`city` = T1.`city` WHERE T1.`street_name` = 'E. El Camino Real'",
        "repair_result": 1
    },
    {
        "idx": 172,
        "db_id": "restaurant",
        "question": "What is the name of the least popular Indian restaurant on Shattuck Avenue in Berkeley?",
        "evidence": "restaurant name refers to label; the least popular refers to min(review); Indian restaurant refers to food_type = 'Indian restaurant'; Shattuck Avenue in Berkeley refers to street_name = 'shattuck ave' and city = 'berkeley'",
        "gold": "SELECT T1.id_restaurant FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'berkeley' AND T2.street_name = 'shattuck ave' AND T1.food_type = 'Indian restaurant' ORDER BY T1.review LIMIT 1",
        "pred": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`food_type` = 'Indian restaurant' AND T2.`street_name` = 'shattuck ave' AND T2.`city` = 'berkeley' ORDER BY T1.`review` ASC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`food_type` = 'Indian restaurant' AND T2.`street_name` = 'shattuck ave' AND T2.`city` = 'berkeley' AND T1.`review` = (SELECT MIN(`review`) FROM generalinfo WHERE `food_type` = 'Indian restaurant')",
        "repair_result": 1
    },
    {
        "idx": 173,
        "db_id": "restaurant",
        "question": "What is the percentage of restaurants in the Bay Area region that scored over 4 for the review rating?",
        "evidence": "scored over 4 refers to review > 4; percentage = divide(count(id_restaurant where region = 'bay area' and review > 4), count(id_restaurant where region = 'Bay Area')) * 100%",
        "gold": "SELECT CAST(SUM(IIF(T2.review > 4, 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 RIGHT JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'bay area'",
        "pred": "SELECT (COUNT(T1.`id_restaurant`) * 100.0) / ( SELECT COUNT(T3.`id_restaurant`) FROM generalinfo AS T3 INNER JOIN geographic AS T4 ON T3.`city` = T4.`city` WHERE T4.`region` = 'bay area' ) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T2.`region` = 'bay area' AND T1.`review` > 4",
        "pred_result": 1,
        "repair_sql": "SELECT (COUNT(T1.`id_restaurant`) * 100.0) / ( SELECT COUNT(T3.`id_restaurant`) FROM generalinfo AS T3 INNER JOIN geographic AS T4 ON T3.`city` = T4.`city` WHERE T4.`region` = 'bay area' ) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T2.`region` = 'bay area' AND T1.`review` > 4",
        "repair_result": 1
    },
    {
        "idx": 174,
        "db_id": "restaurant",
        "question": "List every city in San Mateo County.",
        "evidence": "",
        "gold": "SELECT city FROM geographic WHERE county = 'san mateo county'",
        "pred": "SELECT DISTINCT T1.`city` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` WHERE T1.`county` = 'san mateo county'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`city` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` WHERE T1.`county` = 'san mateo county'",
        "repair_result": 1
    },
    {
        "idx": 175,
        "db_id": "restaurant",
        "question": "How many restaurants have more than 4 star reviews?",
        "evidence": "more than 4 star review refers to review > 4",
        "gold": "SELECT COUNT(id_restaurant) AS cnt FROM generalinfo WHERE review > 4",
        "pred": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`review` > 4",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`review` > 4",
        "repair_result": 0
    },
    {
        "idx": 176,
        "db_id": "restaurant",
        "question": "Which street has the most restaurants?",
        "evidence": "street refers to street_name; the most restaurants refers to max(count(street_name))",
        "gold": "SELECT street_name FROM location GROUP BY street_name ORDER BY COUNT(street_name) DESC LIMIT 1",
        "pred": "SELECT T1.`street_name` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` GROUP BY T1.`street_name` ORDER BY COUNT(T2.`id_restaurant`) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`street_name`, COUNT(T2.`id_restaurant`) AS restaurant_count FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`street_name` IS NOT NULL GROUP BY T1.`street_name` ORDER BY restaurant_count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 177,
        "db_id": "restaurant",
        "question": "Which chicken restaurant has the highest review?",
        "evidence": "chicken restaurant refers to food_type = 'chicken'; the highest review refers to max(review)",
        "gold": "SELECT label FROM generalinfo WHERE food_type = 'chicken' ORDER BY review DESC LIMIT 1",
        "pred": "SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`food_type` = 'chicken' ORDER BY T1.`review` DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`food_type` = 'chicken' ORDER BY T1.`review` DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 178,
        "db_id": "restaurant",
        "question": "Which county is El Cerrito from?",
        "evidence": "El Cerrito refers to city = 'el cerrito'",
        "gold": "SELECT county FROM geographic WHERE city = 'el cerrito'",
        "pred": "SELECT T1.`county` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` INNER JOIN location AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` WHERE T3.`street_name` = 'el camino real'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`county` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` INNER JOIN location AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` WHERE T3.`street_name` = 'el camino real'",
        "repair_result": 0
    },
    {
        "idx": 179,
        "db_id": "restaurant",
        "question": "How many restaurants are on Irving Street?",
        "evidence": "Irving Street refers to street_name = 'irving'",
        "gold": "SELECT COUNT(id_restaurant) FROM location WHERE street_name = 'irving'",
        "pred": "SELECT COUNT(*) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`street_name` = 'irving'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`street_name` = 'irving'",
        "repair_result": 1
    },
    {
        "idx": 180,
        "db_id": "restaurant",
        "question": "Provide a list of restaurants from Marin county.",
        "evidence": "restaurant refers to label",
        "gold": "SELECT T1.label FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'marin county'",
        "pred": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`county` = 'marin county'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`county` = 'marin county'",
        "repair_result": 0
    },
    {
        "idx": 181,
        "db_id": "restaurant",
        "question": "What is the address of the Peking Duck restaurant?",
        "evidence": "address refers to street_num, street_name; Peking Duck restaurant refers to label = 'peking duck restaurant'",
        "gold": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.label = 'peking duck restaurant'",
        "pred": "SELECT `street_num`, `street_name` FROM location WHERE `id_restaurant` = ( SELECT `id_restaurant` FROM generalinfo WHERE `label` = 'peking duck restaurant' )",
        "pred_result": 0,
        "repair_sql": "SELECT `street_num`, `street_name` FROM location WHERE `id_restaurant` = ( SELECT `id_restaurant` FROM generalinfo WHERE `label` = 'peking duck restaurant' )",
        "repair_result": 0
    },
    {
        "idx": 182,
        "db_id": "restaurant",
        "question": "List all the streets with more than 10 restaurants in Alameda county.",
        "evidence": "street refers to street_name; more than 10 restaurants refers to count(id_restaurant) > 10",
        "gold": "SELECT T2.street_name FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city WHERE T1.county = 'alameda county' GROUP BY T2.street_name HAVING COUNT(T2.id_restaurant) > 10",
        "pred": "SELECT T2.`street_name` FROM location AS T2 INNER JOIN generalinfo AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` INNER JOIN geographic AS T4 ON T3.`city` = T4.`city` WHERE T4.`county` = 'alameda county' GROUP BY T2.`street_name` HAVING COUNT(T2.`id_restaurant`) > 10",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`street_name` FROM location AS T2 INNER JOIN generalinfo AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` INNER JOIN geographic AS T4 ON T3.`city` = T4.`city` WHERE T4.`county` = 'alameda county' AND T2.`street_name` IS NOT NULL GROUP BY T2.`street_name` HAVING COUNT(T2.`id_restaurant`) > 10",
        "repair_result": 1
    },
    {
        "idx": 183,
        "db_id": "restaurant",
        "question": "What are the regions with Greek restaurants?",
        "evidence": "Greek restaurant refers to food_type = 'greek'",
        "gold": "SELECT DISTINCT T1.region FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'greek'",
        "pred": "SELECT DISTINCT T3.`region` FROM geographic AS T3 WHERE T3.`city` IN ( SELECT T2.`city` FROM location AS T2 WHERE T2.`id_restaurant` IN ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 WHERE T1.`food_type` = 'greek' ) )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T3.`region` FROM geographic AS T3 WHERE T3.`city` IN ( SELECT T2.`city` FROM location AS T2 WHERE T2.`id_restaurant` IN ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 WHERE T1.`food_type` = 'greek' ) )",
        "repair_result": 1
    },
    {
        "idx": 184,
        "db_id": "restaurant",
        "question": "List all of the restaurant addresses from an unknown region.",
        "evidence": "restaurant address refers to street_num, street_name; unknown region refers to region = 'unknown'",
        "gold": "SELECT T2.street_name FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city WHERE T1.region = 'unknown'",
        "pred": "SELECT T3.`street_num`, T3.`street_name` FROM generalinfo AS T1 INNER JOIN location AS T3 ON T1.`id_restaurant` = T3.`id_restaurant` INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T2.`region` = 'unknown'",
        "pred_result": 0,
        "repair_sql": "SELECT T3.`street_num`, T3.`street_name` FROM generalinfo AS T1 INNER JOIN location AS T3 ON T1.`id_restaurant` = T3.`id_restaurant` INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T2.`region` = 'unknown' AND T3.`street_name` IS NOT NULL",
        "repair_result": 0
    },
    {
        "idx": 185,
        "db_id": "restaurant",
        "question": "What is the review of the restaurant at 8440 Murray Ave?",
        "evidence": "8440 Murray Ave refers to street_num = 8440 and street_name = 'murray ave'",
        "gold": "SELECT T2.review FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'murray ave' AND T1.street_num = 8440",
        "pred": "SELECT T2.`review` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`street_num` = 8440 AND T1.`street_name` = 'murray ave'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`review` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`street_num` = 8440 AND T1.`street_name` = 'murray ave'",
        "repair_result": 1
    },
    {
        "idx": 186,
        "db_id": "restaurant",
        "question": "What type of restaurant is most common in Monterey county?",
        "evidence": "type refers to food_type; most common refers to max(count(food_type))",
        "gold": "SELECT T2.food_type FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.county = 'Monterey' GROUP BY T2.food_type ORDER BY COUNT(T2.food_type) DESC LIMIT 1",
        "pred": "SELECT T1.`food_type` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`county` = 'monterey' GROUP BY T1.`food_type` ORDER BY COUNT(T1.`food_type`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`food_type`, COUNT(T1.`food_type`) AS type_count FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`county` = 'monterey' GROUP BY T1.`food_type` ORDER BY type_count DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 187,
        "db_id": "restaurant",
        "question": "Which street in San Francisco has the most burger restaurants?",
        "evidence": "street refers to street_name; San Francisco refers to city = 'san francisco'; burger restaurant refers to food_type = 'burgers'; the most burger restaurants refers to max(count(street_name where food_type = 'burgers' and city = 'san francisco'))",
        "gold": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.food_type = 'burgers' GROUP BY T2.street_name ORDER BY COUNT(T2.id_restaurant) DESC LIMIT 1",
        "pred": "SELECT T3.`street_name` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = 'burgers' AND T3.`city` = 'san francisco' GROUP BY T3.`street_name` ORDER BY COUNT(T1.`id_restaurant`) DESC LIMIT 1",
        "pred_result": "no such column: T3.street_name",
        "repair_sql": "SELECT T3.`street_name`, COUNT(T1.`id_restaurant`) AS num_burger_restaurants FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T2.`city` = T3.`city` WHERE T1.`food_type` = 'burgers' AND T3.`city` = 'san francisco' GROUP BY T3.`street_name` ORDER BY num_burger_restaurants DESC LIMIT 1",
        "repair_result": "no such column: T3.street_name"
    },
    {
        "idx": 188,
        "db_id": "restaurant",
        "question": "What is the region of 1149 El Camino Real?",
        "evidence": "1149 El Camino Real refers to street_num = 1149 and street_name = 'el camino real'",
        "gold": "SELECT T2.region FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_num = 1149 AND T1.street_name = 'el camino real'",
        "pred": "SELECT T1.`region` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` INNER JOIN location AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` WHERE T3.`street_num` = 1149 AND T3.`street_name` = 'el camino real'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`region` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` INNER JOIN location AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` WHERE T3.`street_num` = 1149 AND T3.`street_name` = 'el camino real'",
        "repair_result": 1
    },
    {
        "idx": 189,
        "db_id": "restaurant",
        "question": "What is the county of the Sankee restaurant?",
        "evidence": "Sankee restaurant refers to label = 'sankee'",
        "gold": "SELECT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'sankee'",
        "pred": "SELECT T2.`county` FROM geographic AS T2 INNER JOIN generalinfo AS T1 ON T1.`city` = T2.`city` WHERE T1.`label` = 'sankee'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`county` FROM geographic AS T2 INNER JOIN generalinfo AS T1 ON T1.`city` = T2.`city` WHERE T1.`label` = 'sankee'",
        "repair_result": 1
    },
    {
        "idx": 190,
        "db_id": "restaurant",
        "question": "How many streets with restaurants are there in the Northern California region?",
        "evidence": "",
        "gold": "SELECT COUNT(T1.city) FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city WHERE T1.region = 'northern california'",
        "pred": "SELECT COUNT(DISTINCT T3.`street_name`) FROM generalinfo AS T1 INNER JOIN location AS T3 ON T1.`id_restaurant` = T3.`id_restaurant` INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T2.`region` = 'northern california'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT T3.`street_name`) FROM generalinfo AS T1 INNER JOIN location AS T3 ON T1.`id_restaurant` = T3.`id_restaurant` INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T2.`region` = 'northern california'",
        "repair_result": 0
    },
    {
        "idx": 191,
        "db_id": "restaurant",
        "question": "List all of the restaurants on Park St.",
        "evidence": "restaurant refers to label; Park St refers to street_name = 'park st'",
        "gold": "SELECT T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'park st'",
        "pred": "SELECT T2.`label` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`street_name` = 'park st'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`label` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`street_name` = 'park st'",
        "repair_result": 1
    },
    {
        "idx": 192,
        "db_id": "restaurant",
        "question": "What percentage of restaurants are from the Bay Area?",
        "evidence": "Bay Area refers to region = 'bay area'; percentage = divide(count(id_restaurant where region = 'bay area'), count(id_restaurant)) * 100%",
        "gold": "SELECT CAST(SUM(IIF(T1.region = 'bay area', 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city",
        "pred": "SELECT (COUNT(T1.`id_restaurant`) * 100.0) / ( SELECT COUNT(`id_restaurant`) FROM generalinfo ) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T2.`region` = 'bay area'",
        "pred_result": 0,
        "repair_sql": "SELECT (COUNT(T1.`id_restaurant`) * 100.0) / ( SELECT COUNT(`id_restaurant`) FROM generalinfo ) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T2.`region` = 'bay area'",
        "repair_result": 0
    },
    {
        "idx": 193,
        "db_id": "restaurant",
        "question": "List all the average reviews of Chinese restaurants for each county from highest to lowest.",
        "evidence": "Chinese restaurant refers to food_type = 'chinese'; average review refers to divide(sum(review), count(review))",
        "gold": "SELECT AVG(T1.review) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type = 'chinese' GROUP BY T1.id_restaurant ORDER BY AVG(T1.review) DESC",
        "pred": "SELECT T1.`county`, AVG(T2.`review`) AS avg_review FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` WHERE T2.`food_type` = 'chinese' GROUP BY T1.`county` ORDER BY avg_review DESC",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`county`, AVG(T2.`review`) AS avg_review FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` WHERE T2.`food_type` = 'chinese' GROUP BY T1.`county` ORDER BY avg_review DESC",
        "repair_result": 0
    },
    {
        "idx": 194,
        "db_id": "restaurant",
        "question": "List street names in San Francisco city.",
        "evidence": "",
        "gold": "SELECT street_name FROM location WHERE city = 'San Francisco'",
        "pred": "SELECT DISTINCT T3.`street_name` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` INNER JOIN location AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` WHERE T1.`city` = 'san francisco'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T3.`street_name` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` INNER JOIN location AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` WHERE T1.`city` = 'san francisco'",
        "repair_result": 0
    },
    {
        "idx": 195,
        "db_id": "restaurant",
        "question": "List restaurant ids located in Danville city.",
        "evidence": "",
        "gold": "SELECT id_restaurant FROM location WHERE city = 'Danville'",
        "pred": "SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T2.`city` = T3.`city` WHERE T3.`city` = 'Danville'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T2.`city` = T3.`city` WHERE T3.`city` = 'Danville' GROUP BY T1.`id_restaurant`",
        "repair_result": 1
    },
    {
        "idx": 196,
        "db_id": "restaurant",
        "question": "How many cities are located in the Bay Area?",
        "evidence": "the Bay Area refers to region = 'bay area'",
        "gold": "SELECT COUNT(city) FROM geographic WHERE region = 'bay area'",
        "pred": "SELECT COUNT(DISTINCT T1.`city`) FROM geographic AS T1 WHERE T1.`region` = 'bay area'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`city`) FROM geographic AS T1 WHERE T1.`region` = 'bay area'",
        "repair_result": 1
    },
    {
        "idx": 197,
        "db_id": "restaurant",
        "question": "How many labels of the restaurant have an unknown country?",
        "evidence": "unknown county refers to county = 'unknown'",
        "gold": "SELECT COUNT(T1.label) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'unknown'",
        "pred": "SELECT COUNT(DISTINCT T1.`label`) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T2.`county` = 'unknown'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`label`) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T2.`county` = 'unknown'",
        "repair_result": 0
    },
    {
        "idx": 198,
        "db_id": "restaurant",
        "question": "Please indicate the street names of restaurants with food type is American.",
        "evidence": "",
        "gold": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'American'",
        "pred": "SELECT T2.`street_name` FROM location AS T2 INNER JOIN generalinfo AS T1 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`food_type` = 'american'",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`street_name` FROM location AS T2 INNER JOIN generalinfo AS T1 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`food_type` = 'american'",
        "repair_result": 0
    },
    {
        "idx": 199,
        "db_id": "restaurant",
        "question": "Please indicate which labels have the city located in Santa Cruz.",
        "evidence": "Santa Cruz refers to county = 'Santa Cruz county'",
        "gold": "SELECT T1.label FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'Santa Cruz county'",
        "pred": "SELECT DISTINCT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`county` = 'santa cruz county'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`county` = 'santa cruz county'",
        "repair_result": 0
    },
    {
        "idx": 200,
        "db_id": "restaurant",
        "question": "Give the review of the restaurant at 430, Broadway.",
        "evidence": "430 Broadway refers to street_num = 430 and street_name = 'Broadway'",
        "gold": "SELECT T1.review FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'Broadway' AND T2.street_num = 430",
        "pred": "SELECT T2.`review` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`street_num` = 430 AND T1.`street_name` = 'Broadway'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`review` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`street_num` = 430 AND T1.`street_name` = 'Broadway' AND T1.`city` = T2.`city`",
        "repair_result": 1
    },
    {
        "idx": 201,
        "db_id": "restaurant",
        "question": "Indicate the address of the restaurant with the most popular reviews.",
        "evidence": "address refers to street_num, street_name; the most popular review refers to max(review)",
        "gold": "SELECT T2.street_num, T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant ORDER BY T1.review DESC LIMIT 1",
        "pred": "SELECT T2.`street_num`, T2.`street_name` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`id_restaurant` = ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`review` = ( SELECT MAX(`review`) FROM generalinfo ) )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`street_num`, T2.`street_name` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`id_restaurant` = ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`review` = ( SELECT MAX(`review`) FROM generalinfo ) )",
        "repair_result": 1
    },
    {
        "idx": 202,
        "db_id": "restaurant",
        "question": "Which country has the most restaurants with Italian food?",
        "evidence": "Italian food refers to food_type = 'Italian'",
        "gold": "SELECT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type = 'Italian' GROUP BY T2.county ORDER BY COUNT(T1.id_restaurant) DESC LIMIT 1",
        "pred": "SELECT T1.`county` FROM ( SELECT G.`county`, COUNT(*) AS Italian_Restaurants_Count FROM generalinfo AS GI INNER JOIN location AS L ON GI.`id_restaurant` = L.`id_restaurant` INNER JOIN geographic AS G ON GI.`city` = G.`city` WHERE GI.`food_type` = 'Italian' GROUP BY G.`county` ) AS T1 ORDER BY T1.`Italian_Restaurants_Count` DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT G.`county` FROM ( SELECT G.`county`, COUNT(*) AS Italian_Restaurants_Count FROM generalinfo AS GI INNER JOIN location AS L ON GI.`id_restaurant` = L.`id_restaurant` INNER JOIN geographic AS G ON GI.`city` = G.`city` WHERE GI.`food_type` = 'Italian' GROUP BY G.`county` ) AS T1 ORDER BY Italian_Restaurants_Count DESC LIMIT 1",
        "repair_result": "no such column: G.county"
    },
    {
        "idx": 203,
        "db_id": "restaurant",
        "question": "Find the percentage of restaurant in Napa Valley.",
        "evidence": "Napa Valley refers to region = 'Napa Valley'; percentage = divide(count(id_restaurant where region = 'Napa Valley'), count(id_restaurant)) * 100%",
        "gold": "SELECT CAST(SUM(IIF(region = 'Napa Valley', 1, 0)) AS REAL) * 100 / COUNT(region) FROM geographic",
        "pred": "SELECT (COUNT(T1.`id_restaurant`) * 100.0) / (SELECT COUNT(`id_restaurant`) FROM generalinfo) AS percentage FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T2.`region` = 'Napa Valley'",
        "pred_result": 1,
        "repair_sql": "SELECT (COUNT(T1.`id_restaurant`) * 100.0) / (SELECT COUNT(`id_restaurant`) FROM generalinfo) AS percentage FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T2.`region` = 'Napa Valley'",
        "repair_result": 1
    },
    {
        "idx": 204,
        "db_id": "restaurant",
        "question": "How many of the cities are in a Bay Area?",
        "evidence": "Bay Area refers to region = 'bay area'",
        "gold": "SELECT COUNT(city) FROM geographic WHERE region = 'bay area'",
        "pred": "SELECT COUNT(DISTINCT T1.`city`) FROM geographic AS T1 WHERE T1.`region` = 'bay area'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`city`) FROM geographic AS T1 WHERE T1.`region` = 'bay area'",
        "repair_result": 1
    },
    {
        "idx": 205,
        "db_id": "restaurant",
        "question": "List down the cities with unknown country.",
        "evidence": "unknown county refers to county = 'unknown'",
        "gold": "SELECT city FROM geographic WHERE county = 'unknown'",
        "pred": "SELECT DISTINCT T1.`city` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` INNER JOIN location AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` WHERE T1.`county` = 'unknown'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`city` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` INNER JOIN location AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` WHERE T1.`county` = 'unknown'",
        "repair_result": 0
    },
    {
        "idx": 206,
        "db_id": "restaurant",
        "question": "What is the city located in Bay Area of Santa Clara?",
        "evidence": "Bay Area refers to region = 'bay area'; Santa Clara refers to county = 'santa clara county'",
        "gold": "SELECT city FROM geographic WHERE region = 'bay area' AND county = 'santa clara county'",
        "pred": "SELECT T1.`city` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` WHERE T1.`region` = 'bay area' AND T1.`county` = 'santa clara county'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`city` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` WHERE T1.`region` = 'bay area' AND T1.`county` = 'santa clara county'",
        "repair_result": 1
    },
    {
        "idx": 207,
        "db_id": "restaurant",
        "question": "List down the restaurant ID of restaurants located in Sunnyvale.",
        "evidence": "Sunnyvale refers to city = 'sunnyvale'",
        "gold": "SELECT id_restaurant FROM location WHERE city = 'sunnyvale'",
        "pred": "SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`city` = 'sunnyvale'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`city` = 'sunnyvale'",
        "repair_result": 0
    },
    {
        "idx": 208,
        "db_id": "restaurant",
        "question": "Among the restaurants on street number below 1000, how many of them are in Railroad St.?",
        "evidence": "street number below 1000 refers to street_num < 1000; Railroad St. refers to street_name = 'railroad'",
        "gold": "SELECT COUNT(city) FROM location WHERE street_name = 'railroad' AND street_num < 1000",
        "pred": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T2.`street_num` < 1000 AND T2.`street_name` = 'railroad'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T2.`street_num` < 1000 AND T2.`street_name` = 'railroad'",
        "repair_result": 1
    },
    {
        "idx": 209,
        "db_id": "restaurant",
        "question": "What is the name of the 24 hour diner at San Francisco?",
        "evidence": "name refers to label; 24 hour diner refers to food_type = '24 hour diner'; San Francisco refers to city = 'san francisco'",
        "gold": "SELECT label FROM generalinfo WHERE food_type = '24 hour diner' AND city = 'san francisco'",
        "pred": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = '24 hour diner' AND T3.`city` = 'san francisco'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = '24 hour diner' AND T3.`city` = 'san francisco'",
        "repair_result": 1
    },
    {
        "idx": 210,
        "db_id": "restaurant",
        "question": "Give the review of the restaurant located in Ocean St., Santa Cruz.",
        "evidence": "Ocean St. refers to street_name = 'ocean st'; Santa Cruz refers to city = 'santa cruz'",
        "gold": "SELECT T2.review FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'santa cruz' AND T1.street_name = 'ocean st'",
        "pred": "SELECT T2.`review` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`street_name` = 'ocean st' AND T1.`city` = 'santa cruz'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`review` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`street_name` = 'ocean st' AND T1.`city` = 'santa cruz'",
        "repair_result": 1
    },
    {
        "idx": 211,
        "db_id": "restaurant",
        "question": "Give the street number of a bar in Oakland with a 2.7 review.",
        "evidence": "street number refers to street_num; bar refers to food_type = 'bar'; Oakland refers to city = 'oakland'; 2.7 review refers to review = 2.7",
        "gold": "SELECT T2.street_num FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.review = 2.7 AND T2.city = 'oakland' AND T1.food_type = 'bar'",
        "pred": "SELECT T2.`street_num` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = 'bar' AND T1.`city` = 'oakland' AND T1.`review` = 2.7",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`street_num` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = 'bar' AND T1.`city` = 'oakland' AND T1.`review` = 2.7",
        "repair_result": 1
    },
    {
        "idx": 212,
        "db_id": "restaurant",
        "question": "Among the bakeries, what is total number of bakery located at University Avenue, Palo Alto?",
        "evidence": "bakery refers to food_type = 'bakery'; University Avenue refers to street_name = 'university ave.'; Palo Alto refers to city = 'palo alto'",
        "gold": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.food_type = 'bakery' AND T2.city = 'palo alto' AND T1.street_name = 'university ave.'",
        "pred": "SELECT COUNT(*) FROM ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = 'bakery' AND T2.`street_name` = 'university ave' AND T3.`city` = 'palo alto' ) AS T",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = 'bakery' AND T2.`street_name` = 'university ave' AND T3.`city` = 'palo alto' ) AS T",
        "repair_result": 0
    },
    {
        "idx": 213,
        "db_id": "restaurant",
        "question": "Among the listed winery, what is the street number of the winery named \"Tulocay Winery\"?",
        "evidence": "winery refers to food_type = 'winery'; street number refers to street_num; \"Tulocay Winery\" refers to label = 'Tulocay winery'",
        "gold": "SELECT T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'Tulocay winery' AND T2.food_type = 'winery'",
        "pred": "SELECT `street_num` FROM location WHERE `id_restaurant` = ( SELECT `id_restaurant` FROM generalinfo WHERE `food_type` = 'winery' AND `label` = 'Tulocay Winery' )",
        "pred_result": 1,
        "repair_sql": "SELECT l.street_num FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.food_type = 'winery' AND g.label = 'Tulocay Winery'",
        "repair_result": 1
    },
    {
        "idx": 214,
        "db_id": "restaurant",
        "question": "List the review and label of the restaurants in Mission Blvd., Hayward.",
        "evidence": "Mission Blvd. refers to street_name = 'mission blvd'; Hayward refers to city = 'hayward'",
        "gold": "SELECT T2.review, T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'hayward' AND T1.street_name = 'mission blvd'",
        "pred": "SELECT T2.`review`, T2.`label` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`street_name` = 'mission blvd' AND T3.`county` = 'hayward'",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`review`, T2.`label` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`street_name` = 'mission blvd' AND T3.`county` = 'alameda county' AND T3.`region` = 'bay area'",
        "repair_result": 0
    },
    {
        "idx": 215,
        "db_id": "restaurant",
        "question": "Among all indian restaurants in Castro St., Mountainview, how many of them is about cookhouse in their label?",
        "evidence": "indian restaurant refers to food_type = 'indian'; Castro St. refers to street_name = 'castro st'; Mountainview refers to city = 'mountainview'; have the word \"Indian\" in label refers to label = 'indian'",
        "gold": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'castro st' AND T1.city = 'mountain view' AND T2.food_type = 'indian' AND T2.label LIKE '%cookhouse%'",
        "pred": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = 'indian' AND T2.`street_name` = 'castro st' AND T3.`county` = 'mountainview' AND T1.`label` LIKE '%cookhouse%'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = 'indian' AND T2.`street_name` = 'castro st' AND T3.`county` = 'mountainview' AND T1.`label` LIKE '%cookhouse%'",
        "repair_result": 0
    },
    {
        "idx": 216,
        "db_id": "restaurant",
        "question": "In restaurants with a review of 2, how many restaurants have a street number below 500?",
        "evidence": "review of 2 refers to review = 2; street number below 500 refers to street_num < 500",
        "gold": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.review = 2 AND T1.street_num < 500",
        "pred": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`review` = 2 AND T2.`street_num` < 500",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`review` = 2 AND T2.`street_num` < 500",
        "repair_result": 1
    },
    {
        "idx": 217,
        "db_id": "restaurant",
        "question": "Among all asian restaurants in N. Milpitas Blvd., Milpitas, how many of them have restaurant ID greater than 385?",
        "evidence": "asian restaurant refers to food_type = 'asian'; N. Milpitas Blvd. refers to street_name = 'n milpitas blvd'; Milpitas refers to city = 'milpitas'; restaurant ID greater than 385 refers to id_restaurant > 385",
        "gold": "SELECT COUNT(T1.id_restaurant) AS num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'milpitas' AND T2.food_type = 'asian' AND T1.street_name = 'n milpitas blvd' AND T1.id_restaurant > 385",
        "pred": "SELECT COUNT(*) FROM ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = 'asian' AND T2.`street_name` = 'n milpitas blvd' AND T2.`city` = 'milpitas' AND T1.`id_restaurant` > 385 ) AS SubQuery",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = 'asian' AND T2.`street_name` = 'n milpitas blvd' AND T2.`city` = 'milpitas' AND T1.`id_restaurant` > 385 ) AS SubQuery",
        "repair_result": 1
    },
    {
        "idx": 218,
        "db_id": "restaurant",
        "question": "What is the restaurant's name and ID located at Ocean Avenue, San Francisco?",
        "evidence": "restaurant's name refers to label; Ocean Avenue refers to street_name = 'ocean avenue'; San Francisco refers to city = 'san francisco'",
        "gold": "SELECT T2.label, T1.id_restaurant FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.street_name = 'ocean avenue'",
        "pred": "SELECT T2.`label` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`street_name` = 'ocean avenue' AND T1.`city` = 'san francisco'",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`label` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`street_name` = 'ocean avenue' AND T1.`city` = 'san francisco'",
        "repair_result": 0
    },
    {
        "idx": 219,
        "db_id": "restaurant",
        "question": "What is the full address of the restaurant named \"Sanuki Restaurant\"?",
        "evidence": "full address refers to city, street_num, street_name; restaurant named \"Sanuki Restaurant\" refers to label = 'sanuki restaurant'",
        "gold": "SELECT T2.city, T1.street_num, T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'sanuki restaurant'",
        "pred": "SELECT T3.`city`, T2.`street_num`, T2.`street_name` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`id_restaurant` = ( SELECT `id_restaurant` FROM generalinfo WHERE `label` = 'Sanuki Restaurant' )",
        "pred_result": 0,
        "repair_sql": "SELECT T3.`city`, T2.`street_num`, T2.`street_name` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`label` = 'Sanuki Restaurant'",
        "repair_result": 0
    },
    {
        "idx": 220,
        "db_id": "restaurant",
        "question": "List the food type of the restaurant located in 22779 6th St., Hayward City.",
        "evidence": "22779 refers to street_num = 22779; 6th St. refers to street_name = '6th St'",
        "gold": "SELECT T2.food_type FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_num = 22779 AND T1.street_name = '6th St' AND T2.city = 'hayward'",
        "pred": "SELECT T2.`food_type` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`id_restaurant` = ( SELECT T1.`id_restaurant` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`street_num` = 22779 AND T1.`street_name` = '6th St' AND T1.`city` = 'Hayward City' )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`food_type` FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`street_num` = 22779 AND T1.`street_name` = '6th St' AND T1.`city` = 'Hayward City'",
        "repair_result": 1
    },
    {
        "idx": 221,
        "db_id": "restaurant",
        "question": "How many American restaurants are located in Front, San Francisco?",
        "evidence": "American restaurant refers to food_type = 'american'; Front refers to street_name = 'front'; San Francisco refers to city = 'san francisco'",
        "gold": "SELECT COUNT(T2.food_type = 'american') FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.street_name = 'front'",
        "pred": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = 'american' AND T2.`street_name` = 'front' AND T3.`city` = 'san francisco'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = 'american' AND T2.`street_name` = 'front' AND T3.`city` = 'san francisco'",
        "repair_result": 0
    },
    {
        "idx": 222,
        "db_id": "restaurant",
        "question": "List the restaurant's ID that has a review greater than the 70% of average review of all American restaurants with street number greater than 2000.",
        "evidence": "American restaurant refers to food_type = 'american'; street number greater than 2000 refers to street_num > 2000; review greater than the 70% of average review refers to review > multiply(avg(review), 0.7)",
        "gold": "SELECT T1.id_restaurant FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.food_type = 'american' AND T1.street_num > 2000 GROUP BY T1.id_restaurant ORDER BY AVG(T2.review) * 0.7 DESC",
        "pred": "SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`review` > ( SELECT AVG(T3.`review`) * 0.7 FROM generalinfo AS T3 INNER JOIN location AS T4 ON T3.`id_restaurant` = T4.`id_restaurant` WHERE T3.`food_type` = 'american' AND T4.`street_num` > 2000 )",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`review` > ( SELECT AVG(T3.`review`) * 0.7 FROM generalinfo AS T3 INNER JOIN location AS T4 ON T3.`id_restaurant` = T4.`id_restaurant` WHERE T3.`food_type` = 'american' AND T4.`street_num` > 2000 )",
        "repair_result": 0
    },
    {
        "idx": 223,
        "db_id": "restaurant",
        "question": "Among the restaurants located on the street number ranges from 1000 to 2000, what is the percentage of Afghani restaurants are there?",
        "evidence": "street number ranges from 1000 to 2000 refers to 1000 < = street_num < = 2000; Afghani restaurant refers to food_type = 'afghani'; percentage = divide(count(id_restaurant where food_type = 'afghani'), count(id_restaurant)) * 100%",
        "gold": "SELECT CAST(SUM(IIF(T2.food_type = 'afghani', 1, 0)) AS REAL) * 100 / COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE 1000 <= T1.street_num <= 2000",
        "pred": "SELECT (CAST(COUNT(T3.`id_restaurant`) AS REAL) / COUNT(T1.`id_restaurant`)) * 100 FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN location AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` WHERE T2.`food_type` = 'afghani' AND T1.`street_num` >= 1000 AND T1.`street_num` <= 2000",
        "pred_result": 0,
        "repair_sql": "SELECT (CAST(COUNT(T3.`id_restaurant`) AS REAL) / COUNT(T1.`id_restaurant`)) * 100 FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN location AS T3 ON T2.`id_restaurant` = T3.`id_restaurant` WHERE T2.`food_type` = 'afghani' AND T1.`street_num` >= 1000 AND T1.`street_num` <= 2000",
        "repair_result": 0
    },
    {
        "idx": 224,
        "db_id": "restaurant",
        "question": "What is the name of the most popular restaurant serving Asian foods in San Francisco?",
        "evidence": "the most popular refers to max(review); Asian food refers to food_type = 'asian'; San Francisco refers to city = 'san francisco'",
        "gold": "SELECT label FROM generalinfo WHERE food_type = 'asian' AND city = 'san francisco' AND review = ( SELECT MAX(review) FROM generalinfo WHERE food_type = 'asian' AND city = 'san francisco' )",
        "pred": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`food_type` = 'asian' AND T2.`city` = 'san francisco' ORDER BY T1.`review` DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`food_type` = 'asian' AND T2.`city` = 'san francisco' ORDER BY T1.`review` DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 225,
        "db_id": "restaurant",
        "question": "How many cities are there in Monterey?",
        "evidence": "Monterey refers to region = 'monterey'",
        "gold": "SELECT COUNT(DISTINCT city) FROM geographic WHERE region = 'monterey'",
        "pred": "SELECT COUNT(DISTINCT T1.`city`) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` WHERE T1.`region` = 'monterey'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`city`) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` WHERE T1.`region` = 'monterey'",
        "repair_result": 1
    },
    {
        "idx": 226,
        "db_id": "restaurant",
        "question": "How many deli in Belmont have a review rating of 2 or more?",
        "evidence": "deli ris a food type; Belmont refers to city = 'belmont'; review rating of 2 or more refers to review > 2",
        "gold": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE city = 'belmont' AND review > 2 AND food_type = 'deli'",
        "pred": "SELECT COUNT(*) FROM ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = 'deli' AND T3.`city` = 'belmont' AND T1.`review` >= 2 ) AS delis_in_belmont",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = 'deli' AND T3.`city` = 'belmont' AND T1.`review` >= 2 ) AS delis_in_belmont",
        "repair_result": 0
    },
    {
        "idx": 227,
        "db_id": "restaurant",
        "question": "Which county in northern California has the highest number of cities?",
        "evidence": "northern California refers to region = 'northern california'; the highest number of cities refers to max(count(city))",
        "gold": "SELECT county FROM geographic WHERE region = 'northern california' GROUP BY county ORDER BY COUNT(city) DESC LIMIT 1",
        "pred": "SELECT T1.`county` FROM ( SELECT T1.`county`, COUNT(T2.`city`) AS city_count FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` WHERE T1.`region` = 'northern california' GROUP BY T1.`county` ORDER BY city_count DESC LIMIT 1 ) AS T1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`county` FROM ( SELECT T1.`county`, COUNT(T2.`city`) AS city_count FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` WHERE T1.`region` = 'northern california' GROUP BY T1.`county` ORDER BY city_count DESC LIMIT 1 ) AS T1",
        "repair_result": 1
    },
    {
        "idx": 228,
        "db_id": "restaurant",
        "question": "How many restaurants can you find in Concord?",
        "evidence": "Concord refers to city = 'concord'",
        "gold": "SELECT COUNT(id_restaurant) FROM location WHERE city = 'concord'",
        "pred": "SELECT COUNT(DISTINCT T1.`id_restaurant`) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`city` = 'concord'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`id_restaurant`) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`city` = 'concord'",
        "repair_result": 1
    },
    {
        "idx": 229,
        "db_id": "restaurant",
        "question": "In which region can you find the top 4 most popular restaurants?",
        "evidence": "the top 4 most popular restaurant refers to top 4 max(review)",
        "gold": "SELECT T2.region FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city ORDER BY T1.review DESC LIMIT 4",
        "pred": "SELECT T3.`region` FROM geographic AS T3 WHERE T3.`city` IN ( SELECT DISTINCT T2.`city` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T2.`city` = T3.`city` WHERE T1.`id_restaurant` IN ( SELECT T4.`id_restaurant` FROM generalinfo AS T4 ORDER BY T4.`review` DESC LIMIT 4 ) )",
        "pred_result": 1,
        "repair_sql": "SELECT T3.`region` FROM geographic AS T3 WHERE T3.`city` IN ( SELECT DISTINCT T2.`city` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T2.`city` = T3.`city` WHERE T1.`id_restaurant` IN ( SELECT T4.`id_restaurant` FROM generalinfo AS T4 ORDER BY T4.`review` DESC LIMIT 4 ) )",
        "repair_result": 1
    },
    {
        "idx": 230,
        "db_id": "restaurant",
        "question": "How many Chinese restaurants are there on 1st st, Livermore?",
        "evidence": "Chinese restaurant refers to food_type = 'chinese'; 1st st refers to street_name = '1st st'; Livermore refers to city = 'livermore'",
        "gold": "SELECT COUNT(T1.id_restaurant) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'livermore' AND T1.food_type = 'chinese' AND T2.street_name = '1st st'",
        "pred": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = 'chinese' AND T2.`street_name` = '1st st' AND T3.`city` = 'Livermore'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = 'chinese' AND T2.`street_name` = '1st st' AND T3.`city` = 'Livermore'",
        "repair_result": 0
    },
    {
        "idx": 231,
        "db_id": "restaurant",
        "question": "How many Indian restaurants are there in the Los Angeles area?",
        "evidence": "Indian restaurant refers to food_type = 'indian'; the Los Angeles area refers to region = 'los angeles area'",
        "gold": "SELECT COUNT(T1.city) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'indian' AND T1.region = 'los angeles area'",
        "pred": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = 'indian' AND T3.`region` = 'los angeles area'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`food_type` = 'indian' AND T3.`region` = 'los angeles area'",
        "repair_result": 1
    },
    {
        "idx": 232,
        "db_id": "restaurant",
        "question": "In the Bay Area, what is the most common type of food served by restaurants?",
        "evidence": "the Bay Area refers to region = 'bay area'; the most common type of food refers to max(count(food_type))",
        "gold": "SELECT T2.food_type FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'bay area' GROUP BY T2.food_type ORDER BY COUNT(T2.food_type) DESC LIMIT 1",
        "pred": "SELECT T1.`food_type` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`region` = 'bay area' GROUP BY T1.`food_type` ORDER BY COUNT(T1.`food_type`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`food_type` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T3.`region` = 'bay area' GROUP BY T1.`food_type` ORDER BY COUNT(T1.`food_type`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 233,
        "db_id": "restaurant",
        "question": "How many restaurants in Broadway, Oakland received a review of no more than 3?",
        "evidence": "Broadway refers to street_name = 'broadway';\u00a0 Oakland refers to city = 'oakland'; a review of no more than 3 refers to review < 3",
        "gold": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.street_name = 'broadway' AND T2.review < 3 AND T1.city = 'oakland'",
        "pred": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T2.`street_name` = 'broadway' AND T3.`county` = 'alameda county' AND T1.`review` < 3",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T2.`street_name` = 'broadway' AND T3.`county` = 'alameda county' AND T1.`review` < 3",
        "repair_result": 0
    },
    {
        "idx": 234,
        "db_id": "restaurant",
        "question": "In which region can you find the highest number of Baskin Robbins restaurants?",
        "evidence": "the highest number refers to max(count(city)); Baskin Robbins restaurant refers to label = 'baskin robbins'",
        "gold": "SELECT T2.region AS num FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'baskin robbins' GROUP BY T2.region ORDER BY COUNT(T1.city) DESC LIMIT 1",
        "pred": "SELECT T1.`region` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` WHERE T2.`label` = 'baskin robbins' GROUP BY T1.`region` ORDER BY COUNT(T2.`id_restaurant`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`region` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` WHERE T2.`label` = 'baskin robbins' GROUP BY T1.`region` ORDER BY COUNT(T2.`id_restaurant`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 235,
        "db_id": "restaurant",
        "question": "List all the streets where pizza-serving restaurants are found in San Jose.",
        "evidence": "street refers to street_name; pizza-serving restaurant refers to food_type = 'pizza'; San Jose refers to city = 'san jose'",
        "gold": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'pizza' AND T1.city = 'san jose'",
        "pred": "SELECT DISTINCT T3.`street_name` FROM location AS T3 INNER JOIN ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T1.`food_type` = 'pizza' AND T2.`city` = 'san jose' ) AS T4 ON T3.`id_restaurant` = T4.`id_restaurant`",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T3.`street_name` FROM location AS T3 INNER JOIN ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.`city` = T2.`city` WHERE T1.`food_type` = 'pizza' AND T2.`city` = 'san jose' ) AS T4 ON T3.`id_restaurant` = T4.`id_restaurant`",
        "repair_result": 0
    },
    {
        "idx": 236,
        "db_id": "restaurant",
        "question": "How many types of restaurants are there in the Yosemite and Mono Lake area?",
        "evidence": "",
        "gold": "SELECT COUNT(T2.food_type) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'yosemite and mono lake area'",
        "pred": "SELECT COUNT(DISTINCT T1.`food_type`) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T2.`city` = T3.`city` WHERE T3.`region` = 'yosemite and mono lake area'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`food_type`) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T2.`city` = T3.`city` WHERE T3.`region` = 'yosemite and mono lake area'",
        "repair_result": 0
    },
    {
        "idx": 237,
        "db_id": "restaurant",
        "question": "What is the full address of the most popular restaurant among the diners?",
        "evidence": "full address refers to street_num, street_name, city; the most popular refers to max(review)",
        "gold": "SELECT T2.street_name, T2.street_num, T2.city FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant ORDER BY T1.review DESC LIMIT 1",
        "pred": "SELECT T2.`street_num`, T2.`street_name`, T2.`city` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`id_restaurant` = ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`review` = ( SELECT MAX(`review`) FROM generalinfo ) )",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`street_num`, T2.`street_name`, T2.`city` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`id_restaurant` = ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` INNER JOIN geographic AS T3 ON T1.`city` = T3.`city` WHERE T1.`review` = ( SELECT MAX(`review`) FROM generalinfo ) )",
        "repair_result": 0
    },
    {
        "idx": 238,
        "db_id": "restaurant",
        "question": "In which counties can you find the restaurant with the highest number of branches?",
        "evidence": "restaurant refers to label; the highest number of branches refers to max(count(city))",
        "gold": "SELECT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city GROUP BY T2.county ORDER BY COUNT(T1.label) DESC LIMIT 1",
        "pred": "SELECT DISTINCT T3.`county` FROM geographic AS T3 INNER JOIN location AS T2 ON T3.`city` = T2.`city` INNER JOIN generalinfo AS T1 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`label` = ( SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` GROUP BY T1.`label` ORDER BY COUNT(T2.`city`) DESC LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T3.`county` FROM geographic AS T3 INNER JOIN location AS T2 ON T3.`city` = T2.`city` INNER JOIN generalinfo AS T1 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`label` = ( SELECT T1.`label` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` GROUP BY T1.`label` ORDER BY COUNT(T2.`city`) DESC LIMIT 1 )",
        "repair_result": 0
    },
    {
        "idx": 239,
        "db_id": "restaurant",
        "question": "Which region has the highest number of restaurants?",
        "evidence": "the highest number refers to max(count(id_restaurant))",
        "gold": "SELECT T1.region FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city GROUP BY T1.region ORDER BY COUNT(T2.id_restaurant) DESC LIMIT 1",
        "pred": "SELECT T1.`region` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` GROUP BY T1.`region` ORDER BY COUNT(T2.`id_restaurant`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`region` FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.`city` = T2.`city` GROUP BY T1.`region` ORDER BY COUNT(T2.`id_restaurant`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 240,
        "db_id": "restaurant",
        "question": "List the full address of all the American restaurants with a review of 4 or more?",
        "evidence": "full address refers to street_num, street_name, city; American restaurant refers to food_type = 'american'; a review of 4 or more refers to review > 4",
        "gold": "SELECT T1.street_num, T1.street_name, T1.city FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.review >= 4",
        "pred": "SELECT T2.`street_num`, T2.`street_name`, T2.`city` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`id_restaurant` IN ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`food_type` = 'american' AND T1.`review` >= 4 )",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`street_num`, T2.`street_name`, T2.`city` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`id_restaurant` IN ( SELECT T1.`id_restaurant` FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.`id_restaurant` = T2.`id_restaurant` WHERE T1.`food_type` = 'american' AND T1.`review` >= 4 )",
        "repair_result": 0
    },
    {
        "idx": 241,
        "db_id": "movielens",
        "question": "List the different director IDs of the movies whose user rating is more than 4.",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.directorid FROM u2base AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.rating > 4",
        "pred": "SELECT DISTINCT T2.`directorid` FROM movies2directors AS T2 INNER JOIN u2base AS T1 ON T1.`movieid` = T2.`movieid` WHERE CAST(T1.`rating` AS INTEGER) > 4",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.`directorid` FROM movies2directors AS T2 INNER JOIN u2base AS T1 ON T1.`movieid` = T2.`movieid` WHERE CAST(T1.`rating` AS INTEGER) > 4",
        "repair_result": 1
    },
    {
        "idx": 242,
        "db_id": "movielens",
        "question": "Among the users who gave a rating of 5, how many of them are male?",
        "evidence": "Male users mean that u_gender = 'M'",
        "gold": "SELECT COUNT(T1.userid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 5 AND T2.u_gender = 'M'",
        "pred": "SELECT COUNT(*) FROM users WHERE `userid` IN ( SELECT `userid` FROM u2base WHERE `rating` = '5' ) AND `u_gender` = 'M'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM users WHERE `userid` IN ( SELECT `userid` FROM u2base WHERE `rating` = '5' ) AND `u_gender` = 'M'",
        "repair_result": 0
    },
    {
        "idx": 243,
        "db_id": "movielens",
        "question": "List the genres of the movies which actor id 851 is the star.",
        "evidence": "",
        "gold": "SELECT T2.genre FROM movies2actors AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T1.actorid = T3.actorid WHERE T3.actorid = 851",
        "pred": "SELECT DISTINCT T2.`genre` FROM movies2actors AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`actorid` = 851",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.`genre` FROM movies2actors AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`actorid` = 851",
        "repair_result": 1
    },
    {
        "idx": 244,
        "db_id": "movielens",
        "question": "How many movies from the USA which user rating is less than 3?",
        "evidence": "",
        "gold": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA' AND T1.rating < 3",
        "pred": "SELECT COUNT(*) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'USA' AND CAST(T2.`rating` AS INTEGER) < 3",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'USA' AND CAST(T2.`rating` AS INTEGER) < 3",
        "repair_result": 1
    },
    {
        "idx": 245,
        "db_id": "movielens",
        "question": "Among the movies from France, how many of them are drama?",
        "evidence": "France a one country",
        "gold": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'France' AND T1.genre = 'drama'",
        "pred": "SELECT COUNT(*) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'France' AND T2.`genre` = 'Drama'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'France' AND T2.`genre` = 'Drama'",
        "repair_result": 0
    },
    {
        "idx": 246,
        "db_id": "movielens",
        "question": "What is the average occupation of users whose ratings are not more than 2 ?",
        "evidence": "",
        "gold": "SELECT AVG(T2.occupation) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating < 2",
        "pred": "SELECT AVG(CAST(T1.`occupation` AS REAL)) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` WHERE T2.`rating` <= 2",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(CAST(T1.`occupation` AS REAL)) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` WHERE T2.`rating` <= 2",
        "repair_result": 0
    },
    {
        "idx": 247,
        "db_id": "movielens",
        "question": "List the top 10 USA movies, by descending order, from the highest to the lowest, the user rating.",
        "evidence": "USA is a country",
        "gold": "SELECT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA' GROUP BY T1.movieid ORDER BY AVG(T1.rating) DESC LIMIT 10",
        "pred": "SELECT T1.* FROM movies AS T1 INNER JOIN ( SELECT T2.`movieid` FROM movies AS T2 INNER JOIN u2base AS T3 ON T2.`movieid` = T3.`movieid` WHERE T2.`country` = 'USA' ORDER BY T3.`rating` DESC LIMIT 10 ) AS top_movies ON T1.`movieid` = top_movies.`movieid` ORDER BY T1.`movieid` DESC",
        "pred_result": 0,
        "repair_sql": "SELECT T1.* FROM movies AS T1 INNER JOIN ( SELECT T2.`movieid` FROM movies AS T2 INNER JOIN u2base AS T3 ON T2.`movieid` = T3.`movieid` WHERE T2.`country` = 'USA' ORDER BY T3.`rating` DESC LIMIT 10 ) AS top_movies ON T1.`movieid` = top_movies.`movieid` ORDER BY T1.`movieid` DESC",
        "repair_result": 0
    },
    {
        "idx": 248,
        "db_id": "movielens",
        "question": "What is the average number of casts of movies that are from the USA?",
        "evidence": "USA is a country",
        "gold": "SELECT AVG(T2.cast_num) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA'",
        "pred": "SELECT AVG(T2.`cast_num`) FROM movies2actors AS T2 WHERE T2.`movieid` IN ( SELECT DISTINCT T1.`movieid` FROM movies AS T1 WHERE T1.`country` = 'USA' )",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(T2.`cast_num`) FROM movies2actors AS T2 WHERE T2.`movieid` IN ( SELECT DISTINCT T1.`movieid` FROM movies AS T1 WHERE T1.`country` = 'USA' )",
        "repair_result": 1
    },
    {
        "idx": 249,
        "db_id": "movielens",
        "question": "List the top 5 movies from other countries which to language is not in English.",
        "evidence": "not in English can be represented by isEnglish = 'F'",
        "gold": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'other' AND T2.isEnglish = 'F' LIMIT 5",
        "pred": "SELECT T1.* FROM movies AS T1 WHERE T1.`movieid` IN ( SELECT DISTINCT T2.`movieid` FROM movies AS T2 WHERE T2.`country` != 'USA' AND T2.`isEnglish` = 'F' ) ORDER BY T1.`runningtime` DESC LIMIT 5",
        "pred_result": 0,
        "repair_sql": "SELECT T1.* FROM movies AS T1 WHERE T1.`movieid` IN ( SELECT DISTINCT T2.`movieid` FROM movies AS T2 WHERE T2.`country` != 'USA' AND T2.`isEnglish` = 'F' ) ORDER BY T1.`runningtime` DESC LIMIT 5",
        "repair_result": 0
    },
    {
        "idx": 250,
        "db_id": "movielens",
        "question": "Among the best actors, how many of them got a rating of 5 to the movies they starred?",
        "evidence": "",
        "gold": "SELECT COUNT(T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN u2base AS T3 ON T2.movieid = T3.movieid WHERE T1.a_quality = 5 AND T3.rating = 5",
        "pred": "SELECT COUNT(*) FROM movies2actors AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`actorid` IN ( SELECT T3.`actorid` FROM actors AS T3 ORDER BY T3.`a_quality` DESC LIMIT 10 ) AND T2.`rating` = 5",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM movies2actors AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`actorid` IN ( SELECT T3.`actorid` FROM actors AS T3 ORDER BY T3.`a_quality` DESC LIMIT 10 ) AND T2.`rating` = 5",
        "repair_result": 0
    },
    {
        "idx": 251,
        "db_id": "movielens",
        "question": "What is the average rating of the newest movies from France?",
        "evidence": "France is a country; year = 4 represents the newest date.",
        "gold": "SELECT AVG(T1.rating) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'france' AND T2.year = 4",
        "pred": "SELECT AVG(CAST(T2.`rating` AS REAL)) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'France' AND T1.`year` = 4",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(CAST(T2.`rating` AS REAL)) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'France' AND T1.`year` = 4",
        "repair_result": 0
    },
    {
        "idx": 252,
        "db_id": "movielens",
        "question": "Among the most rated UK movies, how many of them has running time of less than 2?",
        "evidence": "UK is a country",
        "gold": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'UK' AND T2.runningtime < 2 AND T1.rating = 5",
        "pred": "SELECT COUNT(*) FROM ( SELECT T1.`movieid` FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'UK' AND T1.`runningtime` < 2 GROUP BY T1.`movieid` ORDER BY COUNT(T2.`rating`) DESC ) AS subquery",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM ( SELECT T1.`movieid` FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'UK' AND T1.`runningtime` < 2 GROUP BY T1.`movieid` ORDER BY COUNT(T2.`rating`) DESC ) AS subquery",
        "repair_result": 0
    },
    {
        "idx": 253,
        "db_id": "movielens",
        "question": "List the id of male users who gave ratings of less than 3 to French movies with running time of 2.",
        "evidence": "Male users mean that u_gender = 'M'; France is a country",
        "gold": "SELECT T1.userid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid INNER JOIN users AS T3 ON T1.userid = T3.userid WHERE T2.country = 'France' AND T2.runningtime = 2 AND T1.rating < 3 AND T3.u_gender = 'M'",
        "pred": "SELECT T1.`userid` FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` WHERE T1.`u_gender` = 'M' AND T2.`movieid` IN ( SELECT `movieid` FROM movies WHERE `country` = 'France' AND `runningtime` = 2 ) AND T2.`rating` < 3",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`userid` FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` WHERE T1.`u_gender` = 'M' AND T2.`movieid` IN ( SELECT `movieid` FROM movies WHERE `country` = 'France' AND `runningtime` = 2 ) AND T2.`rating` < 3",
        "repair_result": 1
    },
    {
        "idx": 254,
        "db_id": "movielens",
        "question": "Among the worst actresses, how many of them got a rating of more than 3 to the movies they starred?",
        "evidence": "Worst actresses means a_quality is the least; The least a_quality is 0",
        "gold": "SELECT COUNT(T1.userid) FROM u2base AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid INNER JOIN users AS T4 ON T1.userid = T4.userid WHERE T3.a_quality = 0 AND T1.rating > 3 AND T4.u_gender = 'F'",
        "pred": "SELECT COUNT(DISTINCT T1.`actorid`) FROM movies2actors AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`actorid` IN ( SELECT `actorid` FROM actors WHERE `a_quality` = 0 ) AND T2.`rating` > 3",
        "pred_result": "timeout",
        "repair_sql": "SELECT COUNT(DISTINCT T1.`actorid`) FROM movies2actors AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`actorid` IN ( SELECT `actorid` FROM actors WHERE `a_quality` = 0 ) AND T2.`rating` > 3",
        "repair_result": "timeout"
    },
    {
        "idx": 255,
        "db_id": "movielens",
        "question": "What is the ID of audiences that gave the most rating of 5?",
        "evidence": "The audience and users are the same meaning",
        "gold": "SELECT userid FROM u2base WHERE rating = 5 GROUP BY userid ORDER BY COUNT(movieid) DESC LIMIT 1",
        "pred": "SELECT `userid` FROM ( SELECT `userid`, COUNT(*) AS `num_ratings` FROM u2base WHERE `rating` = '5' GROUP BY `userid` ORDER BY `num_ratings` DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT `userid` FROM ( SELECT `userid`, COUNT(*) AS `num_ratings` FROM u2base WHERE `rating` = '5' GROUP BY `userid` ORDER BY `num_ratings` DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 256,
        "db_id": "movielens",
        "question": "What are the ID of actors that had worked together with director 22397? What was the genre of that movie?",
        "evidence": "",
        "gold": "SELECT T2.actorid, T4.genre FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid INNER JOIN movies2directors AS T4 ON T1.movieid = T4.movieid WHERE T4.directorid = 22397",
        "pred": "SELECT DISTINCT T1.`genre` FROM movies2directors AS T1 WHERE T1.`directorid` = 22397",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`genre` FROM movies2directors AS T1 WHERE T1.`directorid` = 22397",
        "repair_result": 0
    },
    {
        "idx": 257,
        "db_id": "movielens",
        "question": "Please list down the ID of actors and directors in action movies.",
        "evidence": "",
        "gold": "SELECT T2.actorid, T1.directorid FROM movies2directors AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.genre = 'Action'",
        "pred": "SELECT DISTINCT T1.`directorid` FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T2.`genre` = 'Action'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`directorid` FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T2.`genre` = 'Action'",
        "repair_result": 0
    },
    {
        "idx": 258,
        "db_id": "movielens",
        "question": "How many female actors acted in the movies of year 4?",
        "evidence": "Female actors mean that a_gender = 'F'",
        "gold": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T3.a_gender = 'F' AND T1.year = 4",
        "pred": "SELECT COUNT(DISTINCT T2.`actorid`) FROM movies2actors AS T1 INNER JOIN actors AS T2 ON T1.`actorid` = T2.`actorid` WHERE T2.`a_gender` = 'F' AND T1.`movieid` IN ( SELECT `movieid` FROM movies WHERE `year` = 4 )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT T2.`actorid`) FROM movies2actors AS T1 INNER JOIN actors AS T2 ON T1.`actorid` = T2.`actorid` WHERE T2.`a_gender` = 'F' AND T1.`movieid` IN ( SELECT `movieid` FROM movies WHERE `year` = 4 )",
        "repair_result": 0
    },
    {
        "idx": 259,
        "db_id": "movielens",
        "question": "What are the ID of actors with quality rating of 3 acted in English USA movies?",
        "evidence": "English movies refers to isEnglish = 'T'; USA is a country",
        "gold": "SELECT T2.actorid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T3.a_quality = 3 AND T1.country = 'USA' AND T1.isEnglish = 'T'",
        "pred": "SELECT DISTINCT T1.`actorid` FROM movies2actors AS T1 INNER JOIN actors AS T2 ON T1.`actorid` = T2.`actorid` INNER JOIN movies AS T3 ON T1.`movieid` = T3.`movieid` WHERE T2.`a_quality` = 3 AND T3.`isEnglish` = 'T' AND T3.`country` = 'USA'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`actorid` FROM movies2actors AS T1 INNER JOIN actors AS T2 ON T1.`actorid` = T2.`actorid` INNER JOIN movies AS T3 ON T1.`movieid` = T3.`movieid` WHERE T2.`a_quality` = 3 AND T3.`isEnglish` = 'T' AND T3.`country` = 'USA'",
        "repair_result": 1
    },
    {
        "idx": 260,
        "db_id": "movielens",
        "question": "List down the ID of movies with running time of 3 and average revenue of 1?",
        "evidence": "",
        "gold": "SELECT T1.movieid FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid INNER JOIN directors AS T3 ON T2.directorid = T3.directorid WHERE T1.runningtime = 3 AND T3.avg_revenue = 1",
        "pred": "SELECT T1.`movieid` FROM movies AS T1 INNER JOIN directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`runningtime` = 3 AND T2.`avg_revenue` = 1",
        "pred_result": "no such column: T2.movieid",
        "repair_sql": "SELECT T1.`movieid` FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` INNER JOIN directors AS T3 ON T2.`directorid` = T3.`directorid` WHERE T1.`runningtime` = 3 AND T3.`avg_revenue` = 1",
        "repair_result": 1
    },
    {
        "idx": 261,
        "db_id": "movielens",
        "question": "UK produced what genre of movies?",
        "evidence": "UK is a country",
        "gold": "SELECT T2.genre FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'UK'",
        "pred": "SELECT DISTINCT T2.`genre` FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.`movieid` = T2.`movieid` WHERE T2.`country` = 'UK'",
        "pred_result": "no such column: T2.genre",
        "repair_sql": "SELECT DISTINCT T1.`genre` FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.`movieid` = T2.`movieid` WHERE T2.`country` = 'UK'",
        "repair_result": 1
    },
    {
        "idx": 262,
        "db_id": "movielens",
        "question": "What is the favourite movie genre for audiences of age 18?",
        "evidence": "The audience and users are the same meaning",
        "gold": "SELECT T1.genre FROM movies2directors AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid INNER JOIN users AS T3 ON T2.userid = T3.userid WHERE T3.age = 18 GROUP BY T1.genre ORDER BY COUNT(T1.movieid) DESC LIMIT 1",
        "pred": "SELECT T4.`genre` FROM ( SELECT T3.`genre`, COUNT(T3.`genre`) AS genre_count FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` INNER JOIN movies2directors AS T3 ON T2.`movieid` = T3.`movieid` WHERE T1.`age` = '18' GROUP BY T3.`genre` ) AS T4 ORDER BY T4.`genre_count` DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T4.`genre` FROM ( SELECT T3.`genre`, COUNT(T3.`genre`) AS genre_count FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` INNER JOIN movies2directors AS T3 ON T2.`movieid` = T3.`movieid` WHERE T1.`age` = '18' GROUP BY T3.`genre` ) AS T4 ORDER BY T4.`genre_count` DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 263,
        "db_id": "movielens",
        "question": "What is the ID of actors that acted in the movies most viewed by audience with occupation 5?",
        "evidence": "The audience and users are the same meaning",
        "gold": "SELECT T3.actorid FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid INNER JOIN movies2actors AS T3 ON T2.movieid = T3.movieid WHERE T1.occupation = 5 GROUP BY T2.movieid ORDER BY COUNT(T1.userid) DESC LIMIT 1",
        "pred": "SELECT T2.`actorid` FROM movies2actors AS T1 INNER JOIN ( SELECT T1.`movieid` FROM u2base AS T1 INNER JOIN users AS T2 ON T1.`userid` = T2.`userid` WHERE T2.`occupation` = '5' GROUP BY T1.`movieid` ORDER BY COUNT(T1.`userid`) DESC LIMIT 1 ) AS T3 ON T1.`movieid` = T3.`movieid`",
        "pred_result": "no such column: T2.actorid",
        "repair_sql": "SELECT T1.actorid FROM movies2actors AS T1 INNER JOIN ( SELECT T1.movieid FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T2.occupation = '5' GROUP BY T1.movieid ORDER BY COUNT(T1.userid) DESC LIMIT 1 ) AS T3 ON T1.movieid = T3.movieid",
        "repair_result": 0
    },
    {
        "idx": 264,
        "db_id": "movielens",
        "question": "Movies with rating 3 are viewed by audiences in which distinct age group?",
        "evidence": "The audience and users are the same meaning",
        "gold": "SELECT DISTINCT T2.age FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 3",
        "pred": "SELECT DISTINCT T1.`age`, T2.`movieid`, T3.`year`, T3.`isEnglish`, T3.`country`, T3.`runningtime` FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` WHERE T2.`rating` = '3'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`age`, T2.`movieid`, T3.`year`, T3.`isEnglish`, T3.`country`, T3.`runningtime` FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` WHERE T2.`rating` = '3'",
        "repair_result": 0
    },
    {
        "idx": 265,
        "db_id": "movielens",
        "question": "Action movies are mostly directed by directors of which country?",
        "evidence": "",
        "gold": "SELECT T3.country FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.directorid = T2.directorid INNER JOIN movies AS T3 ON T1.movieid = T3.movieid WHERE T1.genre = 'Action' GROUP BY T3.country ORDER BY COUNT(T3.country) DESC LIMIT 1",
        "pred": "SELECT DISTINCT T1.`country` FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T2.`genre` = 'Action'",
        "pred_result": "no such column: T1.country",
        "repair_sql": "SELECT DISTINCT T1.`country` FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T2.`genre` = 'Action'",
        "repair_result": "no such column: T1.country"
    },
    {
        "idx": 266,
        "db_id": "movielens",
        "question": "Please list down ID of movies acted by top 5 actors based on actor rating.",
        "evidence": "",
        "gold": "SELECT T2.movieid FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid GROUP BY T2.actorid ORDER BY AVG(T1.a_quality) DESC LIMIT 5",
        "pred": "SELECT DISTINCT T1.movieid FROM movies2actors AS T1 INNER JOIN actors AS T2 ON T1.actorid = T2.actorid WHERE T1.actorid IN ( SELECT actorid FROM actors ORDER BY a_quality DESC LIMIT 5 )",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.movieid FROM movies2actors AS T1 INNER JOIN actors AS T2 ON T1.actorid = T2.actorid WHERE T1.actorid IN ( SELECT actorid FROM actors ORDER BY a_quality DESC LIMIT 5 )",
        "repair_result": 0
    },
    {
        "idx": 267,
        "db_id": "movielens",
        "question": "List down 5 non English adventure movies from UK?",
        "evidence": "not English refers to isEnglish = 'F'; UK is a country",
        "gold": "SELECT T1.movieid FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'UK' AND T1.genre = 'Adventure' AND T2.isEnglish = 'F' LIMIT 5",
        "pred": "SELECT T1.* FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`isEnglish` = 'F' AND T1.`country` = 'UK' AND T2.`genre` = 'Adventure' LIMIT 5",
        "pred_result": 0,
        "repair_sql": "SELECT T1.* FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`isEnglish` = 'F' AND T1.`country` = 'UK' AND T2.`genre` = 'Adventure' LIMIT 5",
        "repair_result": 0
    },
    {
        "idx": 268,
        "db_id": "movielens",
        "question": "What is the percentage of female audiences who viewed movies with rating 2?",
        "evidence": "The audience and users are the same meaning; Female users refers to u_gender = 'F'; Percentage of female users = count(female users) / count(all users); count(all users) = count(female users) + count(male users)",
        "gold": "SELECT CAST(SUM(IIF(T2.u_gender = 'F', 1, 0)) AS REAL) * 100 / COUNT(T2.userid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 2",
        "pred": "SELECT (CAST((SELECT COUNT(*) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` WHERE T1.`u_gender` = 'F' AND T2.`rating` = '2') AS REAL) / CAST((SELECT COUNT(*) FROM u2base WHERE `rating` = '2') AS REAL)) * 100",
        "pred_result": 1,
        "repair_sql": "SELECT (CAST((SELECT COUNT(*) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` WHERE T1.`u_gender` = 'F' AND T2.`rating` = '2') AS REAL) / CAST((SELECT COUNT(*) FROM u2base WHERE `rating` = '2') AS REAL)) * 100",
        "repair_result": 1
    },
    {
        "idx": 269,
        "db_id": "movielens",
        "question": "What is the difference of female and male audiences in number who viewed horror movies?",
        "evidence": "The audience and users are the same meaning; Difference of female and male audiences = count(female users) - count(male users); Female users refers to u_gender = 'F'; Male users refers to u_gender = 'M'",
        "gold": "SELECT SUM(IIF(T2.u_gender = 'F', 1, 0)) - SUM(IIF(T2.u_gender = 'M', 1, 0)) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid INNER JOIN movies2directors AS T3 ON T3.movieid = T1.movieid WHERE T3.genre = 'horror'",
        "pred": "SELECT ( SELECT COUNT(DISTINCT T1.`userid`) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` INNER JOIN movies2directors AS T4 ON T3.`movieid` = T4.`movieid` WHERE T1.`u_gender` = 'F' AND T4.`genre` = 'Horror' ) - ( SELECT COUNT(DISTINCT T1.`userid`) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` INNER JOIN movies2directors AS T4 ON T3.`movieid` = T4.`movieid` WHERE T1.`u_gender` = 'M' AND T4.`genre` = 'Horror' ) AS difference",
        "pred_result": 0,
        "repair_sql": "SELECT ( SELECT COUNT(DISTINCT T1.`userid`) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` INNER JOIN movies2directors AS T4 ON T3.`movieid` = T4.`movieid` WHERE T1.`u_gender` = 'F' AND T4.`genre` = 'Horror' ) - ( SELECT COUNT(DISTINCT T1.`userid`) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` INNER JOIN movies2directors AS T4 ON T3.`movieid` = T4.`movieid` WHERE T1.`u_gender` = 'M' AND T4.`genre` = 'Horror' ) AS difference",
        "repair_result": 0
    },
    {
        "idx": 270,
        "db_id": "movielens",
        "question": "Please list the genre of the movies that are the newest and is in English.",
        "evidence": "Year contains relative value, higher year value refers to newer date; Year = 4 refers to newest date, Year = 1 refer to oldest date; In English means isEnglish = T",
        "gold": "SELECT T2.genre FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.year = 4 AND T1.isEnglish = 'T'",
        "pred": "SELECT DISTINCT T3.`genre` FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` INNER JOIN movies2actors AS T4 ON T1.`movieid` = T4.`movieid` INNER JOIN directors AS T5 ON T2.`directorid` = T5.`directorid` INNER JOIN actors AS T6 ON T4.`actorid` = T6.`actorid` WHERE T1.`year` = (SELECT MAX(`year`) FROM movies) AND T1.`isEnglish` = 'T'",
        "pred_result": "no such column: T3.genre",
        "repair_sql": "SELECT DISTINCT T2.`genre` FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`year` = (SELECT MAX(`year`) FROM movies WHERE `isEnglish` = 'T')",
        "repair_result": 1
    },
    {
        "idx": 271,
        "db_id": "movielens",
        "question": "Among the action movies from the USA, how many of them are not in English?",
        "evidence": "USA is a country; not in English can be represented by isEnglish = 'F'",
        "gold": "SELECT COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA' AND T1.isEnglish = 'F' AND T2.genre = 'Action'",
        "pred": "SELECT COUNT(*) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'USA' AND T2.`genre` = 'Action' AND T1.`isEnglish` = 'F'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'USA' AND T2.`genre` = 'Action' AND T1.`isEnglish` = 'F'",
        "repair_result": 1
    },
    {
        "idx": 272,
        "db_id": "movielens",
        "question": "For the male users no older than 18, how many times have they given the highest rating?",
        "evidence": "Male users refers to u_gender = 'M'",
        "gold": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 5 AND T2.age < 18 AND T2.u_gender = 'M'",
        "pred": "SELECT COUNT(*) FROM u2base AS T1 WHERE T1.`userid` IN ( SELECT `userid` FROM users WHERE `u_gender` = 'M' AND CAST(`age` AS INTEGER) <= 18 ) AND T1.`rating` = ( SELECT MAX(CAST(`rating` AS INTEGER)) FROM u2base )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM u2base AS T1 WHERE T1.`userid` IN ( SELECT `userid` FROM users WHERE `u_gender` = 'M' AND CAST(`age` AS INTEGER) <= 18 ) AND T1.`rating` = ( SELECT MAX(CAST(`rating` AS INTEGER)) FROM u2base )",
        "repair_result": 0
    },
    {
        "idx": 273,
        "db_id": "movielens",
        "question": "Please list the ID of the movie that has been mostly rated by female users.",
        "evidence": "Female users refers to u_gender = 'F'",
        "gold": "SELECT T1.movieid FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T2.u_gender = 'F' GROUP BY T1.movieid ORDER BY COUNT(T2.userid) DESC LIMIT 1",
        "pred": "SELECT T1.`movieid` FROM ( SELECT T1.`movieid`, COUNT(T1.`rating`) AS female_ratings FROM u2base AS T1 INNER JOIN users AS T2 ON T1.`userid` = T2.`userid` WHERE T2.`u_gender` = 'F' GROUP BY T1.`movieid` ) AS T1 ORDER BY T1.`female_ratings` DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`movieid` FROM ( SELECT T1.`movieid`, COUNT(T1.`rating`) AS female_ratings FROM u2base AS T1 INNER JOIN users AS T2 ON T1.`userid` = T2.`userid` WHERE T2.`u_gender` = 'F' GROUP BY T1.`movieid` ) AS T1 ORDER BY T1.`female_ratings` DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 274,
        "db_id": "movielens",
        "question": "Among divergent movies that got the highest rating, how many of them are from the UK?",
        "evidence": "UK is a country",
        "gold": "SELECT COUNT(DISTINCT T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'UK' AND T1.rating = 5",
        "pred": "SELECT COUNT(*) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.`movieid` = T2.`movieid` INNER JOIN movies2directors AS T3 ON T2.`movieid` = T3.`movieid` WHERE T1.`rating` = ( SELECT MAX(CAST(T4.`rating` AS INTEGER)) FROM u2base AS T4 INNER JOIN movies AS T5 ON T4.`movieid` = T5.`movieid` WHERE T5.`genre` = 'Divergent' ) AND T2.`country` = 'UK'",
        "pred_result": "no such column: T5.genre",
        "repair_sql": "SELECT COUNT(*) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.`movieid` = T2.`movieid` INNER JOIN movies2directors AS T3 ON T2.`movieid` = T3.`movieid` WHERE T1.`rating` = ( SELECT MAX(CAST(T4.`rating` AS INTEGER)) FROM u2base AS T4 INNER JOIN movies AS T5 ON T4.`movieid` = T5.`movieid` WHERE T5.`genre` = 'Divergent' ) AND T2.`country` = 'UK' AND T3.`genre` = 'Divergent'",
        "repair_result": "no such column: T5.genre"
    },
    {
        "idx": 275,
        "db_id": "movielens",
        "question": "Please list different IDs of movies that are the newest and have gotten the lowest rating.",
        "evidence": "Year contains relative value, higer year value refers to newer date; Year = 4 refers to newest date, Year = 1 refer to oldest date; Lowest rating = 1",
        "gold": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4 AND T1.rating = 1",
        "pred": "SELECT DISTINCT T1.`movieid` FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`year` = (SELECT MAX(`year`) FROM movies) AND T2.`rating` = 1",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`movieid` FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`year` = (SELECT MAX(`year`) FROM movies) AND T2.`rating` = 1",
        "repair_result": 1
    },
    {
        "idx": 276,
        "db_id": "movielens",
        "question": "For the movies in English that are the oldest, how many of them have the lowest rating?",
        "evidence": "Year contains relative value, higer year value refers to newer date; Year = 4 refers to newest date, Year = 1 refer to oldest date; Lowest rating = 1\uff1bisEnglish = 'T' means English movie",
        "gold": "SELECT COUNT(DISTINCT T1.movieid) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.year = 1 AND T2.rating = 1 AND T1.isEnglish = 'T'",
        "pred": "SELECT COUNT(*) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`year` = 1 AND T1.`isEnglish` = 'T' AND T2.`rating` = 1",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`year` = 1 AND T1.`isEnglish` = 'T' AND T2.`rating` = 1",
        "repair_result": 0
    },
    {
        "idx": 277,
        "db_id": "movielens",
        "question": "How many different female users have rated movies from France?",
        "evidence": "France is a country; Female users mean that u_gender = 'F'",
        "gold": "SELECT COUNT(DISTINCT T2.userid) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.u_gender = 'F' AND T3.country = 'France'",
        "pred": "SELECT COUNT(DISTINCT T1.`userid`) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` WHERE T1.`u_gender` = 'F' AND T3.`country` = 'France'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`userid`) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` WHERE T1.`u_gender` = 'F' AND T3.`country` = 'France'",
        "repair_result": 1
    },
    {
        "idx": 278,
        "db_id": "movielens",
        "question": "For different directors who direct well, how many of them have directed an action film?",
        "evidence": "direct well means the quality of directing is good, which means d_quality = 4.",
        "gold": "SELECT COUNT(DISTINCT T2.directorid) FROM movies2directors AS T2 INNER JOIN directors AS T3 ON T2.directorid = T3.directorid WHERE T2.genre = 'Action' AND T3.d_quality = 4",
        "pred": "SELECT COUNT(DISTINCT T1.`directorid`) FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T1.`d_quality` = 4 AND T2.`genre` = 'Action'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`directorid`) FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T1.`d_quality` = 4 AND T2.`genre` = 'Action'",
        "repair_result": 1
    },
    {
        "idx": 279,
        "db_id": "movielens",
        "question": "Please list the genre of the movies that are directed by the directors with the highest level of average revenue.",
        "evidence": "",
        "gold": "SELECT T2.genre FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.avg_revenue = 4",
        "pred": "SELECT DISTINCT T3.`genre` FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.`directorid` = T2.`directorid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` WHERE T1.`avg_revenue` = ( SELECT MAX(`avg_revenue`) FROM directors )",
        "pred_result": "no such column: T3.genre",
        "repair_sql": "SELECT DISTINCT T2.`genre` FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.`directorid` = T2.`directorid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` WHERE T1.`avg_revenue` = ( SELECT MAX(`avg_revenue`) FROM directors )",
        "repair_result": 1
    },
    {
        "idx": 280,
        "db_id": "movielens",
        "question": "How many distinct movies in English stars a male actor who acts the best?",
        "evidence": "Male actors mean that a_gender = 'M'; isEnglish = 'T' means movies in English",
        "gold": "SELECT COUNT(DISTINCT T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T3.isEnglish = 'T' AND T1.a_gender = 'M' AND T1.a_quality = 5",
        "pred": "SELECT COUNT(DISTINCT T1.`movieid`) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`isEnglish` = 'T' AND T2.`actorid` = ( SELECT `actorid` FROM actors WHERE `a_gender` = 'M' ORDER BY `a_quality` DESC LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`movieid`) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`isEnglish` = 'T' AND T2.`actorid` = ( SELECT `actorid` FROM actors WHERE `a_gender` = 'M' ORDER BY `a_quality` DESC LIMIT 1 )",
        "repair_result": 0
    },
    {
        "idx": 281,
        "db_id": "movielens",
        "question": "Please list the country of the movie that stars an actress who acts the worse.",
        "evidence": "a_quality = 5 refers to act the best, a_quality = 0 refers to act the worst",
        "gold": "SELECT T3.country FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.a_gender = 'F' AND T1.a_quality = 0",
        "pred": "SELECT T3.`country` FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.`actorid` = T2.`actorid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` WHERE T1.`a_quality` = 0",
        "pred_result": 1,
        "repair_sql": "SELECT T3.`country` FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.`actorid` = T2.`actorid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` WHERE T1.`a_quality` = 0",
        "repair_result": 1
    },
    {
        "idx": 282,
        "db_id": "movielens",
        "question": "What is the highest average rating for action movies made in the USA?",
        "evidence": "USA is a country",
        "gold": "SELECT AVG(T2.rating) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid INNER JOIN movies2directors AS T3 ON T1.movieid = T3.movieid WHERE T1.country = 'USA' AND T3.genre = 'Action' GROUP BY T1.movieid ORDER BY AVG(T2.rating) DESC LIMIT 1",
        "pred": "SELECT MAX(AVG(CAST(T4.`rating` AS REAL))) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` INNER JOIN u2base AS T3 ON T1.`movieid` = T3.`movieid` WHERE T1.`country` = 'USA' AND T2.`genre` = 'Action' GROUP BY T1.`movieid`",
        "pred_result": "misuse of aggregate function AVG()",
        "repair_sql": "SELECT MAX(avg_rating) FROM ( SELECT AVG(CAST(T3.`rating` AS REAL)) AS avg_rating FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` INNER JOIN u2base AS T3 ON T1.`movieid` = T3.`movieid` WHERE T1.`country` = 'USA' AND T2.`genre` = 'Action' GROUP BY T1.`movieid` ) AS avg_ratings",
        "repair_result": 1
    },
    {
        "idx": 283,
        "db_id": "movielens",
        "question": "Among the films directed by directors who direct the best, how many of them have an average rating of over 3.5?",
        "evidence": "d_quality = 5 refers to direct the best, d_quality = 0 refers to direct the worst",
        "gold": "SELECT COUNT(*) FROM ( SELECT DISTINCT T2.movieid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid INNER JOIN u2base AS T3 ON T2.movieid = T3.movieid WHERE T1.d_quality = 5 GROUP BY T2.movieid HAVING AVG(T3.rating) > 3.5 ) AS T1",
        "pred": "SELECT COUNT(*) FROM u2base AS T1 WHERE T1.`movieid` IN ( SELECT T2.`movieid` FROM movies2directors AS T2 WHERE T2.`directorid` IN ( SELECT `directorid` FROM directors WHERE `d_quality` = 5 ) ) AND T1.`rating` > 3.5",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM u2base AS T1 WHERE T1.`movieid` IN ( SELECT T2.`movieid` FROM movies2directors AS T2 WHERE T2.`directorid` IN ( SELECT `directorid` FROM directors WHERE `d_quality` = 5 ) ) AND T1.`rating` > 3.5",
        "repair_result": 0
    },
    {
        "idx": 284,
        "db_id": "movielens",
        "question": "Which adventure movie has the highest average rating?",
        "evidence": "",
        "gold": "SELECT T1.movieid FROM movies2directors AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.genre = 'Adventure' GROUP BY T1.movieid ORDER BY AVG(T2.rating) DESC LIMIT 1",
        "pred": "SELECT T1.`movieid`, T1.`genre` FROM movies AS T1 WHERE T1.`movieid` = ( SELECT T2.`movieid` FROM ( SELECT T3.`movieid`, AVG(CAST(T4.`rating` AS REAL)) AS avg_rating FROM movies AS T3 INNER JOIN u2base AS T4 ON T3.`movieid` = T4.`movieid` INNER JOIN movies2directors AS T5 ON T3.`movieid` = T5.`movieid` WHERE T5.`genre` = 'Adventure' GROUP BY T3.`movieid` ) AS sub ORDER BY sub.avg_rating DESC LIMIT 1 )",
        "pred_result": "no such column: T1.genre",
        "repair_sql": "SELECT T1.`movieid`, T5.`genre` FROM movies AS T1 INNER JOIN movies2directors AS T5 ON T1.`movieid` = T5.`movieid` WHERE T1.`movieid` = ( SELECT T2.`movieid` FROM ( SELECT T3.`movieid`, AVG(CAST(T4.`rating` AS REAL)) AS avg_rating FROM movies AS T3 INNER JOIN u2base AS T4 ON T3.`movieid` = T4.`movieid` INNER JOIN movies2directors AS T5 ON T3.`movieid` = T5.`movieid` WHERE T5.`genre` = 'Adventure' GROUP BY T3.`movieid` ) AS sub ORDER BY sub.avg_rating DESC LIMIT 1 )",
        "repair_result": "no such column: T2.movieid"
    },
    {
        "idx": 285,
        "db_id": "movielens",
        "question": "How many of the users who rate the movie with the id '2462959' are female?",
        "evidence": "Female users mean that u_gender = 'F'",
        "gold": "SELECT COUNT(T1.userid) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T2.userid = 2462959 AND T1.u_gender = 'F'",
        "pred": "SELECT COUNT(*) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` WHERE T2.`movieid` = '2462959' AND T1.`u_gender` = 'F'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` WHERE T2.`movieid` = '2462959' AND T1.`u_gender` = 'F'",
        "repair_result": 0
    },
    {
        "idx": 286,
        "db_id": "movielens",
        "question": "What is the most distinct rated movie with a running time of 0?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.movieid FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.runningtime = 0 AND T2.rating = ( SELECT MAX(rating) FROM u2base )",
        "pred": "SELECT T1.`movieid` FROM u2base AS T1 WHERE T1.`movieid` = ( SELECT `movieid` FROM movies WHERE `runningtime` = 0 ) GROUP BY T1.`movieid` ORDER BY COUNT(DISTINCT T1.`rating`) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`movieid` FROM u2base AS T1 WHERE T1.`movieid` = ( SELECT `movieid` FROM movies WHERE `runningtime` = 0 ) GROUP BY T1.`movieid` ORDER BY COUNT(DISTINCT T1.`rating`) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 287,
        "db_id": "movielens",
        "question": "List the ids and ratings of each actors played in the movie with the id 1722327?",
        "evidence": "",
        "gold": "SELECT T1.actorid, T1.a_quality FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid WHERE T2.movieid = 1722327",
        "pred": "SELECT T2.`actorid`, T3.`rating` FROM movies2actors AS T1 INNER JOIN u2base AS T3 ON T1.`movieid` = T3.`movieid` AND T1.`actorid` = T3.`userid` WHERE T1.`movieid` = 1722327",
        "pred_result": "no such column: T2.actorid",
        "repair_sql": "SELECT T1.`actorid`, T2.`rating` FROM movies2actors AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` AND T1.`actorid` = T2.`userid` WHERE T1.`movieid` = 1722327",
        "repair_result": 0
    },
    {
        "idx": 288,
        "db_id": "movielens",
        "question": "Which directors with the best quality directed the most films?",
        "evidence": "d_quality = 5 refers to direct the best",
        "gold": "SELECT T1.directorid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 5 GROUP BY T1.directorid ORDER BY COUNT(T2.movieid) DESC LIMIT 1",
        "pred": "SELECT T1.`directorid` FROM ( SELECT T1.`directorid`, COUNT(T2.`movieid`) AS film_count FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T1.`d_quality` = 5 GROUP BY T1.`directorid` ORDER BY film_count DESC LIMIT 1 ) AS T1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`directorid` FROM ( SELECT T1.`directorid`, COUNT(T2.`movieid`) AS film_count FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T1.`d_quality` = 5 GROUP BY T1.`directorid` ORDER BY film_count DESC LIMIT 1 ) AS T1",
        "repair_result": 1
    },
    {
        "idx": 289,
        "db_id": "movielens",
        "question": "How many drama movie with the rating of 3?",
        "evidence": "",
        "gold": "SELECT COUNT(DISTINCT T2.movieid) FROM u2base AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T2.genre = 'drama' AND T1.rating = 3",
        "pred": "SELECT COUNT(*) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` INNER JOIN u2base AS T3 ON T1.`movieid` = T3.`movieid` WHERE T2.`genre` = 'Drama' AND T3.`rating` = '3'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` INNER JOIN u2base AS T3 ON T1.`movieid` = T3.`movieid` WHERE T2.`genre` = 'Drama' AND T3.`rating` = '3'",
        "repair_result": 0
    },
    {
        "idx": 290,
        "db_id": "movielens",
        "question": "How many of the movies rated 5 are rated by a user between the ages of 25 and 35?",
        "evidence": "",
        "gold": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 5 AND T2.age BETWEEN 25 AND 35",
        "pred": "SELECT COUNT(*) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T2.`rating` = '5' AND T2.`userid` IN ( SELECT DISTINCT T3.`userid` FROM users AS T3 INNER JOIN u2base AS T4 ON T3.`userid` = T4.`userid` WHERE T3.`age` BETWEEN 25 AND 35 )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T2.`rating` = '5' AND T2.`userid` IN ( SELECT DISTINCT T3.`userid` FROM users AS T3 INNER JOIN u2base AS T4 ON T3.`userid` = T4.`userid` WHERE T3.`age` BETWEEN 25 AND 35 )",
        "repair_result": 1
    },
    {
        "idx": 291,
        "db_id": "movielens",
        "question": "Please list all horror films that have a rating of 1.",
        "evidence": "",
        "gold": "SELECT T1.movieid FROM u2base AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.rating = 1 AND T2.genre = 'Horror'",
        "pred": "SELECT T1.* FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` INNER JOIN u2base AS T3 ON T1.`movieid` = T3.`movieid` WHERE T2.`genre` = 'Horror' AND T3.`rating` = '1'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.* FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` INNER JOIN u2base AS T3 ON T1.`movieid` = T3.`movieid` WHERE T2.`genre` = 'Horror' AND T3.`rating` = '1'",
        "repair_result": 0
    },
    {
        "idx": 292,
        "db_id": "movielens",
        "question": "List the IDs of all the directors who worked on French films.",
        "evidence": "France is a country",
        "gold": "SELECT T2.directorid FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'France'",
        "pred": "SELECT DISTINCT T2.`directorid` FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'France'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.`directorid` FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'France'",
        "repair_result": 1
    },
    {
        "idx": 293,
        "db_id": "movielens",
        "question": "List all of the user ids and ages who rated movies with the id 1695219?",
        "evidence": "",
        "gold": "SELECT T2.userid, T2.age FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.movieid = 1695219",
        "pred": "SELECT T1.`userid`, T1.`age` FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` WHERE T2.`movieid` = 1695219",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`userid`, T1.`age` FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` WHERE T2.`movieid` = 1695219",
        "repair_result": 1
    },
    {
        "idx": 294,
        "db_id": "movielens",
        "question": "Which genre contains the greatest number of non-English films?",
        "evidence": "isEnglish = 'F' means non-English",
        "gold": "SELECT T2.genre FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.isEnglish = 'F' GROUP BY T2.genre ORDER BY COUNT(T1.movieid) DESC LIMIT 1",
        "pred": "SELECT T3.`genre` FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` INNER JOIN movies2actors AS T3 ON T1.`movieid` = T3.`movieid` WHERE T1.`isEnglish` = 'F' GROUP BY T3.`genre` ORDER BY COUNT(T1.`movieid`) DESC LIMIT 1",
        "pred_result": "no such column: T3.genre",
        "repair_sql": "SELECT T2.`genre` FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` INNER JOIN movies2actors AS T3 ON T1.`movieid` = T3.`movieid` WHERE T1.`isEnglish` = 'F' GROUP BY T2.`genre` ORDER BY COUNT(T1.`movieid`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 295,
        "db_id": "movielens",
        "question": "List the cast and the director of the movie with the id 1949144.",
        "evidence": "",
        "gold": "SELECT T1.actorid, T2.directorid FROM movies2actors AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.movieid = 1949144",
        "pred": "SELECT T2.`actorid`, T3.`directorid` FROM movies2actors AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`movieid` = 1949144",
        "pred_result": "no such column: T2.actorid",
        "repair_sql": "SELECT T1.actorid, T2.directorid FROM movies2actors AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.movieid = 1949144",
        "repair_result": 1
    },
    {
        "idx": 296,
        "db_id": "movielens",
        "question": "Among the actors who acted in UK movies, what percentage of actors received a rating of at least 3?",
        "evidence": "UK is a country",
        "gold": "SELECT CAST(SUM(IIF(T3.a_quality >= 3, 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T1.country = 'UK'",
        "pred": "SELECT COUNT(DISTINCT T1.`actorid`) * 100.0 / ( SELECT COUNT(DISTINCT T1.`actorid`) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.`actorid` = T2.`actorid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` INNER JOIN u2base AS T4 ON T1.`userid` = T4.`userid` WHERE T3.`country` = 'UK' AND T4.`rating` >= 3 ) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.`actorid` = T2.`actorid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` INNER JOIN u2base AS T4 ON T1.`userid` = T4.`userid` WHERE T3.`country` = 'UK' AND T4.`rating` >= 3",
        "pred_result": "no such column: T1.userid",
        "repair_sql": "SELECT COUNT(DISTINCT T1.`actorid`) * 100.0 / ( SELECT COUNT(DISTINCT T1.`actorid`) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.`actorid` = T2.`actorid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` INNER JOIN u2base AS T4 ON T4.`movieid` = T3.`movieid` WHERE T3.`country` = 'UK' AND T4.`rating` >= 3 ) AS percentage FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.`actorid` = T2.`actorid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` INNER JOIN u2base AS T4 ON T4.`movieid` = T3.`movieid` WHERE T3.`country` = 'UK' AND T4.`rating` >= 3",
        "repair_result": 0
    },
    {
        "idx": 297,
        "db_id": "movielens",
        "question": "What is the proportion of action movies directors who are called 'box office success paradox'?",
        "evidence": "'box office success paradox' means average revenue exceeds their quality; The proportion can be computed by [(avg_revenue > d_quality) / ()] * 100%",
        "gold": "SELECT CAST(SUM(IIF(T2.avg_revenue > T2.d_quality, 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.directorid = T2.directorid WHERE T1.genre = 'Action'",
        "pred": "SELECT (CAST(COUNT(*) AS REAL) / ( SELECT COUNT(*) FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T2.`genre` = 'Action' )) * 100 FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T2.`genre` = 'Action' AND T1.`avg_revenue` > T1.`d_quality",
        "pred_result": "unrecognized token: \"`d_quality\"",
        "repair_sql": "SELECT (CAST(COUNT(*) AS REAL) / ( SELECT COUNT(*) FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T2.genre = 'Action' )) * 100 FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T2.genre = 'Action' AND T1.avg_revenue > T1.d_quality",
        "repair_result": 1
    },
    {
        "idx": 298,
        "db_id": "movielens",
        "question": "Please list the actor IDs whose movies have the newest published date.",
        "evidence": "Year contains relative value, higher year value refers to newer date; Year = 4 refers to newest date",
        "gold": "SELECT T1.actorid FROM movies2actors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4",
        "pred": "SELECT DISTINCT T2.`actorid` FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`year` = ( SELECT MAX(`year`) FROM movies )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.`actorid` FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`year` = ( SELECT MAX(`year`) FROM movies )",
        "repair_result": 1
    },
    {
        "idx": 299,
        "db_id": "movielens",
        "question": "Who are cast members in an English movie which has a running time equal to 2? Please list their IDs.",
        "evidence": "isEnglish = 'T' means English movie",
        "gold": "SELECT T2.actorid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.runningtime = 2 AND T1.isEnglish = 'T'",
        "pred": "SELECT T2.`actorid` FROM movies2actors AS T2 WHERE T2.`movieid` IN ( SELECT T1.`movieid` FROM movies AS T1 WHERE T1.`isEnglish` = 'T' AND T1.`runningtime` = 2 )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`actorid` FROM movies2actors AS T2 WHERE T2.`movieid` IN ( SELECT T1.`movieid` FROM movies AS T1 WHERE T1.`isEnglish` = 'T' AND T1.`runningtime` = 2 )",
        "repair_result": 1
    },
    {
        "idx": 300,
        "db_id": "movielens",
        "question": "Which actor has acted in at least 2 French films? Please list their IDs.",
        "evidence": "France is a country",
        "gold": "SELECT T2.actorid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'France' GROUP BY T2.actorid HAVING COUNT(T1.movieid) > 2",
        "pred": "SELECT DISTINCT T1.`actorid` FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.`actorid` = T2.`actorid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` WHERE T3.`country` = 'France' GROUP BY T1.`actorid` HAVING COUNT(DISTINCT T3.`movieid`) >= 2",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`actorid` FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.`actorid` = T2.`actorid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` WHERE T3.`country` = 'France' GROUP BY T1.`actorid` HAVING COUNT(DISTINCT T3.`movieid`) >= 2",
        "repair_result": 0
    },
    {
        "idx": 301,
        "db_id": "movielens",
        "question": "How many American movies have cast number more than 1?",
        "evidence": "USA is a country",
        "gold": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA' AND T2.cast_num > 1",
        "pred": "SELECT COUNT(DISTINCT T1.`movieid`) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'USA' AND T2.`cast_num` > 1",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`movieid`) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'USA' AND T2.`cast_num` > 1",
        "repair_result": 0
    },
    {
        "idx": 302,
        "db_id": "movielens",
        "question": "Please list movie IDs which has the oldest publication date and the cast numbers are zero.",
        "evidence": "Year contains relative value, higher year value refers to newer date; Year = 1 refer to oldest date",
        "gold": "SELECT DISTINCT T1.movieid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.year = 1 AND T2.cast_num = 0",
        "pred": "SELECT T1.`movieid` FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`year` = ( SELECT MIN(`year`) FROM movies ) AND T2.`cast_num` = 0",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`movieid` FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`year` = ( SELECT MIN(`year`) FROM movies ) AND T2.`cast_num` = 0",
        "repair_result": 1
    },
    {
        "idx": 303,
        "db_id": "movielens",
        "question": "How many actors have acted in both US or UK films?",
        "evidence": "US and UK are 2 countries",
        "gold": "SELECT COUNT(T1.actorid) FROM movies2actors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA' OR T2.country = 'UK'",
        "pred": "SELECT COUNT(*) FROM ( SELECT DISTINCT T1.`actorid` FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.`actorid` = T2.`actorid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` WHERE T3.`country` = 'USA' INTERSECT SELECT DISTINCT T1.`actorid` FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.`actorid` = T2.`actorid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` WHERE T3.`country` = 'UK' )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM ( SELECT DISTINCT T1.`actorid` FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.`actorid` = T2.`actorid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` WHERE T3.`country` = 'USA' INTERSECT SELECT DISTINCT T1.`actorid` FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.`actorid` = T2.`actorid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` WHERE T3.`country` = 'UK' )",
        "repair_result": 0
    },
    {
        "idx": 304,
        "db_id": "movielens",
        "question": "How many directors with average revenue of 4 have made either action or adventure films?",
        "evidence": "",
        "gold": "SELECT COUNT(T1.directorid) FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.avg_revenue = 4 AND (T2.genre = 'Adventure' OR T2.genre = 'Action')",
        "pred": "SELECT COUNT(DISTINCT T1.`directorid`) FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T2.`avg_revenue` = 4 AND T1.`genre` IN ('Action', 'Adventure')",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`directorid`) FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T2.`avg_revenue` = 4 AND T1.`genre` IN ('Action', 'Adventure')",
        "repair_result": 0
    },
    {
        "idx": 305,
        "db_id": "movielens",
        "question": "Please list director IDs who have the quality of at least 3 and have made at least 2 different genres of movies.",
        "evidence": "",
        "gold": "SELECT T1.directorid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality >= 3 GROUP BY T1.directorid HAVING COUNT(T2.movieid) >= 2",
        "pred": "SELECT T1.`directorid` FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T1.`d_quality` >= 3 GROUP BY T1.`directorid` HAVING COUNT(DISTINCT T2.`genre`) >= 2",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`directorid` FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T1.`d_quality` >= 3 GROUP BY T1.`directorid` HAVING COUNT(DISTINCT T2.`genre`) >= 2",
        "repair_result": 0
    },
    {
        "idx": 306,
        "db_id": "movielens",
        "question": "How many American comedies are there?",
        "evidence": "USA is a country",
        "gold": "SELECT COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA' AND T2.genre = 'comedy'",
        "pred": "SELECT COUNT(*) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'USA' AND T2.`genre` = 'Comedy'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'USA' AND T2.`genre` = 'Comedy'",
        "repair_result": 0
    },
    {
        "idx": 307,
        "db_id": "movielens",
        "question": "How many latest released dramas and action movies?",
        "evidence": "",
        "gold": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4 AND T1.genre IN ('Action', 'drama')",
        "pred": "SELECT COUNT(*) FROM ( SELECT T1.`movieid` FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T2.`genre` IN ('Drama', 'Action') ORDER BY T1.`year` DESC )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM ( SELECT T1.`movieid` FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T2.`genre` IN ('Drama', 'Action') ORDER BY T1.`year` DESC )",
        "repair_result": 0
    },
    {
        "idx": 308,
        "db_id": "movielens",
        "question": "What horror movies have a running time of at least 2? Please list movie IDs.",
        "evidence": "Higher value of running time means running time is longer",
        "gold": "SELECT T1.movieid FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.runningtime >= 2 AND T1.genre = 'Horror'",
        "pred": "SELECT T1.`movieid` FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`genre` = 'Horror' AND T1.`runningtime` >= 2",
        "pred_result": "no such column: T1.genre",
        "repair_sql": "SELECT T1.`movieid` FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T2.`genre` = 'Horror' AND T1.`runningtime` >= 2",
        "repair_result": 1
    },
    {
        "idx": 309,
        "db_id": "movielens",
        "question": "Please calculate negative critical reception of American movies",
        "evidence": "'negative critical reception' refers to percentage of movies with a rating of 1, which = [count(rating = 1) / count(all movies)] * 100% ",
        "gold": "SELECT CAST(SUM(IIF(T1.rating = 1, 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA'",
        "pred": "SELECT (CAST(( SELECT COUNT(*) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T2.`rating` = '1' AND T1.`country` = 'USA' ) AS REAL) / COUNT(*)) * 100 AS negative_critical_reception FROM movies WHERE `country` = 'USA'",
        "pred_result": 0,
        "repair_sql": "SELECT (CAST(( SELECT COUNT(*) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T2.`rating` = '1' AND T1.`country` = 'USA' ) AS REAL) / COUNT(*)) * 100 AS negative_critical_reception FROM movies WHERE `country` = 'USA'",
        "repair_result": 0
    },
    {
        "idx": 310,
        "db_id": "movielens",
        "question": "What is the disparate number of the comedy films that got the 1 rating?",
        "evidence": "",
        "gold": "SELECT COUNT(DISTINCT T1.movieid) FROM movies2directors AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T2.rating = 1 AND T1.genre = 'comedy'",
        "pred": "SELECT COUNT(DISTINCT T1.`movieid`) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` INNER JOIN u2base AS T3 ON T1.`movieid` = T3.`movieid` WHERE T2.`genre` = 'Comedy' AND T3.`rating` = '1'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`movieid`) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` INNER JOIN u2base AS T3 ON T1.`movieid` = T3.`movieid` WHERE T2.`genre` = 'Comedy' AND T3.`rating` = '1'",
        "repair_result": 0
    },
    {
        "idx": 311,
        "db_id": "movielens",
        "question": "What's different average revenue status for director who directed the movie that got the most 1 ratings?",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.avg_revenue FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 5",
        "pred": "SELECT DISTINCT T2.`avg_revenue` FROM directors AS T2 WHERE T2.`directorid` = ( SELECT T2.`directorid` FROM movies2directors AS T2 WHERE T2.`movieid` = ( SELECT T1.`movieid` FROM u2base AS T1 WHERE T1.`rating` = '1' GROUP BY T1.`movieid` ORDER BY COUNT(*) DESC LIMIT 1 ) )",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T2.`avg_revenue` FROM directors AS T2 WHERE T2.`directorid` = ( SELECT T2.`directorid` FROM movies2directors AS T2 WHERE T2.`movieid` = ( SELECT T1.`movieid` FROM u2base AS T1 WHERE T1.`rating` = '1' GROUP BY T1.`movieid` ORDER BY COUNT(*) DESC LIMIT 1 ) )",
        "repair_result": 0
    },
    {
        "idx": 312,
        "db_id": "movielens",
        "question": "How many French movies got the highest ranking?",
        "evidence": "France is a country",
        "gold": "SELECT COUNT(movieid) FROM movies WHERE country = 'France' AND movieid IN ( SELECT movieid FROM u2base WHERE rating = ( SELECT MAX(rating) FROM u2base ) )",
        "pred": "SELECT COUNT(*) FROM u2base AS T1 WHERE T1.`rating` = ( SELECT MAX(CAST(T2.`rating` AS INTEGER)) FROM u2base AS T2 WHERE T2.`movieid` IN ( SELECT DISTINCT T3.`movieid` FROM movies AS T3 WHERE T3.`country` = 'France' ) )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM u2base AS T1 WHERE T1.`rating` = ( SELECT MAX(CAST(T2.`rating` AS INTEGER)) FROM u2base AS T2 WHERE T2.`movieid` IN ( SELECT DISTINCT T3.`movieid` FROM movies AS T3 WHERE T3.`country` = 'France' ) )",
        "repair_result": 0
    },
    {
        "idx": 313,
        "db_id": "movielens",
        "question": "List the movie that has been rated most by 25 years old users.",
        "evidence": "",
        "gold": "SELECT T2.movieid FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T1.age = 25 GROUP BY T2.movieid ORDER BY COUNT(T1.userid) DESC LIMIT 1",
        "pred": "SELECT T4.`movieid` FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` INNER JOIN ( SELECT T2.`movieid`, COUNT(T2.`movieid`) AS rating_count FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` WHERE T1.`age` = '25' GROUP BY T2.`movieid` ORDER BY rating_count DESC LIMIT 1 ) AS T4 ON T3.`movieid` = T4.`movieid`",
        "pred_result": 1,
        "repair_sql": "SELECT T4.`movieid` FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` INNER JOIN ( SELECT T2.`movieid`, COUNT(T2.`movieid`) AS rating_count FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` WHERE T1.`age` = '25' GROUP BY T2.`movieid` ORDER BY rating_count DESC LIMIT 1 ) AS T4 ON T3.`movieid` = T4.`movieid`",
        "repair_result": 1
    },
    {
        "idx": 314,
        "db_id": "movielens",
        "question": "How many separate 35 year-old uesers have rated the movie from UK?",
        "evidence": "UK is a country",
        "gold": "SELECT COUNT(DISTINCT T2.userid) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid INNER JOIN users AS T3 ON T2.userid = T3.userid WHERE T1.country = 'UK' AND T3.age = 35",
        "pred": "SELECT COUNT(DISTINCT T1.`userid`) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` WHERE T1.`age` = '35' AND T3.`country` = 'UK'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`userid`) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` WHERE T1.`age` = '35' AND T3.`country` = 'UK'",
        "repair_result": 1
    },
    {
        "idx": 315,
        "db_id": "movielens",
        "question": "List the user ids and ages who gave the rate 2 to the movie No. 2409051.",
        "evidence": "",
        "gold": "SELECT T1.userid, T1.age FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T2.movieid = '2409051' AND T2.rating = 2",
        "pred": "SELECT T1.`userid`, T1.`age` FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` WHERE T2.`movieid` = 2409051 AND T2.`rating` = '2'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`userid`, T1.`age` FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` WHERE T2.`movieid` = 2409051 AND T2.`rating` = '2'",
        "repair_result": 1
    },
    {
        "idx": 316,
        "db_id": "movielens",
        "question": "Please give the ids of the oldest films that got the most ratings.",
        "evidence": "Films and movies share the same meaning; oldest film refers to the movie with year = 1",
        "gold": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T1.rating = 5 AND T2.year = 1",
        "pred": "SELECT T1.`movieid` FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`year` = 1 GROUP BY T1.`movieid` ORDER BY SUM(CAST(T2.`rating` AS INTEGER)) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`movieid` FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`year` = 1 GROUP BY T1.`movieid` ORDER BY SUM(CAST(T2.`rating` AS INTEGER)) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 317,
        "db_id": "movielens",
        "question": "Which different movies from France got the least ratings?",
        "evidence": "France is a country",
        "gold": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'France' AND T1.rating = 1",
        "pred": "SELECT T1.`movieid` FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'France' GROUP BY T1.`movieid` ORDER BY COUNT(T2.`rating`) ASC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`movieid` FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'France' GROUP BY T1.`movieid` ORDER BY COUNT(T2.`rating`) ASC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 318,
        "db_id": "movielens",
        "question": "How many female actors have been played a role in any of French or USA movies?",
        "evidence": "French and USA are two countries; Female actors mean that a_gender = 'F'",
        "gold": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country IN ('France', 'USA')",
        "pred": "SELECT COUNT(DISTINCT T1.`actorid`) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.`actorid` = T2.`actorid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` WHERE T1.`a_gender` = 'F' AND T3.`country` IN ('USA', 'France')",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`actorid`) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.`actorid` = T2.`actorid` INNER JOIN movies AS T3 ON T2.`movieid` = T3.`movieid` WHERE T1.`a_gender` = 'F' AND T3.`country` IN ('USA', 'France')",
        "repair_result": 0
    },
    {
        "idx": 319,
        "db_id": "movielens",
        "question": "How many different actors have played a role in the highest rating movie?",
        "evidence": "highest rating of a movie is 5",
        "gold": "SELECT COUNT(DISTINCT T2.actorid) FROM u2base AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.rating = 5",
        "pred": "SELECT COUNT(DISTINCT `actorid`) FROM movies2actors WHERE `movieid` = ( SELECT `movieid` FROM movies WHERE `movieid` IN ( SELECT `movieid` FROM u2base WHERE `rating` = '5' GROUP BY `movieid` ORDER BY COUNT(DISTINCT `actorid`) DESC LIMIT 1 ) )",
        "pred_result": "no such column: actorid",
        "repair_sql": "SELECT COUNT(DISTINCT a.actorid) FROM movies2actors a JOIN ( SELECT m.movieid FROM movies m JOIN u2base u ON m.movieid = u.movieid WHERE u.rating = '5' GROUP BY m.movieid HAVING MAX(m.rating) = 5 ) t ON a.movieid = t.movieid",
        "repair_result": "no such column: m.rating"
    },
    {
        "idx": 320,
        "db_id": "movielens",
        "question": "Which Crime film got the lowest average rating?",
        "evidence": "",
        "gold": "SELECT T2.movieid FROM u2base AS T2 INNER JOIN movies2directors AS T3 ON T2.movieid = T3.movieid WHERE T3.genre = 'Crime' GROUP BY T2.movieid ORDER BY AVG(T2.rating) LIMIT 1",
        "pred": "SELECT T1.`movieid` FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T2.`genre` = 'Crime' GROUP BY T1.`movieid` HAVING AVG(CAST((SELECT T3.`rating` FROM u2base AS T3 WHERE T3.`movieid` = T1.`movieid`) AS REAL)) = ( SELECT MIN(AVG(CAST(T4.`rating` AS REAL))) FROM u2base AS T4 WHERE T4.`movieid` IN ( SELECT T5.`movieid` FROM movies AS T5 INNER JOIN movies2directors AS T6 ON T5.`movieid` = T6.`movieid` WHERE T6.`genre` = 'Crime' ) )",
        "pred_result": "misuse of aggregate function AVG()",
        "repair_sql": "SELECT T1.`movieid` FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` INNER JOIN u2base AS T3 ON T1.`movieid` = T3.`movieid` WHERE T2.`genre` = 'Crime' GROUP BY T1.`movieid` HAVING AVG(CAST(T3.`rating` AS REAL)) = ( SELECT MIN(avg_rating) FROM ( SELECT AVG(CAST(T4.`rating` AS REAL)) AS avg_rating FROM u2base AS T4 WHERE T4.`movieid` IN ( SELECT T5.`movieid` FROM movies AS T5 INNER JOIN movies2directors AS T6 ON T5.`movieid` = T6.`movieid` WHERE T6.`genre` = 'Crime' ) GROUP BY T4.`movieid` ) )",
        "repair_result": 0
    },
    {
        "idx": 321,
        "db_id": "movielens",
        "question": "What's the ratio of gender in actors to actress in all the UK movies?",
        "evidence": "UK is a country; Male actors mean that a_gender = 'M'; Female actors mean that a_gender = 'F'; ratio; ratio of gender in actors = count(a_gender = 'M') / a_gender = 'F'",
        "gold": "SELECT CAST(SUM(IIF(T3.a_gender = 'M', 1, 0)) AS REAL) / SUM(IIF(T3.a_gender = 'F', 1, 0)) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T1.country = 'UK'",
        "pred": "SELECT CAST(SUM(CASE WHEN T3.`a_gender` = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T3.`a_gender` = 'F' THEN 1 ELSE 0 END) AS gender_ratio FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.`movieid` = T2.`movieid` INNER JOIN actors AS T3 ON T2.`actorid` = T3.`actorid` WHERE T1.`country` = 'UK'",
        "pred_result": 1,
        "repair_sql": "SELECT CAST(SUM(CASE WHEN T3.`a_gender` = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T3.`a_gender` = 'F' THEN 1 ELSE 0 END) AS gender_ratio FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.`movieid` = T2.`movieid` INNER JOIN actors AS T3 ON T2.`actorid` = T3.`actorid` WHERE T1.`country` = 'UK'",
        "repair_result": 1
    },
    {
        "idx": 322,
        "db_id": "movielens",
        "question": "How many 35-year-old female users gave the movie 1711133 a rating of 3?",
        "evidence": "Female users mean that u_gender = 'F'",
        "gold": "SELECT COUNT(T1.userid) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T2.rating = 3 AND T2.movieid = '1711133' AND T1.age = 35 AND T1.u_gender = 'F'",
        "pred": "SELECT COUNT(*) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` WHERE T1.`age` = '35' AND T1.`u_gender` = 'F' AND T2.`movieid` = '1711133' AND T2.`rating` = '3'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.`userid` = T2.`userid` WHERE T1.`age` = '35' AND T1.`u_gender` = 'F' AND T2.`movieid` = '1711133' AND T2.`rating` = '3'",
        "repair_result": 1
    },
    {
        "idx": 323,
        "db_id": "movielens",
        "question": "How many users have rated 1 each for the UK's second newest movies with a running time of 2?",
        "evidence": "second newest movies refers to year = 2 since year in this database is a relative value, less is the newer",
        "gold": "SELECT COUNT(T2.userid) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'UK' AND T1.runningtime = 2 AND T2.rating = 1 AND T1.year = 2",
        "pred": "SELECT COUNT(DISTINCT T1.`userid`) FROM u2base AS T1 WHERE T1.`movieid` = ( SELECT `movieid` FROM movies WHERE `country` = 'UK' AND `year` = ( SELECT MAX(`year`) FROM movies WHERE `year` < ( SELECT MAX(`year`) FROM movies ) ) AND `runningtime` = 2 ) AND T1.`rating` = '1'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`userid`) FROM u2base AS T1 WHERE T1.`movieid` = ( SELECT `movieid` FROM movies WHERE `country` = 'UK' AND `year` = ( SELECT MAX(`year`) FROM movies WHERE `year` < ( SELECT MAX(`year`) FROM movies ) ) AND `runningtime` = 2 ) AND T1.`rating` = '1'",
        "repair_result": 0
    },
    {
        "idx": 324,
        "db_id": "movielens",
        "question": "How many unique directors with an average earnings of 2 and a quality of 3 have not made comedy films? List them.",
        "evidence": "",
        "gold": "SELECT DISTINCT T1.directorid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 3 AND T1.avg_revenue = 2 AND T2.genre != 'Comedy'",
        "pred": "SELECT DISTINCT T1.`directorid` FROM directors AS T1 LEFT JOIN movies2directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T1.`avg_revenue` = 2 AND T1.`d_quality` = 3 AND (T2.`genre` <> 'Comedy' OR T2.`genre` IS NULL)",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`directorid` FROM directors AS T1 LEFT JOIN movies2directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T1.`avg_revenue` = 2 AND T1.`d_quality` = 3 AND (T2.`genre` <> 'Comedy' OR T2.`genre` IS NULL)",
        "repair_result": 1
    },
    {
        "idx": 325,
        "db_id": "movielens",
        "question": "Calculate the percentage of female actors and quality 2 who have appeared twice at the casting of the film 1672580.",
        "evidence": "Female actors mean that a_gender = 'F'; percentage can be computed by [cast_num = 2 AND a_quality = 2 in female) / (all female actors)] * 100%",
        "gold": "SELECT CAST(SUM(IIF(T2.cast_num = 2 AND T1.a_quality = 2, 1, 0)) AS REAL) * 100 / COUNT(T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid WHERE T2.movieid = 1672580 AND T1.a_gender = 'F'",
        "pred": "SELECT (CAST(( SELECT COUNT(*) FROM actors AS A INNER JOIN movies2actors AS M2A ON A.actorid = M2A.actorid WHERE A.a_gender = 'F' AND A.a_quality = 2 AND M2A.movieid = 1672580 AND M2A.cast_num = 2 ) AS REAL) / ( SELECT COUNT(*) FROM actors AS A INNER JOIN movies2actors AS M2A ON A.actorid = M2A.actorid WHERE A.a_gender = 'F' AND M2A.movieid = 1672580 )) * 100 AS percentage",
        "pred_result": 0,
        "repair_sql": "SELECT (CAST(( SELECT COUNT(*) FROM actors AS A INNER JOIN movies2actors AS M2A ON A.actorid = M2A.actorid WHERE A.a_gender = 'F' AND A.a_quality = 2 AND M2A.movieid = 1672580 AND M2A.cast_num = 2 ) AS REAL) / ( SELECT COUNT(*) FROM actors AS A INNER JOIN movies2actors AS M2A ON A.actorid = M2A.actorid WHERE A.a_gender = 'F' AND M2A.movieid = 1672580 )) * 100 AS percentage",
        "repair_result": 0
    },
    {
        "idx": 326,
        "db_id": "movielens",
        "question": "How many of the worst actors are men and how many of the worst actors are women? Indicate your answer in ratio form.",
        "evidence": "The worst actors means a_quality = 0; Men and male share the same meaning; men actors refers to a_gender = 'M'",
        "gold": "SELECT CAST(SUM(IIF(a_gender = 'M', 1, 0)) AS REAL) / SUM(IIF(a_gender = 'F', 1, 0)) FROM actors WHERE a_quality = 0",
        "pred": "SELECT (SELECT COUNT(*) FROM actors WHERE a_quality = 0 AND a_gender = 'M') / (SELECT COUNT(*) FROM actors WHERE a_quality = 0 AND a_gender = 'F') AS ratio",
        "pred_result": 0,
        "repair_sql": "SELECT (SELECT COUNT(*) FROM actors WHERE a_quality = 0 AND a_gender = 'M') / (SELECT COUNT(*) FROM actors WHERE a_quality = 0 AND a_gender = 'F') AS ratio",
        "repair_result": 0
    },
    {
        "idx": 327,
        "db_id": "movielens",
        "question": "Which actor has appeared in the most films?",
        "evidence": "",
        "gold": "SELECT actorid FROM movies2actors GROUP BY actorid ORDER BY COUNT(movieid) DESC LIMIT 1",
        "pred": "SELECT T1.`actorid` FROM ( SELECT T1.`actorid`, COUNT(T1.`movieid`) AS film_count FROM movies2actors AS T1 GROUP BY T1.`actorid` ) AS T1 ORDER BY T1.`film_count` DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`actorid` FROM ( SELECT T1.`actorid`, COUNT(T1.`movieid`) AS film_count FROM movies2actors AS T1 GROUP BY T1.`actorid` ) AS T1 ORDER BY T1.`film_count` DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 328,
        "db_id": "movielens",
        "question": "What is the most popular genre of film directed by directors?",
        "evidence": "Most popular genre indicates that the genre has the most number of movies",
        "gold": "SELECT genre FROM movies2directors GROUP BY genre ORDER BY COUNT(movieid) DESC LIMIT 1",
        "pred": "WITH director_movie_count AS ( SELECT T3.`directorid`, T4.`genre`, COUNT(T4.`movieid`) AS movie_count FROM directors AS T3 INNER JOIN movies2directors AS T4 ON T3.`directorid` = T4.`directorid` GROUP BY T3.`directorid`, T4.`genre` ) SELECT `genre`, COUNT(`directorid`) AS director_count FROM ( SELECT T1.`directorid`, T2.`genre` FROM director_movie_count AS T1 INNER JOIN ( SELECT `directorid`, `genre`, MAX(`movie_count`) AS max_count FROM director_movie_count GROUP BY `directorid` ) AS T2 ON T1.`directorid` = T2.`directorid` AND T1.`movie_count` = T2.`max_count` ) GROUP BY `genre` ORDER BY COUNT(`directorid`) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "WITH director_movie_count AS ( SELECT T3.`directorid`, T4.`genre`, COUNT(T4.`movieid`) AS movie_count FROM directors AS T3 INNER JOIN movies2directors AS T4 ON T3.`directorid` = T4.`directorid` GROUP BY T3.`directorid`, T4.`genre` ) SELECT `genre`, COUNT(`directorid`) AS director_count FROM ( SELECT T1.`directorid`, T2.`genre` FROM director_movie_count AS T1 INNER JOIN ( SELECT `directorid`, `genre`, MAX(`movie_count`) AS max_count FROM director_movie_count GROUP BY `directorid` ) AS T2 ON T1.`directorid` = T2.`directorid` AND T1.`movie_count` = T2.`max_count` ) GROUP BY `genre` ORDER BY COUNT(`directorid`) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 329,
        "db_id": "movielens",
        "question": "What are the most common film genres made by the worst directors?",
        "evidence": "d_quality = 5 refers to the best directors, d_quality = 0 refers to the worst directors",
        "gold": "SELECT T2.genre FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 0 GROUP BY T2.genre ORDER BY COUNT(T2.movieid) DESC LIMIT 1",
        "pred": "SELECT T2.`genre`, COUNT(T2.`genre`) AS genre_count FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T1.`d_quality` = 0 GROUP BY T2.`genre` ORDER BY genre_count DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`genre`, COUNT(T2.`genre`) AS genre_count FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T1.`d_quality` = 0 GROUP BY T2.`genre` ORDER BY genre_count DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 330,
        "db_id": "movielens",
        "question": "What non-English American film/s has received the lowest user ratings? Mention the movie's I.D.",
        "evidence": "USA is a country; non-English means isEnglish = 'F'",
        "gold": "SELECT T2.movieid FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.isEnglish = 'F' AND T1.country = 'USA' ORDER BY T2.rating LIMIT 1",
        "pred": "SELECT T1.`movieid` FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'USA' AND T1.`isEnglish` = 'F' GROUP BY T1.`movieid` ORDER BY AVG(T2.`rating`) ASC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`movieid` FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`country` = 'USA' AND T1.`isEnglish` = 'F' GROUP BY T1.`movieid` ORDER BY AVG(T2.`rating`) ASC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 331,
        "db_id": "movielens",
        "question": "What is the total average movie directed by the directors who's quality and revenue is 4?",
        "evidence": "",
        "gold": "SELECT CAST(SUM(CASE WHEN T1.d_quality = 4 AND T1.avg_revenue = 4 THEN 1 ELSE 0 END) AS REAL) / COUNT(T2.movieid) FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid",
        "pred": "SELECT AVG(T4.`rating`) FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.`directorid` = T2.`directorid` INNER JOIN movies AS T3 ON T1.`movieid` = T3.`movieid` INNER JOIN u2base AS T4 ON T1.`movieid` = T4.`movieid` WHERE T2.`d_quality` = 4 AND T2.`avg_revenue` = 4",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(T4.`rating`) FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.`directorid` = T2.`directorid` INNER JOIN movies AS T3 ON T1.`movieid` = T3.`movieid` INNER JOIN u2base AS T4 ON T1.`movieid` = T4.`movieid` WHERE T2.`d_quality` = 4 AND T2.`avg_revenue` = 4",
        "repair_result": 0
    },
    {
        "idx": 332,
        "db_id": "movielens",
        "question": "Which movies have received the greatest ratings from female users whose occupations fall within the category of 3?",
        "evidence": "Female users mean that u_gender = 'F'",
        "gold": "SELECT T2.movieid FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.u_gender = 'F' AND T1.occupation = 3 AND T2.rating = 5",
        "pred": "SELECT T4.`movieid` FROM ( SELECT T2.`movieid`, MAX(T3.`rating`) AS max_rating FROM u2base AS T1 INNER JOIN users AS T2 ON T1.`userid` = T2.`userid` WHERE T2.`u_gender` = 'F' AND T2.`occupation` = '3' GROUP BY T2.`movieid` ) AS T4 WHERE T4.`rating` = T4.`max_rating`",
        "pred_result": "no such column: T2.movieid",
        "repair_sql": "SELECT T4.`movieid` FROM ( SELECT T1.`movieid`, MAX(T1.`rating`) AS max_rating FROM u2base AS T1 INNER JOIN users AS T2 ON T1.`userid` = T2.`userid` WHERE T2.`u_gender` = 'F' AND T2.`occupation` = '3' GROUP BY T1.`movieid` ) AS T4 WHERE T4.`max_rating` = (SELECT MAX(T4.`max_rating`) FROM ( SELECT T1.`movieid`, MAX(T1.`rating`) AS max_rating FROM u2base AS T1 INNER JOIN users AS T2 ON T1.`userid` = T2.`userid` WHERE T2.`u_gender` = 'F' AND T2.`occupation` = '3' GROUP BY T1.`movieid` ) AS T4)",
        "repair_result": 1
    },
    {
        "idx": 333,
        "db_id": "movielens",
        "question": "How many female actresses appeared in the movie 2312852, what country was it in, and what was it's running time?",
        "evidence": "female actresses mean that a_gender = 'F'",
        "gold": "SELECT SUM(IIF(T1.a_gender = 'F', 1, 0)) , T3.country, T3.runningtime FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T2.movieid = 2312852 GROUP BY T3.country, T3.runningtime",
        "pred": "SELECT COUNT(T2.`actorid`) FROM movies2actors AS T2 INNER JOIN actors AS T3 ON T2.`actorid` = T3.`actorid` WHERE T2.`movieid` = 2312852 AND T3.`a_gender` = 'F'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(T2.`actorid`) FROM movies2actors AS T2 INNER JOIN actors AS T3 ON T2.`actorid` = T3.`actorid` WHERE T2.`movieid` = 2312852 AND T3.`a_gender` = 'F'",
        "repair_result": 0
    },
    {
        "idx": 334,
        "db_id": "movielens",
        "question": "How many horror movies were made by the worst directors?",
        "evidence": "d_quality = 5 refers to direct the best, d_quality = 0 refers to direct the worst",
        "gold": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid INNER JOIN directors AS T3 ON T1.directorid = T3.directorid WHERE T1.genre = 'horror' AND T3.d_quality = 0",
        "pred": "SELECT COUNT(T1.`movieid`) FROM movies2directors AS T1 WHERE T1.`genre` = 'Horror' AND T1.`directorid` IN ( SELECT `directorid` FROM directors WHERE `d_quality` = 0 )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(T1.`movieid`) FROM movies2directors AS T1 WHERE T1.`genre` = 'Horror' AND T1.`directorid` IN ( SELECT `directorid` FROM directors WHERE `d_quality` = 0 )",
        "repair_result": 0
    },
    {
        "idx": 335,
        "db_id": "movielens",
        "question": "What are the genres of all the English-language foreign films having a runtime of two hours or less? List each one.",
        "evidence": "isEnglish = 'T' means films in English; Film and movie share the same meaning",
        "gold": "SELECT T2.genre FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.runningtime <= 2 AND T1.isEnglish = 'T' AND T1.country = 'other'",
        "pred": "SELECT DISTINCT T2.`genre` FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`isEnglish` = 'T' AND T1.`runningtime` <= 2",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.`genre` FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`isEnglish` = 'T' AND T1.`runningtime` <= 2",
        "repair_result": 1
    },
    {
        "idx": 336,
        "db_id": "movielens",
        "question": "Among the English comedy movies produced in the UK, how many movies with a running time of 3 was rated the highest by users between the age 45-50? Indicate the movie names.",
        "evidence": "UK is a country",
        "gold": "SELECT DISTINCT T1.movieid FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid INNER JOIN u2base AS T3 ON T1.movieid = T3.movieid INNER JOIN users AS T4 ON T3.userid = T4.userid WHERE T1.country = 'UK' AND T2.genre = 'Comedy' AND T1.runningtime = 3 AND T3.rating = 5 AND T4.age BETWEEN 45 AND 50 AND T1.isEnglish = 'T'",
        "pred": "SELECT COUNT(*), T3.`movieid` FROM ( SELECT T1.`movieid` FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`isEnglish` = 'T' AND T1.`country` = 'UK' AND T1.`runningtime` = 3 AND T2.`genre` = 'Comedy' ) AS T3 INNER JOIN ( SELECT T1.`movieid` FROM u2base AS T1 INNER JOIN users AS T2 ON T1.`userid` = T2.`userid` WHERE T2.`age` BETWEEN 45 AND 50 GROUP BY T1.`movieid` ORDER BY MAX(CAST(T1.`rating` AS INTEGER)) DESC ) AS T4 ON T3.`movieid` = T4.`movieid`",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*), T3.`movieid` FROM ( SELECT T1.`movieid` FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`isEnglish` = 'T' AND T1.`country` = 'UK' AND T1.`runningtime` = 3 AND T2.`genre` = 'Comedy' ) AS T3 INNER JOIN ( SELECT T1.`movieid` FROM u2base AS T1 INNER JOIN users AS T2 ON T1.`userid` = T2.`userid` WHERE T2.`age` BETWEEN 45 AND 50 GROUP BY T1.`movieid` ORDER BY MAX(CAST(T1.`rating` AS INTEGER)) DESC ) AS T4 ON T3.`movieid` = T4.`movieid`",
        "repair_result": 0
    },
    {
        "idx": 337,
        "db_id": "movielens",
        "question": "What is the percentage difference of English and non-English-language crime movies in other countries in year 3?",
        "evidence": "non-English-language refers to isEnglish = 'F'; The percentage difference can be computed by [count(isEnglish = 'T' in movies) - count(isEnglish = 'F' in movies) / (all movies)] * 100%",
        "gold": "SELECT CAST(SUM(IIF(T1.isEnglish = 'T', 1, 0)) - SUM(IIF(T1.isEnglish = 'F', 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'other' AND T1.year = 3",
        "pred": "SELECT ((english_crime_movies - non_english_crime_movies) / (english_crime_movies + non_english_crime_movies)) * 100 AS percentage_difference FROM ( SELECT SUM(CASE WHEN T1.`isEnglish` = 'T' AND T2.`genre` = 'Crime' AND T1.`country` != 'USA' THEN 1 ELSE 0 END) AS english_crime_movies, SUM(CASE WHEN T1.`isEnglish` = 'F' AND T2.`genre` = 'Crime' AND T1.`country` != 'USA' THEN 1 ELSE 0 END) AS non_english_crime_movies FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`year` = 3 ) AS subquery",
        "pred_result": 0,
        "repair_sql": "SELECT ((english_crime_movies - non_english_crime_movies) / (english_crime_movies + non_english_crime_movies)) * 100 AS percentage_difference FROM ( SELECT SUM(CASE WHEN T1.`isEnglish` = 'T' AND T2.`genre` = 'Crime' AND T1.`country` != 'USA' THEN 1 ELSE 0 END) AS english_crime_movies, SUM(CASE WHEN T1.`isEnglish` = 'F' AND T2.`genre` = 'Crime' AND T1.`country` != 'USA' THEN 1 ELSE 0 END) AS non_english_crime_movies FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.`movieid` = T2.`movieid` WHERE T1.`year` = 3 ) AS subquery",
        "repair_result": 0
    },
    {
        "idx": 338,
        "db_id": "movielens",
        "question": "What is the total amount male and female actors who were casted in movie ID 1684910 and what is the proportion between the highest quality actors against the worst quality of actors? Indicate your answer in percentage. List the the director as well as the genre.",
        "evidence": "Female actors mean that a_gender = 'F'; Male actors mean that a_gender = 'M'; a_quality = 5 refers to act the best, a_quality = 0 refers to act the worst",
        "gold": "SELECT SUM(IIF(a_gender = 'M', 1, 0)) , SUM(IIF(a_gender = 'F', 1, 0)) , CAST(SUM(IIF(a_quality = 5, 1, 0)) AS REAL) * 100 / COUNT(*) , CAST(SUM(IIF(a_quality = 0, 1, 0)) AS REAL) * 100 / COUNT(*), ( SELECT directorid FROM movies2directors WHERE movieid = 1684910 ) , ( SELECT genre FROM movies2directors WHERE movieid = 1684910 ) FROM actors WHERE actorid IN ( SELECT actorid FROM movies2actors WHERE movieid = 1684910 )",
        "pred": "SELECT T2.`directorid`, T3.`genre` FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T1.`movieid` = 1684910",
        "pred_result": "no such column: T3.genre",
        "repair_sql": "SELECT T2.`directorid`, T1.`genre` FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.`directorid` = T2.`directorid` WHERE T1.`movieid` = 1684910",
        "repair_result": 0
    },
    {
        "idx": 339,
        "db_id": "shakespeare",
        "question": "How many of Shakespeare's works were finished before the year 1602?",
        "evidence": "finished before the year 1602 refers to Date < 1602",
        "gold": "SELECT COUNT(id) FROM works WHERE Date < 1602",
        "pred": "SELECT COUNT(*) FROM works WHERE Date < 1602",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM works WHERE Date < 1602",
        "repair_result": 1
    },
    {
        "idx": 340,
        "db_id": "shakespeare",
        "question": "How many scenes are there in Act 1 in Twelfth Night?",
        "evidence": "Twelfth Night refers to Title = 'Twelfth Night'",
        "gold": "SELECT COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1 AND T1.Title = 'Twelfth Night'",
        "pred": "SELECT COUNT(DISTINCT `Scene`) FROM chapters WHERE `Act` = 1 AND `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Twelfth Night' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT `Scene`) FROM chapters WHERE `Act` = 1 AND `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Twelfth Night' )",
        "repair_result": 1
    },
    {
        "idx": 341,
        "db_id": "shakespeare",
        "question": "What is the description of Act 1, Scene 2 in Twelfth Night?",
        "evidence": "Twelfth Night refers to Title = 'Twelfth Night'",
        "gold": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night' AND T2.Act = 1 AND T2.Scene = 2",
        "pred": "SELECT `Description` FROM chapters WHERE `Act` = 1 AND `Scene` = 2 AND `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Twelfth Night' )",
        "pred_result": 1,
        "repair_sql": "SELECT `Description` FROM chapters WHERE `Act` = 1 AND `Scene` = 2 AND `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Twelfth Night' )",
        "repair_result": 1
    },
    {
        "idx": 342,
        "db_id": "shakespeare",
        "question": "How many more scenes are there in Act 1 than in Act 5 in Twelfth Night?",
        "evidence": "in Twelfth Night refers to Title = 'Twelfth Night'; How many more scenes = subtract(sum(Act = 1), sum(Act = 5))",
        "gold": "SELECT SUM(IIF(T2.Act = 1, 1, 0)) - SUM(IIF(T2.Act = 5, 1, 0)) AS more FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night'",
        "pred": "SELECT ( SELECT COUNT(DISTINCT T3.`Scene`) FROM chapters AS T3 INNER JOIN works AS T4 ON T3.`work_id` = T4.`id` WHERE T4.`Title` = 'Twelfth Night' AND T3.`Act` = 1 ) - ( SELECT COUNT(DISTINCT T5.`Scene`) FROM chapters AS T5 INNER JOIN works AS T6 ON T5.`work_id` = T6.`id` WHERE T6.`Title` = 'Twelfth Night' AND T5.`Act` = 5 ) AS difference",
        "pred_result": 1,
        "repair_sql": "SELECT ( SELECT COUNT(DISTINCT T3.`Scene`) FROM chapters AS T3 INNER JOIN works AS T4 ON T3.`work_id` = T4.`id` WHERE T4.`Title` = 'Twelfth Night' AND T3.`Act` = 1 ) - ( SELECT COUNT(DISTINCT T5.`Scene`) FROM chapters AS T5 INNER JOIN works AS T6 ON T5.`work_id` = T6.`id` WHERE T6.`Title` = 'Twelfth Night' AND T5.`Act` = 5 ) AS difference",
        "repair_result": 1
    },
    {
        "idx": 343,
        "db_id": "shakespeare",
        "question": "Which work is the character Lord Abergavenny from? Please give its short or abbreviated title.",
        "evidence": "Lord Abergavenny refers to CharName = 'Lord Abergavenny'; short or abbreviated title refers to Title",
        "gold": "SELECT DISTINCT T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.CharName = 'Lord Abergavenny'",
        "pred": "SELECT T4.`Title` FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.`id` = T2.`character_id` INNER JOIN chapters AS T3 ON T2.`chapter_id` = T3.`id` INNER JOIN works AS T4 ON T3.`work_id` = T4.`id` WHERE T1.`CharName` = 'Lord Abergavenny'",
        "pred_result": 1,
        "repair_sql": "SELECT T4.`Title` FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.`id` = T2.`character_id` INNER JOIN chapters AS T3 ON T2.`chapter_id` = T3.`id` INNER JOIN works AS T4 ON T3.`work_id` = T4.`id` WHERE T1.`CharName` = 'Lord Abergavenny'",
        "repair_result": 1
    },
    {
        "idx": 344,
        "db_id": "shakespeare",
        "question": "Please list the character names of all the characters from the work Twelfth Night.",
        "evidence": "character names refers to CharName; Twelfth Night refers to Title = 'Twelfth Night'",
        "gold": "SELECT DISTINCT T4.CharName FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Twelfth Night'",
        "pred": "SELECT DISTINCT T2.`CharName` FROM chapters AS T1 INNER JOIN characters AS T2 ON T1.`work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Twelfth Night' ) AND T1.`work_id` = T2.`id`",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T2.`CharName` FROM chapters AS T1 INNER JOIN characters AS T2 ON T1.`work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Twelfth Night' ) AND T1.`work_id` = T2.`id`",
        "repair_result": 0
    },
    {
        "idx": 345,
        "db_id": "shakespeare",
        "question": "How many paragraphs are there in Act 1, Scene 1 in Twelfth Night?",
        "evidence": "Twelfth Night refers to Title = 'Twelfth Night'",
        "gold": "SELECT SUM(T3.ParagraphNum) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 1 AND T2.Scene = 1 AND T1.Title = 'Twelfth Night'",
        "pred": "SELECT COUNT(*) FROM paragraphs WHERE `chapter_id` = ( SELECT `id` FROM chapters WHERE `Act` = 1 AND `Scene` = 1 AND `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Twelfth Night' ) )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM paragraphs WHERE `chapter_id` = ( SELECT `id` FROM chapters WHERE `Act` = 1 AND `Scene` = 1 AND `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Twelfth Night' ) )",
        "repair_result": 0
    },
    {
        "idx": 346,
        "db_id": "shakespeare",
        "question": "Please list all the paragraphs in Act 1, Scene 1 in Twelfth Night.",
        "evidence": "Twelfth Night refers to Title = 'Twelfth Night'; list the paragraphs refers to PlainText",
        "gold": "SELECT T3.PlainText FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 1 AND T2.Scene = 1 AND T1.Title = 'Twelfth Night'",
        "pred": "SELECT `PlainText` FROM paragraphs WHERE `chapter_id` = ( SELECT `id` FROM chapters WHERE `Act` = 1 AND `Scene` = 1 AND `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Twelfth Night' ) )",
        "pred_result": 1,
        "repair_sql": "SELECT `PlainText` FROM paragraphs WHERE `chapter_id` = ( SELECT `id` FROM chapters WHERE `Act` = 1 AND `Scene` = 1 AND `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Twelfth Night' ) )",
        "repair_result": 1
    },
    {
        "idx": 347,
        "db_id": "shakespeare",
        "question": "How many paragraphs contain the character Lord Abergavenny?",
        "evidence": "Lord Abergavenny refers to CharName = 'Lord Abergavenny'",
        "gold": "SELECT SUM(T1.ParagraphNum) FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.character_id = T2.id WHERE T2.CharName = 'Lord Abergavenny'",
        "pred": "SELECT COUNT(*) FROM paragraphs WHERE `character_id` = ( SELECT `id` FROM characters WHERE `CharName` = 'Lord Abergavenny' )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM paragraphs WHERE `character_id` = ( SELECT `id` FROM characters WHERE `CharName` = 'Lord Abergavenny' )",
        "repair_result": 0
    },
    {
        "idx": 348,
        "db_id": "shakespeare",
        "question": "Please list the IDs of the paragraphs in which the character \"son to Tamora\" appears.",
        "evidence": "character \"son to Tamora\"\u00a0 refers to characters.Description = 'son to Tamora'",
        "gold": "SELECT T1.id FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.character_id = T2.id WHERE T2.Description = 'son to Tamora'",
        "pred": "SELECT `id` FROM paragraphs WHERE `character_id` = ( SELECT `id` FROM characters WHERE `Description` = 'son to Tamora' )",
        "pred_result": 0,
        "repair_sql": "SELECT p.id FROM paragraphs p JOIN characters c ON p.character_id = c.id WHERE c.Description = 'son to Tamora'",
        "repair_result": 1
    },
    {
        "idx": 349,
        "db_id": "shakespeare",
        "question": "For how many times has the scene \"OLIVIA\u2019S house.\" appeared in Twelfth Night?",
        "evidence": "\"OLIVIA\u2019S house.\"\u00a0 refers to chapters.Description = 'OLIVIA\u2019S house.'; Twelfth Night refers to Title = 'Twelfth Night'",
        "gold": "SELECT COUNT(T2.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Description = 'OLIVIA\u2019S house.' AND T1.Title = 'Twelfth Night'",
        "pred": "SELECT COUNT(*) FROM paragraphs WHERE `chapter_id` IN ( SELECT `id` FROM chapters WHERE `Description` = 'OLIVIA\u2019S house.' AND `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Twelfth Night' ) )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM paragraphs WHERE `chapter_id` IN ( SELECT `id` FROM chapters WHERE `Description` = 'OLIVIA\u2019S house.' AND `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Twelfth Night' ) )",
        "repair_result": 0
    },
    {
        "idx": 350,
        "db_id": "shakespeare",
        "question": "How many characters are there in Twelfth Night?",
        "evidence": "Twelfth Night refers to Title = 'Twelfth Night'",
        "gold": "SELECT COUNT(DISTINCT T4.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Twelfth Night'",
        "pred": "SELECT COUNT(DISTINCT T2.`id`) AS num_characters FROM works AS T1 INNER JOIN chapters AS T2 ON T1.`id` = T2.`work_id` INNER JOIN paragraphs AS T3 ON T2.`id` = T3.`chapter_id` INNER JOIN characters AS T4 ON T3.`character_id` = T4.`id` WHERE T1.`Title` = 'Twelfth Night'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT T2.`id`) AS num_characters FROM works AS T1 INNER JOIN chapters AS T2 ON T1.`id` = T2.`work_id` INNER JOIN paragraphs AS T3 ON T2.`id` = T3.`chapter_id` INNER JOIN characters AS T4 ON T3.`character_id` = T4.`id` WHERE T1.`Title` = 'Twelfth Night'",
        "repair_result": 0
    },
    {
        "idx": 351,
        "db_id": "shakespeare",
        "question": "Please give the title of the work of Shakespeare that has the most characters.",
        "evidence": "most characters refers to max(count(character_id))",
        "gold": "SELECT T.Title FROM ( SELECT T1.Title, COUNT(T3.character_id) AS num FROM works T1 INNER JOIN chapters T2 ON T1.id = T2.work_id INNER JOIN paragraphs T3 ON T2.id = T3.chapter_id INNER JOIN characters T4 ON T3.character_id = T4.id GROUP BY T3.character_id, T1.Title ) T ORDER BY T.num DESC LIMIT 1",
        "pred": "SELECT T4.`Title` FROM works AS T4 LEFT JOIN chapters AS T1 ON T4.`id` = T1.`work_id` LEFT JOIN paragraphs AS T2 ON T1.`id` = T2.`chapter_id` GROUP BY T4.`Title` ORDER BY COUNT(T2.`character_id`) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T4.`Title` FROM works AS T4 LEFT JOIN chapters AS T1 ON T4.`id` = T1.`work_id` LEFT JOIN paragraphs AS T2 ON T1.`id` = T2.`chapter_id` GROUP BY T4.`Title` ORDER BY COUNT(T2.`character_id`) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 352,
        "db_id": "shakespeare",
        "question": "What is the average number of characters in all the works of Shakespeare?",
        "evidence": "average number = divide(sum(character_id), count(work_id))",
        "gold": "SELECT SUM(DISTINCT T4.id) / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id",
        "pred": "SELECT AVG(num_characters) FROM ( SELECT T4.`work_id`, COUNT(DISTINCT T3.`character_id`) AS num_characters FROM works AS T4 LEFT JOIN chapters AS T1 ON T4.`id` = T1.`work_id` LEFT JOIN paragraphs AS T2 ON T1.`id` = T2.`chapter_id` GROUP BY T4.`work_id` )",
        "pred_result": "no such column: T4.work_id",
        "repair_sql": "SELECT AVG(num_characters) FROM ( SELECT T4.id AS work_id, COUNT(DISTINCT T3.character_id) AS num_characters FROM works AS T4 LEFT JOIN chapters AS T1 ON T4.id = T1.work_id LEFT JOIN paragraphs AS T2 ON T1.id = T2.chapter_id GROUP BY T4.id )",
        "repair_result": "no such column: T3.character_id"
    },
    {
        "idx": 353,
        "db_id": "shakespeare",
        "question": "How many scenes are there on average in one act in Twelfth Night?",
        "evidence": "Twelfth Night refers to Title = 'Twelfth Night'; average scene = divide(sum(Scene), count(Act))",
        "gold": "SELECT SUM(T2.Scene) / COUNT(T2.Act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night'",
        "pred": "SELECT SUM(T1.`Scene`) / COUNT(T1.`Act`) AS avg_scenes_per_act FROM chapters AS T1 INNER JOIN works AS T2 ON T1.`work_id` = T2.`id` WHERE T2.`Title` = 'Twelfth Night'",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(T1.`Scene`) / COUNT(T1.`Act`) AS avg_scenes_per_act FROM chapters AS T1 INNER JOIN works AS T2 ON T1.`work_id` = T2.`id` WHERE T2.`Title` = 'Twelfth Night'",
        "repair_result": 1
    },
    {
        "idx": 354,
        "db_id": "shakespeare",
        "question": "How many comedies did Shakespeare create?",
        "evidence": "comedies refers to GenreType = 'Comedy'",
        "gold": "SELECT COUNT(id) FROM works WHERE GenreType = 'Comedy'",
        "pred": "SELECT COUNT(*) FROM works WHERE GenreType = 'Comedy'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM works WHERE GenreType = 'Comedy'",
        "repair_result": 1
    },
    {
        "idx": 355,
        "db_id": "shakespeare",
        "question": "When did Shakespeare write the first poem?",
        "evidence": "first poem refers to GenreType = 'Poem' and Date = 'min'",
        "gold": "SELECT MIN(Date) FROM works WHERE GenreType = 'Poem'",
        "pred": "SELECT `Title` FROM works WHERE `GenreType` = 'Poem' AND `Date` = ( SELECT MIN(`Date`) FROM works WHERE `GenreType` = 'Poem' )",
        "pred_result": 0,
        "repair_sql": "SELECT `Title` FROM works WHERE `GenreType` = 'Poem' AND `Date` = ( SELECT MIN(`Date`) FROM works WHERE `GenreType` = 'Poem' )",
        "repair_result": 0
    },
    {
        "idx": 356,
        "db_id": "shakespeare",
        "question": "Give the abbreviation name for the character \"Earl of Westmoreland\".",
        "evidence": "abbreviation name refers to Abbrev; character \"Earl of Westmoreland\" refers to CharName = 'Earl of Westmoreland'",
        "gold": "SELECT DISTINCT Abbrev FROM characters WHERE CharName = 'Earl of Westmoreland'",
        "pred": "SELECT `Abbrev` FROM characters WHERE `CharName` = 'Earl of Westmoreland'",
        "pred_result": 1,
        "repair_sql": "SELECT `Abbrev` FROM characters WHERE `CharName` = 'Earl of Westmoreland'",
        "repair_result": 1
    },
    {
        "idx": 357,
        "db_id": "shakespeare",
        "question": "Which chapter has the most paragraphs? Give the description of the chapter.",
        "evidence": "most paragraphs refers to max(count(chapter_id))",
        "gold": "SELECT T1.Description FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id ORDER BY T2.ParagraphNum DESC LIMIT 1",
        "pred": "SELECT T2.`Description` FROM chapters AS T2 WHERE T2.`id` = ( SELECT T1.`chapter_id` FROM paragraphs AS T1 GROUP BY T1.`chapter_id` ORDER BY COUNT(T1.`id`) DESC LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`Description` FROM chapters AS T2 WHERE T2.`id` = ( SELECT T1.`chapter_id` FROM paragraphs AS T1 GROUP BY T1.`chapter_id` ORDER BY COUNT(T1.`id`) DESC LIMIT 1 )",
        "repair_result": 0
    },
    {
        "idx": 358,
        "db_id": "shakespeare",
        "question": "Which character was mentioned in the paragraph \"Would he do so, I'ld beg your precious mistress, Which he counts but a trifle.\"? Give the character name.",
        "evidence": "paragraph \"Would he do so, I'ld beg your precious mistress, Which he counts but a trifle.\"\u00a0 refers to PlainText = 'Would he do so, I'ld beg your precious mistress, Which he counts but a trifle.'",
        "gold": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.PlainText = 'Would he do so, I''ld beg your precious mistress,Which he counts but a trifle.'",
        "pred": "SELECT T2.`CharName` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T1.`PlainText` = 'Would he do so, I''ld beg your precious mistress, Which he counts but a trifle.'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`CharName` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T1.`PlainText` = 'Would he do so, I''ld beg your precious mistress, Which he counts but a trifle.'",
        "repair_result": 1
    },
    {
        "idx": 359,
        "db_id": "shakespeare",
        "question": "How many characters are there in Titus Andronicus?",
        "evidence": "Titus Andronicus refers to Title = 'Titus Andronicus'",
        "gold": "SELECT COUNT(DISTINCT T3.character_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'Titus Andronicus'",
        "pred": "SELECT COUNT(DISTINCT T2.`id`) AS num_characters FROM works AS T1 INNER JOIN chapters AS T2 ON T1.`id` = T2.`work_id` INNER JOIN paragraphs AS T3 ON T2.`id` = T3.`chapter_id` INNER JOIN characters AS T4 ON T3.`character_id` = T4.`id` WHERE T1.`Title` = 'Titus Andronicus'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT T2.`id`) AS num_characters FROM works AS T1 INNER JOIN chapters AS T2 ON T1.`id` = T2.`work_id` INNER JOIN paragraphs AS T3 ON T2.`id` = T3.`chapter_id` INNER JOIN characters AS T4 ON T3.`character_id` = T4.`id` WHERE T1.`Title` = 'Titus Andronicus'",
        "repair_result": 0
    },
    {
        "idx": 360,
        "db_id": "shakespeare",
        "question": "List the number of acts in Two Gentlemen of Verona.",
        "evidence": "Two Gentlemen of Verona refers to LongTitle = 'Two Gentlemen of Verona'",
        "gold": "SELECT DISTINCT T1.Act FROM chapters AS T1 INNER JOIN works AS T2 ON T1.id = T1.work_id WHERE T2.LongTitle = 'Two Gentlemen of Verona'",
        "pred": "SELECT COUNT(DISTINCT `Act`) FROM chapters WHERE `work_id` = ( SELECT `id` FROM works WHERE `LongTitle` = 'Two Gentlemen of Verona' )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT `Act`) FROM chapters WHERE `work_id` = ( SELECT `id` FROM works WHERE `LongTitle` = 'Two Gentlemen of Verona' )",
        "repair_result": 0
    },
    {
        "idx": 361,
        "db_id": "shakespeare",
        "question": "What is the description for the character mentioned in paragraph No.640171?",
        "evidence": "paragraph No.640171 refers to paragraphs.id = '640171'",
        "gold": "SELECT T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.id = '640171'",
        "pred": "SELECT T2.`Description` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T1.`id` = 640171",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Description` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T1.`id` = 640171",
        "repair_result": 1
    },
    {
        "idx": 362,
        "db_id": "shakespeare",
        "question": "Give the title of the work that contains the character \"Shylock\".",
        "evidence": "character \"Shylock\" refers to CharName = 'Shylock'",
        "gold": "SELECT DISTINCT T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.CharName = 'Shylock'",
        "pred": "SELECT T3.`Title` FROM works AS T3 WHERE T3.`id` IN ( SELECT DISTINCT T1.`work_id` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T2.`CharName` = 'Shylock' )",
        "pred_result": "no such column: T1.work_id",
        "repair_sql": "SELECT T3.`Title` FROM works AS T3 INNER JOIN paragraphs AS T1 ON T3.`id` = T1.`work_id` INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T2.`CharName` = 'Shylock'",
        "repair_result": "no such column: T1.work_id"
    },
    {
        "idx": 363,
        "db_id": "shakespeare",
        "question": "How many scenes are there in King John?",
        "evidence": "King John refers to Title = 'King John'",
        "gold": "SELECT COUNT(T2.Scene) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'King John'",
        "pred": "SELECT COUNT(DISTINCT `Scene`) FROM chapters WHERE `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'King John' )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT `Scene`) FROM chapters WHERE `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'King John' )",
        "repair_result": 0
    },
    {
        "idx": 364,
        "db_id": "shakespeare",
        "question": "How many chapters does the character Demetrius show in the story?",
        "evidence": "character Demetrius refers to CharName = 'Demetrius'",
        "gold": "SELECT COUNT(DISTINCT T2.chapter_id) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Demetrius'",
        "pred": "SELECT COUNT(DISTINCT `chapter_id`) FROM paragraphs WHERE `character_id` = ( SELECT `id` FROM characters WHERE `CharName` = 'Demetrius' )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT `chapter_id`) FROM paragraphs WHERE `character_id` = ( SELECT `id` FROM characters WHERE `CharName` = 'Demetrius' )",
        "repair_result": 0
    },
    {
        "idx": 365,
        "db_id": "shakespeare",
        "question": "Which Shakespeare story with character ID 324 has description of 'this friend of Caesar'?",
        "evidence": "",
        "gold": "SELECT T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T2.id = '324' AND T2.Description = 'friend to Caesar'",
        "pred": "SELECT T4.`Title` FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.`id` = T2.`character_id` INNER JOIN chapters AS T3 ON T2.`chapter_id` = T3.`id` INNER JOIN works AS T4 ON T3.`work_id` = T4.`id` WHERE T1.`id` = 324 AND T3.`Description` LIKE '%this friend of Caesar%'",
        "pred_result": 1,
        "repair_sql": "SELECT T4.`Title` FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.`id` = T2.`character_id` INNER JOIN chapters AS T3 ON T2.`chapter_id` = T3.`id` INNER JOIN works AS T4 ON T3.`work_id` = T4.`id` WHERE T1.`id` = 324 AND T1.`Description` LIKE '%this friend of Caesar%'",
        "repair_result": 1
    },
    {
        "idx": 366,
        "db_id": "shakespeare",
        "question": "Give the description for the Act No.2, Scene No.2 of Midsummer Night's Dream.",
        "evidence": "Act No.2 refers to Act = '2'; Scene No.2\u00a0 refers to Scene = '2'; Midsummer Night's Dream refers to Title = 'Midsummer Night''s Dream'",
        "gold": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = '2' AND T2.Scene = '2' AND T1.Title = 'Midsummer Night''s Dream'",
        "pred": "SELECT `Description` FROM paragraphs WHERE `chapter_id` = ( SELECT `id` FROM chapters WHERE `Act` = 2 AND `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Midsummer Night''s Dream' ) ) AND `Scene` = '2'",
        "pred_result": "no such column: Description",
        "repair_sql": "SELECT p.PlainText AS Description FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id JOIN works w ON c.work_id = w.id WHERE c.Act = 2 AND w.Title = 'Midsummer Night''s Dream' AND c.Scene = '2'",
        "repair_result": 0
    },
    {
        "idx": 367,
        "db_id": "shakespeare",
        "question": "Which Shakespeare tragedy has the most scenes? Give the long title.",
        "evidence": "tragedy refers to GenreType = 'Tragedy'; most scenes refers to max(count(Scene))",
        "gold": "SELECT T.LongTitle FROM ( SELECT T1.LongTitle, COUNT(T2.Scene) AS num FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'Tragedy' GROUP BY T1.LongTitle, T2.Scene ) AS T ORDER BY T.num DESC LIMIT 1",
        "pred": "SELECT T4.`LongTitle` FROM chapters AS T1 INNER JOIN works AS T4 ON T1.`work_id` = T4.`id` WHERE T4.`GenreType` = 'Tragedy' GROUP BY T4.`LongTitle` ORDER BY COUNT(T1.`Scene`) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T4.`LongTitle` FROM chapters AS T1 INNER JOIN works AS T4 ON T1.`work_id` = T4.`id` WHERE T4.`GenreType` = 'Tragedy' GROUP BY T4.`LongTitle` ORDER BY COUNT(T1.`Scene`) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 368,
        "db_id": "shakespeare",
        "question": "How many paragraphs are there in the scene whose description is \"A Sea-port in Cyprus. An open place near the quay.\"?",
        "evidence": "",
        "gold": "SELECT SUM(T2.ParagraphNum) FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id WHERE T1.Description = 'A Sea-port in Cyprus. An open place near the quay.'",
        "pred": "SELECT COUNT(*) FROM paragraphs WHERE `chapter_id` = ( SELECT T1.`id` FROM chapters AS T1 WHERE T1.`Description` = 'A Sea-port in Cyprus. An open place near the quay.' )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM paragraphs WHERE `chapter_id` = ( SELECT T1.`id` FROM chapters AS T1 WHERE T1.`Description` = 'A Sea-port in Cyprus. An open place near the quay.' )",
        "repair_result": 0
    },
    {
        "idx": 369,
        "db_id": "shakespeare",
        "question": "What percentage of all scenes are tragic scenes in Shakespeare's work in 1594?",
        "evidence": "tragic scenes refers to GenreType = 'Tragedy'; work in 1594 refers to Date = '1594'; percentage = divide((sum(Scene) when GenreType = 'Tragedy'), count(Scene))as percentage",
        "gold": "SELECT CAST(SUM(IIF(T2.GenreType = 'Tragedy', 1, 0)) AS REAL) * 100 / COUNT(T1.Scene) FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T2.Date = '1594'",
        "pred": "SELECT (CAST(SUM(T1.`Scene`) AS REAL) / ( SELECT SUM(T3.`Scene`) FROM chapters AS T3 INNER JOIN works AS T4 ON T3.`work_id` = T4.`id` WHERE T4.`Date` = '1594' )) * 100 FROM chapters AS T1 INNER JOIN works AS T2 ON T1.`work_id` = T2.`id` WHERE T2.`Date` = '1594' AND T2.`GenreType` = 'Tragedy'",
        "pred_result": 0,
        "repair_sql": "SELECT (CAST(SUM(T1.`Scene`) AS REAL) / ( SELECT SUM(T3.`Scene`) FROM chapters AS T3 INNER JOIN works AS T4 ON T3.`work_id` = T4.`id` WHERE T4.`Date` = '1594' )) * 100 FROM chapters AS T1 INNER JOIN works AS T2 ON T1.`work_id` = T2.`id` WHERE T2.`Date` = '1594' AND T2.`GenreType` = 'Tragedy'",
        "repair_result": 0
    },
    {
        "idx": 370,
        "db_id": "shakespeare",
        "question": "Gives the average number of chapters in Shakespeare's 1599 work.",
        "evidence": "1599 work refers to Date = '1599'; average number refers to divide(count(chapters.id), count(works.id))",
        "gold": "SELECT CAST(COUNT(T1.id) AS REAL) / COUNT(DISTINCT T2.id) FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T2.Date = '1599'",
        "pred": "SELECT CAST(COUNT(T1.`id`) AS REAL) / COUNT(T2.`id`) FROM chapters AS T1 INNER JOIN works AS T2 ON T1.`work_id` = T2.`id` WHERE T2.`Date` = '1599'",
        "pred_result": 0,
        "repair_sql": "SELECT CAST(COUNT(T1.`id`) AS REAL) / COUNT(T2.`id`) FROM chapters AS T1 INNER JOIN works AS T2 ON T1.`work_id` = T2.`id` WHERE T2.`Date` = '1599'",
        "repair_result": 0
    },
    {
        "idx": 371,
        "db_id": "shakespeare",
        "question": "How many \"servant to Timon\" characters are there?",
        "evidence": "servant to Timon refers to characters.Description = 'servant to Timon'",
        "gold": "SELECT COUNT(id) FROM characters WHERE Description = 'servant to Timon'",
        "pred": "SELECT COUNT(*) FROM paragraphs WHERE `character_id` = ( SELECT `id` FROM characters WHERE `Description` = 'servant to Timon' )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM paragraphs WHERE `character_id` = ( SELECT `id` FROM characters WHERE `Description` = 'servant to Timon' )",
        "repair_result": 0
    },
    {
        "idx": 372,
        "db_id": "shakespeare",
        "question": "What is the title of the first ever work of William Shakespeare?",
        "evidence": "first ever work refers to min(Date)",
        "gold": "SELECT Title FROM works WHERE Date = ( SELECT MIN(Date) FROM works )",
        "pred": "SELECT `Title` FROM works WHERE `Date` = ( SELECT MIN(`Date`) FROM works )",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM works WHERE `Date` = ( SELECT MIN(`Date`) FROM works )",
        "repair_result": 1
    },
    {
        "idx": 373,
        "db_id": "shakespeare",
        "question": "How many poems did Shakespeare write?",
        "evidence": "poems refers to GenreType = 'Poem'",
        "gold": "SELECT COUNT(id) FROM works WHERE GenreType = 'Poem'",
        "pred": "SELECT COUNT(*) FROM works WHERE GenreType = 'Poem'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM works WHERE GenreType = 'Poem'",
        "repair_result": 1
    },
    {
        "idx": 374,
        "db_id": "shakespeare",
        "question": "How many scenes are there in work id 7, act 1?",
        "evidence": "",
        "gold": "SELECT COUNT(id) FROM chapters WHERE work_id = 7 AND Act = 1",
        "pred": "SELECT COUNT(DISTINCT `Scene`) FROM chapters WHERE `work_id` = 7 AND `Act` = 1",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT `Scene`) FROM chapters WHERE `work_id` = 7 AND `Act` = 1",
        "repair_result": 1
    },
    {
        "idx": 375,
        "db_id": "shakespeare",
        "question": "In the year 1500s, how many tragedies did Shakespeare write?",
        "evidence": "year 1500s refers to Date between 1500 and 1599; tragedies refers to GenreType = 'Tragedy'",
        "gold": "SELECT COUNT(id) FROM works WHERE GenreType = 'Tragedy' AND Date BETWEEN 1500 AND 1599",
        "pred": "SELECT COUNT(*) FROM works AS T1 WHERE T1.`Date` BETWEEN 1500 AND 1599 AND T1.`GenreType` = 'Tragedy'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM works AS T1 WHERE T1.`Date` BETWEEN 1500 AND 1599 AND T1.`GenreType` = 'Tragedy'",
        "repair_result": 1
    },
    {
        "idx": 376,
        "db_id": "shakespeare",
        "question": "Who is the daughter of Capulet?",
        "evidence": "daughter of Capulet refers to characters.Description = 'Daughter to Capulet'",
        "gold": "SELECT CharName FROM characters WHERE Description = 'Daughter to Capulet'",
        "pred": "SELECT `CharName` FROM characters WHERE `Description` = 'Daughter to Capulet'",
        "pred_result": 1,
        "repair_sql": "SELECT `CharName` FROM characters WHERE `Description` = 'Daughter to Capulet'",
        "repair_result": 1
    },
    {
        "idx": 377,
        "db_id": "shakespeare",
        "question": "How many paragraphs are there in \"Ay, surely, mere the truth: I know his lady.\"?",
        "evidence": "\"Ay, surely, mere the truth: I know his lady.\" refers to PlainText = 'Ay, surely, mere the truth: I know his lady.'",
        "gold": "SELECT ParagraphNum FROM paragraphs WHERE PlainText = 'Ay, surely, mere the truth: I know his lady.'",
        "pred": "SELECT COUNT(*) FROM paragraphs WHERE `chapter_id` = ( SELECT `chapter_id` FROM paragraphs WHERE `PlainText` = 'Ay, surely, mere the truth: I know his lady.' )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM paragraphs WHERE `chapter_id` = ( SELECT `chapter_id` FROM paragraphs WHERE `PlainText` = 'Ay, surely, mere the truth: I know his lady.' )",
        "repair_result": 0
    },
    {
        "idx": 378,
        "db_id": "shakespeare",
        "question": "What is the long title of the work with the highest number of scenes in act 1?",
        "evidence": "highest number of scenes refers to max(count(Scene))",
        "gold": "SELECT T2.LongTitle FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T1.Act = 1 ORDER BY T1.Scene DESC LIMIT 1",
        "pred": "SELECT T4.`LongTitle` FROM chapters AS T1 INNER JOIN works AS T4 ON T1.`work_id` = T4.`id` WHERE T1.`Act` = 1 GROUP BY T4.`LongTitle` ORDER BY COUNT(T1.`Scene`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T4.`LongTitle` FROM chapters AS T1 INNER JOIN works AS T4 ON T1.`work_id` = T4.`id` WHERE T1.`Act` = 1 GROUP BY T4.`LongTitle` ORDER BY COUNT(T1.`Scene`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 379,
        "db_id": "shakespeare",
        "question": "What is the description of the chapter with the longest number of paragraphs?",
        "evidence": "chapter with the longest number of paragraphs refers to max(ParagraphNum)",
        "gold": "SELECT T2.Description FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id ORDER BY T1.ParagraphNum DESC LIMIT 1",
        "pred": "SELECT T2.`Description` FROM chapters AS T2 WHERE T2.`id` = ( SELECT T1.`chapter_id` FROM paragraphs AS T1 GROUP BY T1.`chapter_id` ORDER BY COUNT(T1.`id`) DESC LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`Description` FROM chapters AS T2 WHERE T2.`id` = ( SELECT T1.`chapter_id` FROM paragraphs AS T1 GROUP BY T1.`chapter_id` ORDER BY COUNT(T1.`id`) DESC LIMIT 1 )",
        "repair_result": 0
    },
    {
        "idx": 380,
        "db_id": "shakespeare",
        "question": "In \"Twelfth Night, Or What You Will\", what is the description of the chapter in 2nd scene, Act 2?",
        "evidence": "\"Twelfth Night, Or What You Will\"\u00a0 refers to LongTitle = 'Twelfth Night, Or What You Will'; 2nd scene refers to Scene = 2",
        "gold": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.LongTitle = 'Twelfth Night, Or What You Will' AND T2.Scene = 2 AND T2.Act = 2",
        "pred": "SELECT `Description` FROM chapters WHERE `Act` = 2 AND `Scene` = 2 AND `work_id` = ( SELECT `id` FROM works WHERE `LongTitle` = 'Twelfth Night, Or What You Will' )",
        "pred_result": 1,
        "repair_sql": "SELECT `Description` FROM chapters WHERE `Act` = 2 AND `Scene` = 2 AND `work_id` = ( SELECT `id` FROM works WHERE `LongTitle` = 'Twelfth Night, Or What You Will' )",
        "repair_result": 1
    },
    {
        "idx": 381,
        "db_id": "shakespeare",
        "question": "What are the descriptions of the short chapters?",
        "evidence": "short chapters refers to ParagraphNum < 150",
        "gold": "SELECT DISTINCT T2.Description FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id WHERE T1.ParagraphNum < 150",
        "pred": "SELECT T1.`Description` FROM chapters AS T1 WHERE T1.`id` IN ( SELECT DISTINCT T2.`chapter_id` FROM paragraphs AS T2 WHERE T2.`ParagraphNum` < 150 )",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Description` FROM chapters AS T1 WHERE T1.`id` IN ( SELECT DISTINCT T2.`chapter_id` FROM paragraphs AS T2 WHERE T2.`ParagraphNum` < 150 )",
        "repair_result": 1
    },
    {
        "idx": 382,
        "db_id": "shakespeare",
        "question": "Which of Shakespeare's work has chapter description of \"A field near Windsor\"?",
        "evidence": "",
        "gold": "SELECT T2.Title FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T1.Description = 'A field near Windsor.'",
        "pred": "SELECT T2.`Title` FROM works AS T2 INNER JOIN chapters AS T1 ON T1.`work_id` = T2.`id` WHERE T1.`Description` = 'A field near Windsor'",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`Title` FROM works AS T2 INNER JOIN chapters AS T1 ON T1.`work_id` = T2.`id` WHERE T1.`Description` = 'A field near Windsor'",
        "repair_result": 0
    },
    {
        "idx": 383,
        "db_id": "shakespeare",
        "question": "How many paragraphs are there in the chapter with the highest amount of scenes in act 1?",
        "evidence": "How many paragraphs refers to ParagraphNum; highest amount of scenes refers to max(count(Scene))",
        "gold": "SELECT T1.ParagraphNum FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id WHERE T2.Act = 1 ORDER BY T2.Scene DESC LIMIT 1",
        "pred": "SELECT COUNT(T2.`id`) FROM paragraphs AS T2 WHERE T2.`chapter_id` = ( SELECT T1.`id` FROM chapters AS T1 WHERE T1.`Act` = 1 GROUP BY T1.`id` ORDER BY COUNT(T1.`Scene`) DESC LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(T2.`id`) FROM paragraphs AS T2 WHERE T2.`chapter_id` = ( SELECT T1.`id` FROM chapters AS T1 WHERE T1.`Act` = 1 GROUP BY T1.`id` ORDER BY COUNT(T1.`Scene`) DESC LIMIT 1 )",
        "repair_result": 0
    },
    {
        "idx": 384,
        "db_id": "shakespeare",
        "question": "Other than \"stage directions\", what is the name of the character that appeared 5 times in \"the sea-coast\"?",
        "evidence": "Other than \"stage directions\" refers to CharName ! = '(stage directions)'; name of the character refers to CharName; appeared 5 times in \"the sea-coast\" refers to chapters.Description = 'The sea-coast.' and count(character_id) = 5",
        "gold": "SELECT T.CharName FROM ( SELECT T3.CharName, COUNT(T3.id) AS num FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id INNER JOIN characters AS T3 ON T1.character_id = T3.id WHERE T2.Description = 'The sea-coast.' AND T3.CharName != '(stage directions)' AND T1.chapter_id = 18709 GROUP BY T3.id, T3.CharName ) AS T WHERE T.num = 5",
        "pred": "SELECT T4.`CharName` FROM characters AS T4 WHERE T4.`id` IN ( SELECT T3.`character_id` FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.`id` = T2.`chapter_id` WHERE T1.`Description` = 'The sea-coast.' GROUP BY T3.`character_id` HAVING COUNT(T3.`character_id`) = 5 ) AND T4.`CharName` != '(stage directions)'",
        "pred_result": "no such column: T3.character_id",
        "repair_sql": "SELECT T4.`CharName` FROM characters AS T4 JOIN paragraphs AS T2 ON T4.`id` = T2.`character_id` JOIN chapters AS T1 ON T1.`id` = T2.`chapter_id` WHERE T1.`Description` = 'The sea-coast.' GROUP BY T4.`CharName` HAVING COUNT(T4.`CharName`) = 5 AND T4.`CharName` != '(stage directions)'",
        "repair_result": 1
    },
    {
        "idx": 385,
        "db_id": "shakespeare",
        "question": "Among the chapters in \"As You Like It\", how many chapters have a paragraph number of no more than 50?",
        "evidence": "\"As You Like It\" refers to Title = 'As You Like It' ;paragraph number of no more than 50 refers to ParagraphNum < 50",
        "gold": "SELECT COUNT(T3.chapter_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'As You Like It' AND T3.ParagraphNum < 50",
        "pred": "SELECT COUNT(DISTINCT T1.`id`) FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.`id` = T2.`chapter_id` WHERE T1.`work_id` = ( SELECT `id` FROM works WHERE `Title` = 'As You Like It' ) AND T2.`ParagraphNum` <= 50",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`id`) FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.`id` = T2.`chapter_id` WHERE T1.`work_id` = ( SELECT `id` FROM works WHERE `Title` = 'As You Like It' ) AND T2.`ParagraphNum` <= 50",
        "repair_result": 0
    },
    {
        "idx": 386,
        "db_id": "shakespeare",
        "question": "In \"Florence. Without the walls. A tucket afar off\", what is the id of the character that was mentioned in \"His name, I pray you.\"?",
        "evidence": "\"Florence. Without the walls. A tucket afar off\" refers to chapters.Description = 'Florence. Without the walls. A tucket afar off.'; \"His name, I pray you.\" refers to PlainText = 'His name, I pray you.'",
        "gold": "SELECT T1.character_id FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id WHERE T1.PlainText = 'His name, I pray you.' AND T2.Description = 'Florence. Without the walls. A tucket afar off.'",
        "pred": "SELECT `CharName` FROM characters WHERE `id` = ( SELECT `character_id` FROM paragraphs WHERE `PlainText` = 'His name, I pray you.' AND `chapter_id` = ( SELECT `id` FROM chapters WHERE `Description` = 'Florence. Without the walls. A tucket afar off' ) )",
        "pred_result": 0,
        "repair_sql": "SELECT c.CharName FROM characters c JOIN paragraphs p ON c.id = p.character_id JOIN chapters ch ON p.chapter_id = ch.id WHERE p.PlainText = 'His name, I pray you.' AND ch.Description = 'Florence. Without the walls. A tucket afar off'",
        "repair_result": 0
    },
    {
        "idx": 387,
        "db_id": "shakespeare",
        "question": "How many characters are there in Hamlet?",
        "evidence": "Hamlet refers to Title = 'Hamlet'",
        "gold": "SELECT COUNT(DISTINCT T3.character_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'Hamlet'",
        "pred": "SELECT COUNT(DISTINCT `CharName`) FROM characters WHERE `id` IN ( SELECT DISTINCT `character_id` FROM paragraphs WHERE `chapter_id` IN ( SELECT `id` FROM chapters WHERE `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Hamlet' ) ) )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT `CharName`) FROM characters WHERE `id` IN ( SELECT DISTINCT `character_id` FROM paragraphs WHERE `chapter_id` IN ( SELECT `id` FROM chapters WHERE `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Hamlet' ) ) )",
        "repair_result": 1
    },
    {
        "idx": 388,
        "db_id": "shakespeare",
        "question": "How many scenes are there in the 5th act of \"History of Henry VIII\"?",
        "evidence": "5th act refers to Act = 5; \"History of Henry VIII\" refers to LongTitle = 'History of Henry VIII'",
        "gold": "SELECT SUM(T2.Scene) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 5 AND T1.LongTitle = 'History of Henry VIII'",
        "pred": "SELECT COUNT(DISTINCT `Scene`) FROM chapters WHERE `Act` = 5 AND `work_id` = ( SELECT `id` FROM works WHERE `LongTitle` = 'History of Henry VIII' )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT `Scene`) FROM chapters WHERE `Act` = 5 AND `work_id` = ( SELECT `id` FROM works WHERE `LongTitle` = 'History of Henry VIII' )",
        "repair_result": 0
    },
    {
        "idx": 389,
        "db_id": "shakespeare",
        "question": "Among the history works written by Shakespeare, how many works whose 1st acts have no more than 2 scenes?",
        "evidence": "history refers to GenreType = 'History' ; 1st acts\u00a0 refers to Act = 1; no more than 2 scenes refers to count(Scene) < 2",
        "gold": "SELECT COUNT(DISTINCT T2.work_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1 AND T2.Scene < 2 AND T1.GenreType = 'History'",
        "pred": "SELECT COUNT(T2.`Title`) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.`id` = T2.`work_id` WHERE T1.`GenreType` = 'History' AND T2.`Act` = 1 GROUP BY T1.`Title` HAVING COUNT(DISTINCT T2.`Scene`) <= 2",
        "pred_result": "no such column: T2.Title",
        "repair_sql": "SELECT COUNT(DISTINCT T1.`Title`) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.`id` = T2.`work_id` WHERE T1.`GenreType` = 'History' AND T2.`Act` = 1 GROUP BY T1.`Title` HAVING COUNT(T2.`Scene`) <= 2",
        "repair_result": 0
    },
    {
        "idx": 390,
        "db_id": "shakespeare",
        "question": "How many acts are there in Sonnets?",
        "evidence": "Sonnets refers to Title = 'Sonnets'",
        "gold": "SELECT SUM(DISTINCT T2.Act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Sonnets'",
        "pred": "SELECT COUNT(DISTINCT `Act`) FROM chapters WHERE `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Sonnets' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT `Act`) FROM chapters WHERE `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Sonnets' )",
        "repair_result": 1
    },
    {
        "idx": 391,
        "db_id": "shakespeare",
        "question": "What is the description of the chapter where the character whose abrreviated name is 1Play appeared first?",
        "evidence": "abbreviated name is 1Play; appeared first refers to Abbrev = '1Play' and min(chapter_id)",
        "gold": "SELECT T2.Description FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id INNER JOIN characters AS T3 ON T1.character_id = T3.id WHERE T3.Abbrev = '1Play' ORDER BY T1.chapter_id LIMIT 1",
        "pred": "SELECT T1.`Description` FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.`id` = T2.`chapter_id` INNER JOIN characters AS T3 ON T2.`character_id` = T3.`id` WHERE T3.`Abbrev` = '1Play' AND T2.`chapter_id` = ( SELECT MIN(T4.`chapter_id`) FROM characters AS T4 INNER JOIN paragraphs AS T5 ON T4.`id` = T5.`character_id` WHERE T4.`Abbrev` = '1Play' )",
        "pred_result": "no such column: T4.chapter_id",
        "repair_sql": "SELECT T1.`Description` FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.`id` = T2.`chapter_id` INNER JOIN characters AS T3 ON T2.`character_id` = T3.`id` WHERE T3.`Abbrev` = '1Play' AND T2.`chapter_id` = ( SELECT MIN(T5.`chapter_id`) FROM characters AS T4 INNER JOIN paragraphs AS T5 ON T4.`id` = T5.`character_id` WHERE T4.`Abbrev` = '1Play' )",
        "repair_result": 1
    },
    {
        "idx": 392,
        "db_id": "shakespeare",
        "question": "What are the titles and genres of the one-act works of Shakespeare?",
        "evidence": "one-act works refers to count(Act) = 1; genre refers to GenreType\n",
        "gold": "SELECT DISTINCT T1.Title, T1.GenreType FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1",
        "pred": "SELECT T4.`Title`, T4.`GenreType` FROM chapters AS T1 INNER JOIN works AS T4 ON T1.`work_id` = T4.`id` GROUP BY T4.`Title`, T4.`GenreType` HAVING COUNT(DISTINCT T1.`Act`) = 1",
        "pred_result": 0,
        "repair_sql": "SELECT T4.`Title`, T4.`GenreType` FROM chapters AS T1 INNER JOIN works AS T4 ON T1.`work_id` = T4.`id` GROUP BY T4.`Title`, T4.`GenreType` HAVING COUNT(DISTINCT T1.`Act`) = 1",
        "repair_result": 0
    },
    {
        "idx": 393,
        "db_id": "shakespeare",
        "question": "How many paragraphs are there in the longest chapter where Sir Richard Ratcliff appeared?",
        "evidence": "longest chapter refers to max(ParagraphNum); Sir Richard Ratcliff\u00a0 refers to CharName = 'Sir Richard Ratcliff'",
        "gold": "SELECT MAX(T2.ParagraphNum) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Sir Richard Ratcliff'",
        "pred": "SELECT COUNT(*) FROM paragraphs AS T1 WHERE T1.`chapter_id` = ( SELECT T3.`chapter_id` FROM characters AS T2 INNER JOIN paragraphs AS T3 ON T2.`id` = T3.`character_id` INNER JOIN chapters AS T4 ON T3.`chapter_id` = T4.`id` WHERE T2.`CharName` = 'Sir Richard Ratcliff' GROUP BY T4.`id` ORDER BY MAX(T3.`ParagraphNum`) DESC LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM paragraphs AS T1 WHERE T1.`chapter_id` = ( SELECT T3.`chapter_id` FROM characters AS T2 INNER JOIN paragraphs AS T3 ON T2.`id` = T3.`character_id` INNER JOIN chapters AS T4 ON T3.`chapter_id` = T4.`id` WHERE T2.`CharName` = 'Sir Richard Ratcliff' GROUP BY T4.`id` ORDER BY MAX(T3.`ParagraphNum`) DESC LIMIT 1 )",
        "repair_result": 0
    },
    {
        "idx": 394,
        "db_id": "shakespeare",
        "question": "In \"A Lover's Complaint\", what is the description of Act 1, Scene 1?",
        "evidence": "\"A Lover's Complaint\" refers to Title = 'A Lover''s Complaint'",
        "gold": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1 AND T2.Scene = 1 AND T1.Title = 'A Lover''s Complaint'",
        "pred": "SELECT `Description` FROM chapters WHERE `id` = ( SELECT `id` FROM chapters WHERE `Act` = 1 AND `Scene` = 1 AND `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'A Lover''s Complaint' ) )",
        "pred_result": 1,
        "repair_sql": "SELECT `Description` FROM chapters WHERE `Act` = 1 AND `Scene` = 1 AND `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'A Lover''s Complaint' )",
        "repair_result": 1
    },
    {
        "idx": 395,
        "db_id": "shakespeare",
        "question": "When did Shakespeare create his work that has 154 scenes?",
        "evidence": "When refers to Date; has 154 scenes refers to count(Scene) = 154",
        "gold": "SELECT T1.Date, T1.id FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Scene = 154",
        "pred": "SELECT T2.`Date` FROM works AS T2 WHERE T2.`id` = ( SELECT T1.`work_id` FROM chapters AS T1 GROUP BY T1.`work_id` HAVING COUNT(T1.`Scene`) = 154 )",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`Date` FROM works AS T2 WHERE T2.`id` = ( SELECT T1.`work_id` FROM chapters AS T1 GROUP BY T1.`work_id` HAVING COUNT(T1.`Scene`) = 154 )",
        "repair_result": 0
    },
    {
        "idx": 396,
        "db_id": "shakespeare",
        "question": "On average, how many scenes are there in each of the comedy works written by Shakespeare?",
        "evidence": "comedy refers to GenreType = 'Comedy'; average = divide(sum(count(Scene)), count(work.id))",
        "gold": "SELECT CAST(SUM(T2.Scene) AS REAL) / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'Comedy'",
        "pred": "SELECT AVG(total_scenes) AS average_scenes FROM ( SELECT COUNT(T1.`Scene`) AS total_scenes FROM chapters AS T1 INNER JOIN works AS T2 ON T1.`work_id` = T2.`id` WHERE T2.`GenreType` = 'Comedy' GROUP BY T2.`Title` )",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(total_scenes) AS average_scenes FROM ( SELECT COUNT(T1.`Scene`) AS total_scenes FROM chapters AS T1 INNER JOIN works AS T2 ON T1.`work_id` = T2.`id` WHERE T2.`GenreType` = 'Comedy' GROUP BY T2.`Title` )",
        "repair_result": 0
    },
    {
        "idx": 397,
        "db_id": "shakespeare",
        "question": "Between Rome and Juliet, which character was mentioned the most in the The Tragedy of Romeo and Juliet? Calculate for Romeo and Juliet's individual amount of appearance in percentage against the overall number of characters that appeared in the said work.",
        "evidence": "Rome and Juliet refers to CharName = 'Romeo' and CharName = 'Juliet'; The Tragedy of Romeo and Juliet refers to LongTitle = 'The Tragedy of Romeo and Juliet'; percentage = divide(sum(charater.id) when CharName = 'Romeo', sum(charater.id)) as percentage and percentage = divide(sum(charater.id) when CharName = 'Juliet', count(charater.id)) as percentage",
        "gold": "SELECT SUM(IIF(T4.CharName = 'Romeo', 1, 0)), SUM(IIF(T4.CharName = 'Juliet', 1, 0)), CAST(SUM(IIF(T4.CharName = 'Romeo', 1, 0)) + SUM(IIF(T4.CharName = 'Juliet', 1, 0)) AS REAL) * 100 / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id",
        "pred": "WITH total_characters AS ( SELECT COUNT(DISTINCT T1.`id`) AS total_count FROM characters AS T1 INNER JOIN works AS T2 ON T1.`work_id` = T2.`id` WHERE T2.`LongTitle` = 'The Tragedy of Romeo and Juliet' ) SELECT T1.`CharName`, (COUNT(T1.`id`) * 100.0 / (SELECT total_count FROM total_characters)) AS percentage FROM characters AS T1 INNER JOIN works AS T2 ON T1.`work_id` = T2.`id` WHERE T2.`LongTitle` = 'The Tragedy of Romeo and Juliet' AND (T1.`CharName` = 'Romeo' OR T1.`CharName` = 'Juliet') GROUP BY T1.`CharName`",
        "pred_result": "no such column: T1.work_id",
        "repair_sql": "WITH total_characters AS ( SELECT COUNT(DISTINCT T1.`id`) AS total_count FROM characters AS T1 INNER JOIN works AS T2 ON T1.`work_id` = T2.`id` WHERE T2.`LongTitle` = 'The Tragedy of Romeo and Juliet' ) SELECT T1.`CharName`, (COUNT(T1.`id`) * 100.0 / (SELECT total_count FROM total_characters)) AS percentage FROM characters AS T1 INNER JOIN works AS T2 ON T1.`work_id` = T2.`id` WHERE T2.`LongTitle` = 'The Tragedy of Romeo and Juliet' AND (T1.`CharName` = 'Romeo' OR T1.`CharName` = 'Juliet') GROUP BY T1.`CharName`",
        "repair_result": "no such column: T1.work_id"
    },
    {
        "idx": 398,
        "db_id": "shakespeare",
        "question": "What is the paragraph number with plain text \"This is Illyria, lady\"?",
        "evidence": "paragraph number refers to ParagraphNum",
        "gold": "SELECT ParagraphNum FROM paragraphs WHERE PlainText = 'This is Illyria, lady.'",
        "pred": "SELECT `ParagraphNum` FROM paragraphs WHERE `PlainText` = 'This is Illyria, lady'",
        "pred_result": 0,
        "repair_sql": "SELECT p.ParagraphNum FROM paragraphs p JOIN characters c ON p.character_id = c.id WHERE p.PlainText = 'This is Illyria, lady'",
        "repair_result": 0
    },
    {
        "idx": 399,
        "db_id": "shakespeare",
        "question": "How many number of paragraphs are there in chapter ID 18881?",
        "evidence": "number of paragraphs refers to ParagraphNum",
        "gold": "SELECT COUNT(ParagraphNum) FROM paragraphs WHERE chapter_id = 18881",
        "pred": "SELECT COUNT(*) FROM paragraphs WHERE chapter_id = 18881",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM paragraphs WHERE chapter_id = 18881",
        "repair_result": 1
    },
    {
        "idx": 400,
        "db_id": "shakespeare",
        "question": "List down any 5 titles in the history genre.",
        "evidence": "in the history genre refers to GenreType = 'History'",
        "gold": "SELECT Title FROM works WHERE GenreType = 'History' LIMIT 5",
        "pred": "SELECT `Title` FROM works WHERE `GenreType` = 'History' LIMIT 5",
        "pred_result": 1,
        "repair_sql": "SELECT `Title` FROM works WHERE `GenreType` = 'History' LIMIT 5",
        "repair_result": 1
    },
    {
        "idx": 401,
        "db_id": "shakespeare",
        "question": "How many scenes are there in Act 5 of work ID 9?",
        "evidence": "",
        "gold": "SELECT COUNT(Scene) FROM chapters WHERE work_id = 9 AND Act = 5",
        "pred": "SELECT COUNT(DISTINCT `Scene`) FROM chapters WHERE `Act` = 5 AND `work_id` = 9",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT `Scene`) FROM chapters WHERE `Act` = 5 AND `work_id` = 9",
        "repair_result": 1
    },
    {
        "idx": 402,
        "db_id": "shakespeare",
        "question": "List the character names and descriptions of chapter ID 18710.",
        "evidence": "character names refers to CharName",
        "gold": "SELECT DISTINCT T1.CharName, T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.Chapter_id = 18710",
        "pred": "SELECT T2.`CharName`, T2.`Description` FROM chapters AS T1 INNER JOIN paragraphs AS T3 ON T1.`id` = T3.`chapter_id` INNER JOIN characters AS T2 ON T3.`character_id` = T2.`id` WHERE T1.`id` = 18710",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`CharName`, T2.`Description` FROM chapters AS T1 INNER JOIN paragraphs AS T3 ON T1.`id` = T3.`chapter_id` INNER JOIN characters AS T2 ON T3.`character_id` = T2.`id` WHERE T1.`id` = 18710",
        "repair_result": 1
    },
    {
        "idx": 403,
        "db_id": "shakespeare",
        "question": "How many chapters are there in \"Midsummer Night's Dream\"?",
        "evidence": "in \"Midsummer Night's Dream\" refers to Title = 'Midsummer Night's Dream'",
        "gold": "SELECT COUNT(T2.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Midsummer Night''s Dream'",
        "pred": "SELECT COUNT(*) FROM chapters WHERE `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Midsummer Night\\'s Dream' )",
        "pred_result": "near \"s\": syntax error",
        "repair_sql": "SELECT COUNT(*) FROM chapters WHERE work_id = ( SELECT id FROM works WHERE Title = 'Midsummer Night''s Dream' )",
        "repair_result": 1
    },
    {
        "idx": 404,
        "db_id": "shakespeare",
        "question": "How many paragraphs are there in Act 5 Scene 1 of \"Comedy of Errors\"?",
        "evidence": "\"Comedy of Errors\" refers to Title = 'Comedy of Errors'",
        "gold": "SELECT COUNT(T3.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 5 AND T2.Scene = 1 AND T1.Title = 'Comedy of Errors'",
        "pred": "SELECT COUNT(*) FROM paragraphs WHERE `chapter_id` = ( SELECT `id` FROM chapters WHERE `Act` = 5 AND `Scene` = 1 AND `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Comedy of Errors' ) )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM paragraphs WHERE `chapter_id` = ( SELECT `id` FROM chapters WHERE `Act` = 5 AND `Scene` = 1 AND `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Comedy of Errors' ) )",
        "repair_result": 1
    },
    {
        "idx": 405,
        "db_id": "shakespeare",
        "question": "What are the character names and descriptions of characters in \"Venus and Adonis\"?",
        "evidence": "character names refers to CharName; \"Venus and Adonis\" refers to Title = 'Venus and Adonis'",
        "gold": "SELECT DISTINCT T4.CharName, T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Venus and Adonis'",
        "pred": "SELECT T2.`CharName`, T2.`Description` FROM chapters AS T1 INNER JOIN characters AS T2 ON T1.`work_id` = <work_id from Sub question 1> AND T1.`id` = T2.`id`",
        "pred_result": "near \"<\": syntax error",
        "repair_sql": "SELECT T2.`CharName`, T2.`Description` FROM chapters AS T1 INNER JOIN characters AS T2 ON T1.`work_id` = T2.`id` INNER JOIN works AS T3 ON T1.`work_id` = T3.`id` WHERE T3.`Title` = 'Venus and Adonis'",
        "repair_result": 0
    },
    {
        "idx": 406,
        "db_id": "shakespeare",
        "question": "What is the title which has character named \"Froth\"?",
        "evidence": "character named \"Froth\" refers to CharName = 'Froth'",
        "gold": "SELECT DISTINCT T1.title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.CharName = 'Froth'",
        "pred": "SELECT T4.`Title` FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.`id` = T2.`character_id` INNER JOIN chapters AS T3 ON T2.`chapter_id` = T3.`id` INNER JOIN works AS T4 ON T3.`work_id` = T4.`id` WHERE T1.`CharName` = 'Froth'",
        "pred_result": 1,
        "repair_sql": "SELECT T4.`Title` FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.`id` = T2.`character_id` INNER JOIN chapters AS T3 ON T2.`chapter_id` = T3.`id` INNER JOIN works AS T4 ON T3.`work_id` = T4.`id` WHERE T1.`CharName` = 'Froth'",
        "repair_result": 1
    },
    {
        "idx": 407,
        "db_id": "shakespeare",
        "question": "How many chapters include the character name \"First Witch\"?",
        "evidence": "character name \"First Witch\" refers to CharName = 'First Witch'",
        "gold": "SELECT COUNT(T2.chapter_id) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'First Witch'",
        "pred": "SELECT COUNT(DISTINCT T1.`chapter_id`) FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T2.`CharName` = 'First Witch'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`chapter_id`) FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T2.`CharName` = 'First Witch'",
        "repair_result": 0
    },
    {
        "idx": 408,
        "db_id": "shakespeare",
        "question": "List the scenes and descriptions in Act 1 of \" Pericles, Prince of Tyre\".",
        "evidence": "\" Pericles, Prince of Tyre\" refers to LongTitle = 'Pericles, Prince of Tyre'",
        "gold": "SELECT T2.Scene, T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.LongTitle = 'Pericles, Prince of Tyre' AND T2.Act = 1",
        "pred": "SELECT T1.`Scene`, T1.`Description` FROM chapters AS T1 WHERE T1.`Act` = 1 AND T1.`work_id` = ( SELECT `id` FROM works WHERE `LongTitle` = 'Pericles, Prince of Tyre' )",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Scene`, T1.`Description` FROM chapters AS T1 WHERE T1.`Act` = 1 AND T1.`work_id` = ( SELECT `id` FROM works WHERE `LongTitle` = 'Pericles, Prince of Tyre' )",
        "repair_result": 1
    },
    {
        "idx": 409,
        "db_id": "shakespeare",
        "question": "Describe the full title which had the character named Servant to Montague.",
        "evidence": "full title refers to LongTitle; character named Servant to Montague refers to characters.Description = 'Servant to Montague'",
        "gold": "SELECT DISTINCT T1.LongTitle FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.Description = 'Servant to Montague'",
        "pred": "SELECT `LongTitle` FROM works WHERE `id` = ( SELECT DISTINCT `work_id` FROM paragraphs WHERE `character_id` = ( SELECT `id` FROM characters WHERE `Description` = 'Servant to Montague' ) )",
        "pred_result": "no such column: work_id",
        "repair_sql": "SELECT w.LongTitle FROM works w JOIN paragraphs p ON w.id = p.work_id JOIN characters c ON p.character_id = c.id WHERE c.Description = 'Servant to Montague'",
        "repair_result": "no such column: p.work_id"
    },
    {
        "idx": 410,
        "db_id": "shakespeare",
        "question": "Describe the scene number, act, and title of work which had the description of \"The house of ANTIPHOLUS of Ephesus\" in chapter.",
        "evidence": "",
        "gold": "SELECT T2.Act, T2.Scene, T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Description = 'The house of ANTIPHOLUS of Ephesus.'",
        "pred": "SELECT T2.`Scene`, T2.`Act`, T3.`Title` FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.`chapter_id` = T2.`id` INNER JOIN works AS T3 ON T2.`work_id` = T3.`id` WHERE T2.`Description` = 'The house of ANTIPHOLUS of Ephesus'",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`Scene`, T2.`Act`, T3.`Title` FROM chapters AS T2 INNER JOIN works AS T3 ON T2.`work_id` = T3.`id` WHERE T2.`Description` = 'The house of ANTIPHOLUS of Ephesus'",
        "repair_result": 0
    },
    {
        "idx": 411,
        "db_id": "shakespeare",
        "question": "Provide the character name, paragraph number, and plain text of \"cousin to the king\" description.",
        "evidence": "character name refers to CharName; paragraph number refers to ParagraphNum",
        "gold": "SELECT T1.CharName, T2.ParagraphNum, T2.PlainText FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.Description = 'cousin to the king'",
        "pred": "SELECT T2.`CharName`, T1.`ParagraphNum`, T1.`PlainText` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T1.`character_id` = ( SELECT `id` FROM characters WHERE `Description` = 'cousin to the king' )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`CharName`, T1.`ParagraphNum`, T1.`PlainText` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T1.`character_id` = ( SELECT `id` FROM characters WHERE `Description` = 'cousin to the king' )",
        "repair_result": 1
    },
    {
        "idx": 412,
        "db_id": "shakespeare",
        "question": "Calculate average scene per act in Antony and Cleopatra.",
        "evidence": "Antony and Cleopatra refers to Title = 'Antony and Cleopatra'; average scene per act = divide(sum(Scene), count(act))\n",
        "gold": "SELECT CAST(SUM(T2.Scene) AS REAL) / COUNT(T2.act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Antony and Cleopatra'",
        "pred": "SELECT SUM(T1.`Scene`) / COUNT(DISTINCT T1.`Act`) AS avg_scene_per_act FROM chapters AS T1 INNER JOIN works AS T2 ON T1.`work_id` = T2.`id` WHERE T2.`Title` = 'Antony and Cleopatra'",
        "pred_result": 0,
        "repair_sql": "SELECT SUM(T1.`Scene`) / COUNT(DISTINCT T1.`Act`) AS avg_scene_per_act FROM chapters AS T1 INNER JOIN works AS T2 ON T1.`work_id` = T2.`id` WHERE T2.`Title` = 'Antony and Cleopatra'",
        "repair_result": 0
    },
    {
        "idx": 413,
        "db_id": "shakespeare",
        "question": "Calculate the percentage of paragraphs in all chapters of \"All's Well That Ends Well\".",
        "evidence": "\"All's Well That Ends Well\" refers to Title = 'All's Well That Ends Well'; percentage = divide(sum(paragraphs.id) when Title = 'All's Well That Ends Well', count(paragraphs.id)) as percentage",
        "gold": "SELECT CAST(SUM(IIF(T1.Title = 'All''s Well That Ends Well', 1, 0)) AS REAL) * 100 / COUNT(T3.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id",
        "pred": "SELECT (CAST(( SELECT COUNT(T3.`id`) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.`id` = T2.`work_id` INNER JOIN paragraphs AS T3 ON T2.`id` = T3.`chapter_id` WHERE T1.`Title` = 'All\\'s Well That Ends Well' ) AS REAL) / ( SELECT COUNT(T3.`id`) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.`id` = T2.`work_id` INNER JOIN paragraphs AS T3 ON T2.`id` = T3.`chapter_id` )) * 100 AS percentage",
        "pred_result": "near \"s\": syntax error",
        "repair_sql": "SELECT (CAST(( SELECT COUNT(T3.`id`) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.`id` = T2.`work_id` INNER JOIN paragraphs AS T3 ON T2.`id` = T3.`chapter_id` WHERE T1.`Title` = 'All''s Well That Ends Well' ) AS REAL) / ( SELECT COUNT(T3.`id`) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.`id` = T2.`work_id` INNER JOIN paragraphs AS T3 ON T2.`id` = T3.`chapter_id` )) * 100 AS percentage",
        "repair_result": 1
    },
    {
        "idx": 414,
        "db_id": "shakespeare",
        "question": "How many \"all\" character names have the \"all\" abbreviation?",
        "evidence": "character names refers to CharName\uff1b\"all\" abbreviation refers to Abbrev = 'all'",
        "gold": "SELECT COUNT(id) FROM characters WHERE Abbrev = 'All'",
        "pred": "SELECT COUNT(*) FROM characters WHERE CharName = 'All' AND Abbrev = 'All'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM characters WHERE CharName = 'All' AND Abbrev = 'All'",
        "repair_result": 1
    },
    {
        "idx": 415,
        "db_id": "shakespeare",
        "question": "Please name any three comedic works.",
        "evidence": "comedic works refers to GenreType = 'comedy'",
        "gold": "SELECT Title FROM works WHERE GenreType = 'comedy' LIMIT 3",
        "pred": "SELECT `Title` FROM works WHERE `GenreType` = 'Comedy' LIMIT 3",
        "pred_result": 0,
        "repair_sql": "SELECT `Title` FROM works WHERE `GenreType` = 'Comedy' LIMIT 3",
        "repair_result": 0
    },
    {
        "idx": 416,
        "db_id": "shakespeare",
        "question": "From 1593 onwards, what is the difference between the number of comedy works and history works?",
        "evidence": "From 1593 onwards refers to Date > 1593; comedy works and history works refers to GenreType = 'comedy' and GenreType = 'History'",
        "gold": "SELECT SUM(IIF(GenreType = 'Comedy', 1, 0)) - SUM(IIF(GenreType = 'History', 1, 0)) FROM works WHERE Date > 1593",
        "pred": "SELECT ( SELECT COUNT(*) FROM works WHERE Date > 1593 AND GenreType = 'Comedy' ) - ( SELECT COUNT(*) FROM works WHERE Date > 1593 AND GenreType = 'History' ) AS difference",
        "pred_result": 1,
        "repair_sql": "SELECT ( SELECT COUNT(*) FROM works WHERE Date > 1593 AND GenreType = 'Comedy' ) - ( SELECT COUNT(*) FROM works WHERE Date > 1593 AND GenreType = 'History' ) AS difference",
        "repair_result": 1
    },
    {
        "idx": 417,
        "db_id": "shakespeare",
        "question": "Please name the latest historical work.",
        "evidence": "name refers to LongTitle; latest historical work refers to GenreType = 'History' and max(Date)",
        "gold": "SELECT LongTitle FROM works WHERE GenreType = 'History' ORDER BY Date DESC LIMIT 1",
        "pred": "SELECT `LongTitle` FROM works WHERE `GenreType` = 'History' AND `Date` = ( SELECT MAX(`Date`) FROM works WHERE `GenreType` = 'History' )",
        "pred_result": 1,
        "repair_sql": "SELECT `LongTitle` FROM works WHERE `GenreType` = 'History' AND `Date` = ( SELECT MAX(`Date`) FROM works WHERE `GenreType` = 'History' )",
        "repair_result": 1
    },
    {
        "idx": 418,
        "db_id": "shakespeare",
        "question": "What are the work numbers that are related to King Henry?",
        "evidence": "work numbers refers to works.id; related to King Henry refers to Title = '%Henry%'",
        "gold": "SELECT id FROM works WHERE Title LIKE '%Henry%'",
        "pred": "SELECT T4.`id` FROM works AS T4 WHERE T4.`Title` LIKE '%Henry%'",
        "pred_result": 1,
        "repair_sql": "SELECT T4.`id` FROM works AS T4 WHERE T4.`Title` LIKE '%Henry%'",
        "repair_result": 1
    },
    {
        "idx": 419,
        "db_id": "shakespeare",
        "question": "What are the character names for a senator of Venice?",
        "evidence": "character names refers to CharName; a senator of Venice refers to characters.Description = 'a senator of Venice'",
        "gold": "SELECT CharName FROM characters WHERE Description = 'a senator of Venice'",
        "pred": "SELECT DISTINCT T2.`CharName` FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.`id` = T2.`character_id` WHERE T1.`Description` = 'a senator of Venice'",
        "pred_result": "no such column: T2.CharName",
        "repair_sql": "SELECT DISTINCT T1.`CharName` FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.`id` = T2.`character_id` WHERE T1.`Description` = 'a senator of Venice'",
        "repair_result": 1
    },
    {
        "idx": 420,
        "db_id": "shakespeare",
        "question": "What is the name of the character that can be found in paragraph 8 of chapter 18820?",
        "evidence": "name of the character refers to CharName; paragraph 8 refers to ParagraphNum = 8; chapter 18820 refers to chapter_id = 18820",
        "gold": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.ParagraphNum = 8 AND T2.chapter_id = 18820",
        "pred": "SELECT T2.`CharName` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T1.`ParagraphNum` = 8 AND T1.`chapter_id` = 18820",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`CharName` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T1.`ParagraphNum` = 8 AND T1.`chapter_id` = 18820",
        "repair_result": 1
    },
    {
        "idx": 421,
        "db_id": "shakespeare",
        "question": "What is the description of chapter 18704, where there is a character called Orsino?",
        "evidence": "chapter 18704 refers to chapters.id = 18704; character called Orsino refers to CharName = 'Orsino'",
        "gold": "SELECT DISTINCT T3.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id INNER JOIN chapters AS T3 ON T2.chapter_id = T3.id WHERE T1.CharName = 'Orsino' AND T3.ID = 18704",
        "pred": "SELECT T1.`Description` FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.`id` = T2.`chapter_id` WHERE T1.`id` = 18704 AND T2.`character_id` = ( SELECT `id` FROM characters WHERE `CharName` = 'Orsino' )",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Description` FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.`id` = T2.`chapter_id` WHERE T1.`id` = 18704 AND T2.`character_id` = ( SELECT `id` FROM characters WHERE `CharName` = 'Orsino' )",
        "repair_result": 1
    },
    {
        "idx": 422,
        "db_id": "shakespeare",
        "question": "How many scenes can be found in \"Twelfth Night, Or What You Will\"?",
        "evidence": "\"Twelfth Night, Or What You Will\" refers to LongTitle",
        "gold": "SELECT COUNT(T2.Scene) AS cnt FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.LongTitle = 'Cymbeline, King of Britain'",
        "pred": "SELECT COUNT(DISTINCT `Scene`) FROM chapters WHERE `work_id` = ( SELECT `id` FROM works WHERE `LongTitle` = 'Twelfth Night, Or What You Will' )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT `Scene`) FROM chapters WHERE `work_id` = ( SELECT `id` FROM works WHERE `LongTitle` = 'Twelfth Night, Or What You Will' )",
        "repair_result": 0
    },
    {
        "idx": 423,
        "db_id": "shakespeare",
        "question": "Please list all of the character descriptions in paragraph 20.",
        "evidence": "paragraph 20 refers to ParagraphNum = 20",
        "gold": "SELECT T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.ParagraphNum = 20",
        "pred": "SELECT T2.`Description` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T1.`ParagraphNum` = 20",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Description` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T1.`ParagraphNum` = 20",
        "repair_result": 1
    },
    {
        "idx": 424,
        "db_id": "shakespeare",
        "question": "How many chapters have the name Gratiano as a character for \"friend to Antonio and Bassiano\"?",
        "evidence": "name Gratiano as a character refers to CharName = 'Gratiano'; \"friend to Antonio and Bassiano\" refers to characters.Description = 'friend to Antonio and Bassiano'",
        "gold": "SELECT COUNT(DISTINCT T2.chapter_id) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Gratiano' AND T1.Description = 'friend to Antonio and Bassiano'",
        "pred": "SELECT COUNT(DISTINCT T1.`chapter_id`) FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T2.`CharName` = 'Gratiano' AND T2.`Description` = 'friend to Antonio and Bassiano'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`chapter_id`) FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T2.`CharName` = 'Gratiano' AND T2.`Description` = 'friend to Antonio and Bassiano'",
        "repair_result": 1
    },
    {
        "idx": 425,
        "db_id": "shakespeare",
        "question": "What is the description of chapter 18706 in \"All's Well That Ends Well\"?",
        "evidence": "chapter 18706 refers to chapters.id; \"All's Well That Ends Well\" refers to Title = 'All's Well That Ends Well'",
        "gold": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.id = 18706 AND T1.Title = 'All''s Well That Ends Well'",
        "pred": "SELECT T1.`Description` FROM chapters AS T1 WHERE T1.`id` = 18706 AND T1.`work_id` = ( SELECT `id` FROM works WHERE `Title` = 'All\\'s Well That Ends Well' )",
        "pred_result": "near \"s\": syntax error",
        "repair_sql": "SELECT T1.`Description` FROM chapters AS T1 JOIN works AS T2 ON T1.`work_id` = T2.`id` WHERE T1.`id` = 18706 AND T2.`Title` = 'All''s Well That Ends Well'",
        "repair_result": 1
    },
    {
        "idx": 426,
        "db_id": "shakespeare",
        "question": "What are the character names in paragraph 3?",
        "evidence": "character names refers to CharName; paragraph 3 refers to ParagraphNum = 3",
        "gold": "SELECT DISTINCT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.ParagraphNum = 3",
        "pred": "SELECT DISTINCT T2.`CharName` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T1.`ParagraphNum` = 3",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.`CharName` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T1.`ParagraphNum` = 3",
        "repair_result": 1
    },
    {
        "idx": 427,
        "db_id": "shakespeare",
        "question": "Please list all of the paragraphs that have the character name Aedile.",
        "evidence": "paragraphs\u00a0 refers to ParagraphNum; character name Aedile refers to CharName = 'Aedile'",
        "gold": "SELECT T2.ParagraphNum FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Aedile'",
        "pred": "SELECT `PlainText` FROM paragraphs WHERE `character_id` = ( SELECT `id` FROM characters WHERE `CharName` = 'Aedile' )",
        "pred_result": 0,
        "repair_sql": "SELECT `PlainText` FROM paragraphs WHERE `character_id` = ( SELECT `id` FROM characters WHERE `CharName` = 'Aedile' )",
        "repair_result": 0
    },
    {
        "idx": 428,
        "db_id": "shakespeare",
        "question": "Please list any two character names in chapter 18708.",
        "evidence": "character names refers to CharName; chapter 18708 refers to chapter_id = 18708",
        "gold": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.chapter_id = 18708 LIMIT 2",
        "pred": "SELECT DISTINCT T3.`CharName` FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.`id` = T2.`chapter_id` INNER JOIN characters AS T3 ON T2.`character_id` = T3.`id` WHERE T1.`id` = 18708 LIMIT 2",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T3.`CharName` FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.`id` = T2.`chapter_id` INNER JOIN characters AS T3 ON T2.`character_id` = T3.`id` WHERE T1.`id` = 18708 LIMIT 2",
        "repair_result": 1
    },
    {
        "idx": 429,
        "db_id": "shakespeare",
        "question": "How many acts can be found in the comedy \"Two Gentlemen of Verona\"?",
        "evidence": "comedy refers to GenreType = 'comedy'; \"Two Gentlemen of Verona\" refers to Title = 'Two Gentlemen of Verona'",
        "gold": "SELECT COUNT(T1.ACT) FROM chapters AS T1 LEFT JOIN works AS T2 ON T1.work_id = T2.id WHERE T2.GenreType = 'Comedy' AND T2.Title = 'Two Gentlemen of Verona'",
        "pred": "SELECT COUNT(DISTINCT `Act`) FROM chapters WHERE `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Two Gentlemen of Verona' AND `GenreType` = 'Comedy' )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT `Act`) FROM chapters WHERE `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Two Gentlemen of Verona' AND `GenreType` = 'Comedy' )",
        "repair_result": 0
    },
    {
        "idx": 430,
        "db_id": "shakespeare",
        "question": "What is the percentage of historical works that have not fewer than five scenes in the 1500s?",
        "evidence": "historical works refers to GenreType = 'history'; have not fewer than five scenes in the 1500s refers to count(Scene) > = 5 and DATE > = 1500 AND DATE < = 1599; percentage = divide(count(works.id) where GenreType = 'history' and count(Scene) > = 5, count(works.id) ) as percentage",
        "gold": "SELECT CAST(( SELECT COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'History' AND T1.DATE BETWEEN 1500 AND 1599 GROUP BY T1.id HAVING COUNT(T2.Scene) >= 5 ) AS REAL) * 100 / COUNT(id) FROM works WHERE GenreType = 'History' AND DATE BETWEEN 1500 AND 1599",
        "pred": "SELECT (CAST(COUNT(DISTINCT T4.`id`) AS REAL) / ( SELECT COUNT(DISTINCT T4.`id`) FROM works AS T4 WHERE T4.`GenreType` = 'History' )) * 100 AS percentage FROM works AS T4 INNER JOIN chapters AS T1 ON T4.`id` = T1.`work_id` WHERE T4.`GenreType` = 'History' AND T1.`Scene` >= 5 AND T4.`Date` >= 1500 AND T4.`Date` <= 1599",
        "pred_result": 0,
        "repair_sql": "SELECT (CAST(COUNT(DISTINCT T4.`id`) AS REAL) / ( SELECT COUNT(DISTINCT T4.`id`) FROM works AS T4 WHERE T4.`GenreType` = 'History' )) * 100 AS percentage FROM works AS T4 INNER JOIN chapters AS T1 ON T4.`id` = T1.`work_id` WHERE T4.`GenreType` = 'History' AND T1.`Scene` >= 5 AND T4.`Date` >= 1500 AND T4.`Date` <= 1599",
        "repair_result": 0
    },
    {
        "idx": 431,
        "db_id": "shakespeare",
        "question": "What is the percentage of act number 5 in Titus Andronicus?",
        "evidence": "act number 5 refers to Act = 5; Titus Andronicus refers to Title = 'Titus Andronicus'; percentage = divide(sum(Act = 5), count(Act)) as percentage",
        "gold": "SELECT CAST(SUM(IIF(T2.act = 5, 1, 0)) AS REAL) * 100 / COUNT(T2.act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Titus Andronicus'",
        "pred": "SELECT (CAST(SUM(CASE WHEN T1.`Act` = 5 THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage FROM chapters AS T1 INNER JOIN works AS T2 ON T1.`work_id` = T2.`id` WHERE T2.`Title` = 'Titus Andronicus'",
        "pred_result": 1,
        "repair_sql": "SELECT (CAST(SUM(CASE WHEN T1.`Act` = 5 THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage FROM chapters AS T1 INNER JOIN works AS T2 ON T1.`work_id` = T2.`id` WHERE T2.`Title` = 'Titus Andronicus'",
        "repair_result": 1
    },
    {
        "idx": 432,
        "db_id": "shakespeare",
        "question": "How many of the works of Shakespeare are Tragedy?",
        "evidence": "Tragedy refers to GenreType = 'Tragedy'",
        "gold": "SELECT COUNT(id) FROM works WHERE GenreType = 'Tragedy'",
        "pred": "SELECT COUNT(*) FROM works WHERE GenreType = 'Tragedy'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM works WHERE GenreType = 'Tragedy'",
        "repair_result": 1
    },
    {
        "idx": 433,
        "db_id": "shakespeare",
        "question": "Among the works of Shakespeare, how many of them have the word \"Henry\" on its title?",
        "evidence": "works refers to Title; have the word \"Henry\" on its title refers to Title = '%Henry%'",
        "gold": "SELECT COUNT(id) FROM works WHERE Title LIKE '%Henry%'",
        "pred": "SELECT COUNT(*) FROM works WHERE Title LIKE '%Henry%'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM works WHERE Title LIKE '%Henry%'",
        "repair_result": 1
    },
    {
        "idx": 434,
        "db_id": "shakespeare",
        "question": "Give the character's ID of the character that said the paragraph \"O my poor brother! and so perchance may he be.\"",
        "evidence": "\"O my poor brother! and so perchance may he be.\" refers to\u00a0 PlainText = 'O my poor brother! and so perchance may he be.'",
        "gold": "SELECT character_id FROM paragraphs WHERE PlainText = 'O my poor brother! and so perchance may he be.'",
        "pred": "SELECT T2.`CharName` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T1.`PlainText` = 'O my poor brother! and so perchance may he be.'",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`CharName` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T1.`PlainText` = 'O my poor brother! and so perchance may he be.'",
        "repair_result": 0
    },
    {
        "idx": 435,
        "db_id": "shakespeare",
        "question": "List the paragraph number and paragraphs said by the character named \"Sir Andrew Aguecheek\".",
        "evidence": "paragraph number refers to ParagraphNum; character named \"Sir Andrew Aguecheek\" refers to CharName = 'Sir Andrew Aguecheek'",
        "gold": "SELECT T2.ParagraphNum, T2.id FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Sir Andrew Aguecheek'",
        "pred": "SELECT T1.`ParagraphNum`, T1.`PlainText` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T2.`CharName` = 'Sir Andrew Aguecheek'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`ParagraphNum`, T1.`PlainText` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T2.`CharName` = 'Sir Andrew Aguecheek'",
        "repair_result": 0
    },
    {
        "idx": 436,
        "db_id": "shakespeare",
        "question": "Give the title and the characters name of the most recent work of Shakespeare.",
        "evidence": "characters name refers to CharName; most recent work refers to max(Date)",
        "gold": "SELECT T1.Title, T4.CharName FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id ORDER BY T1.Date DESC LIMIT 1",
        "pred": "SELECT T1.`Title`, T2.`CharName` FROM works AS T1 INNER JOIN chapters AS T3 ON T1.`id` = T3.`work_id` INNER JOIN paragraphs AS T4 ON T3.`id` = T4.`chapter_id` INNER JOIN characters AS T2 ON T4.`character_id` = T2.`id` WHERE T1.`Date` = ( SELECT MAX(`Date`) FROM works )",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`Title`, T2.`CharName` FROM works AS T1 INNER JOIN chapters AS T3 ON T1.`id` = T3.`work_id` INNER JOIN paragraphs AS T4 ON T3.`id` = T4.`chapter_id` INNER JOIN characters AS T2 ON T4.`character_id` = T2.`id` WHERE T1.`Date` = ( SELECT MAX(`Date`) FROM works )",
        "repair_result": 0
    },
    {
        "idx": 437,
        "db_id": "shakespeare",
        "question": "Among paragraphs with paragraph number between 1900 to 1950, list the texts said by a character described as a sea captain, friend to Sebatian.",
        "evidence": "paragraph number between 1900 to 1950 refers to ParagraphNum > = 1500 AND ParagraphNum < = 1950; texts refers to PlainText; a character described as a sea captain, friend to Sebatian refers to characters.Description = 'a sea captain, friend to Sebastian'",
        "gold": "SELECT T1.description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.PlainText = 'a sea captain, friend to Sebastian' AND T2.ParagraphNum BETWEEN 1500 AND 1950",
        "pred": "SELECT T3.`PlainText` FROM paragraphs AS T3 INNER JOIN characters AS T2 ON T3.`character_id` = T2.`id` WHERE T3.`ParagraphNum` >= 1900 AND T3.`ParagraphNum` <= 1950 AND T2.`Description` = 'a sea captain, friend to Sebastian'",
        "pred_result": 1,
        "repair_sql": "SELECT T3.`PlainText` FROM paragraphs AS T3 INNER JOIN characters AS T2 ON T3.`character_id` = T2.`id` WHERE T3.`ParagraphNum` >= 1900 AND T3.`ParagraphNum` <= 1950 AND T2.`Description` = 'a sea captain, friend to Sebastian'",
        "repair_result": 1
    },
    {
        "idx": 438,
        "db_id": "shakespeare",
        "question": "What is the long title of the Shakespeare's work with Act 4 Scene 5 described as \"Mytilene. A street before the brothel.\"?",
        "evidence": "described as \"Mytilene. A street before the brothel.\" refers to chapters.Description = 'Mytilene. A street before the brothel.'",
        "gold": "SELECT T1.LongTitle FROM works AS T1 RIGHT JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Description = 'Mytilene. A street before the brothel.'",
        "pred": "SELECT T2.`LongTitle` FROM works AS T2 WHERE T2.`id` = ( SELECT T1.`work_id` FROM chapters AS T1 WHERE T1.`Act` = 4 AND T1.`Scene` = 5 AND T1.`Description` = 'Mytilene. A street before the brothel.' )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`LongTitle` FROM works AS T2 WHERE T2.`id` = ( SELECT T1.`work_id` FROM chapters AS T1 WHERE T1.`Act` = 4 AND T1.`Scene` = 5 AND T1.`Description` = 'Mytilene. A street before the brothel.' )",
        "repair_result": 1
    },
    {
        "idx": 439,
        "db_id": "shakespeare",
        "question": "Who is the character that said \"This is Illyria, lady.\"?",
        "evidence": "character refers to CharName; \"This is Illyria, lady.\" refers to PlainText = 'This is Illyria, lady.'",
        "gold": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.PlainText = 'This is Illyria, lady.'",
        "pred": "SELECT T2.`CharName` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T1.`PlainText` = 'This is Illyria, lady.'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`CharName` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T1.`PlainText` = 'This is Illyria, lady.'",
        "repair_result": 1
    },
    {
        "idx": 440,
        "db_id": "shakespeare",
        "question": "In Shakespeare's works between 1600 to 1610, how many of these have a character as a \"Third Servingman\"?",
        "evidence": "between 1600 to 1610 refers to DATE > = 1600 AND DATE < = 1610; \"Third Servingman\" refers to CharName = 'Third Servingman'",
        "gold": "SELECT COUNT(DISTINCT T2.work_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.DATE BETWEEN 1600 AND 1610 AND T4.CharName = 'Third Servingman'",
        "pred": "SELECT COUNT(*) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.`id` = T2.`work_id` INNER JOIN paragraphs AS T3 ON T2.`id` = T3.`chapter_id` WHERE T1.`Date` >= 1600 AND T1.`Date` <= 1610 AND T3.`character_id` = ( SELECT `id` FROM characters WHERE `CharName` = 'Third Servingman' )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.`id` = T2.`work_id` INNER JOIN paragraphs AS T3 ON T2.`id` = T3.`chapter_id` WHERE T1.`Date` >= 1600 AND T1.`Date` <= 1610 AND T3.`character_id` = ( SELECT `id` FROM characters WHERE `CharName` = 'Third Servingman' )",
        "repair_result": 0
    },
    {
        "idx": 441,
        "db_id": "shakespeare",
        "question": "In the Venus and Adonis, what is the description of the last scene listed?",
        "evidence": "Venus and Adonis refers to Title = 'Venus and Adonis'; last scene refers to max(Scene)",
        "gold": "SELECT T2.Description FROM works AS T1 RIGHT JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Venus and Adonis' ORDER BY T2.Scene DESC LIMIT 1",
        "pred": "SELECT `Description` FROM chapters WHERE `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Venus and Adonis' ) AND `Scene` = ( SELECT MAX(`Scene`) FROM chapters WHERE `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Venus and Adonis' ) )",
        "pred_result": 1,
        "repair_sql": "SELECT `Description` FROM chapters WHERE `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Venus and Adonis' ) AND `Scene` = ( SELECT MAX(`Scene`) FROM chapters WHERE `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Venus and Adonis' ) )",
        "repair_result": 1
    },
    {
        "idx": 442,
        "db_id": "shakespeare",
        "question": "In Act 1 Scene 2 of the Twelfth Night, what is the total number of of lines said by Viola?",
        "evidence": "Twelfth Night refers to Title = 'Twelfth Night'; total number of lines said by Viola refers to count(character_id) where CharName = 'Viola'",
        "gold": "SELECT COUNT(T4.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T2.Act = 1 AND T2.Scene = 2 AND T4.id = 1238 AND T4.CharName = 'Viola' AND T1.Title = 'Twelfth Night'",
        "pred": "SELECT COUNT(T3.`id`) AS total_lines FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` WHERE T2.`CharName` = 'Viola' AND T1.`chapter_id` = ( SELECT `id` FROM chapters WHERE `Act` = 1 AND `Scene` = 2 AND `work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Twelfth Night' ) )",
        "pred_result": "no such column: T3.id",
        "repair_sql": "SELECT COUNT(T1.`id`) AS total_lines FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` INNER JOIN chapters AS T3 ON T1.`chapter_id` = T3.`id` INNER JOIN works AS T4 ON T3.`work_id` = T4.`id` WHERE T2.`CharName` = 'Viola' AND T3.`Act` = 1 AND T3.`Scene` = 2 AND T4.`Title` = 'Twelfth Night'",
        "repair_result": 1
    },
    {
        "idx": 443,
        "db_id": "shakespeare",
        "question": "What is the character and work ID of the text \"Fear not thou, man, thou shalt lose nothing here.\"?",
        "evidence": "character refers to chapter_id; text \"Fear not thou, man, thou shalt lose nothing here.\"\u00a0 refers to PlainText = 'Fear not thou, man, thou shalt lose nothing here.'",
        "gold": "SELECT T2.character_id, T1.work_id FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id WHERE T2.PlainText = 'Fear not thou, man, thou shalt lose nothing here.'",
        "pred": "SELECT T2.`CharName`, T4.`id` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` INNER JOIN chapters AS T3 ON T1.`chapter_id` = T3.`id` INNER JOIN works AS T4 ON T3.`work_id` = T4.`id` WHERE T1.`PlainText` = 'Fear not thou, man, thou shalt lose nothing here.'",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`CharName`, T4.`id` FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.`character_id` = T2.`id` INNER JOIN chapters AS T3 ON T1.`chapter_id` = T3.`id` INNER JOIN works AS T4 ON T3.`work_id` = T4.`id` WHERE T1.`PlainText` = 'Fear not thou, man, thou shalt lose nothing here.'",
        "repair_result": 0
    },
    {
        "idx": 444,
        "db_id": "shakespeare",
        "question": "What is the chapter description where the paragraph \"What, wilt thou hear some music, my sweet love?\" belongs?",
        "evidence": "paragraph \"What, wilt thou hear some music, my sweet love?\" refers to\u00a0 PlainText = 'What, wilt thou hear some music, my sweet love?'",
        "gold": "SELECT T1.id, T1.Description FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id WHERE T2.PlainText = 'What, wilt thou hear some music, my sweet love?'",
        "pred": "SELECT T2.`Description` FROM chapters AS T2 WHERE T2.`id` = ( SELECT T1.`chapter_id` FROM paragraphs AS T1 WHERE T1.`PlainText` = 'What, wilt thou hear some music, my sweet love?' )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Description` FROM chapters AS T2 JOIN paragraphs AS T1 ON T2.`id` = T1.`chapter_id` WHERE T1.`PlainText` = 'What, wilt thou hear some music, my sweet love?'",
        "repair_result": 1
    },
    {
        "idx": 445,
        "db_id": "shakespeare",
        "question": "List the scene numbers involving the character named Sir Toby Belch in the Twelfth Night.",
        "evidence": "scene numbers refers to Scene; character named Sir Toby Belch refers to CharName = 'Sir Toby Belch'; in the Twelfth Night refers to Title = 'Twelfth Night'",
        "gold": "SELECT DISTINCT T2.Scene FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Twelfth Night' AND T4.CharName = 'Sir Toby Belch'",
        "pred": "SELECT DISTINCT T1.`Scene` FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.`id` = T2.`chapter_id` WHERE T1.`work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Twelfth Night' ) AND T2.`character_id` = ( SELECT `id` FROM characters WHERE `CharName` = 'Sir Toby Belch' )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`Scene` FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.`id` = T2.`chapter_id` WHERE T1.`work_id` = ( SELECT `id` FROM works WHERE `Title` = 'Twelfth Night' ) AND T2.`character_id` = ( SELECT `id` FROM characters WHERE `CharName` = 'Sir Toby Belch' )",
        "repair_result": 1
    },
    {
        "idx": 446,
        "db_id": "shakespeare",
        "question": "In Shakespeare's works before 1600, list down the title of the tragic story he had written that involved a character named \"Tybalt\".",
        "evidence": "works before 1600 refers to DATE < 1600; tragic story refers to GenreType = 'Tragedy'; character named \"Tybalt\" refers to CharName = 'Tybalt'",
        "gold": "SELECT DISTINCT T1.title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.DATE < 1600 AND T1.GenreType = 'Tragedy' AND T4.CharName = 'Tybalt'",
        "pred": "SELECT T1.`Title` FROM works AS T1 INNER JOIN chapters AS T2 ON T1.`id` = T2.`work_id` INNER JOIN paragraphs AS T3 ON T2.`id` = T3.`chapter_id` INNER JOIN characters AS T4 ON T3.`character_id` = T4.`id` WHERE T1.`Date` < 1600 AND T1.`GenreType` = 'Tragedy' AND T4.`CharName` = 'Tybalt'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`Title` FROM works AS T1 INNER JOIN chapters AS T2 ON T1.`id` = T2.`work_id` INNER JOIN paragraphs AS T3 ON T2.`id` = T3.`chapter_id` INNER JOIN characters AS T4 ON T3.`character_id` = T4.`id` WHERE T1.`Date` < 1600 AND T1.`GenreType` = 'Tragedy' AND T4.`CharName` = 'Tybalt'",
        "repair_result": 1
    },
    {
        "idx": 447,
        "db_id": "shakespeare",
        "question": "List the chapter ID of the works with a year greater than the 89% of average year of all listed works of Shakespeare.",
        "evidence": "a year greater than the 89% of average year refers to DATE > multiply(divide(SUM(DATE) , COUNT(DATE)), 0.89)",
        "gold": "SELECT T2.id FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.DATE > ( SELECT AVG(DATE) FROM works ) * 0.89",
        "pred": "SELECT T1.`id` FROM chapters AS T1 INNER JOIN works AS T2 ON T1.`work_id` = T2.`id` WHERE T2.`Date` > ( SELECT 0.89 * AVG(`Date`) FROM works )",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`id` FROM chapters AS T1 INNER JOIN works AS T2 ON T1.`work_id` = T2.`id` WHERE T2.`Date` > ( SELECT 0.89 * AVG(`Date`) FROM works )",
        "repair_result": 1
    },
    {
        "idx": 448,
        "db_id": "shakespeare",
        "question": "Among the comedy works of Shakespeare, what is the percentage of his works with a character named \"antonio\"?",
        "evidence": "comedy works refers to GenreType = 'Comedy'; a character named \"antonio\" refers to CharName = 'antonio'; percentage = divide(sum(CharName = 'Antonio'), count(CharName)) as percentage",
        "gold": "SELECT CAST(SUM(IIF(T4.CharName = 'antonio', 1, 0)) AS REAL) * 100 / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.GenreType = 'Comedy'",
        "pred": "SELECT CAST(COUNT(DISTINCT T1.`id`) AS REAL) / ( SELECT COUNT(*) FROM works WHERE GenreType = 'Comedy' ) * 100 AS percentage FROM works AS T1 INNER JOIN chapters AS T2 ON T1.`id` = T2.`work_id` INNER JOIN paragraphs AS T3 ON T2.`id` = T3.`chapter_id` INNER JOIN characters AS T4 ON T3.`character_id` = T4.`id` WHERE T4.`CharName` = 'antonio' AND T1.`GenreType` = 'Comedy'",
        "pred_result": 1,
        "repair_sql": "SELECT CAST(COUNT(DISTINCT T1.`id`) AS REAL) / ( SELECT COUNT(*) FROM works WHERE GenreType = 'Comedy' ) * 100 AS percentage FROM works AS T1 INNER JOIN chapters AS T2 ON T1.`id` = T2.`work_id` INNER JOIN paragraphs AS T3 ON T2.`id` = T3.`chapter_id` INNER JOIN characters AS T4 ON T3.`character_id` = T4.`id` WHERE T4.`CharName` = 'antonio' AND T1.`GenreType` = 'Comedy'",
        "repair_result": 1
    },
    {
        "idx": 449,
        "db_id": "olympics",
        "question": "Please list the names of all the Olympic games that John Aalberg has taken part in.",
        "evidence": "name of the Olympic games refers to games_name;",
        "gold": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg'",
        "pred": "SELECT DISTINCT T3.`games_name` FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN games AS T3 ON T2.`games_id` = T3.`id` WHERE T1.`full_name` = 'John Aalberg'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T3.`games_name` FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN games AS T3 ON T2.`games_id` = T3.`id` WHERE T1.`full_name` = 'John Aalberg'",
        "repair_result": 1
    },
    {
        "idx": 450,
        "db_id": "olympics",
        "question": "What was the name of the Olympic game that John Aalberg took part in when he was 31?",
        "evidence": "when he was 31 refers to age = 31; name of the Olympic games refers to games_name;",
        "gold": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg' AND T2.age = 31",
        "pred": "SELECT T2.`games_name` FROM games AS T2 WHERE T2.`id` = ( SELECT T1.`games_id` FROM games_competitor AS T1 WHERE T1.`person_id` = ( SELECT `id` FROM person WHERE `full_name` = 'John Aalberg' ) AND T1.`age` = 31 )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`games_name` FROM games AS T2 WHERE T2.`id` = ( SELECT T1.`games_id` FROM games_competitor AS T1 WHERE T1.`person_id` = ( SELECT `id` FROM person WHERE `full_name` = 'John Aalberg' ) AND T1.`age` = 31 )",
        "repair_result": 1
    },
    {
        "idx": 451,
        "db_id": "olympics",
        "question": "When John Aalberg took part in the 1994 Winter Olympic Game, how old was he?",
        "evidence": "how old was he refers to age; 1994 Winter refers to games_name = '1994 Winter';",
        "gold": "SELECT T2.age FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg' AND T1.games_name = '1994 Winter'",
        "pred": "SELECT T2.`age` FROM games_competitor AS T2 INNER JOIN games AS T3 ON T2.`games_id` = T3.`id` INNER JOIN person AS T1 ON T2.`person_id` = T1.`id` WHERE T1.`full_name` = 'John Aalberg' AND T3.`games_name` = '1994 Winter'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`age` FROM games_competitor AS T2 INNER JOIN games AS T3 ON T2.`games_id` = T3.`id` INNER JOIN person AS T1 ON T2.`person_id` = T1.`id` WHERE T1.`full_name` = 'John Aalberg' AND T3.`games_name` = '1994 Winter'",
        "repair_result": 1
    },
    {
        "idx": 452,
        "db_id": "olympics",
        "question": "How many Olympic competitors are from Finland?",
        "evidence": "competitors refer to person_id; from Finland refers to region_name = 'Finland';",
        "gold": "SELECT COUNT(T1.person_id) FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id WHERE T2.region_name = 'Finland'",
        "pred": "SELECT COUNT(DISTINCT T1.`person_id`) FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.`region_id` = T2.`id` WHERE T2.`region_name` = 'Finland'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`person_id`) FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.`region_id` = T2.`id` WHERE T2.`region_name` = 'Finland'",
        "repair_result": 1
    },
    {
        "idx": 453,
        "db_id": "olympics",
        "question": "Please list the names of all the Olympic competitors from Finland.",
        "evidence": "names of competitors refer to full_name; from Finland refers to region_name = 'Finland';",
        "gold": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland'",
        "pred": "SELECT T2.`full_name` FROM person AS T2 INNER JOIN person_region AS T1 ON T1.`person_id` = T2.`id` INNER JOIN noc_region AS T3 ON T1.`region_id` = T3.`id` WHERE T3.`region_name` = 'Finland'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`full_name` FROM person AS T2 INNER JOIN person_region AS T1 ON T1.`person_id` = T2.`id` INNER JOIN noc_region AS T3 ON T1.`region_id` = T3.`id` WHERE T3.`region_name` = 'Finland'",
        "repair_result": 1
    },
    {
        "idx": 454,
        "db_id": "olympics",
        "question": "The Olympic competitor John Aalberg is from which region?",
        "evidence": "from which region refers to region_name;",
        "gold": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg'",
        "pred": "SELECT T2.`region_name` FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.`region_id` = T2.`id` WHERE T1.`person_id` = ( SELECT `id` FROM person WHERE `full_name` = 'John Aalberg' )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`region_name` FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.`region_id` = T2.`id` WHERE T1.`person_id` = ( SELECT `id` FROM person WHERE `full_name` = 'John Aalberg' )",
        "repair_result": 1
    },
    {
        "idx": 455,
        "db_id": "olympics",
        "question": "What is the NOC code of the region where the tallest male Olympic competitor is from?",
        "evidence": "NOC code of the region refers to noc; male refers to gender = 'M'; the tallest refers to MAX(height);",
        "gold": "SELECT T1.noc FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'M' ORDER BY T3.height DESC LIMIT 1",
        "pred": "SELECT `noc` FROM noc_region WHERE `id` = ( SELECT T2.`region_id` FROM person_region AS T1 INNER JOIN games_competitor AS T2 ON T1.`person_id` = T2.`person_id` WHERE T2.`person_id` = ( SELECT T1.`person_id` FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` WHERE T1.`gender` = 'M' ORDER BY T1.`height` DESC LIMIT 1 ) )",
        "pred_result": "no such column: T2.region_id",
        "repair_sql": "SELECT `noc` FROM noc_region WHERE `id` = ( SELECT T1.`region_id` FROM person_region AS T1 INNER JOIN games_competitor AS T2 ON T1.`person_id` = T2.`person_id` WHERE T2.`person_id` = ( SELECT T1.`id` FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` WHERE T1.`gender` = 'M' ORDER BY T1.`height` DESC LIMIT 1 ) )",
        "repair_result": 1
    },
    {
        "idx": 456,
        "db_id": "olympics",
        "question": "Among all the Olympic competitors from Finland, how many of them are female?",
        "evidence": "competitors from Finland refer to id where region_name = 'Finland'; female refers to gender = 'F';",
        "gold": "SELECT COUNT(T3.id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland' AND T3.gender = 'F'",
        "pred": "SELECT COUNT(*) FROM person AS T1 INNER JOIN ( SELECT T3.`person_id` FROM person_region AS T2 INNER JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T3.`region_name` = 'Finland' ) AS T4 ON T1.`id` = T4.`person_id` WHERE T1.`gender` = 'F'",
        "pred_result": "no such column: T3.person_id",
        "repair_sql": "SELECT COUNT(*) FROM person AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.person_id INNER JOIN noc_region AS T3 ON T2.region_id = T3.id WHERE T3.region_name = 'Finland' AND T1.gender = 'F'",
        "repair_result": 1
    },
    {
        "idx": 457,
        "db_id": "olympics",
        "question": "In which city was the 1992 Summer Olympic Games held?",
        "evidence": "In which city refers to city_name; 1992 Summer Olympic Games refer to games_name = '1992 Summer';",
        "gold": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1992 Summer'",
        "pred": "SELECT T2.`city_name` FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1992 Summer' )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`city_name` FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1992 Summer' )",
        "repair_result": 1
    },
    {
        "idx": 458,
        "db_id": "olympics",
        "question": "Please list the names of the Olympic games that were held in London.",
        "evidence": "held in London refers to city_name = 'London';",
        "gold": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London'",
        "pred": "SELECT T1.`games_name` FROM games AS T1 INNER JOIN games_city AS T2 ON T1.`id` = T2.`games_id` INNER JOIN city AS T3 ON T2.`city_id` = T3.`id` WHERE T3.`city_name` = 'London'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`games_name` FROM games AS T1 INNER JOIN games_city AS T2 ON T1.`id` = T2.`games_id` INNER JOIN city AS T3 ON T2.`city_id` = T3.`id` WHERE T3.`city_name` = 'London'",
        "repair_result": 1
    },
    {
        "idx": 459,
        "db_id": "olympics",
        "question": "In which year did London hold its earliest Olympic game?",
        "evidence": "In which year refers to games_year; London refers to city_name = 'London'; earliest Olympic game refers to MIN(games_year);",
        "gold": "SELECT T3.games_year FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London' ORDER BY T3.games_year LIMIT 1",
        "pred": "SELECT MIN(T3.`games_year`) FROM games AS T3 INNER JOIN games_city AS T1 ON T3.`id` = T1.`games_id` INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T2.`city_name` = 'London'",
        "pred_result": 1,
        "repair_sql": "SELECT MIN(T3.`games_year`) FROM games AS T3 INNER JOIN games_city AS T1 ON T3.`id` = T1.`games_id` INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T2.`city_name` = 'London'",
        "repair_result": 1
    },
    {
        "idx": 460,
        "db_id": "olympics",
        "question": "For how many times has London held the Olympic games?",
        "evidence": "London refers to city_name = 'London'; how many times refer to COUNT(games_id);",
        "gold": "SELECT COUNT(T1.games_id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'London'",
        "pred": "SELECT COUNT(DISTINCT `games_id`) FROM games_city WHERE `city_id` = ( SELECT `id` FROM city WHERE `city_name` = 'London' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT `games_id`) FROM games_city WHERE `city_id` = ( SELECT `id` FROM city WHERE `city_name` = 'London' )",
        "repair_result": 1
    },
    {
        "idx": 461,
        "db_id": "olympics",
        "question": "What is the average height of the male Olympic competitors from Finland?",
        "evidence": "DIVIDE(SUM(height), COUNT(id)) where region_name = 'Finland' and gender = 'M';",
        "gold": "SELECT AVG(T3.height) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland' AND T3.gender = 'M'",
        "pred": "SELECT AVG(T1.`height`) FROM person AS T1 INNER JOIN person_region AS T2 ON T1.`id` = T2.`person_id` INNER JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T3.`region_name` = 'Finland' AND T1.`gender` = 'M'",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(T1.`height`) FROM person AS T1 INNER JOIN person_region AS T2 ON T1.`id` = T2.`person_id` INNER JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T3.`region_name` = 'Finland' AND T1.`gender` = 'M'",
        "repair_result": 1
    },
    {
        "idx": 462,
        "db_id": "olympics",
        "question": "Among the competitors of the 1994 Winter Olympic Game, what is the percentage of those from Finland?",
        "evidence": "DIVIDE(COUNT(id where region_name = 'Finland'), COUNT(id)) as percentage where games_name = '1994 Winter';",
        "gold": "SELECT CAST(COUNT(CASE WHEN T5.region_name = 'Finland' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T3.id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id INNER JOIN person_region AS T4 ON T3.id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T1.games_name = '1994 Winter'",
        "pred": "SELECT (CAST(COUNT(T1.`id`) AS REAL) / COUNT(T2.`id`)) * 100 AS percentage FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.`region_id` = T2.`id` INNER JOIN games_competitor AS T3 ON T1.`person_id` = T3.`person_id` INNER JOIN games AS T4 ON T3.`games_id` = T4.`id` WHERE T2.`region_name` = 'Finland' AND T4.`games_name` = '1994 Winter'",
        "pred_result": "no such column: T1.id",
        "repair_sql": "SELECT (CAST(COUNT(T1.`person_id`) AS REAL) / COUNT(T2.`id`)) * 100 AS percentage FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.`region_id` = T2.`id` INNER JOIN games_competitor AS T3 ON T1.`person_id` = T3.`person_id` INNER JOIN games AS T4 ON T3.`games_id` = T4.`id` WHERE T2.`region_name` = 'Finland' AND T4.`games_name` = '1994 Winter';",
        "repair_result": 0
    },
    {
        "idx": 463,
        "db_id": "olympics",
        "question": "Which sport does the event \"Shooting Women's Trap\" belong to?",
        "evidence": "sport refers to sport_name; event \"Shooting Women's Trap\" refers to event_name = 'Shooting Women''s Trap';",
        "gold": "SELECT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T2.event_name LIKE 'Shooting Women%s Trap'",
        "pred": "SELECT `sport_name` FROM sport WHERE `id` = ( SELECT `sport_id` FROM event WHERE `event_name` = 'Shooting Women''s Trap' )",
        "pred_result": 1,
        "repair_sql": "SELECT `sport_name` FROM sport WHERE `id` = ( SELECT `sport_id` FROM event WHERE `event_name` = 'Shooting Women''s Trap' )",
        "repair_result": 1
    },
    {
        "idx": 464,
        "db_id": "olympics",
        "question": "Which city was the host of 1936 Winter Olympic Games?",
        "evidence": "Which city refers to city_name; 1936 Winter Olympic refers to games_name = '1936 Winter';",
        "gold": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1936 Winter'",
        "pred": "SELECT T2.`city_name` FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1936 Winter' )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`city_name` FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1936 Winter' )",
        "repair_result": 1
    },
    {
        "idx": 465,
        "db_id": "olympics",
        "question": "How many Olympic Games has London hosted?",
        "evidence": "London refers to city_name = 'London';",
        "gold": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London'",
        "pred": "SELECT COUNT(DISTINCT T1.`games_id`) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T2.`city_name` = 'London'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`games_id`) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T2.`city_name` = 'London'",
        "repair_result": 1
    },
    {
        "idx": 466,
        "db_id": "olympics",
        "question": "Tell the number of swimming related events.",
        "evidence": "swimming refers to sport_name = 'Swimming';",
        "gold": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Swimming'",
        "pred": "SELECT COUNT(*) FROM event WHERE `sport_id` = ( SELECT `id` FROM sport WHERE `sport_name` = 'Swimming' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM event WHERE `sport_id` = ( SELECT `id` FROM sport WHERE `sport_name` = 'Swimming' )",
        "repair_result": 1
    },
    {
        "idx": 467,
        "db_id": "olympics",
        "question": "For Peter Kohnke, show the name of his/her region.",
        "evidence": "name of his/her region refers to region_name;",
        "gold": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Peter Kohnke'",
        "pred": "SELECT T2.`region_name` FROM person AS T1 INNER JOIN person_region AS T2 ON T1.`id` = T2.`person_id` INNER JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T1.`full_name` = 'Peter Kohnke'",
        "pred_result": "no such column: T2.region_name",
        "repair_sql": "SELECT T3.`region_name` FROM person AS T1 INNER JOIN person_region AS T2 ON T1.`id` = T2.`person_id` INNER JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T1.`full_name` = 'Peter Kohnke'",
        "repair_result": 1
    },
    {
        "idx": 468,
        "db_id": "olympics",
        "question": "Which game has Jessica Carolina Aguilera Aguilera participated in? Give the id of the game.",
        "evidence": "id of the game refers to games_id;",
        "gold": "SELECT T2.games_id FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Jessica Carolina Aguilera Aguilera'",
        "pred": "SELECT T1.`games_id` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T2.`full_name` = 'Jessica Carolina Aguilera Aguilera'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`games_id` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T2.`full_name` = 'Jessica Carolina Aguilera Aguilera'",
        "repair_result": 1
    },
    {
        "idx": 469,
        "db_id": "olympics",
        "question": "Show the name of the sport with the most events.",
        "evidence": "name of the sport with the most events refers to sport_name where MAX(COUNT(id));",
        "gold": "SELECT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id GROUP BY T1.sport_name ORDER BY COUNT(T2.event_name) DESC LIMIT 1",
        "pred": "SELECT T2.`sport_name` FROM event AS T1 INNER JOIN sport AS T2 ON T1.`sport_id` = T2.`id` GROUP BY T2.`sport_name` ORDER BY COUNT(T1.`id`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`sport_name` FROM event AS T1 INNER JOIN sport AS T2 ON T1.`sport_id` = T2.`id` GROUP BY T2.`sport_name` ORDER BY COUNT(T1.`id`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 470,
        "db_id": "olympics",
        "question": "Give the name of the tallest athlete from Sweden.",
        "evidence": "the tallest athlete refers to id where MAX(height); from Sweden refers to region_name = 'Sweden'; name refers to full_name;",
        "gold": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Sweden' ORDER BY T3.height DESC LIMIT 1",
        "pred": "SELECT T1.`full_name` FROM person AS T1 INNER JOIN person_region AS T2 ON T1.`id` = T2.`person_id` INNER JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T3.`region_name` = 'Sweden' AND T1.`height` = ( SELECT MAX(`height`) FROM person )",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`full_name` FROM person AS T1 INNER JOIN person_region AS T2 ON T1.`id` = T2.`person_id` INNER JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T3.`region_name` = 'Sweden' AND T1.`height` = ( SELECT MAX(`height`) FROM person AS T4 INNER JOIN person_region AS T5 ON T4.`id` = T5.`person_id` INNER JOIN noc_region AS T6 ON T5.`region_id` = T6.`id` WHERE T6.`region_name` = 'Sweden' )",
        "repair_result": 1
    },
    {
        "idx": 471,
        "db_id": "olympics",
        "question": "How many athletes in the database are from Guatemala?",
        "evidence": "from Guatemala refers to region_name = 'Guatemala';",
        "gold": "SELECT COUNT(T1.person_id) FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id WHERE T2.region_name = 'Guatemala'",
        "pred": "SELECT COUNT(DISTINCT T1.`person_id`) FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.`region_id` = T2.`id` WHERE T2.`region_name` = 'Guatemala'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`person_id`) FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.`region_id` = T2.`id` WHERE T2.`region_name` = 'Guatemala'",
        "repair_result": 1
    },
    {
        "idx": 472,
        "db_id": "olympics",
        "question": "Who has participated in the most Olympic Games in the database?",
        "evidence": "Who refers to full_name; participated in the most Olympic Games refers to MAX(COUNT(games_id));",
        "gold": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id GROUP BY T2.person_id ORDER BY COUNT(T2.person_id) DESC LIMIT 1",
        "pred": "SELECT T2.`full_name` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` GROUP BY T2.`full_name` ORDER BY COUNT(DISTINCT T1.`games_id`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`full_name` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` GROUP BY T2.`full_name` ORDER BY COUNT(DISTINCT T1.`games_id`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 473,
        "db_id": "olympics",
        "question": "Show the name of the competitor id 90991.",
        "evidence": "name of the competitor refers to full_name;",
        "gold": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.id = 90991",
        "pred": "SELECT T1.`full_name` FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` WHERE T2.`id` = 90991",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`full_name` FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` WHERE T2.`id` = 90991",
        "repair_result": 1
    },
    {
        "idx": 474,
        "db_id": "olympics",
        "question": "How many competitor ids does Martina Kohlov have?",
        "evidence": "",
        "gold": "SELECT COUNT(T2.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Martina Kohlov'",
        "pred": "SELECT COUNT(*) FROM games_competitor AS T2 WHERE T2.`person_id` = ( SELECT T1.`id` FROM person AS T1 WHERE T1.`full_name` = 'Martina Kohlov' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM games_competitor AS T2 WHERE T2.`person_id` = ( SELECT T1.`id` FROM person AS T1 WHERE T1.`full_name` = 'Martina Kohlov' )",
        "repair_result": 1
    },
    {
        "idx": 475,
        "db_id": "olympics",
        "question": "Calculate the bmi of the competitor id 147420.",
        "evidence": "DIVIDE(weight), MULTIPLY(height, height) where id = 147420;",
        "gold": "SELECT CAST(T1.weight AS REAL) / (T1.height * T1.height) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.id = 147420",
        "pred": "SELECT (T1.`weight` / (T1.`height` * T1.`height`)) AS bmi FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` WHERE T2.`id` = 147420",
        "pred_result": 0,
        "repair_sql": "SELECT (T1.`weight` / (T1.`height` * T1.`height`)) AS bmi FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` WHERE T2.`id` = 147420",
        "repair_result": 0
    },
    {
        "idx": 476,
        "db_id": "olympics",
        "question": "What is the percentage of male athletes from Estonia?",
        "evidence": "DIVIDE(COUNT(id where gender = 'M'), COUNT(id)) as percentage where region_name = 'Estonia';",
        "gold": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'M' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Estonia'",
        "pred": "SELECT (CAST(COUNT(T1.`id`) AS REAL) / ( SELECT COUNT(T2.`id`) FROM person_region AS T2 INNER JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T3.`region_name` = 'Estonia' )) * 100 FROM person AS T1 INNER JOIN person_region AS T2 ON T1.`id` = T2.`person_id` INNER JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T1.`gender` = 'M' AND T3.`region_name` = 'Estonia'",
        "pred_result": "no such column: T2.id",
        "repair_sql": "SELECT (CAST(COUNT(T1.`id`) AS REAL) / ( SELECT COUNT(T2.`person_id`) FROM person_region AS T2 INNER JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T3.`region_name` = 'Estonia' )) * 100 FROM person AS T1 INNER JOIN person_region AS T2 ON T1.`id` = T2.`person_id` INNER JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T1.`gender` = 'M' AND T3.`region_name` = 'Estonia'",
        "repair_result": 1
    },
    {
        "idx": 477,
        "db_id": "olympics",
        "question": "Who is the youngest person who participated in the Olympics?",
        "evidence": "Who is the youngest person refers to full_name where MIN(age);",
        "gold": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age LIMIT 1",
        "pred": "SELECT T2.`full_name` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`age` = ( SELECT MIN(T3.`age`) FROM games_competitor AS T3 )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`full_name` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`age` = ( SELECT MIN(T3.`age`) FROM games_competitor AS T3 )",
        "repair_result": 1
    },
    {
        "idx": 478,
        "db_id": "olympics",
        "question": "How many 24 years old competitors competed in Men's Basketball?",
        "evidence": "24 years old competitors refer to id where age = 24; Men's Basketball refers to event_name = 'Basketball Men''s Basketball';",
        "gold": "SELECT COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN event AS T3 ON T1.event_id = T3.id WHERE T3.event_name LIKE 'Basketball Men%s Basketball' AND T2.age = 24",
        "pred": "SELECT COUNT(*) FROM competitor_event AS T1 INNER JOIN event AS T2 ON T1.`event_id` = T2.`id` INNER JOIN games_competitor AS T3 ON T1.`competitor_id` = T3.`id` WHERE T2.`event_name` = 'Basketball Men''s Basketball' AND T3.`age` = 24",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM competitor_event AS T1 INNER JOIN event AS T2 ON T1.`event_id` = T2.`id` INNER JOIN games_competitor AS T3 ON T1.`competitor_id` = T3.`id` WHERE T2.`event_name` = 'Basketball Men''s Basketball' AND T3.`age` = 24",
        "repair_result": 1
    },
    {
        "idx": 479,
        "db_id": "olympics",
        "question": "What are the names of the events under Art Competitions?",
        "evidence": "Art Competitions refer to sport_name = 'Art Competitions'; names of events refers to event_name;",
        "gold": "SELECT T2.event_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Art Competitions'",
        "pred": "SELECT T2.`event_name` FROM event AS T2 INNER JOIN sport AS T1 ON T1.`id` = T2.`sport_id` WHERE T1.`sport_name` = 'Art Competitions'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`event_name` FROM event AS T2 INNER JOIN sport AS T1 ON T1.`id` = T2.`sport_id` WHERE T1.`sport_name` = 'Art Competitions'",
        "repair_result": 1
    },
    {
        "idx": 480,
        "db_id": "olympics",
        "question": "How many gold medals does Henk Jan Zwolle have?",
        "evidence": "gold medals refer to medal_name = 'Gold';",
        "gold": "SELECT COUNT(T1.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T1.full_name = 'Henk Jan Zwolle' AND T4.medal_name = 'Gold'",
        "pred": "SELECT COUNT(*) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.`competitor_id` = T2.`id` INNER JOIN person AS T3 ON T2.`person_id` = T3.`id` INNER JOIN medal AS T4 ON T1.`medal_id` = T4.`id` WHERE T3.`full_name` = 'Henk Jan Zwolle' AND T4.`medal_name` = 'Gold'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.`competitor_id` = T2.`id` INNER JOIN person AS T3 ON T2.`person_id` = T3.`id` INNER JOIN medal AS T4 ON T1.`medal_id` = T4.`id` WHERE T3.`full_name` = 'Henk Jan Zwolle' AND T4.`medal_name` = 'Gold'",
        "repair_result": 1
    },
    {
        "idx": 481,
        "db_id": "olympics",
        "question": "What is the name of the event where competitors received the most gold medals?",
        "evidence": "received the most gold medals refers to MAX(COUNT(medal_name = 'Gold'));",
        "gold": "SELECT T2.event_name FROM competitor_event AS T1 INNER JOIN event AS T2 ON T1.event_id = T2.id INNER JOIN medal AS T3 ON T1.medal_id = T3.id WHERE T3.medal_name = 'Gold' GROUP BY T2.id ORDER BY COUNT(T1.event_id) DESC LIMIT 1",
        "pred": "SELECT T3.`event_name` FROM event AS T3 INNER JOIN competitor_event AS T5 ON T3.`id` = T5.`event_id` INNER JOIN medal AS T6 ON T5.`medal_id` = T6.`id` WHERE T6.`medal_name` = 'Gold' GROUP BY T3.`event_name` ORDER BY COUNT(T5.`medal_name`) DESC LIMIT 1",
        "pred_result": "no such column: T5.medal_name",
        "repair_sql": "SELECT T3.`event_name` FROM event AS T3 INNER JOIN competitor_event AS T5 ON T3.`id` = T5.`event_id` INNER JOIN medal AS T6 ON T5.`medal_id` = T6.`id` WHERE T6.`medal_name` = 'Gold' GROUP BY T3.`event_name` ORDER BY COUNT(T5.`medal_id`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 482,
        "db_id": "olympics",
        "question": "How many athletes are from Australia?",
        "evidence": "from Australia refer region_name = 'Australia';",
        "gold": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Australia'",
        "pred": "SELECT COUNT(*) FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.`region_id` = T2.`id` WHERE T2.`region_name` = 'Australia'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.`region_id` = T2.`id` WHERE T2.`region_name` = 'Australia'",
        "repair_result": 1
    },
    {
        "idx": 483,
        "db_id": "olympics",
        "question": "Which cities hosted at least 3 Olympic games?",
        "evidence": "cities refer to city_name; hosted at least 3 Olympic games refers to COUNT(games_id) > = 3;",
        "gold": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id GROUP BY T2.id HAVING COUNT(T1.games_id) >= 3",
        "pred": "SELECT T1.`city_name` FROM city AS T1 INNER JOIN games_city AS T2 ON T1.`id` = T2.`city_id` GROUP BY T1.`city_name` HAVING COUNT(T2.`games_id`) >= 3",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`city_name` FROM city AS T1 INNER JOIN games_city AS T2 ON T1.`id` = T2.`city_id` GROUP BY T1.`city_name` HAVING COUNT(T2.`games_id`) >= 3",
        "repair_result": 1
    },
    {
        "idx": 484,
        "db_id": "olympics",
        "question": "How many Summer games were held in Stockholm?",
        "evidence": "Summer games refer to id where season = 'Summer'; in Stockholm refers to city_name = 'Stockholm';",
        "gold": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Stockholm' AND T3.season = 'Summer'",
        "pred": "SELECT COUNT(*) FROM games_city AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`season` = 'Summer' AND T1.`city_id` = ( SELECT `id` FROM city WHERE `city_name` = 'Stockholm' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM games_city AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`season` = 'Summer' AND T1.`city_id` = ( SELECT `id` FROM city WHERE `city_name` = 'Stockholm' )",
        "repair_result": 1
    },
    {
        "idx": 485,
        "db_id": "olympics",
        "question": "Which region do most of the athletes are from?",
        "evidence": "region refers to region_name; most of the athletes refer to MAX(COUNT(person_id));",
        "gold": "SELECT T2.region_name FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id GROUP BY T2.region_name ORDER BY COUNT(T1.person_id) DESC LIMIT 1",
        "pred": "SELECT NR.`region_name` FROM person_region AS PR INNER JOIN noc_region AS NR ON PR.`region_id` = NR.`id` INNER JOIN games_competitor AS GC ON PR.`person_id` = GC.`person_id` GROUP BY PR.`region_id` ORDER BY COUNT(GC.`person_id`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT NR.`region_name` FROM person_region AS PR INNER JOIN noc_region AS NR ON PR.`region_id` = NR.`id` INNER JOIN games_competitor AS GC ON PR.`person_id` = GC.`person_id` GROUP BY PR.`region_id` ORDER BY COUNT(GC.`person_id`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 486,
        "db_id": "olympics",
        "question": "Where was the first Olympic game held?",
        "evidence": "Where it was held refers to city_name; the first Olympic game refers to id where MIN(games_year);",
        "gold": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id ORDER BY T3.games_year LIMIT 1",
        "pred": "SELECT T2.`city_name` FROM games AS T1 INNER JOIN games_city AS T3 ON T1.`id` = T3.`games_id` INNER JOIN city AS T2 ON T3.`city_id` = T2.`id` WHERE T1.`games_year` = ( SELECT MIN(`games_year`) FROM games )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`city_name` FROM games AS T1 INNER JOIN games_city AS T3 ON T1.`id` = T3.`games_id` INNER JOIN city AS T2 ON T3.`city_id` = T2.`id` WHERE T1.`games_year` = ( SELECT MIN(`games_year`) FROM games )",
        "repair_result": 1
    },
    {
        "idx": 487,
        "db_id": "olympics",
        "question": "What is the name of the game in which the oldest Olympian has ever participated?",
        "evidence": "the oldest Olympian refers to id where MAX(age); name of the game refers to games_name;",
        "gold": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id ORDER BY T2.age LIMIT 1",
        "pred": "SELECT T2.`games_name` FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T1.`age` = ( SELECT MAX(T3.`age`) FROM games_competitor AS T3 )",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`games_name` FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T1.`age` = ( SELECT MAX(T3.`age`) FROM games_competitor AS T3 )",
        "repair_result": 0
    },
    {
        "idx": 488,
        "db_id": "olympics",
        "question": "How many athletes competed in the 1992 Summer Olympics?",
        "evidence": "1992 Summer Olympics refer to games_name = '1928 Summer';",
        "gold": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1928 Summer'",
        "pred": "SELECT COUNT(DISTINCT T1.`person_id`) FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`games_name` = '1992 Summer'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`person_id`) FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`games_name` = '1992 Summer'",
        "repair_result": 0
    },
    {
        "idx": 489,
        "db_id": "olympics",
        "question": "How many Olympic events did Michael Phelps II join in total? Find the percentage of the events where he won a gold medal.",
        "evidence": "DIVIDE(COUNT(event_id where medal_name = 'Gold'), COUNT(event_id)) as percentage where full_name = 'Michael Fred Phelps, II';",
        "gold": "SELECT COUNT(T3.event_id) , CAST(COUNT(CASE WHEN T4.id = '1' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T4.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T1.full_name = 'Michael Fred Phelps, II'",
        "pred": "SELECT (CAST(COUNT(T1.`event_id`) AS REAL) / ( SELECT COUNT(T2.`event_id`) FROM competitor_event AS T2 INNER JOIN games_competitor AS T3 ON T2.`competitor_id` = T3.`id` INNER JOIN person AS T4 ON T3.`person_id` = T4.`id` WHERE T4.`full_name` = 'Michael Fred Phelps, II' )) * 100 FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.`competitor_id` = T2.`id` INNER JOIN person AS T3 ON T2.`person_id` = T3.`id` INNER JOIN medal AS T4 ON T1.`medal_id` = T4.`id` WHERE T3.`full_name` = 'Michael Fred Phelps, II' AND T4.`medal_name` = 'Gold'",
        "pred_result": 0,
        "repair_sql": "SELECT (CAST(COUNT(T1.`event_id`) AS REAL) / ( SELECT COUNT(T2.`event_id`) FROM competitor_event AS T2 INNER JOIN games_competitor AS T3 ON T2.`competitor_id` = T3.`id` INNER JOIN person AS T4 ON T3.`person_id` = T4.`id` WHERE T4.`full_name` = 'Michael Fred Phelps, II' )) * 100 FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.`competitor_id` = T2.`id` INNER JOIN person AS T3 ON T2.`person_id` = T3.`id` INNER JOIN medal AS T4 ON T1.`medal_id` = T4.`id` WHERE T3.`full_name` = 'Michael Fred Phelps, II' AND T4.`medal_name` = 'Gold'",
        "repair_result": 0
    },
    {
        "idx": 490,
        "db_id": "olympics",
        "question": "In the Winter and Summer Olympics of 1988, which game has the most number of competitors? Find the difference of the number of competitors between the two games.",
        "evidence": "the most number of competitors refer to MAX(COUNT(person_id)); SUBTRACT(COUNT(person_id where games_name = '1988 Summer'), COUNT(person_id where games_name = '1988 Winter'));",
        "gold": "SELECT P1 , ( SELECT MAX(P2) - MIN(P2) FROM ( SELECT COUNT(T2.person_id) AS P2 FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name IN ('1988 Winter', '1988 Summer') GROUP BY T1.season ) ORDER BY P2 DESC LIMIT 1 ) FROM ( SELECT T1.season AS P1, COUNT(T2.person_id) AS P2 FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name IN ('1988 Winter', '1988 Summer') GROUP BY T1.season ) ORDER BY P2 DESC LIMIT 1",
        "pred": "SELECT ( SELECT COUNT(T2.`person_id`) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`games_id` WHERE T1.`games_year` = '1988' AND T1.`season` = 'Summer' GROUP BY T1.`games_name` ORDER BY COUNT(T2.`person_id`) DESC LIMIT 1 ) - ( SELECT COUNT(T2.`person_id`) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`games_id` WHERE T1.`games_year` = '1988' AND T1.`season` = 'Winter' GROUP BY T1.`games_name` ORDER BY COUNT(T2.`person_id`) DESC LIMIT 1 ) AS difference",
        "pred_result": 0,
        "repair_sql": "SELECT ( SELECT COUNT(T2.`person_id`) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`games_id` WHERE T1.`games_year` = '1988' AND T1.`season` = 'Summer' GROUP BY T1.`games_name` ORDER BY COUNT(T2.`person_id`) DESC LIMIT 1 ) - ( SELECT COUNT(T2.`person_id`) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`games_id` WHERE T1.`games_year` = '1988' AND T1.`season` = 'Winter' GROUP BY T1.`games_name` ORDER BY COUNT(T2.`person_id`) DESC LIMIT 1 ) AS difference",
        "repair_result": 0
    },
    {
        "idx": 491,
        "db_id": "olympics",
        "question": "What age of the competitors is the most numerous?",
        "evidence": "age is the most numerous refers to age where MAX(COUNT(person_id));",
        "gold": "SELECT age FROM games_competitor GROUP BY age ORDER BY COUNT(person_id) DESC LIMIT 1",
        "pred": "SELECT T1.`age` FROM ( SELECT T1.`age`, COUNT(T1.`person_id`) AS num_competitors FROM games_competitor AS T1 GROUP BY T1.`age` ) AS T2 ORDER BY T2.`num_competitors` DESC LIMIT 1",
        "pred_result": "no such column: T1.age",
        "repair_sql": "SELECT T2.age FROM ( SELECT T1.age, COUNT(T1.person_id) AS num_competitors FROM games_competitor AS T1 GROUP BY T1.age ) AS T2 ORDER BY T2.num_competitors DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 492,
        "db_id": "olympics",
        "question": "In which cities beginning with the letter M have the Olympic Games been held?",
        "evidence": "cities beginning with the letter M refer to city_name LIKE 'M%';",
        "gold": "SELECT city_name FROM city WHERE city_name LIKE 'M%'",
        "pred": "SELECT DISTINCT T2.`city_name` FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T2.`city_name` LIKE 'M%'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.`city_name` FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T2.`city_name` LIKE 'M%'",
        "repair_result": 1
    },
    {
        "idx": 493,
        "db_id": "olympics",
        "question": "In which cities were the 1976 winter and summer games held?",
        "evidence": "cities refer to city_name; 1976 winter and summer games refer to games_name IN ('1976 Winter', '1976 Summer');",
        "gold": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name IN ('1976 Summer', '1976 Winter')",
        "pred": "SELECT DISTINCT T3.`city_name` FROM games_city AS T1 INNER JOIN city AS T3 ON T1.`city_id` = T3.`id` WHERE T1.`games_id` IN ( SELECT `id` FROM games WHERE `games_name` IN ('1976 Winter', '1976 Summer') )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T3.`city_name` FROM games_city AS T1 INNER JOIN city AS T3 ON T1.`city_id` = T3.`id` WHERE T1.`games_id` IN ( SELECT `id` FROM games WHERE `games_name` IN ('1976 Winter', '1976 Summer') )",
        "repair_result": 1
    },
    {
        "idx": 494,
        "db_id": "olympics",
        "question": "What was the medal that Coleen Dufresne got?",
        "evidence": "What medal refers to medal_name;",
        "gold": "SELECT T4.medal_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T1.full_name = 'Coleen Dufresne (-Stewner)'",
        "pred": "SELECT T5.`medal_name` FROM games_competitor AS T2 INNER JOIN competitor_event AS T3 ON T2.`id` = T3.`competitor_id` INNER JOIN medal AS T5 ON T3.`medal_id` = T5.`id` WHERE T2.`person_id` = ( SELECT T1.`id` FROM person AS T1 WHERE T1.`full_name` = 'Coleen Dufresne' )",
        "pred_result": 0,
        "repair_sql": "SELECT T5.`medal_name` FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN competitor_event AS T3 ON T2.`id` = T3.`competitor_id` INNER JOIN medal AS T5 ON T3.`medal_id` = T5.`id` WHERE T1.`full_name` = 'Coleen Dufresne'",
        "repair_result": 0
    },
    {
        "idx": 495,
        "db_id": "olympics",
        "question": "What is the name of the competitor who has won the most medals?",
        "evidence": "name of the competitor refers to full_name; won the most medals refer to MAX(COUNT(medal_id));",
        "gold": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T4.id != 4 GROUP BY T1.full_name ORDER BY COUNT(T4.id) DESC LIMIT 1",
        "pred": "SELECT T3.`full_name` FROM person AS T3 INNER JOIN games_competitor AS T4 ON T3.`id` = T4.`person_id` INNER JOIN competitor_event AS T7 ON T4.`id` = T7.`competitor_id` GROUP BY T3.`full_name` ORDER BY COUNT(T7.`medal_id`) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T3.`full_name` FROM person AS T3 INNER JOIN games_competitor AS T4 ON T3.`id` = T4.`person_id` INNER JOIN competitor_event AS T7 ON T4.`id` = T7.`competitor_id` GROUP BY T3.`full_name` ORDER BY COUNT(T7.`medal_id`) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 496,
        "db_id": "olympics",
        "question": "Where is competitor Estelle Nze Minko from?",
        "evidence": "Where competitor is from refers to region_name;",
        "gold": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Estelle Nze Minko'",
        "pred": "SELECT T3.`region_name` FROM noc_region AS T3 WHERE T3.`id` = ( SELECT T2.`region_id` FROM person_region AS T2 WHERE T2.`person_id` = ( SELECT T1.`id` FROM person AS T1 WHERE T1.`full_name` = 'Estelle Nze Minko' ) )",
        "pred_result": 1,
        "repair_sql": "SELECT T3.`region_name` FROM noc_region AS T3 WHERE T3.`id` = ( SELECT T2.`region_id` FROM person_region AS T2 WHERE T2.`person_id` = ( SELECT T1.`id` FROM person AS T1 WHERE T1.`full_name` = 'Estelle Nze Minko' ) )",
        "repair_result": 1
    },
    {
        "idx": 497,
        "db_id": "olympics",
        "question": "What is the name of all the sports Chin Eei Hui has competed in?",
        "evidence": "name of the sport refers to sport_name;",
        "gold": "SELECT DISTINCT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id WHERE T5.full_name = 'Chin Eei Hui'",
        "pred": "SELECT DISTINCT T8.`sport_name` FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN competitor_event AS T3 ON T2.`id` = T3.`competitor_id` INNER JOIN event AS T4 ON T3.`event_id` = T4.`id` INNER JOIN sport AS T8 ON T4.`sport_id` = T8.`id` WHERE T1.`full_name` = 'Chin Eei Hui'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T8.`sport_name` FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN competitor_event AS T3 ON T2.`id` = T3.`competitor_id` INNER JOIN event AS T4 ON T3.`event_id` = T4.`id` INNER JOIN sport AS T8 ON T4.`sport_id` = T8.`id` WHERE T1.`full_name` = 'Chin Eei Hui'",
        "repair_result": 1
    },
    {
        "idx": 498,
        "db_id": "olympics",
        "question": "What is the name of the oldest person who participated in the Olympic Games?",
        "evidence": "the oldest person refers to person_id where MAX(age); name refers to full_name;",
        "gold": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age DESC LIMIT 1",
        "pred": "SELECT T2.`full_name` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`person_id` = ( SELECT T1.`person_id` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` ORDER BY T2.`age` DESC LIMIT 1 )",
        "pred_result": "no such column: T2.age",
        "repair_sql": "SELECT T2.`full_name` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T2.`age` = ( SELECT MAX(T2.`age`) FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` )",
        "repair_result": "no such column: T2.age"
    },
    {
        "idx": 499,
        "db_id": "olympics",
        "question": "In which Olympic Games have the largest number of women participation?",
        "evidence": "the largest number of women participation refers to MAX(COUNT(gender = 'F')); In which Olympic Games refer to games_year;",
        "gold": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'F' GROUP BY T1.games_name ORDER BY COUNT(T2.person_id) DESC LIMIT 1",
        "pred": "SELECT T1.`games_year` FROM ( SELECT T2.`games_year`, COUNT(T1.`gender`) AS women_participants FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` WHERE T1.`gender` = 'F' GROUP BY T2.`games_year` ) AS T1 ORDER BY T1.`women_participants` DESC LIMIT 1",
        "pred_result": "no such column: T2.games_year",
        "repair_sql": "SELECT T3.`games_year` FROM ( SELECT T2.`games_year`, COUNT(T1.`gender`) AS women_participants FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN games AS T3 ON T2.`games_id` = T3.`id` WHERE T1.`gender` = 'F' GROUP BY T2.`games_year` ) AS T1 ORDER BY T1.`women_participants` DESC LIMIT 1",
        "repair_result": "no such column: T2.games_year"
    },
    {
        "idx": 500,
        "db_id": "olympics",
        "question": "How many males from Belgium have participated in an Olympic Games?",
        "evidence": "males refer to gender = 'M'; Belgium refers to region_name = 'Belgium';",
        "gold": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Belgium' AND T3.gender = 'M'",
        "pred": "SELECT COUNT(*) FROM games_competitor AS T1 INNER JOIN competitor_event AS T2 ON T1.`id` = T2.`competitor_id` WHERE T1.`person_id` IN ( SELECT T3.`person_id` FROM person_region AS T3 INNER JOIN noc_region AS T4 ON T3.`region_id` = T4.`id` INNER JOIN person AS T5 ON T3.`person_id` = T5.`id` WHERE T5.`gender` = 'M' AND T4.`region_name` = 'Belgium' )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM games_competitor AS T1 INNER JOIN competitor_event AS T2 ON T1.`id` = T2.`competitor_id` WHERE T1.`person_id` IN ( SELECT T3.`person_id` FROM person_region AS T3 INNER JOIN noc_region AS T4 ON T3.`region_id` = T4.`id` INNER JOIN person AS T5 ON T3.`person_id` = T5.`id` WHERE T5.`gender` = 'M' AND T4.`region_name` = 'Belgium' )",
        "repair_result": 0
    },
    {
        "idx": 501,
        "db_id": "olympics",
        "question": "How many persons participated in the Sapporo Olympics?",
        "evidence": "the Sapporo Olympics refer to games_id where city_name = 'Sapporo';",
        "gold": "SELECT COUNT(T1.person_id) FROM games_competitor AS T1 INNER JOIN games_city AS T2 ON T1.games_id = T2.games_id INNER JOIN city AS T3 ON T2.city_id = T3.id WHERE T3.city_name = 'Sapporo'",
        "pred": "SELECT COUNT(DISTINCT T3.`person_id`) FROM games_competitor AS T1 INNER JOIN games_city AS T2 ON T1.`games_id` = T2.`games_id` INNER JOIN city AS T3 ON T2.`city_id` = T3.`id` WHERE T3.`city_name` = 'Sapporo'",
        "pred_result": "no such column: T3.person_id",
        "repair_sql": "SELECT COUNT(DISTINCT T1.`person_id`) FROM games_competitor AS T1 INNER JOIN games_city AS T2 ON T1.`games_id` = T2.`games_id` INNER JOIN city AS T3 ON T2.`city_id` = T3.`id` WHERE T3.`city_name` = 'Sapporo'",
        "repair_result": 1
    },
    {
        "idx": 502,
        "db_id": "olympics",
        "question": "In which Olympic Games has Morten Aleksander Djupvik participated?",
        "evidence": "In which Olympic Games refer to games_year;",
        "gold": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Morten Aleksander Djupvik'",
        "pred": "SELECT T3.`games_name` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` INNER JOIN games AS T3 ON T1.`games_id` = T3.`id` WHERE T2.`full_name` = 'Morten Aleksander Djupvik'",
        "pred_result": 1,
        "repair_sql": "SELECT T3.`games_name` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` INNER JOIN games AS T3 ON T1.`games_id` = T3.`id` WHERE T2.`full_name` = 'Morten Aleksander Djupvik'",
        "repair_result": 1
    },
    {
        "idx": 503,
        "db_id": "olympics",
        "question": "How many persons in total have participated in 12 meter Mixed Sailing competitions?",
        "evidence": "12 meter Mixed Sailing competitions refer to event_name = 'Sailing Mixed 12 metres';",
        "gold": "SELECT COUNT(T1.competitor_id) FROM competitor_event AS T1 INNER JOIN event AS T2 ON T1.event_id = T2.id INNER JOIN sport AS T3 ON T2.sport_id = T3.id WHERE T2.event_name = 'Sailing Mixed 12 metres'",
        "pred": "SELECT COUNT(DISTINCT `person_id`) FROM games_competitor WHERE `id` IN ( SELECT `competitor_id` FROM competitor_event WHERE `event_id` = ( SELECT `id` FROM event WHERE `event_name` = 'Sailing Mixed 12 metres' ) )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT `person_id`) FROM games_competitor WHERE `id` IN ( SELECT `competitor_id` FROM competitor_event WHERE `event_id` = ( SELECT `id` FROM event WHERE `event_name` = 'Sailing Mixed 12 metres' ) )",
        "repair_result": 1
    },
    {
        "idx": 504,
        "db_id": "olympics",
        "question": "How many different events are there of Modern Pentathlon?",
        "evidence": "Modern Pentathlon refers to sport_name = 'Modern Pentathlon';",
        "gold": "SELECT COUNT(DISTINCT T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Modern Pentathlon'",
        "pred": "SELECT COUNT(DISTINCT T2.`id`) FROM sport AS T1 INNER JOIN event AS T2 ON T1.`id` = T2.`sport_id` WHERE T1.`sport_name` = 'Modern Pentathlon'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T2.`id`) FROM sport AS T1 INNER JOIN event AS T2 ON T1.`id` = T2.`sport_id` WHERE T1.`sport_name` = 'Modern Pentathlon'",
        "repair_result": 1
    },
    {
        "idx": 505,
        "db_id": "olympics",
        "question": "Calculate the percentage of women who have participated in Equestrianism Mixed Three-Day Event, Individual.",
        "evidence": "DIVIDE(COUNT(person_id where gender = 'F), COUNT(person_id)) as percentage where event_name = 'Equestrianism Mixed Three-Day Event, Individual';",
        "gold": "SELECT CAST(COUNT(CASE WHEN T1.gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN event AS T4 ON T3.event_id = T4.id WHERE T4.event_name = 'Equestrianism Mixed Three-Day Event, Individual'",
        "pred": "SELECT (CAST(COUNT(T3.`person_id`) AS REAL) / COUNT(T1.`person_id`)) * 100 AS percentage FROM games_competitor AS T1 INNER JOIN event AS T2 ON T1.`event_id` = T2.`id` INNER JOIN person AS T3 ON T1.`person_id` = T3.`id` WHERE T3.`gender` = 'F' AND T2.`event_name` = 'Equestrianism Mixed Three-Day Event, Individual'",
        "pred_result": "no such column: T3.person_id",
        "repair_sql": "SELECT (CAST(COUNT(T3.`id`) AS REAL) / COUNT(T1.`person_id`)) * 100 AS percentage FROM games_competitor AS T1 INNER JOIN event AS T2 ON T1.`event_id` = T2.`id` INNER JOIN person AS T3 ON T1.`person_id` = T3.`id` WHERE T3.`gender` = 'F' AND T2.`event_name` = 'Equestrianism Mixed Three-Day Event, Individual'",
        "repair_result": "no such column: T1.event_id"
    },
    {
        "idx": 506,
        "db_id": "olympics",
        "question": "Calculate the average age of the persons who participated in the 1992 Summer Games.",
        "evidence": "DIVIDE(SUM(age), COUNT(person_id)) where games_name = '1992 Summer';",
        "gold": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1992 Summer'",
        "pred": "SELECT AVG(T2.`age`) FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`games_name` = '1992 Summer'",
        "pred_result": "no such column: T2.age",
        "repair_sql": "SELECT AVG(T1.`age`) FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`games_name` = '1992 Summer';",
        "repair_result": 1
    },
    {
        "idx": 507,
        "db_id": "olympics",
        "question": "List out years that only have summer games.",
        "evidence": "years refer to games_year; only have summer games refer to games_year where COUNT(games_name) = 1 and season = 'Summer';",
        "gold": "SELECT games_year FROM games WHERE season != 'Winter' GROUP BY games_year HAVING COUNT(season) = 1",
        "pred": "SELECT DISTINCT `games_year` FROM games WHERE `games_year` NOT IN ( SELECT DISTINCT T1.`games_year` FROM games AS T1 INNER JOIN games AS T2 ON T1.`games_year` = T2.`games_year` WHERE T1.`season` = 'Summer' AND T2.`season` = 'Winter' ) AND `season` = 'Summer'",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT `games_year` FROM games WHERE `games_year` NOT IN ( SELECT DISTINCT T1.`games_year` FROM games AS T1 INNER JOIN games AS T2 ON T1.`games_year` = T2.`games_year` WHERE T1.`season` = 'Summer' AND T2.`season` = 'Winter' ) AND `season` = 'Summer'",
        "repair_result": 0
    },
    {
        "idx": 508,
        "db_id": "olympics",
        "question": "How many Olympics games were held during the 90s?",
        "evidence": "games refer to id; during the 90s refers to games_year BETWEEN 1990 AND 1999;",
        "gold": "SELECT COUNT(games_year) FROM games WHERE games_year BETWEEN '1990' AND '1999'",
        "pred": "SELECT COUNT(*) FROM games WHERE games_year BETWEEN 1990 AND 1999",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM games WHERE games_year BETWEEN 1990 AND 1999",
        "repair_result": 1
    },
    {
        "idx": 509,
        "db_id": "olympics",
        "question": "How many athletes participated in the 2014 Winter Olympics?",
        "evidence": "athletes refer to person_id; 2014 Winter Olympics refer to games_name = '2014 Winter';",
        "gold": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '2014 Winter'",
        "pred": "SELECT COUNT(DISTINCT T1.`person_id`) FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`games_name` = '2014 Winter'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`person_id`) FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`games_name` = '2014 Winter'",
        "repair_result": 1
    },
    {
        "idx": 510,
        "db_id": "olympics",
        "question": "How many athletes from region 151 have won a medal?",
        "evidence": "athletes refer to person_id; region 151 refers to region_id = 151; won a medal refers to medal_id <> 4;",
        "gold": "SELECT COUNT(T3.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN person_region AS T3 ON T2.person_id = T3.person_id WHERE T3.region_id = 151 AND T1.medal_id != 4",
        "pred": "SELECT COUNT(DISTINCT CE.`competitor_id`) FROM competitor_event AS CE INNER JOIN person_region AS PR ON CE.`competitor_id` = PR.`person_id` WHERE PR.`region_id` = 151 AND CE.`medal_id` <> 4",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT CE.`competitor_id`) FROM competitor_event AS CE INNER JOIN person_region AS PR ON CE.`competitor_id` = PR.`person_id` WHERE PR.`region_id` = 151 AND CE.`medal_id` <> 4",
        "repair_result": 0
    },
    {
        "idx": 511,
        "db_id": "olympics",
        "question": "How many athlete from China participate in the 2016 Summer Olympics?",
        "evidence": "athletes from China refer to person_id where region_name = 'China'; the 2016 Summer Olympics refer to games_name = '2016 Summer';",
        "gold": "SELECT COUNT(T3.id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id INNER JOIN person_region AS T4 ON T3.id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T1.games_name = '2016 Summer' AND T5.region_name = 'China'",
        "pred": "SELECT COUNT(DISTINCT T1.`person_id`) FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T1.`person_id` IN ( SELECT `person_id` FROM person_region WHERE `region_id` = ( SELECT `id` FROM noc_region WHERE `region_name` = 'China' ) ) AND T2.`games_name` = '2016 Summer'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`person_id`) FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T1.`person_id` IN ( SELECT `person_id` FROM person_region WHERE `region_id` = ( SELECT `id` FROM noc_region WHERE `region_name` = 'China' ) ) AND T2.`games_name` = '2016 Summer'",
        "repair_result": 1
    },
    {
        "idx": 512,
        "db_id": "olympics",
        "question": "How many gold medals were given to the winners in the Ice Hockey Men's Ice Hockey event?",
        "evidence": "gold medals given to the winners refer to competitor_id where medal_name = 'Gold'; Ice Hockey Men's Ice Hockey refers to event_name = 'Ice Hockey Men''s Ice Hockey';",
        "gold": "SELECT COUNT(T2.competitor_id) FROM event AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.event_id WHERE T1.event_name LIKE 'Ice Hockey Men%s Ice Hockey' AND T2.medal_id = 1",
        "pred": "SELECT COUNT(*) FROM competitor_event AS CE INNER JOIN event AS E ON CE.`event_id` = E.`id` INNER JOIN medal AS M ON CE.`medal_id` = M.`id` WHERE E.`event_name` = 'Ice Hockey Men''s Ice Hockey' AND M.`medal_name` = 'Gold'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM competitor_event AS CE INNER JOIN event AS E ON CE.`event_id` = E.`id` INNER JOIN medal AS M ON CE.`medal_id` = M.`id` WHERE E.`event_name` = 'Ice Hockey Men''s Ice Hockey' AND M.`medal_name` = 'Gold'",
        "repair_result": 1
    },
    {
        "idx": 513,
        "db_id": "olympics",
        "question": "Which region has the highest medal number?",
        "evidence": "region refers to region_name; the highest medal number refers to MAX(COUNT(medal_id <> 4));",
        "gold": "SELECT T5.region_name FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person_region AS T4 ON T3.person_id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T1.id != 4 GROUP BY T5.region_name ORDER BY COUNT(T2.competitor_id) DESC LIMIT 1",
        "pred": "SELECT NR.`region_name` FROM ( SELECT PR.`region_id`, COUNT(CE.`medal_id`) AS medal_count FROM person_region AS PR INNER JOIN games_competitor AS GC ON PR.`person_id` = GC.`person_id` INNER JOIN competitor_event AS CE ON GC.`id` = CE.`competitor_id` GROUP BY PR.`region_id` ) AS T1 INNER JOIN noc_region AS NR ON T1.`region_id` = NR.`id` ORDER BY T1.`medal_count` DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT NR.`region_name` FROM ( SELECT PR.`region_id`, COUNT(CE.`medal_id`) AS medal_count FROM person_region AS PR INNER JOIN games_competitor AS GC ON PR.`person_id` = GC.`person_id` INNER JOIN competitor_event AS CE ON GC.`id` = CE.`competitor_id` GROUP BY PR.`region_id` ) AS T1 INNER JOIN noc_region AS NR ON T1.`region_id` = NR.`id` ORDER BY T1.`medal_count` DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 514,
        "db_id": "olympics",
        "question": "List out all the gold medalist winners in cycling sport.",
        "evidence": "gold medalist winners refer to full_name where medal_name = 'Gold'; cycling sport refers to sport_name = 'Cycling';",
        "gold": "SELECT DISTINCT T5.full_name FROM event AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.event_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN sport AS T4 ON T1.sport_id = T4.id INNER JOIN person AS T5 ON T3.person_id = T5.id WHERE T4.sport_name = 'Cycling' AND T2.medal_id = 1",
        "pred": "SELECT T2.`full_name` FROM competitor_event AS T1 INNER JOIN event AS T2 ON T1.`event_id` = T2.`id` INNER JOIN sport AS T3 ON T2.`sport_id` = T3.`id` INNER JOIN person AS T4 ON T1.`competitor_id` = T4.`id` INNER JOIN medal AS T5 ON T1.`medal_id` = T5.`id` WHERE T5.`medal_name` = 'Gold' AND T3.`sport_name` = 'Cycling'",
        "pred_result": "no such column: T2.full_name",
        "repair_sql": "SELECT T4.`full_name` FROM competitor_event AS T1 INNER JOIN event AS T2 ON T1.`event_id` = T2.`id` INNER JOIN sport AS T3 ON T2.`sport_id` = T3.`id` AND T3.`sport_name` = 'Cycling' INNER JOIN person AS T4 ON T1.`competitor_id` = T4.`id` INNER JOIN medal AS T5 ON T1.`medal_id` = T5.`id` AND T5.`medal_name` = 'Gold'",
        "repair_result": 0
    },
    {
        "idx": 515,
        "db_id": "olympics",
        "question": "List out all the medals won by Lee Chong Wei.",
        "evidence": "medals refer to medal_id where medal_id <> 4;",
        "gold": "SELECT DISTINCT T1.medal_name FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person AS T4 ON T3.person_id = T4.id WHERE T4.full_name = 'Lee Chong Wei' AND T2.medal_id <> 4",
        "pred": "SELECT DISTINCT medal.`medal_name` FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN competitor_event AS T3 ON T2.`id` = T3.`competitor_id` INNER JOIN medal ON T3.`medal_id` = medal.`id` WHERE T1.`full_name` = 'Lee Chong Wei' AND medal.`medal_name` <> 'NA'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT medal.`medal_name` FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN competitor_event AS T3 ON T2.`id` = T3.`competitor_id` INNER JOIN medal ON T3.`medal_id` = medal.`id` WHERE T1.`full_name` = 'Lee Chong Wei' AND medal.`medal_name` <> 'NA'",
        "repair_result": 1
    },
    {
        "idx": 516,
        "db_id": "olympics",
        "question": "What is the percentage of female athletes below 20s who participated in the 2002 Winter Olympic?",
        "evidence": "DIVIDE(COUNT(person_id where gender = 'F' and age < 20), COUNT(person_id)) as percentage where games_name = '2002 Winter';",
        "gold": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2002 Winter' AND T2.age < 20",
        "pred": "SELECT (CAST(( SELECT COUNT(T1.`person_id`) FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` INNER JOIN games AS T3 ON T1.`games_id` = T3.`id` WHERE T2.`gender` = 'F' AND T1.`age` < 20 AND T3.`games_name` = '2002 Winter' ) AS REAL) / ( SELECT COUNT(T1.`person_id`) FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`games_name` = '2002 Winter' )) * 100 AS percentage",
        "pred_result": 0,
        "repair_sql": "SELECT (CAST(( SELECT COUNT(T1.`person_id`) FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` INNER JOIN games AS T3 ON T1.`games_id` = T3.`id` WHERE T2.`gender` = 'F' AND T1.`age` < 20 AND T3.`games_name` = '2002 Winter' ) AS REAL) / ( SELECT COUNT(T1.`person_id`) FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`games_name` = '2002 Winter' )) * 100 AS percentage",
        "repair_result": 0
    },
    {
        "idx": 517,
        "db_id": "olympics",
        "question": "What is the ratio male to female athletes in the 2012 Summer Olympic?",
        "evidence": "DIVIDE(COUNT(gender = 'M'), COUNT(gender = 'F')) where games_name = '2012 Summer';",
        "gold": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'M' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T3.gender = 'F' THEN 1 ELSE NULL END) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2012 Summer'",
        "pred": "SELECT CAST(COUNT(DISTINCT CASE WHEN T3.`gender` = 'M' THEN T2.`person_id` END) AS REAL) / COUNT(DISTINCT CASE WHEN T3.`gender` = 'F' THEN T2.`person_id` END) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`games_id` INNER JOIN person AS T3 ON T2.`person_id` = T3.`id` WHERE T1.`games_name` = '2012 Summer'",
        "pred_result": 1,
        "repair_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T3.`gender` = 'M' THEN T2.`person_id` END) AS REAL) / COUNT(DISTINCT CASE WHEN T3.`gender` = 'F' THEN T2.`person_id` END) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`games_id` INNER JOIN person AS T3 ON T2.`person_id` = T3.`id` WHERE T1.`games_name` = '2012 Summer'",
        "repair_result": 1
    },
    {
        "idx": 518,
        "db_id": "olympics",
        "question": "Which summer Olympic have the highest and lowest number of participants?",
        "evidence": "the highest number of participants refers to MAX(COUNT(person_id)); the lowest number of participants refers to MIN(COUNT(person_id)); Which summer Olympic refers to games_name where season = 'Summer';",
        "gold": "SELECT ( SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Summer' GROUP BY T1.games_year ORDER BY COUNT(T2.person_id) DESC LIMIT 1 ) AS HIGHEST , ( SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Summer' GROUP BY T1.games_year ORDER BY COUNT(T2.person_id) LIMIT 1 ) AS LOWEST",
        "pred": "SELECT T2.`games_name` FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`games_id` WHERE T1.`season` = 'Summer' GROUP BY T1.`games_name` ORDER BY COUNT(T2.`person_id`) ASC LIMIT 1",
        "pred_result": "no such column: T2.games_name",
        "repair_sql": "SELECT T1.games_name, COUNT(T2.person_id) AS num_participants FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Summer' GROUP BY T1.games_name ORDER BY num_participants DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 519,
        "db_id": "olympics",
        "question": "How many athletes from Malaysia have won a medal?",
        "evidence": "Malaysia refers to region_name = 'Malaysia'; athletes won a medal refer to competitor_id where medal_id <> 4;",
        "gold": "SELECT COUNT(T3.person_id) FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person_region AS T4 ON T3.person_id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T5.region_name = 'Malaysia' AND T1.id != 4",
        "pred": "SELECT COUNT(DISTINCT T1.`person_id`) FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.`region_id` = T2.`id` INNER JOIN competitor_event AS T3 ON T1.`person_id` = T3.`competitor_id` WHERE T2.`region_name` = 'Malaysia' AND T3.`medal_id` <> 4",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`person_id`) FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.`region_id` = T2.`id` INNER JOIN competitor_event AS T3 ON T1.`person_id` = T3.`competitor_id` WHERE T2.`region_name` = 'Malaysia' AND T3.`medal_id` <> 4",
        "repair_result": 0
    },
    {
        "idx": 520,
        "db_id": "olympics",
        "question": "How many athletes playing in Canoeing fall into overweight BMI category in the 2008 Summer games?",
        "evidence": "fall into overweight BMI category refers to DIVIDE(weight), MULTIPLY(height, height) < 30; Canoeing refers to a sport name; the 2008 Summer games refer to games_name = '2008 Summer';",
        "gold": "SELECT COUNT(T5.id) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id INNER JOIN games AS T6 ON T4.games_id = T6.id WHERE T1.sport_name = 'Canoeing' AND T6.games_name = '2008 Summer' AND T5.weight * 10000.0 / (T5.height * T5.height) BETWEEN 25.0 AND 30",
        "pred": "SELECT COUNT(*) FROM person WHERE `id` IN ( SELECT `person_id` FROM games_competitor WHERE `games_id` = ( SELECT `id` FROM games WHERE `games_name` = '2008 Summer' ) AND `sport_id` = ( SELECT `id` FROM sport WHERE `sport_name` = 'Canoeing' ) ) AND `weight` / (CAST(`height` AS REAL) * CAST(`height` AS REAL)) > 30",
        "pred_result": "no such column: sport_id",
        "repair_sql": "SELECT COUNT(*) FROM person JOIN games_competitor ON person.id = games_competitor.person_id JOIN games ON games_competitor.games_id = games.id JOIN sport ON games_competitor.sport_id = sport.id WHERE games.games_name = '2008 Summer' AND sport.sport_name = 'Canoeing' AND weight / (CAST(height AS REAL) * CAST(height AS REAL)) < 30",
        "repair_result": "no such column: games_competitor.sport_id"
    },
    {
        "idx": 521,
        "db_id": "olympics",
        "question": "What is the average height of male athletes playing basketball sport?",
        "evidence": "AVG(height) where sport_name = 'Basketball' and event_name = 'Basketball Men''s';",
        "gold": "SELECT AVG(T5.height) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id WHERE T1.sport_name = 'Basketball' AND T5.gender = 'M'",
        "pred": "SELECT AVG(T1.`height`) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN event AS T3 ON T2.`games_id` = T3.`id` WHERE T1.`gender` = 'M' AND T3.`sport_id` = ( SELECT `id` FROM sport WHERE `sport_name` = 'Basketball' ) AND T3.`event_name` = 'Basketball Men''s'",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(T1.`height`) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN event AS T3 ON T2.`event_id` = T3.`id` INNER JOIN sport AS T4 ON T3.`sport_id` = T4.`id` WHERE T1.`gender` = 'M' AND T4.`sport_name` = 'Basketball' AND T3.`event_name` = 'Basketball Men''s' AND T1.`height` IS NOT NULL;",
        "repair_result": "no such column: T2.event_id"
    },
    {
        "idx": 522,
        "db_id": "olympics",
        "question": "How many female athletes are from the Philippines?",
        "evidence": "female athletes refer to id where gender = 'F'; from the Philippines region_name = 'Philippines';",
        "gold": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Philippines' AND T3.gender = 'F'",
        "pred": "SELECT COUNT(*) FROM person_region AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T2.`gender` = 'F' AND T1.`region_id` = ( SELECT `id` FROM noc_region WHERE `region_name` = 'Philippines' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM person_region AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T2.`gender` = 'F' AND T1.`region_id` = ( SELECT `id` FROM noc_region WHERE `region_name` = 'Philippines' )",
        "repair_result": 1
    },
    {
        "idx": 523,
        "db_id": "olympics",
        "question": "Which region is Yao Ming from?",
        "evidence": "region refers to region_name;",
        "gold": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Yao Ming'",
        "pred": "SELECT `region_name` FROM noc_region WHERE `id` = ( SELECT `region_id` FROM person_region WHERE `person_id` = ( SELECT `person_id` FROM person WHERE `full_name` = 'Yao Ming' ) )",
        "pred_result": 1,
        "repair_sql": "SELECT `region_name` FROM noc_region WHERE `id` = ( SELECT `region_id` FROM person_region WHERE `person_id` = ( SELECT `person_id` FROM person WHERE `full_name` = 'Yao Ming' ) )",
        "repair_result": 1
    },
    {
        "idx": 524,
        "db_id": "olympics",
        "question": "At what age did Michael Fred Phelps, II join the Olympics?",
        "evidence": "At what age join the Olympics refers to MIN(age);",
        "gold": "SELECT T2.age FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Michael Fred Phelps, II' ORDER BY T2.age LIMIT 1",
        "pred": "SELECT MIN(`age`) FROM games_competitor WHERE `person_id` = ( SELECT `id` FROM person WHERE `full_name` = 'Michael Fred Phelps, II' )",
        "pred_result": 1,
        "repair_sql": "SELECT MIN(`age`) FROM games_competitor WHERE `person_id` = ( SELECT `id` FROM person WHERE `full_name` = 'Michael Fred Phelps, II' )",
        "repair_result": 1
    },
    {
        "idx": 525,
        "db_id": "olympics",
        "question": "How many athletes are there in the region where Clara Hughes is from?",
        "evidence": "",
        "gold": "SELECT COUNT(person_id) FROM person_region WHERE region_id = ( SELECT T1.region_id FROM person_region AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.id WHERE T2.full_name = 'Clara Hughes' )",
        "pred": "SELECT COUNT(DISTINCT T3.`person_id`) FROM person_region AS T1 INNER JOIN person_region AS T2 ON T1.`region_id` = T2.`region_id` INNER JOIN games_competitor AS T3 ON T2.`person_id` = T3.`person_id` WHERE T1.`person_id` = ( SELECT T4.`person_id` FROM person AS T4 WHERE T4.`full_name` = 'Clara Hughes' )",
        "pred_result": "no such column: T4.person_id",
        "repair_sql": "SELECT COUNT(DISTINCT T3.`person_id`) FROM person_region AS T1 INNER JOIN person_region AS T2 ON T1.`region_id` = T2.`region_id` INNER JOIN games_competitor AS T3 ON T2.`person_id` = T3.`person_id` INNER JOIN person AS T4 ON T4.`id` = T3.`person_id` WHERE T1.`region_id` = ( SELECT T5.`region_id` FROM person_region AS T5 INNER JOIN person AS T6 ON T5.`person_id` = T6.`id` WHERE T6.`full_name` = 'Clara Hughes' )",
        "repair_result": 1
    },
    {
        "idx": 526,
        "db_id": "olympics",
        "question": "How many Men's 200 Metres Freestyle events did Ian James Thorpe compete in?",
        "evidence": "Men's 200 Metres Freestyle events refer to event_name = 'Swimming Men''s 200 metres Freestyle'; events compete in refers to event_id;",
        "gold": "SELECT COUNT(T1.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN event AS T4 ON T3.event_id = T4.id WHERE T1.full_name = 'Ian James Thorpe' AND T4.event_name LIKE 'Swimming Men%s 200 metres Freestyle'",
        "pred": "SELECT COUNT(*) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.`competitor_id` = T2.`id` WHERE T2.`person_id` = ( SELECT `id` FROM person WHERE `full_name` = 'Ian James Thorpe' ) AND T1.`event_id` = ( SELECT T3.`id` FROM event AS T3 INNER JOIN sport AS T4 ON T3.`sport_id` = T4.`id` WHERE T3.`event_name` = 'Swimming Men''s 200 metres Freestyle' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.`competitor_id` = T2.`id` WHERE T2.`person_id` = ( SELECT `id` FROM person WHERE `full_name` = 'Ian James Thorpe' ) AND T1.`event_id` = ( SELECT T3.`id` FROM event AS T3 INNER JOIN sport AS T4 ON T3.`sport_id` = T4.`id` WHERE T3.`event_name` = 'Swimming Men''s 200 metres Freestyle' )",
        "repair_result": 1
    },
    {
        "idx": 527,
        "db_id": "olympics",
        "question": "How many times was Larysa Semenivna Latynina (Diriy-) declared as champion in Gymnastics Women's Individual All-Around?",
        "evidence": "Gymnastics Women's Individual All-Around refers to event_name = 'Gymnastics Women''s Individual All-Around'; declared as champion refers to medal_name = 'Gold' or medal_id = 1;",
        "gold": "SELECT COUNT(T1.id) FROM event AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.event_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person AS T4 ON T3.person_id = T4.id WHERE T4.full_name = 'Larysa Semenivna Latynina (Diriy-)' AND T1.event_name LIKE 'Gymnastics Women%s Individual All-Around' AND T2.medal_id = 1",
        "pred": "SELECT COUNT(*) FROM competitor_event AS ce INNER JOIN games_competitor AS gc ON ce.`competitor_id` = gc.`id` WHERE gc.`person_id` = ( SELECT `id` FROM person WHERE `full_name` = 'Larysa Semenivna Latynina (Diriy-)' ) AND ce.`event_id` = ( SELECT `id` FROM event WHERE `event_name` = 'Gymnastics Women''s Individual All-Around' ) AND ce.`medal_id` = ( SELECT `id` FROM medal WHERE `medal_name` = 'Gold' OR `id` = 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM competitor_event AS ce INNER JOIN games_competitor AS gc ON ce.`competitor_id` = gc.`id` WHERE gc.`person_id` = ( SELECT `id` FROM person WHERE `full_name` = 'Larysa Semenivna Latynina (Diriy-)' ) AND ce.`event_id` = ( SELECT `id` FROM event WHERE `event_name` = 'Gymnastics Women''s Individual All-Around' ) AND ce.`medal_id` = ( SELECT `id` FROM medal WHERE `medal_name` = 'Gold' OR `id` = 1 )",
        "repair_result": 1
    },
    {
        "idx": 528,
        "db_id": "olympics",
        "question": "What are the names of the cities where Carl Lewis Borack competed?",
        "evidence": "name of the cities refers to city_name",
        "gold": "SELECT T4.city_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T1.full_name = 'Carl Lewis Borack'",
        "pred": "SELECT DISTINCT T3.`city_name` FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN games_city AS T3 ON T2.`games_id` = T3.`games_id` INNER JOIN city AS T4 ON T3.`city_id` = T4.`id` WHERE T1.`full_name` = 'Carl Lewis Borack'",
        "pred_result": "no such column: T3.city_name",
        "repair_sql": "SELECT DISTINCT T4.`city_name` FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN games_city AS T3 ON T2.`games_id` = T3.`games_id` INNER JOIN city AS T4 ON T3.`city_id` = T4.`id` WHERE T1.`full_name` = 'Carl Lewis Borack'",
        "repair_result": 1
    },
    {
        "idx": 529,
        "db_id": "olympics",
        "question": "How many Olympic games were held in London?",
        "evidence": "London refers to city_name = 'London';",
        "gold": "SELECT COUNT(T1.games_id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'London'",
        "pred": "SELECT COUNT(DISTINCT T1.`games_id`) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T2.`city_name` = 'London'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`games_id`) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T2.`city_name` = 'London'",
        "repair_result": 1
    },
    {
        "idx": 530,
        "db_id": "olympics",
        "question": "Which city was the 1992 Summer Olympic held?",
        "evidence": "city refers to city_name; 1992 Summer Olympic refers to games_name = '1992 Summer';",
        "gold": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1992 Summer'",
        "pred": "SELECT T2.`city_name` FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1992 Summer' )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`city_name` FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1992 Summer' )",
        "repair_result": 1
    },
    {
        "idx": 531,
        "db_id": "olympics",
        "question": "How many athletes over the age of 59 competed in the 2016 Summer Olympics?",
        "evidence": "over the age of 59 refers to age > 59; the 2016 Summer Olympics refer to games_name = '2016 Summer';",
        "gold": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '2016 Summer' AND T2.age > 59",
        "pred": "SELECT COUNT(*) FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`games_name` = '2016 Summer' AND T1.`age` > 59",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`games_name` = '2016 Summer' AND T1.`age` > 59",
        "repair_result": 1
    },
    {
        "idx": 532,
        "db_id": "olympics",
        "question": "Among the Olympic games held in Los Angeles, what is the name of the Olympic game that has the most number of competitors?",
        "evidence": "Los Angeles refers to city_name = 'Lost Angeles'; the Olympic game refers to games_name; the most number of competitors refers to MAX(COUNT(games_name));",
        "gold": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T4.city_name = 'Los Angeles' GROUP BY T1.id ORDER BY COUNT(T2.person_id) DESC LIMIT 1",
        "pred": "SELECT T3.`games_name` FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` INNER JOIN games_city AS T3 ON T1.`games_id` = T3.`games_id` INNER JOIN city AS T4 ON T3.`city_id` = T4.`id` WHERE T4.`city_name` = 'Los Angeles' GROUP BY T3.`games_name` ORDER BY COUNT(T1.`person_id`) DESC LIMIT 1",
        "pred_result": "no such column: T3.games_name",
        "repair_sql": "SELECT T2.games_name FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.games_id = T2.id INNER JOIN games_city AS T3 ON T1.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T4.city_name = 'Los Angeles' GROUP BY T2.games_name ORDER BY COUNT(T1.person_id) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 533,
        "db_id": "olympics",
        "question": "How many 10-year old athletes participated in the Gymnastics Men's Parallel Bars, Teams event?",
        "evidence": "10-year old athletes refer to competitor_id where age = 10; Gymnastics Men's Parallel Bars, Teams refer to event_name = 'Gymnastics Men''s Parallel Bars, Teams';",
        "gold": "SELECT COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN event AS T3 ON T1.event_id = T3.id WHERE T3.event_name LIKE 'Gymnastics Men%s Parallel Bars, Teams' AND T2.age = 10",
        "pred": "SELECT COUNT(*) FROM competitor_event WHERE `event_id` = ( SELECT `id` FROM event WHERE `event_name` = 'Gymnastics Men''s Parallel Bars, Teams' ) AND `competitor_id` IN ( SELECT `competitor_id` FROM games_competitor WHERE `age` = 10 )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM competitor_event WHERE `event_id` = ( SELECT `id` FROM event WHERE `event_name` = 'Gymnastics Men''s Parallel Bars, Teams' ) AND `competitor_id` IN ( SELECT `competitor_id` FROM games_competitor WHERE `age` = 10 )",
        "repair_result": 0
    },
    {
        "idx": 534,
        "db_id": "olympics",
        "question": "What is the average age of the athletes from the United States of America who competed in the 2016 Summer Olympics?",
        "evidence": "AVG(age) where games_name = '2016 Summer' and region_name = 'USA';",
        "gold": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person_region AS T3 ON T2.person_id = T3.person_id INNER JOIN noc_region AS T4 ON T3.region_id = T4.id WHERE T1.games_name = '2016 Summer' AND T4.region_name = 'USA'",
        "pred": "SELECT AVG(T1.`age`) FROM games_competitor AS T1 INNER JOIN person_region AS T2 ON T1.`person_id` = T2.`person_id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '2016 Summer' ) AND T2.`region_id` = ( SELECT `id` FROM noc_region WHERE `region_name` = 'USA' )",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(T1.`age`) FROM games_competitor AS T1 INNER JOIN person_region AS T2 ON T1.`person_id` = T2.`person_id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '2016 Summer' ) AND T2.`region_id` = ( SELECT `id` FROM noc_region WHERE `region_name` = 'USA' )",
        "repair_result": 1
    },
    {
        "idx": 535,
        "db_id": "olympics",
        "question": "Which region does the NOC code \"COL\" stand for?",
        "evidence": "region refers to region_name; NOC code \"COL\" refers to noc = 'COL';",
        "gold": "SELECT region_name FROM noc_region WHERE noc = 'COL'",
        "pred": "SELECT `region_name` FROM noc_region WHERE `noc` = 'COL'",
        "pred_result": 1,
        "repair_sql": "SELECT `region_name` FROM noc_region WHERE `noc` = 'COL'",
        "repair_result": 1
    },
    {
        "idx": 536,
        "db_id": "olympics",
        "question": "State the name of sport id 19.",
        "evidence": "name of sport refers to sport_name",
        "gold": "SELECT sport_name FROM sport WHERE id = 19",
        "pred": "SELECT `sport_name` FROM sport WHERE `id` = 19",
        "pred_result": 1,
        "repair_sql": "SELECT `sport_name` FROM sport WHERE `id` = 19",
        "repair_result": 1
    },
    {
        "idx": 537,
        "db_id": "olympics",
        "question": "Give the id of the event \"Shooting Mixed Skeet\".",
        "evidence": "\"Shooting Mixed Skeet\" refers to event_name = 'Shooting Mixed Skeet';",
        "gold": "SELECT id FROM event WHERE event_name = 'Shooting Mixed Skeet'",
        "pred": "SELECT T1.`id` FROM event AS T1 WHERE T1.`event_name` = 'Shooting Mixed Skeet'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`id` FROM event AS T1 WHERE T1.`event_name` = 'Shooting Mixed Skeet'",
        "repair_result": 1
    },
    {
        "idx": 538,
        "db_id": "olympics",
        "question": "Provide hockey's sport id.",
        "evidence": "hockey's sport refers to sport_name = 'hockey';",
        "gold": "SELECT id FROM sport WHERE sport_name = 'Hockey'",
        "pred": "SELECT `id` FROM sport WHERE `sport_name` = 'Hockey'",
        "pred_result": 1,
        "repair_sql": "SELECT `id` FROM sport WHERE `sport_name` = 'Hockey'",
        "repair_result": 1
    },
    {
        "idx": 539,
        "db_id": "olympics",
        "question": "Tell the weight of Dagfinn Sverre Aarskog.",
        "evidence": "",
        "gold": "SELECT weight FROM person WHERE full_name = 'Dagfinn Sverre Aarskog'",
        "pred": "SELECT `weight` FROM person WHERE `full_name` = 'Dagfinn Sverre Aarskog'",
        "pred_result": 1,
        "repair_sql": "SELECT `weight` FROM person WHERE `full_name` = 'Dagfinn Sverre Aarskog'",
        "repair_result": 1
    },
    {
        "idx": 540,
        "db_id": "olympics",
        "question": "What is the id of Rio de Janeiro?",
        "evidence": "Rio de Janeiro refers to city_name = 'Rio de Janeiro';",
        "gold": "SELECT id FROM city WHERE city_name = 'Rio de Janeiro'",
        "pred": "SELECT `id` FROM city WHERE `city_name` = 'Rio de Janeiro'",
        "pred_result": 1,
        "repair_sql": "SELECT `id` FROM city WHERE `city_name` = 'Rio de Janeiro'",
        "repair_result": 1
    },
    {
        "idx": 541,
        "db_id": "olympics",
        "question": "How many people have won the gold medal of the event \"Rowing Women's Coxed Eights\"?",
        "evidence": "won the gold medal refers to medal_name = 'Gold'; event \"Rowing Women's Coxed Eights\" refers to event_name = 'Rowing Women''s Coxed Eights';",
        "gold": "SELECT COUNT(T1.competitor_id) FROM competitor_event AS T1 INNER JOIN event AS T2 ON T1.event_id = T2.id INNER JOIN medal AS T3 ON T1.medal_id = T3.id WHERE T2.event_name LIKE 'Rowing Women%s Coxed Eights' AND T3.medal_name = 'Gold'",
        "pred": "SELECT COUNT(DISTINCT T1.`person_id`) FROM competitor_event AS T1 INNER JOIN event AS T2 ON T1.`event_id` = T2.`id` INNER JOIN medal AS T3 ON T1.`medal_id` = T3.`id` WHERE T2.`event_name` = 'Rowing Women''s Coxed Eights' AND T3.`medal_name` = 'Gold'",
        "pred_result": "no such column: T1.person_id",
        "repair_sql": "SELECT COUNT(DISTINCT T4.`person_id`) FROM competitor_event AS T1 INNER JOIN event AS T2 ON T1.`event_id` = T2.`id` INNER JOIN medal AS T3 ON T1.`medal_id` = T3.`id` INNER JOIN games_competitor AS T4 ON T1.`competitor_id` = T4.`id` WHERE T2.`event_name` = 'Rowing Women''s Coxed Eights' AND T3.`medal_name` = 'Gold'",
        "repair_result": 0
    },
    {
        "idx": 542,
        "db_id": "olympics",
        "question": "How many kinds of events belong to the sport of cycling?",
        "evidence": "kinds of events refer to event_name; sport of cycling refers to sport_name = 'Cycling';",
        "gold": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Cycling'",
        "pred": "SELECT COUNT(DISTINCT T2.`event_name`) FROM sport AS T1 INNER JOIN event AS T2 ON T1.`id` = T2.`sport_id` WHERE T1.`sport_name` = 'Cycling'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T2.`event_name`) FROM sport AS T1 INNER JOIN event AS T2 ON T1.`id` = T2.`sport_id` WHERE T1.`sport_name` = 'Cycling'",
        "repair_result": 1
    },
    {
        "idx": 543,
        "db_id": "olympics",
        "question": "What is Vijay Singh Chauhan's region name?",
        "evidence": "",
        "gold": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Vijay Singh Chauhan'",
        "pred": "SELECT T3.`region_name` FROM person_region AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` INNER JOIN noc_region AS T3 ON T1.`region_id` = T3.`id` WHERE T2.`full_name` = 'Vijay Singh Chauhan'",
        "pred_result": 1,
        "repair_sql": "SELECT T3.`region_name` FROM person_region AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` INNER JOIN noc_region AS T3 ON T1.`region_id` = T3.`id` WHERE T2.`full_name` = 'Vijay Singh Chauhan'",
        "repair_result": 1
    },
    {
        "idx": 544,
        "db_id": "olympics",
        "question": "When did Roma host the Olympic Games?",
        "evidence": "Roma refers to city_name = 'Roma'; When host refers to games_year;",
        "gold": "SELECT T3.games_year FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Roma'",
        "pred": "SELECT T3.`games_year` FROM games AS T3 INNER JOIN games_city AS T1 ON T3.`id` = T1.`games_id` INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T2.`city_name` = 'Roma'",
        "pred_result": 1,
        "repair_sql": "SELECT T3.`games_year` FROM games AS T3 INNER JOIN games_city AS T1 ON T3.`id` = T1.`games_id` INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T2.`city_name` = 'Roma'",
        "repair_result": 1
    },
    {
        "idx": 545,
        "db_id": "olympics",
        "question": "How many 20 years old athletes were there in the 1984 Summer Olympic Games?",
        "evidence": "20 years old athletes refer to person_id where age = 20; 1984 Summer Olympic Games refer to games_name = '1984 Summer';",
        "gold": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1984 Summer' AND T2.age = 20",
        "pred": "SELECT COUNT(T1.`person_id`) FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1984 Summer' ) AND T2.`age` = 20",
        "pred_result": "no such column: T2.age",
        "repair_sql": "SELECT COUNT(T1.`person_id`) FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1984 Summer' ) AND T1.`age` = 20",
        "repair_result": 1
    },
    {
        "idx": 546,
        "db_id": "olympics",
        "question": "How many games has Prithipal Singh participated in?",
        "evidence": "games refer to games_id;",
        "gold": "SELECT COUNT(T2.games_id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Prithipal Singh'",
        "pred": "SELECT COUNT(DISTINCT T1.`games_id`) FROM games_competitor AS T1 WHERE T1.`person_id` = ( SELECT `id` FROM person WHERE `full_name` = 'Prithipal Singh' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`games_id`) FROM games_competitor AS T1 WHERE T1.`person_id` = ( SELECT `id` FROM person WHERE `full_name` = 'Prithipal Singh' )",
        "repair_result": 1
    },
    {
        "idx": 547,
        "db_id": "olympics",
        "question": "State the number of athletes in the 1984 Summer Olympic Games who were more than 50 years old.",
        "evidence": "the 1984 Summer Olympic Games refer to games_name = '1984 Summer'; athletes more than 50 years old refer to person_id where age > 50;",
        "gold": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1984 Summer' AND T2.age > 50",
        "pred": "SELECT COUNT(T1.`person_id`) FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1984 Summer' ) AND T2.`age` > 50",
        "pred_result": "no such column: T2.age",
        "repair_sql": "SELECT COUNT(T1.`person_id`) FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1984 Summer' ) AND T2.`id` IN ( SELECT `person_id` FROM person WHERE `age` > 50 )",
        "repair_result": 1
    },
    {
        "idx": 548,
        "db_id": "olympics",
        "question": "How many kinds of events does athletics have?",
        "evidence": "kinds of events refer to event_name; athletics refer to sport_name = 'Athletics';",
        "gold": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Athletics'",
        "pred": "SELECT COUNT(DISTINCT `event_name`) FROM event WHERE `sport_id` = ( SELECT `id` FROM sport WHERE `sport_name` = 'Athletics' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT `event_name`) FROM event WHERE `sport_id` = ( SELECT `id` FROM sport WHERE `sport_name` = 'Athletics' )",
        "repair_result": 1
    },
    {
        "idx": 549,
        "db_id": "olympics",
        "question": "Who is the heaviest athlete from Russia?",
        "evidence": "the heaviest athlete refers to full_name where MAX(weight); from Russia refers to region_name = 'Russia';",
        "gold": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Russia' ORDER BY T3.weight DESC LIMIT 1",
        "pred": "SELECT T1.`full_name` FROM person AS T1 INNER JOIN person_region AS T2 ON T1.`id` = T2.`person_id` INNER JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T3.`region_name` = 'Russia' AND T1.`id` = ( SELECT T4.`person_id` FROM person AS T4 INNER JOIN person_region AS T5 ON T4.`id` = T5.`person_id` INNER JOIN noc_region AS T6 ON T5.`region_id` = T6.`id` WHERE T6.`region_name` = 'Russia' ORDER BY T4.`weight` DESC LIMIT 1 )",
        "pred_result": "no such column: T4.person_id",
        "repair_sql": "SELECT T1.`full_name` FROM person AS T1 INNER JOIN person_region AS T2 ON T1.`id` = T2.`person_id` INNER JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T3.`region_name` = 'Russia' AND T1.`weight` = ( SELECT MAX(T4.`weight`) FROM person AS T4 INNER JOIN person_region AS T5 ON T4.`id` = T5.`person_id` INNER JOIN noc_region AS T6 ON T5.`region_id` = T6.`id` WHERE T6.`region_name` = 'Russia' )",
        "repair_result": 1
    },
    {
        "idx": 550,
        "db_id": "olympics",
        "question": "Give the height of the tallest athlete from Portugal.",
        "evidence": "the tallest athlete refers to id where MAX(height); from Portugal refers to region_name = 'Portugal';",
        "gold": "SELECT T3.height FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Portugal' ORDER BY T3.height DESC LIMIT 1",
        "pred": "SELECT T1.`height` FROM person AS T1 WHERE T1.`id` = ( SELECT T2.`person_id` FROM person_region AS T2 WHERE T2.`region_id` = ( SELECT `id` FROM noc_region WHERE `region_name` = 'Portugal' ) ORDER BY T2.`height` DESC LIMIT 1 )",
        "pred_result": "no such column: T2.height",
        "repair_sql": "SELECT MAX(T1.`height`) FROM person AS T1 JOIN person_region AS T2 ON T1.`id` = T2.`person_id` JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T3.`region_name` = 'Portugal'",
        "repair_result": 1
    },
    {
        "idx": 551,
        "db_id": "olympics",
        "question": "Tell the host city of the 1968 Winter Olympic Games.",
        "evidence": "host city refers to city_name; the 1968 Winter Olympic Games refer to games_name = '1968 Winter';",
        "gold": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1968 Winter'",
        "pred": "SELECT `city_name` FROM city WHERE `id` = ( SELECT `city_id` FROM games_city WHERE `games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1968 Winter' ) )",
        "pred_result": 1,
        "repair_sql": "SELECT `city_name` FROM city WHERE `id` = ( SELECT `city_id` FROM games_city WHERE `games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1968 Winter' ) )",
        "repair_result": 1
    },
    {
        "idx": 552,
        "db_id": "olympics",
        "question": "Which region has the most athletes?",
        "evidence": "region refers to region_name; the most athletes refer to MAX(COUNT(region_name));",
        "gold": "SELECT T2.region_name FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id GROUP BY T2.region_name ORDER BY COUNT(T1.person_id) DESC LIMIT 1",
        "pred": "SELECT NR.`region_name` FROM ( SELECT PR.`region_id`, COUNT(*) AS athlete_count FROM person_region AS PR GROUP BY PR.`region_id` ) AS T1 INNER JOIN noc_region AS NR ON T1.`region_id` = NR.`id` ORDER BY T1.`athlete_count` DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT NR.`region_name` FROM ( SELECT PR.`region_id`, COUNT(*) AS athlete_count FROM person_region AS PR GROUP BY PR.`region_id` ) AS T1 INNER JOIN noc_region AS NR ON T1.`region_id` = NR.`id` ORDER BY T1.`athlete_count` DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 553,
        "db_id": "olympics",
        "question": "What is the percentage of athletes from Vanuatu who are taller than 175?",
        "evidence": "DIVIDE(COUNT(id where height > 175), COUNT(id)) as percentage where region_name = 'Vanuatu';",
        "gold": "SELECT CAST(COUNT(CASE WHEN T3.height > 175 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Vanuatu'",
        "pred": "SELECT (CAST(( SELECT COUNT(T1.`id`) FROM person AS T1 INNER JOIN person_region AS T2 ON T1.`id` = T2.`person_id` INNER JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T1.`height` > 175 AND T3.`region_name` = 'Vanuatu' ) AS REAL) / ( SELECT COUNT(T1.`id`) FROM person AS T1 INNER JOIN person_region AS T2 ON T1.`id` = T2.`person_id` INNER JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T3.`region_name` = 'Vanuatu' )) * 100 AS percentage",
        "pred_result": 1,
        "repair_sql": "SELECT (CAST(( SELECT COUNT(T1.`id`) FROM person AS T1 INNER JOIN person_region AS T2 ON T1.`id` = T2.`person_id` INNER JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T1.`height` > 175 AND T3.`region_name` = 'Vanuatu' ) AS REAL) / ( SELECT COUNT(T1.`id`) FROM person AS T1 INNER JOIN person_region AS T2 ON T1.`id` = T2.`person_id` INNER JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T3.`region_name` = 'Vanuatu' )) * 100 AS percentage",
        "repair_result": 1
    },
    {
        "idx": 554,
        "db_id": "olympics",
        "question": "Calculate the average weight of male athletes from Tonga.",
        "evidence": "AVG(weight) where region_name = 'Tonga' and gender = 'M';",
        "gold": "SELECT AVG(T3.weight) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Tonga' AND T3.gender = 'M'",
        "pred": "SELECT AVG(T1.`weight`) FROM person AS T1 INNER JOIN person_region AS T2 ON T1.`id` = T2.`person_id` WHERE T1.`gender` = 'M' AND T2.`region_id` = ( SELECT `id` FROM noc_region WHERE `region_name` = 'Tonga' )",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(T1.`weight`) FROM person AS T1 INNER JOIN person_region AS T2 ON T1.`id` = T2.`person_id` WHERE T1.`gender` = 'M' AND T2.`region_id` = ( SELECT `id` FROM noc_region WHERE `region_name` = 'Tonga' )",
        "repair_result": 1
    },
    {
        "idx": 555,
        "db_id": "olympics",
        "question": "Where was the 1920 Summer held?",
        "evidence": "where it was held refers to city_name; the 1920 Summer refers to games_name = '1920 Summer';",
        "gold": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1920 Summer'",
        "pred": "SELECT `city_name` FROM city WHERE `id` = ( SELECT `city_id` FROM games_city WHERE `games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1920 Summer' ) )",
        "pred_result": 1,
        "repair_sql": "SELECT `city_name` FROM city WHERE `id` = ( SELECT `city_id` FROM games_city WHERE `games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1920 Summer' ) )",
        "repair_result": 1
    },
    {
        "idx": 556,
        "db_id": "olympics",
        "question": "From 1900 to 1992, how many games did London host?",
        "evidence": "From 1900 to 1992 refers to games_year BETWEEN 1900 AND 1992; London refers to city_name = 'London'; games refer to games_name;",
        "gold": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London' AND T3.games_year BETWEEN 1900 AND 1992",
        "pred": "SELECT COUNT(DISTINCT T2.`games_id`) FROM games_city AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`games_year` BETWEEN 1900 AND 1992 AND T1.`city_id` = ( SELECT `id` FROM city WHERE `city_name` = 'London' )",
        "pred_result": "no such column: T2.games_id",
        "repair_sql": "SELECT COUNT(DISTINCT T2.`games_id`) FROM games_city AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` INNER JOIN city AS T3 ON T1.`city_id` = T3.`id` WHERE T2.`games_year` BETWEEN 1900 AND 1992 AND T3.`city_name` = 'London'",
        "repair_result": "no such column: T2.games_id"
    },
    {
        "idx": 557,
        "db_id": "olympics",
        "question": "How many Summer games are there that were held in Paris?",
        "evidence": "Summer games refer to games_id where season = 'Summer'; Paris refers to city_name = 'Paris';",
        "gold": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Paris' AND T3.season = 'Summer'",
        "pred": "SELECT COUNT(DISTINCT T1.`games_id`) FROM games_city AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`games_year` LIKE '%Summer%' AND T1.`city_id` = ( SELECT `id` FROM city WHERE `city_name` = 'Paris' )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`games_id`) FROM games_city AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`games_year` LIKE '%Summer%' AND T1.`city_id` = ( SELECT `id` FROM city WHERE `city_name` = 'Paris' )",
        "repair_result": 0
    },
    {
        "idx": 558,
        "db_id": "olympics",
        "question": "Please list all game names that were held in Los Angeles.",
        "evidence": "Los Angeles refers to city_name = 'Los Angeles';",
        "gold": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Los Angeles'",
        "pred": "SELECT DISTINCT T2.`games_name` FROM games_city AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T1.`city_id` = ( SELECT `id` FROM city WHERE `city_name` = 'Los Angeles' )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.`games_name` FROM games_city AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T1.`city_id` = ( SELECT `id` FROM city WHERE `city_name` = 'Los Angeles' )",
        "repair_result": 1
    },
    {
        "idx": 559,
        "db_id": "olympics",
        "question": "Which city hosted the most games?",
        "evidence": "Which city refers to city_name; the most games refer to MAX(COUNT(city_name));",
        "gold": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id GROUP BY T2.city_name ORDER BY COUNT(T2.city_name) DESC LIMIT 1",
        "pred": "SELECT city_name FROM ( SELECT city_name, COUNT(games_id) AS num_games FROM city JOIN games_city ON city.id = games_city.city_id GROUP BY city_name ORDER BY num_games DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT city_name FROM ( SELECT city_name, COUNT(games_id) AS num_games FROM city JOIN games_city ON city.id = games_city.city_id GROUP BY city_name ORDER BY num_games DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 560,
        "db_id": "olympics",
        "question": "What is the game name that was held in Beijing in 2008?",
        "evidence": "Beijing refers to city_name = 'Beijing'; in 2008 refers to games_year = '2008';",
        "gold": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Beijing' AND T3.games_year = 2008",
        "pred": "SELECT `games_name` FROM games WHERE `id` = ( SELECT T1.`games_id` FROM games_city AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T1.`city_id` = ( SELECT `id` FROM city WHERE `city_name` = 'Beijing' ) AND T2.`games_year` = '2008' )",
        "pred_result": 1,
        "repair_sql": "SELECT `games_name` FROM games WHERE `id` = ( SELECT T1.`games_id` FROM games_city AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T1.`city_id` = ( SELECT `id` FROM city WHERE `city_name` = 'Beijing' ) AND T2.`games_year` = '2008' )",
        "repair_result": 1
    },
    {
        "idx": 561,
        "db_id": "olympics",
        "question": "What is the percentage of champions at the age of over 30?",
        "evidence": "DIVIDE(COUNT(competitor_id where age > 30), COUNT(competitor_id))as percentage where medal_id = 1;",
        "gold": "SELECT CAST(COUNT(CASE WHEN T2.age > 30 THEN 1 END) AS REAL) * 100 / COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id WHERE T1.medal_id = 1",
        "pred": "SELECT (CAST((SELECT COUNT(T3.`competitor_id`) FROM competitor_event AS T3 INNER JOIN games_competitor AS T4 ON T3.`competitor_id` = T4.`id` WHERE T4.`age` > 30 AND T3.`medal_id` = 1) AS REAL) / CAST((SELECT COUNT(T5.`competitor_id`) FROM competitor_event AS T5 WHERE T5.`medal_id` = 1) AS REAL)) * 100",
        "pred_result": 1,
        "repair_sql": "SELECT (CAST((SELECT COUNT(T3.`competitor_id`) FROM competitor_event AS T3 INNER JOIN games_competitor AS T4 ON T3.`competitor_id` = T4.`id` WHERE T4.`age` > 30 AND T3.`medal_id` = 1) AS REAL) / CAST((SELECT COUNT(T5.`competitor_id`) FROM competitor_event AS T5 WHERE T5.`medal_id` = 1) AS REAL)) * 100",
        "repair_result": 1
    },
    {
        "idx": 562,
        "db_id": "olympics",
        "question": "At which age did A Lamusi participate in 2012 Summer?",
        "evidence": "2012 Summer refers to games_name = '2012 Summer';",
        "gold": "SELECT T2.age FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2012 Summer' AND T3.full_name = 'A Lamusi'",
        "pred": "SELECT T1.`age` FROM games_competitor AS T1 WHERE T1.`person_id` = (SELECT T3.`id` FROM person AS T3 WHERE T3.`full_name` = 'A Lamusi') AND T1.`games_id` = (SELECT T2.`id` FROM games AS T2 WHERE T2.`games_name` = '2012 Summer')",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`age` FROM games_competitor AS T1 WHERE T1.`person_id` = (SELECT T3.`id` FROM person AS T3 WHERE T3.`full_name` = 'A Lamusi') AND T1.`games_id` = (SELECT T2.`id` FROM games AS T2 WHERE T2.`games_name` = '2012 Summer')",
        "repair_result": 1
    },
    {
        "idx": 563,
        "db_id": "olympics",
        "question": "How many competitors were there who participated in 2000 Summer with age 31?",
        "evidence": "in 2000 Summer refers to games_name = '2000 Summer'; age = 31",
        "gold": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '2000 Summer' AND T2.age = 31",
        "pred": "SELECT COUNT(*) FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`games_name` = '2000 Summer' AND T1.`age` = 31",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`games_name` = '2000 Summer' AND T1.`age` = 31",
        "repair_result": 1
    },
    {
        "idx": 564,
        "db_id": "olympics",
        "question": "How many male competitors were there who participated in 1948 Summer?",
        "evidence": "male competitors refers to id where gender = 'M'; in 1948 Summer refers to games_name = '1948 Summer';",
        "gold": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1948 Summer' AND T3.gender = 'M'",
        "pred": "SELECT COUNT(*) FROM games_competitor AS T1 WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1948 Summer' ) AND T1.`person_id` IN ( SELECT T2.`person_id` FROM person AS T2 WHERE T2.`gender` = 'M' )",
        "pred_result": "no such column: T2.person_id",
        "repair_sql": "SELECT COUNT(*) FROM games_competitor AS T1 JOIN person AS T2 ON T1.person_id = T2.id JOIN games ON T1.games_id = games.id WHERE games.games_name = '1948 Summer' AND T2.gender = 'M'",
        "repair_result": 1
    },
    {
        "idx": 565,
        "db_id": "olympics",
        "question": "Please list all competitors' names who participated in 1936 Summer.",
        "evidence": "competitors' names refer to full_name; in 1936 Summer refers to games_name = '1936 Summer';",
        "gold": "SELECT T3.full_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1936 Summer'",
        "pred": "SELECT DISTINCT T2.`full_name` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1936 Summer' )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.`full_name` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1936 Summer' )",
        "repair_result": 1
    },
    {
        "idx": 566,
        "db_id": "olympics",
        "question": "Who is the youngest competitor that participated in 2014 Winter?",
        "evidence": "the youngest competitor refers to full_name where MIN(age); in 2014 Winter refers to games_name = '2014 Winter';",
        "gold": "SELECT T3.full_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2014 Winter' ORDER BY T2.age LIMIT 1",
        "pred": "SELECT T4.`full_name` FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`games_id` INNER JOIN person AS T4 ON T2.`person_id` = T4.`id` WHERE T1.`games_name` = '2014 Winter' AND T2.`age` = ( SELECT MIN(T3.`age`) FROM games AS T5 INNER JOIN games_competitor AS T3 ON T5.`id` = T3.`games_id` WHERE T5.`games_name` = '2014 Winter' )",
        "pred_result": 0,
        "repair_sql": "SELECT T4.`full_name` FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`games_id` INNER JOIN person AS T4 ON T2.`person_id` = T4.`id` WHERE T1.`games_name` = '2014 Winter' AND T2.`age` = ( SELECT MIN(T3.`age`) FROM games AS T5 INNER JOIN games_competitor AS T3 ON T5.`id` = T3.`games_id` WHERE T5.`games_name` = '2014 Winter' )",
        "repair_result": 0
    },
    {
        "idx": 567,
        "db_id": "olympics",
        "question": "What is the average age of competitors who participated in 1988 Winter?",
        "evidence": "AVG(age) where games_name = '1988 Winter';",
        "gold": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1988 Winter'",
        "pred": "SELECT AVG(T2.`age`) FROM games_competitor AS T1 WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1988 Winter' )",
        "pred_result": "no such column: T2.age",
        "repair_sql": "SELECT AVG(T1.`age`) FROM games_competitor AS T1 JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`games_name` = '1988 Winter';",
        "repair_result": 1
    },
    {
        "idx": 568,
        "db_id": "olympics",
        "question": "What is the percentage of female competitors whose heights are over 170 that participated in the game in 1988?",
        "evidence": "DIVIDE(COUNT(person_id where gender = 'F' and height > 170), COUNT(person_id)) as percentage where games_year = 1988;",
        "gold": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'F' AND T3.height > 170 THEN 1 END) AS REAL) * 100 / COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_year = 1988",
        "pred": "SELECT (CAST(COUNT(T4.`person_id`) AS REAL) / COUNT(T3.`person_id`)) * 100 FROM person AS T4 INNER JOIN games_competitor AS T5 ON T4.`id` = T5.`person_id` INNER JOIN games AS T6 ON T5.`games_id` = T6.`id` WHERE T4.`gender` = 'F' AND T4.`height` > 170 AND T6.`games_year` = 1988",
        "pred_result": "no such column: T3.person_id",
        "repair_sql": "SELECT (CAST(COUNT(T4.`id`) AS REAL) / COUNT(T3.`id`)) * 100 FROM person AS T4 INNER JOIN games_competitor AS T5 ON T4.`id` = T5.`person_id` INNER JOIN games AS T6 ON T5.`games_id` = T6.`id` WHERE T4.`gender` = 'F' AND T4.`height` > 170 AND T6.`games_year` = 1988",
        "repair_result": "no such column: T3.id"
    },
    {
        "idx": 569,
        "db_id": "olympics",
        "question": "What is the sport name of \"Cross Country Skiing Men's 10/15 kilometres Pursuit\" event?",
        "evidence": "\"Cross Country Skiing Men's 10/15 kilometres Pursuit\" refers to event_name = 'Cross Country Skiing Men''s 10/15 kilometres Pursuit';",
        "gold": "SELECT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T2.event_name LIKE 'Cross Country Skiing Men%s 10/15 kilometres Pursuit'",
        "pred": "SELECT `sport_name` FROM sport WHERE `id` = ( SELECT `sport_id` FROM event WHERE `event_name` = 'Cross Country Skiing Men''s 10/15 kilometres Pursuit' )",
        "pred_result": 1,
        "repair_sql": "SELECT `sport_name` FROM sport WHERE `id` = ( SELECT `sport_id` FROM event WHERE `event_name` = 'Cross Country Skiing Men''s 10/15 kilometres Pursuit' )",
        "repair_result": 1
    },
    {
        "idx": 570,
        "db_id": "olympics",
        "question": "What is the percentage of people whose age greater than 24 and participate in winter season?",
        "evidence": "DIVIDE(COUNT(season = 'Winter' and age > 24), COUNT(person_id)) as percentage;",
        "gold": "SELECT CAST(COUNT(CASE WHEN T2.age > 24 AND T1.season = 'Winter' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.games_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id",
        "pred": "SELECT (CAST(COUNT(T1.`person_id`) AS REAL) / (SELECT COUNT(`person_id`) FROM games_competitor)) * 100 FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T1.`age` > 24 AND T2.`season` = 'Winter'",
        "pred_result": 0,
        "repair_sql": "SELECT (CAST(COUNT(T1.`person_id`) AS REAL) / (SELECT COUNT(`person_id`) FROM games_competitor)) * 100 FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T1.`age` > 24 AND T2.`season` = 'Winter'",
        "repair_result": 0
    },
    {
        "idx": 571,
        "db_id": "olympics",
        "question": "What is the region id of Christine Jacoba Aaftink?",
        "evidence": "",
        "gold": "SELECT T1.region_id FROM person_region AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.id WHERE T2.full_name = 'Christine Jacoba Aaftink'",
        "pred": "SELECT T2.`region_id` FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.`region_id` = T2.`id` WHERE T1.`person_id` = ( SELECT `id` FROM person WHERE `full_name` = 'Christine Jacoba Aaftink' )",
        "pred_result": "no such column: T2.region_id",
        "repair_sql": "SELECT T2.`region_id` FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.`region_id` = T2.`id` INNER JOIN person AS T3 ON T1.`person_id` = T3.`id` WHERE T3.`full_name` = 'Christine Jacoba Aaftink'",
        "repair_result": "no such column: T2.region_id"
    },
    {
        "idx": 572,
        "db_id": "olympics",
        "question": "Mention the height of people who belong to region id 7.",
        "evidence": "",
        "gold": "SELECT T2.height FROM person_region AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.id WHERE T1.region_id = 7",
        "pred": "SELECT T2.`height` FROM person AS T2 WHERE T2.`id` IN ( SELECT T1.`person_id` FROM person_region AS T1 WHERE T1.`region_id` = 7 )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`height` FROM person AS T2 WHERE T2.`id` IN ( SELECT T1.`person_id` FROM person_region AS T1 WHERE T1.`region_id` = 7 )",
        "repair_result": 1
    },
    {
        "idx": 573,
        "db_id": "olympics",
        "question": "State the name of the city that held game id 3.",
        "evidence": "name of city refers to city_name",
        "gold": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T1.games_id = 3",
        "pred": "SELECT T1.`city_name` FROM city AS T1 INNER JOIN games_city AS T2 ON T1.`id` = T2.`city_id` WHERE T2.`games_id` = 3",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`city_name` FROM city AS T1 INNER JOIN games_city AS T2 ON T1.`id` = T2.`city_id` WHERE T2.`games_id` = 3",
        "repair_result": 1
    },
    {
        "idx": 574,
        "db_id": "olympics",
        "question": "What are the id of the games held in London?",
        "evidence": "London refers to city_name = 'London';",
        "gold": "SELECT T1.games_id FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'London'",
        "pred": "SELECT DISTINCT T1.`games_id` FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T2.`city_name` = 'London'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`games_id` FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T2.`city_name` = 'London'",
        "repair_result": 1
    },
    {
        "idx": 575,
        "db_id": "olympics",
        "question": "How many people who are below 30 and participated in the summer season?",
        "evidence": "people who are below 30 refer to person_id where age < 30; the summer season refers to season = 'Summer';",
        "gold": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Summer' AND T2.age < 30",
        "pred": "SELECT COUNT(*) FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T1.`age` < 30 AND T2.`season` = 'Summer'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T1.`age` < 30 AND T2.`season` = 'Summer'",
        "repair_result": 1
    },
    {
        "idx": 576,
        "db_id": "olympics",
        "question": "List out the name of the game that the people participated in games id 13.",
        "evidence": "name of games refers to games_name;",
        "gold": "SELECT DISTINCT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T2.games_id = 13",
        "pred": "SELECT DISTINCT T2.`games_name` FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T1.`games_id` = 13",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.`games_name` FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T1.`games_id` = 13",
        "repair_result": 1
    },
    {
        "idx": 577,
        "db_id": "olympics",
        "question": "What is the average age of the people who participated in the winter season?",
        "evidence": "AVG(age) where season = 'Winter';",
        "gold": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Winter'",
        "pred": "SELECT AVG(T2.`age`) FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`season` = 'Winter'",
        "pred_result": "no such column: T2.age",
        "repair_sql": "SELECT AVG(T1.`age`) FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`season` = 'Winter'",
        "repair_result": 1
    },
    {
        "idx": 578,
        "db_id": "olympics",
        "question": "What is the percentage of the people who are under 35 and participated in the summer season?",
        "evidence": "DIVIDE(COUNT(age < 35) / COUNT(person_id)) as percentage where season = 'Summer';",
        "gold": "SELECT CAST(COUNT(CASE WHEN T2.age < 35 THEN 1 END) AS REAL) * 100 / COUNT(T2.games_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Summer'",
        "pred": "SELECT (CAST(COUNT(T1.`person_id`) AS REAL) / ( SELECT COUNT(T3.`person_id`) FROM games_competitor AS T3 INNER JOIN games AS T4 ON T3.`games_id` = T4.`id` WHERE T4.`season` = 'Summer' )) * 100 FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T1.`age` < 35 AND T2.`season` = 'Summer'",
        "pred_result": 1,
        "repair_sql": "SELECT (CAST(COUNT(T1.`person_id`) AS REAL) / ( SELECT COUNT(T3.`person_id`) FROM games_competitor AS T3 INNER JOIN games AS T4 ON T3.`games_id` = T4.`id` WHERE T4.`season` = 'Summer' )) * 100 FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T1.`age` < 35 AND T2.`season` = 'Summer'",
        "repair_result": 1
    },
    {
        "idx": 579,
        "db_id": "olympics",
        "question": "State the event name of Basketball.",
        "evidence": "basketball refers to sport_name = 'Basketball';",
        "gold": "SELECT T2.event_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Basketball'",
        "pred": "SELECT T2.`event_name` FROM sport AS T1 INNER JOIN event AS T2 ON T1.`id` = T2.`sport_id` WHERE T1.`sport_name` = 'Basketball'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`event_name` FROM sport AS T1 INNER JOIN event AS T2 ON T1.`id` = T2.`sport_id` WHERE T1.`sport_name` = 'Basketball'",
        "repair_result": 1
    },
    {
        "idx": 580,
        "db_id": "olympics",
        "question": "What is the name of medal that competitor id 9 obtained?",
        "evidence": "name of medal refers to medal_name;",
        "gold": "SELECT DISTINCT T1.medal_name FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id WHERE T2.competitor_id = 9",
        "pred": "SELECT T4.`medal_name` FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.`competitor_id` = T2.`id` INNER JOIN event AS T3 ON T1.`event_id` = T3.`id` INNER JOIN medal AS T4 ON T1.`medal_id` = T4.`id` WHERE T2.`id` = 9",
        "pred_result": 1,
        "repair_sql": "SELECT T4.`medal_name` FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.`competitor_id` = T2.`id` INNER JOIN event AS T3 ON T1.`event_id` = T3.`id` INNER JOIN medal AS T4 ON T1.`medal_id` = T4.`id` WHERE T2.`id` = 9",
        "repair_result": 1
    },
    {
        "idx": 581,
        "db_id": "olympics",
        "question": "List out the id of event that achieve the gold medal.",
        "evidence": "the gold medal refers to medal_name = 'Gold';",
        "gold": "SELECT T2.event_id FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id WHERE T1.medal_name = 'Gold'",
        "pred": "SELECT T1.`id` FROM event AS T1 INNER JOIN competitor_event AS T2 ON T1.`id` = T2.`event_id` WHERE T2.`medal_id` = ( SELECT `id` FROM medal WHERE `medal_name` = 'Gold' )",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`id` FROM event AS T1 INNER JOIN competitor_event AS T2 ON T1.`id` = T2.`event_id` WHERE T2.`medal_id` = ( SELECT `id` FROM medal WHERE `medal_name` = 'Gold' )",
        "repair_result": 1
    },
    {
        "idx": 582,
        "db_id": "olympics",
        "question": "Who is the heaviest athlete?",
        "evidence": "Who refers to full_name; the heaviest refers to MAX(weight);",
        "gold": "SELECT full_name FROM person ORDER BY weight DESC LIMIT 1",
        "pred": "SELECT T1.`full_name` FROM person AS T1 WHERE T1.`weight` = ( SELECT MAX(`weight`) FROM person )",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`full_name` FROM person AS T1 WHERE T1.`weight` = ( SELECT MAX(`weight`) FROM person )",
        "repair_result": 1
    },
    {
        "idx": 583,
        "db_id": "olympics",
        "question": "Which city were the Olympic games held in 1992?",
        "evidence": "city refers to city_name; in 1992 refers to games_year = 1992;",
        "gold": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_year = 1992",
        "pred": "SELECT T2.`city_name` FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_year` = '1992' )",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`city_name` FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_year` = '1992' )",
        "repair_result": 0
    },
    {
        "idx": 584,
        "db_id": "olympics",
        "question": "Which region is the majority of the athletes from?",
        "evidence": "region refers to region_name; the majority of the athletes from refer to MAX(COUNT(region_name));",
        "gold": "SELECT T2.region_name FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id GROUP BY T2.region_name ORDER BY COUNT(T1.person_id) DESC LIMIT 1",
        "pred": "SELECT T3.`region_name` FROM person_region AS T1 INNER JOIN games_competitor AS T2 ON T1.`person_id` = T2.`person_id` INNER JOIN noc_region AS T3 ON T1.`region_id` = T3.`id` GROUP BY T3.`region_name` ORDER BY COUNT(T2.`person_id`) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T3.`region_name` FROM person_region AS T1 INNER JOIN games_competitor AS T2 ON T1.`person_id` = T2.`person_id` INNER JOIN noc_region AS T3 ON T1.`region_id` = T3.`id` GROUP BY T3.`region_name` ORDER BY COUNT(T2.`person_id`) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 585,
        "db_id": "olympics",
        "question": "What is the name of the oldest competitor?",
        "evidence": "name refers to full_name; the oldest refers to MAX(age);",
        "gold": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age DESC LIMIT 1",
        "pred": "SELECT T2.`full_name` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`age` = ( SELECT MAX(`age`) FROM games_competitor )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`full_name` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`age` = ( SELECT MAX(`age`) FROM games_competitor )",
        "repair_result": 1
    },
    {
        "idx": 586,
        "db_id": "olympics",
        "question": "Which sport did John Aalberg participate in?",
        "evidence": "sport refers to sport_name;",
        "gold": "SELECT DISTINCT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id WHERE T5.full_name = 'John Aalberg'",
        "pred": "SELECT DISTINCT T7.`sport_id` FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN games AS T3 ON T2.`games_id` = T3.`id` INNER JOIN games_city AS T4 ON T3.`id` = T4.`games_id` INNER JOIN city AS T5 ON T4.`city_id` = T5.`id` INNER JOIN games_competitor AS T6 ON T1.`id` = T6.`person_id` INNER JOIN event AS T7 ON T6.`id` = T7.`competitor_id` WHERE T1.`full_name` = 'John Aalberg'",
        "pred_result": "no such column: T7.competitor_id",
        "repair_sql": "SELECT DISTINCT T9.`sport_name` FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN games AS T3 ON T2.`games_id` = T3.`id` INNER JOIN games_city AS T4 ON T3.`id` = T4.`games_id` INNER JOIN city AS T5 ON T4.`city_id` = T5.`id` INNER JOIN games_competitor AS T6 ON T1.`id` = T6.`person_id` INNER JOIN competitor_event AS T8 ON T6.`id` = T8.`competitor_id` INNER JOIN event AS T7 ON T8.`event_id` = T7.`id` INNER JOIN sport AS T9 ON T7.`sport_id` = T9.`id` WHERE T1.`full_name` = 'John Aalberg'",
        "repair_result": 1
    },
    {
        "idx": 587,
        "db_id": "olympics",
        "question": "How many Belgian men have competed in an Olympic Games?",
        "evidence": "Belgian men refer to gender = 'M' where region_name = 'Belgium';",
        "gold": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Belgium' AND T3.gender = 'M'",
        "pred": "SELECT COUNT(DISTINCT T3.`person_id`) FROM games_competitor AS T3 WHERE T3.`person_id` IN ( SELECT T1.`person_id` FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.`region_id` = T2.`id` WHERE T2.`region_name` = 'Belgium' ) AND T3.`person_id` IN ( SELECT T4.`person_id` FROM person AS T4 WHERE T4.`gender` = 'M' )",
        "pred_result": "no such column: T4.person_id",
        "repair_sql": "SELECT COUNT(DISTINCT T3.`person_id`) FROM games_competitor AS T3 INNER JOIN person AS T4 ON T3.`person_id` = T4.`id` INNER JOIN person_region AS T1 ON T1.`person_id` = T4.`id` INNER JOIN noc_region AS T2 ON T1.`region_id` = T2.`id` WHERE T2.`region_name` = 'Belgium' AND T4.`gender` = 'M'",
        "repair_result": 1
    },
    {
        "idx": 588,
        "db_id": "olympics",
        "question": "How many athletes took part in the Olympic games held in Barcelona?",
        "evidence": "Barcelona refers to city_name = 'Barcelona';",
        "gold": "SELECT COUNT(T1.person_id) FROM games_competitor AS T1 INNER JOIN games_city AS T2 ON T1.games_id = T2.games_id INNER JOIN city AS T3 ON T2.city_id = T3.id WHERE T3.city_name = 'Barcelona'",
        "pred": "SELECT COUNT(DISTINCT T1.`person_id`) FROM games_competitor AS T1 WHERE T1.`games_id` = ( SELECT T2.`games_id` FROM games_city AS T2 INNER JOIN city AS T3 ON T2.`city_id` = T3.`id` WHERE T3.`city_name` = 'Barcelona' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`person_id`) FROM games_competitor AS T1 WHERE T1.`games_id` = ( SELECT T2.`games_id` FROM games_city AS T2 INNER JOIN city AS T3 ON T2.`city_id` = T3.`id` WHERE T3.`city_name` = 'Barcelona' )",
        "repair_result": 1
    },
    {
        "idx": 589,
        "db_id": "olympics",
        "question": "How many different football events are there?",
        "evidence": "events refer to event_name; football refers to sport_name = 'Football';",
        "gold": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Football'",
        "pred": "SELECT COUNT(DISTINCT `event_name`) FROM event WHERE `sport_id` = ( SELECT `id` FROM sport WHERE `sport_name` = 'Football' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT `event_name`) FROM event WHERE `sport_id` = ( SELECT `id` FROM sport WHERE `sport_name` = 'Football' )",
        "repair_result": 1
    },
    {
        "idx": 590,
        "db_id": "olympics",
        "question": "What were the cities in which John Aalberg competed?",
        "evidence": "cities refer to city_name;",
        "gold": "SELECT T4.city_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T1.full_name = 'John Aalberg'",
        "pred": "SELECT DISTINCT T3.`city_name` FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN games_city AS T3 ON T2.`games_id` = T3.`games_id` INNER JOIN city AS T4 ON T3.`city_id` = T4.`id` WHERE T1.`full_name` = 'John Aalberg'",
        "pred_result": "no such column: T3.city_name",
        "repair_sql": "SELECT DISTINCT T4.`city_name` FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN games_city AS T3 ON T2.`games_id` = T3.`games_id` INNER JOIN city AS T4 ON T3.`city_id` = T4.`id` WHERE T1.`full_name` = 'John Aalberg'",
        "repair_result": 1
    },
    {
        "idx": 591,
        "db_id": "olympics",
        "question": "In Barcelona, how many Olympic games were held?",
        "evidence": "Barcelona refers to city_name = 'Barcelona';",
        "gold": "SELECT COUNT(T1.games_id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'Barcelona'",
        "pred": "SELECT COUNT(DISTINCT T1.`games_id`) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T2.`city_name` = 'Barcelona'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`games_id`) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T2.`city_name` = 'Barcelona'",
        "repair_result": 1
    },
    {
        "idx": 592,
        "db_id": "olympics",
        "question": "How many competitors over the age of 30 participated in the 1992 Winter Olympics?",
        "evidence": "competitors over the age of 30 refer to person_id where age > 30; the 1992 Winter Olympics refers to games_name = '1992 Winter';",
        "gold": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1992 Winter' AND T2.age > 30",
        "pred": "SELECT COUNT(T1.`person_id`) FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1992 Winter' ) AND T2.`age` > 30",
        "pred_result": "no such column: T2.age",
        "repair_sql": "SELECT COUNT(T1.`person_id`) FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1992 Winter' ) AND T1.`age` > 30",
        "repair_result": 1
    },
    {
        "idx": 593,
        "db_id": "olympics",
        "question": "What is the name of the Olympic game with the most competitors held in Barcelona?",
        "evidence": "Barcelona refers to city_name = 'Barcelona'; the most competitors refer to MAX(COUNT(games_name)); name of game refers to games_name;",
        "gold": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T4.city_name = 'Barcelona' GROUP BY T1.id ORDER BY COUNT(T2.person_id) DESC LIMIT 1",
        "pred": "SELECT T4.`games_name` FROM games AS T4 INNER JOIN ( SELECT T3.`games_id`, COUNT(T1.`id`) AS num_competitors FROM games_competitor AS T1 INNER JOIN games_city AS T2 ON T1.`games_id` = T2.`games_id` INNER JOIN city AS T3 ON T2.`city_id` = T3.`id` WHERE T3.`city_name` = 'Barcelona' GROUP BY T3.`games_id` ORDER BY num_competitors DESC LIMIT 1 ) AS subquery ON T4.`id` = subquery.`games_id`",
        "pred_result": "no such column: T3.games_id",
        "repair_sql": "SELECT T4.`games_name` FROM games AS T4 INNER JOIN ( SELECT T2.`games_id`, COUNT(T1.`id`) AS num_competitors FROM games_competitor AS T1 INNER JOIN games_city AS T2 ON T1.`games_id` = T2.`games_id` INNER JOIN city AS T3 ON T2.`city_id` = T3.`id` WHERE T3.`city_name` = 'Barcelona' GROUP BY T2.`games_id` ORDER BY num_competitors DESC LIMIT 1 ) AS subquery ON T4.`id` = subquery.`games_id`",
        "repair_result": 1
    },
    {
        "idx": 594,
        "db_id": "olympics",
        "question": "List the name of competitors from Argentina.",
        "evidence": "name refers to full_name; Argentina refers to region_name = 'Argentina';",
        "gold": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Argentina'",
        "pred": "SELECT T2.`full_name` FROM person AS T2 INNER JOIN person_region AS T1 ON T1.`person_id` = T2.`id` INNER JOIN noc_region AS T3 ON T1.`region_id` = T3.`id` WHERE T3.`region_name` = 'Argentina'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`full_name` FROM person AS T2 INNER JOIN person_region AS T1 ON T1.`person_id` = T2.`id` INNER JOIN noc_region AS T3 ON T1.`region_id` = T3.`id` WHERE T3.`region_name` = 'Argentina'",
        "repair_result": 1
    },
    {
        "idx": 595,
        "db_id": "olympics",
        "question": "What is the average age of Argentina's athletes who participated in the Summer Olympics in 2012?",
        "evidence": "AVG(age) where games_name = '2012 Summer' and region_name = 'Argentina';",
        "gold": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person_region AS T3 ON T2.person_id = T3.person_id INNER JOIN noc_region AS T4 ON T3.region_id = T4.id WHERE T1.games_name = '2012 Summer' AND T4.region_name = 'Argentina'",
        "pred": "SELECT AVG(T1.`age`) FROM games_competitor AS T1 INNER JOIN person_region AS T2 ON T1.`person_id` = T2.`person_id` WHERE T2.`region_id` = ( SELECT `id` FROM noc_region WHERE `region_name` = 'Argentina' ) AND T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '2012 Summer' AND `season` = 'Summer' )",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(T1.`age`) FROM games_competitor AS T1 INNER JOIN person_region AS T2 ON T1.`person_id` = T2.`person_id` WHERE T2.`region_id` = ( SELECT `id` FROM noc_region WHERE `region_name` = 'Argentina' ) AND T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '2012 Summer' AND `season` = 'Summer' )",
        "repair_result": 1
    },
    {
        "idx": 596,
        "db_id": "olympics",
        "question": "Calculate the percentage of bronze medals won by men's basketball players.",
        "evidence": "DIVIDE(COUNT(competitor_id where medal_name = 'Bronze'), COUNT(competitor_id)) as percentage where event_name = 'Basketball Men''s Basketball';",
        "gold": "SELECT CAST(COUNT(CASE WHEN T4.medal_name = 'Bronze' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN event AS T3 ON T1.event_id = T3.id INNER JOIN medal AS T4 ON T1.medal_id = T4.id WHERE T3.event_name LIKE 'Basketball Men%s Basketball'",
        "pred": "SELECT (COUNT(CASE WHEN M.`medal_name` = 'Bronze' THEN CE.`competitor_id` END) * 1.0 / COUNT(CE.`competitor_id`)) * 100 AS percentage FROM competitor_event AS CE INNER JOIN event AS E ON CE.`event_id` = E.`id` INNER JOIN sport AS S ON E.`sport_id` = S.`id` INNER JOIN medal AS M ON CE.`medal_id` = M.`id` WHERE S.`sport_name` = 'Basketball Men''s Basketball'",
        "pred_result": 0,
        "repair_sql": "SELECT (COUNT(CASE WHEN M.`medal_name` = 'Bronze' THEN CE.`competitor_id` END) * 1.0 / COUNT(CE.`competitor_id`)) * 100 AS percentage FROM competitor_event AS CE INNER JOIN event AS E ON CE.`event_id` = E.`id` INNER JOIN sport AS S ON E.`sport_id` = S.`id` INNER JOIN medal AS M ON CE.`medal_id` = M.`id` WHERE S.`sport_name` = 'Basketball Men''s Basketball' AND M.`medal_name` IS NOT NULL",
        "repair_result": 0
    },
    {
        "idx": 597,
        "db_id": "olympics",
        "question": "List the name of the games that Georgios Abaris participated.",
        "evidence": "name of games refers to games_name;",
        "gold": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Georgios Abaris'",
        "pred": "SELECT T3.`games_name` FROM games AS T3 INNER JOIN games_competitor AS T1 ON T1.`games_id` = T3.`id` INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T2.`full_name` = 'Georgios Abaris'",
        "pred_result": 1,
        "repair_sql": "SELECT T3.`games_name` FROM games AS T3 INNER JOIN games_competitor AS T1 ON T1.`games_id` = T3.`id` INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T2.`full_name` = 'Georgios Abaris'",
        "repair_result": 1
    },
    {
        "idx": 598,
        "db_id": "olympics",
        "question": "Provide the name of competitors from Greece.",
        "evidence": "name refers to full_name; Greece refers to region_name = 'Greece';",
        "gold": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Greece'",
        "pred": "SELECT T1.`full_name` FROM person AS T1 INNER JOIN person_region AS T2 ON T1.`id` = T2.`person_id` INNER JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T3.`region_name` = 'Greece'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`full_name` FROM person AS T1 INNER JOIN person_region AS T2 ON T1.`id` = T2.`person_id` INNER JOIN noc_region AS T3 ON T2.`region_id` = T3.`id` WHERE T3.`region_name` = 'Greece'",
        "repair_result": 1
    },
    {
        "idx": 599,
        "db_id": "olympics",
        "question": "Calculate the average age of the competitors who participated in the 1924 Winter.",
        "evidence": "AVG(age) where games_name = '1924 Winter';",
        "gold": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1924 Winter'",
        "pred": "SELECT AVG(T2.`age`) FROM games_competitor AS T1 WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '1924 Winter' )",
        "pred_result": "no such column: T2.age",
        "repair_sql": "SELECT AVG(T1.`age`) FROM games_competitor AS T1 JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`games_name` = '1924 Winter';",
        "repair_result": 1
    },
    {
        "idx": 600,
        "db_id": "olympics",
        "question": "What is the NOC code of the region of the competitors weighted 77 kg?",
        "evidence": "NOC code refers to noc; competitors weighted 77 kg refer to person_id where weight = 77;",
        "gold": "SELECT T1.noc FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.weight = 77",
        "pred": "SELECT T3.`noc` FROM noc_region AS T3 WHERE T3.`id` IN ( SELECT T2.`region_id` FROM person_region AS T2 WHERE T2.`person_id` IN ( SELECT T1.`person_id` FROM person AS T1 WHERE T1.`weight` = 77 ) )",
        "pred_result": "no such column: T1.person_id",
        "repair_sql": "SELECT T3.`noc` FROM noc_region AS T3 JOIN person_region AS T2 ON T3.`id` = T2.`region_id` JOIN person AS T1 ON T2.`person_id` = T1.`id` WHERE T1.`weight` = 77",
        "repair_result": 1
    },
    {
        "idx": 601,
        "db_id": "olympics",
        "question": "List the names of the games held in Paris.",
        "evidence": "Paris refers to city_name = 'Paris'; names of games refers to games_name;",
        "gold": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Paris'",
        "pred": "SELECT DISTINCT T2.`games_name` FROM games_city AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T1.`city_id` = ( SELECT `id` FROM city WHERE `city_name` = 'Paris' )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.`games_name` FROM games_city AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T1.`city_id` = ( SELECT `id` FROM city WHERE `city_name` = 'Paris' )",
        "repair_result": 1
    },
    {
        "idx": 602,
        "db_id": "olympics",
        "question": "Provide the competitors' names who joined the 2000 Summer.",
        "evidence": "the competitors' names refer to full_name; the 2000 Summer refers to games_name = '2000 Summer';",
        "gold": "SELECT T3.full_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2000 Summer'",
        "pred": "SELECT DISTINCT T2.`full_name` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '2000 Summer' )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T2.`full_name` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '2000 Summer' )",
        "repair_result": 1
    },
    {
        "idx": 603,
        "db_id": "olympics",
        "question": "In which city was the game held where the oldest competitor participated?",
        "evidence": "in which city refers to city_name; the oldest refers to MAX(age);",
        "gold": "SELECT T4.city_name FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.games_id = T2.id INNER JOIN games_city AS T3 ON T1.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id ORDER BY T1.age DESC LIMIT 1",
        "pred": "SELECT T3.`city_name` FROM city AS T3 INNER JOIN games_city AS T1 ON T1.`city_id` = T3.`id` WHERE T1.`games_id` = ( SELECT T2.`games_id` FROM games_competitor AS T2 WHERE T2.`age` = ( SELECT MAX(T4.`age`) FROM games_competitor AS T4 ) )",
        "pred_result": 1,
        "repair_sql": "SELECT T3.`city_name` FROM city AS T3 INNER JOIN games_city AS T1 ON T1.`city_id` = T3.`id` WHERE T1.`games_id` = ( SELECT T2.`games_id` FROM games_competitor AS T2 WHERE T2.`age` = ( SELECT MAX(T4.`age`) FROM games_competitor AS T4 ) )",
        "repair_result": 1
    },
    {
        "idx": 604,
        "db_id": "olympics",
        "question": "What is the name of the youngest competitor?",
        "evidence": "name refers to full_name; the youngest refers to MIN(age);",
        "gold": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age LIMIT 1",
        "pred": "SELECT T2.`full_name` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`age` = ( SELECT MIN(T3.`age`) FROM games_competitor AS T3 )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`full_name` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`age` = ( SELECT MIN(T3.`age`) FROM games_competitor AS T3 )",
        "repair_result": 1
    },
    {
        "idx": 605,
        "db_id": "olympics",
        "question": "List down the games ID of games held in Tokyo.",
        "evidence": "Tokyo refers to city_name = 'Tokyo';",
        "gold": "SELECT T1.games_id FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'Tokyo'",
        "pred": "SELECT T1.`games_id` FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T2.`city_name` = 'Tokyo'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`games_id` FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T2.`city_name` = 'Tokyo'",
        "repair_result": 1
    },
    {
        "idx": 606,
        "db_id": "olympics",
        "question": "Give the NOC code and region name of the heaviest competitor.",
        "evidence": "NOC code refers to noc; the heaviest refers to MAX(weight);",
        "gold": "SELECT T1.noc, T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id ORDER BY T3.weight DESC LIMIT 1",
        "pred": "SELECT T2.`noc`, T2.`region_name` FROM person AS T1 INNER JOIN person_region AS T3 ON T1.`id` = T3.`person_id` INNER JOIN noc_region AS T2 ON T3.`region_id` = T2.`id` WHERE T1.`id` = ( SELECT T4.`id` FROM person AS T4 ORDER BY T4.`weight` DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`noc`, T2.`region_name` FROM person AS T1 INNER JOIN person_region AS T3 ON T1.`id` = T3.`person_id` INNER JOIN noc_region AS T2 ON T3.`region_id` = T2.`id` WHERE T1.`id` = ( SELECT T4.`id` FROM person AS T4 ORDER BY T4.`weight` DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 607,
        "db_id": "olympics",
        "question": "In what year and season did Sohail Abbas compete?",
        "evidence": "year refers to games_year;",
        "gold": "SELECT T1.games_year, T1.season FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Sohail Abbas'",
        "pred": "SELECT T3.`games_year`, T4.`season` FROM games AS T3 INNER JOIN games_city AS T4 ON T3.`id` = T4.`games_id` WHERE T4.`games_id` = ( SELECT T2.`games_id` FROM games_competitor AS T2 WHERE T2.`person_id` = ( SELECT T1.`id` FROM person AS T1 WHERE T1.`full_name` = 'Sohail Abbas' ) )",
        "pred_result": "no such column: T4.season",
        "repair_sql": "SELECT T3.`games_year`, T3.`season` FROM games AS T3 INNER JOIN games_city AS T4 ON T3.`id` = T4.`games_id` WHERE T4.`games_id` IN ( SELECT T2.`games_id` FROM games_competitor AS T2 WHERE T2.`person_id` = ( SELECT T1.`id` FROM person AS T1 WHERE T1.`full_name` = 'Sohail Abbas' ) )",
        "repair_result": 1
    },
    {
        "idx": 608,
        "db_id": "olympics",
        "question": "What is the average weight of the competitors who won a silver medal?",
        "evidence": "AVG(weight) where medal_name = 'Silver';",
        "gold": "SELECT AVG(T1.weight) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T4.medal_name = 'Silver'",
        "pred": "SELECT AVG(T1.`weight`) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN competitor_event AS T3 ON T2.`id` = T3.`competitor_id` INNER JOIN medal AS T4 ON T3.`medal_id` = T4.`id` WHERE T4.`medal_name` = 'Silver'",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(T1.`weight`) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN competitor_event AS T3 ON T2.`id` = T3.`competitor_id` INNER JOIN medal AS T4 ON T3.`medal_id` = T4.`id` WHERE T4.`medal_name` = 'Silver'",
        "repair_result": 1
    },
    {
        "idx": 609,
        "db_id": "olympics",
        "question": "In which city the 2004 Summer was held?",
        "evidence": "in which city refers to city_name; the 2004 Summer refers to games_name = '2004 Summer';",
        "gold": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '2004 Summer'",
        "pred": "SELECT T2.`city_name` FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '2004 Summer' )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`city_name` FROM games_city AS T1 INNER JOIN city AS T2 ON T1.`city_id` = T2.`id` WHERE T1.`games_id` = ( SELECT `id` FROM games WHERE `games_name` = '2004 Summer' )",
        "repair_result": 1
    },
    {
        "idx": 610,
        "db_id": "olympics",
        "question": "What is the season of the game where a competitor who weighted 73 kg and 180 cm tall, participated?",
        "evidence": "competitor who weighted 73 kg and 180 cm tall refers to person_id where height = 180 and weight = 73;",
        "gold": "SELECT DISTINCT T1.season FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.height = 180 AND T3.weight = 73",
        "pred": "SELECT T2.`season` FROM games AS T1 INNER JOIN games_city AS T2 ON T1.`id` = T2.`games_id` WHERE T2.`games_id` = ( SELECT T3.`games_id` FROM games_competitor AS T3 WHERE T3.`person_id` = ( SELECT T4.`id` FROM person AS T4 WHERE T4.`height` = 180 AND T4.`weight` = 73 ) )",
        "pred_result": "no such column: T2.season",
        "repair_sql": "SELECT T1.season FROM games AS T1 INNER JOIN games_city AS T2 ON T1.id = T2.games_id INNER JOIN games_competitor AS T3 ON T1.id = T3.games_id INNER JOIN person AS T4 ON T3.person_id = T4.id WHERE T4.height = 180 AND T4.weight = 73",
        "repair_result": 1
    },
    {
        "idx": 611,
        "db_id": "olympics",
        "question": "Provide the names of competitors who received a gold medal.",
        "evidence": "names of competitors refer to full_name; gold medal refers to medal_name = 'Gold';",
        "gold": "SELECT DISTINCT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T4.medal_name = 'Gold'",
        "pred": "SELECT P.`full_name` FROM person AS P INNER JOIN games_competitor AS GC ON P.`id` = GC.`person_id` WHERE GC.`id` IN ( SELECT CE.`competitor_id` FROM competitor_event AS CE INNER JOIN medal AS M ON CE.`medal_id` = M.`id` WHERE M.`medal_name` = 'Gold' )",
        "pred_result": 1,
        "repair_sql": "SELECT P.`full_name` FROM person AS P INNER JOIN games_competitor AS GC ON P.`id` = GC.`person_id` WHERE GC.`id` IN ( SELECT CE.`competitor_id` FROM competitor_event AS CE INNER JOIN medal AS M ON CE.`medal_id` = M.`id` WHERE M.`medal_name` = 'Gold' )",
        "repair_result": 1
    },
    {
        "idx": 612,
        "db_id": "olympics",
        "question": "Compute the average height of competitors whose age ranges from 22 to 28.",
        "evidence": "AVG(height) where age BETWEEN 22 AND 28;",
        "gold": "SELECT AVG(T1.height) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.age BETWEEN 22 AND 28",
        "pred": "SELECT AVG(T2.`height`) FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`age` BETWEEN 22 AND 28",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(T2.`height`) FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`age` BETWEEN 22 AND 28",
        "repair_result": 1
    },
    {
        "idx": 613,
        "db_id": "olympics",
        "question": "How many female competitors were from Iran?",
        "evidence": "female competitors refer to person_id where gender = 'F'; from Iran refers to region_name = 'Iran';",
        "gold": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Iran' AND T3.gender = 'F'",
        "pred": "SELECT COUNT(*) FROM person_region AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T2.`gender` = 'F' AND T1.`region_id` = ( SELECT `id` FROM noc_region WHERE `region_name` = 'Iran' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM person_region AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T2.`gender` = 'F' AND T1.`region_id` = ( SELECT `id` FROM noc_region WHERE `region_name` = 'Iran' )",
        "repair_result": 1
    },
    {
        "idx": 614,
        "db_id": "olympics",
        "question": "Provide the age of the tallest competitor.",
        "evidence": "the tallest refers to MAX(height);",
        "gold": "SELECT T2.age FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T1.height DESC LIMIT 1",
        "pred": "SELECT T1.`age` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T2.`height` = ( SELECT MAX(`height`) FROM person )",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`age` FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T2.`height` = ( SELECT MAX(`height`) FROM person )",
        "repair_result": 0
    },
    {
        "idx": 615,
        "db_id": "olympics",
        "question": "Among the competitors with age ranges 24 and below, calculate the difference between the number of competitors who weighed greater than 70 kg and competitors who weighted less than 70 kg.",
        "evidence": "SUBTRACT(COUNT(weight > 70), COUNT(weight < 70)) where age < 24;",
        "gold": "SELECT COUNT(CASE WHEN T1.weight > 70 THEN 1 ELSE NULL END) - COUNT(CASE WHEN T1.weight < 70 THEN 1 ELSE NULL END) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.age < 24",
        "pred": "SELECT ( SELECT COUNT(*) FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`age` <= 24 AND T2.`weight` > 70 ) - ( SELECT COUNT(*) FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`age` <= 24 AND T2.`weight` < 70 ) AS weight_diff",
        "pred_result": 0,
        "repair_sql": "SELECT ( SELECT COUNT(*) FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`age` <= 24 AND T2.`weight` > 70 ) - ( SELECT COUNT(*) FROM games_competitor AS T1 INNER JOIN person AS T2 ON T1.`person_id` = T2.`id` WHERE T1.`age` <= 24 AND T2.`weight` < 70 ) AS weight_diff",
        "repair_result": 0
    },
    {
        "idx": 616,
        "db_id": "olympics",
        "question": "In the 2014 Winter game, what is the percentage of competitors who age 28 years old?",
        "evidence": "DIVIDE(COUNT(age = 28), COUNT(id)) as percentage where games_name = '2014 Winter';",
        "gold": "SELECT CAST(COUNT(CASE WHEN T2.age = 28 THEN 1 END) AS REAL) * 100 / COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '2014 Winter'",
        "pred": "SELECT CAST(COUNT(CASE WHEN T1.`age` = 28 THEN 1 END) AS REAL) / COUNT(T1.`id`) * 100 AS percentage FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`games_name` = '2014 Winter'",
        "pred_result": 0,
        "repair_sql": "SELECT CAST(COUNT(CASE WHEN T1.`age` = 28 THEN 1 END) AS REAL) / COUNT(T1.`id`) * 100 AS percentage FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.`games_id` = T2.`id` WHERE T2.`games_name` = '2014 Winter'",
        "repair_result": 0
    },
    {
        "idx": 617,
        "db_id": "olympics",
        "question": "Among the males, list the region name of people with height greater than 87% of the average height of all people listed.",
        "evidence": "males refer to gender = 'M'; height greater than 87% of the average height refers to height > MULTIPLY(AVG(height), 0.87);",
        "gold": "SELECT DISTINCT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'M' AND T3.height * 100 > ( SELECT AVG(height) FROM person WHERE gender = 'M' ) * 87",
        "pred": "SELECT DISTINCT T5.`region_name` FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN person_region AS T3 ON T1.`id` = T3.`person_id` INNER JOIN noc_region AS T4 ON T3.`region_id` = T4.`id` INNER JOIN person AS T5 ON T1.`id` = T5.`id` WHERE T1.`gender` = 'M' AND T1.`height` > (SELECT AVG(`height`) * 0.87 FROM person)",
        "pred_result": "no such column: T5.region_name",
        "repair_sql": "SELECT DISTINCT T4.`region_name` FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.`id` = T2.`person_id` INNER JOIN person_region AS T3 ON T1.`id` = T3.`person_id` INNER JOIN noc_region AS T4 ON T3.`region_id` = T4.`id` WHERE T1.`gender` = 'M' AND T1.`height` > (SELECT AVG(`height`) * 0.87 FROM person)",
        "repair_result": 1
    },
    {
        "idx": 618,
        "db_id": "coinmarketcap",
        "question": "Name the coin that has the highest market capitalization for all transactions in 2018.",
        "evidence": "highest market capitalization refers to max(market_cap); in 2018 refers to year(date) = 2018",
        "gold": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date LIKE '2018%' AND T2.market_cap = ( SELECT MAX(market_cap) FROM historical WHERE STRFTIME('%Y', date) = '2018' )",
        "pred": "SELECT T2.`name` FROM historical AS T1 INNER JOIN coins AS T2 ON T1.`coin_id` = T2.`id` WHERE T2.`id` = ( SELECT T2.`id` FROM historical AS T3 INNER JOIN coins AS T2 ON T3.`coin_id` = T2.`id` WHERE strftime('%Y', T3.`date`) = '2018' ORDER BY T3.`market_cap` DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`name` FROM historical AS T1 INNER JOIN coins AS T2 ON T1.`coin_id` = T2.`id` WHERE T2.`id` = ( SELECT T2.`id` FROM historical AS T3 INNER JOIN coins AS T2 ON T3.`coin_id` = T2.`id` WHERE strftime('%Y', T3.`date`) = '2018' ORDER BY T3.`market_cap` DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 619,
        "db_id": "coinmarketcap",
        "question": "What is the total value of Argentum coined traded in the past 24 hours on 2016/10/11.",
        "evidence": "total value in the past 24 hours refers to volume_24h; on 11/10/16 refers to date = '2016-11-10'",
        "gold": "SELECT T2.volume_24h FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Argentum' AND T2.date = '2016-10-11'",
        "pred": "SELECT SUM(`volume_24h`) FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `name` = 'Argentum' ) AND `date` = '2016-10-11'",
        "pred_result": 1,
        "repair_sql": "SELECT SUM(`volume_24h`) FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `name` = 'Argentum' ) AND `date` = '2016-10-11'",
        "repair_result": 1
    },
    {
        "idx": 620,
        "db_id": "coinmarketcap",
        "question": "List the price for Zetacoin on 13/11/1 and the next 7 consecutive days. What is the average price for these 7 days?",
        "evidence": "on 1/11/13 and the next 7 consecutive days refers to DATE BETWEEN '2013-11-01' AND '2013-11-07'; average price refers to AVG(price); Zetacoin refers to name = 'Zetacoin'",
        "gold": "SELECT T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Zetacoin' AND T2.date BETWEEN '2013-11-01' AND '2013-11-07' UNION ALL SELECT AVG(T2.PRICE) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Zetacoin' AND T2.date BETWEEN '2013-11-01' AND '2013-11-07'",
        "pred": "SELECT AVG(T2.`price`) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`id` WHERE T1.`name` = 'Zetacoin' AND T2.`date` BETWEEN '2013-11-01' AND '2013-11-07'",
        "pred_result": "no such column: T2.id",
        "repair_sql": "SELECT AVG(T2.`price`) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`date` WHERE T1.`name` = 'Zetacoin' AND T2.`date` BETWEEN '2013-11-01' AND '2013-11-07'",
        "repair_result": 0
    },
    {
        "idx": 621,
        "db_id": "coinmarketcap",
        "question": "For all transactions for WRAP in August 2016, list the time to achieve highest price and the time to achieve the lowest price.",
        "evidence": "in May 2013 refers to month(date) = 5 AND year(date) = 2013; time to achieve the highest price refers to time_high; time to achieve the lowest price refers to time_low; WRAP refers to name = 'WARP'",
        "gold": "SELECT T2.time_high, T2.time_low, T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'WARP' AND STRFTIME('%Y-%m', T2.date) = '2016-08'",
        "pred": "SELECT `time_high`, `time_low` FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `name` = 'WRAP' ) AND strftime('%Y-%m', `date`) = '2016-08'",
        "pred_result": 0,
        "repair_sql": "SELECT MAX(`time_high`) AS time_to_achieve_highest_price, MIN(`time_low`) AS time_to_achieve_lowest_price FROM historical JOIN coins ON historical.coin_id = coins.id WHERE coins.name = 'WRAP' AND strftime('%Y-%m', historical.date) = '2016-08'",
        "repair_result": 0
    },
    {
        "idx": 622,
        "db_id": "coinmarketcap",
        "question": "State the transaction date whereby DigixDAO was transacted at the hightest price.",
        "evidence": "the highest price refers to max(price); DigixDAO refers to name = 'DigixDAO'",
        "gold": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'DigixDAO' ORDER BY T2.price DESC LIMIT 1",
        "pred": "SELECT T2.`date` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`id` WHERE T1.`name` = 'DigixDAO' ORDER BY T2.`price` DESC LIMIT 1",
        "pred_result": "no such column: T2.id",
        "repair_sql": "SELECT T2.`date` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`id` WHERE T1.`name` = 'DigixDAO' ORDER BY T2.`high` DESC LIMIT 1",
        "repair_result": "no such column: T2.id"
    },
    {
        "idx": 623,
        "db_id": "coinmarketcap",
        "question": "Name the coin with the highest percentage price changed in 24 hours. State the transaction date and price.",
        "evidence": "the highest percentage price changed in 24 hours refers to max(percent_change_24h)",
        "gold": "SELECT T1.name, T2.DATE, T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.percent_change_24h = ( SELECT MAX(percent_change_24h) FROM historical )",
        "pred": "SELECT T1.`name`, T2.`date`, T2.`price` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T2.`percent_change_24h` = ( SELECT MAX(`percent_change_24h`) FROM historical )",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`name`, T2.`date`, T2.`price` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T2.`percent_change_24h` = ( SELECT MAX(`percent_change_24h`) FROM historical )",
        "repair_result": 1
    },
    {
        "idx": 624,
        "db_id": "coinmarketcap",
        "question": "What is the average monthly circulating supply for Frozen in 2014.",
        "evidence": "average monthly circulating supply = AVG(circulating_supply); in 2017 refers to date BETWEEN '2017-01-01' AND '2017-12-31'",
        "gold": "SELECT CAST(SUM(T2.circulating_supply) AS REAL) / 12 FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Frozen' AND STRFTIME('%Y', T2.date) = '2014'",
        "pred": "SELECT AVG(`circulating_supply`) FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `name` = 'Frozen' ) AND `date` BETWEEN '2014-01-01' AND '2014-12-31'",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(`circulating_supply`) FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `name` = 'Frozen' ) AND `date` BETWEEN '2014-01-01' AND '2014-12-31'",
        "repair_result": 0
    },
    {
        "idx": 625,
        "db_id": "coinmarketcap",
        "question": "List all the inactive coins and state the last date of its transaction?",
        "evidence": "the last date refers to max(date); inactive coins refers to status = 'inactive'",
        "gold": "SELECT T1.NAME, MAX(T2.DATE) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.ID = T2.coin_id WHERE T1.status = 'inactive' ORDER BY T2.DATE DESC LIMIT 1",
        "pred": "SELECT T1.`name`, T2.last_transaction_date FROM coins AS T1 INNER JOIN ( SELECT `coin_id`, MAX(`date`) AS last_transaction_date FROM historical GROUP BY `coin_id` ) AS T2 ON T1.`id` = T2.`coin_id` WHERE T1.`status` = 'inactive'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`name`, T2.last_transaction_date FROM coins AS T1 INNER JOIN ( SELECT `coin_id`, MAX(`date`) AS last_transaction_date FROM historical GROUP BY `coin_id` ) AS T2 ON T1.`id` = T2.`coin_id` WHERE T1.`status` = 'inactive'",
        "repair_result": 0
    },
    {
        "idx": 626,
        "db_id": "coinmarketcap",
        "question": "What was the price of 1 Bitcoin in 2016?",
        "evidence": "2016 refers to historical date where year(date) = 2016",
        "gold": "SELECT AVG(T2.price) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' AND STRFTIME('%Y', T2.date) = '2016'",
        "pred": "SELECT T2.`price` FROM historical AS T1 INNER JOIN coins AS T2 ON T1.`coin_id` = T2.`id` WHERE T2.`symbol` = 'BTC' AND strftime('%Y', T1.`date`) = '2016'",
        "pred_result": "no such column: T2.price",
        "repair_sql": "SELECT T1.`price` FROM historical AS T1 INNER JOIN coins AS T2 ON T1.`coin_id` = T2.`id` WHERE T2.`symbol` = 'BTC' AND strftime('%Y', T1.`date`) = '2016'",
        "repair_result": 0
    },
    {
        "idx": 627,
        "db_id": "coinmarketcap",
        "question": "State the transaction date and the price when Bitcoin was bottomed?",
        "evidence": "was bottomed refers to min(price)",
        "gold": "SELECT T2.date, T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' ORDER BY T2.price LIMIT 1",
        "pred": "SELECT T2.`date`, T2.`price` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`id` WHERE T1.`symbol` = 'BTC' AND T2.`price` = ( SELECT MIN(`price`) FROM historical WHERE `id` = ( SELECT `id` FROM coins WHERE `symbol` = 'BTC' ) )",
        "pred_result": "no such column: T2.id",
        "repair_sql": "SELECT T2.`date`, T2.`price` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`id` WHERE T1.`symbol` = 'BTC' AND T2.`price` = ( SELECT MIN(`price`) FROM historical WHERE `id` = T2.`id` )",
        "repair_result": "no such column: T2.id"
    },
    {
        "idx": 628,
        "db_id": "coinmarketcap",
        "question": "For all coins with average price more than $1000. State the current status of the coin.",
        "evidence": "average price more than $1000 refers to AVG(price)>1000",
        "gold": "SELECT T1.status FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id GROUP BY T1.name HAVING AVG(T2.price) > 1000",
        "pred": "SELECT T1.`status` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T2.`price` > 1000",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`status` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T2.`price` > 1000",
        "repair_result": 0
    },
    {
        "idx": 629,
        "db_id": "coinmarketcap",
        "question": "Name the coin and date of transactions with the greatest decline in percent change in 1 hour.",
        "evidence": "the greatest decline in percent change in 1 hour refers to max(percent_change_1h)",
        "gold": "SELECT T1.name, T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.percent_change_1h = ( SELECT MIN(percent_change_1h) FROM historical )",
        "pred": "SELECT T2.`name`, T1.`date` FROM historical AS T1 INNER JOIN coins AS T2 ON T1.`coin_id` = T2.`id` WHERE T1.`percent_change_1h` = ( SELECT MIN(`percent_change_1h`) FROM historical )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`name`, T1.`date` FROM historical AS T1 INNER JOIN coins AS T2 ON T1.`coin_id` = T2.`id` WHERE T1.`percent_change_1h` = ( SELECT MIN(`percent_change_1h`) FROM historical )",
        "repair_result": 1
    },
    {
        "idx": 630,
        "db_id": "coinmarketcap",
        "question": "Name the coin under the token category that gives the highest max profit.",
        "evidence": "the highest max profit refers to max(subtract(high, low))",
        "gold": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.category = 'token' ORDER BY T2.high - T2.low DESC LIMIT 1",
        "pred": "SELECT T1.`name` FROM coins AS T1 INNER JOIN ( SELECT T3.`id`, MAX(T4.`high` - T4.`low`) AS max_profit FROM coins AS T3 INNER JOIN historical AS T4 ON T3.`id` = T4.`coin_id` WHERE T3.`category` = 'token' GROUP BY T3.`id` ) AS T2 ON T1.`id` = T2.`id` WHERE T2.`max_profit` = ( SELECT MAX(T5.`high` - T5.`low`) FROM historical AS T5 )",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`name` FROM coins AS T1 INNER JOIN ( SELECT T3.`id`, MAX(T4.`high` - T4.`low`) AS max_profit FROM coins AS T3 INNER JOIN historical AS T4 ON T3.`id` = T4.`coin_id` WHERE T3.`category` = 'token' GROUP BY T3.`id` ) AS T2 ON T1.`id` = T2.`id` WHERE T2.`max_profit` = ( SELECT MAX(T5.`high` - T5.`low`) FROM historical AS T5 )",
        "repair_result": 1
    },
    {
        "idx": 631,
        "db_id": "coinmarketcap",
        "question": "Name the coin that have higher than average percentage price changed from the previous 24 hours for transaction on 2013/6/22.",
        "evidence": "average percentage price changed from the previous 24 hours refers to AVG(percent_change_24h); on 15/5/2013 refers to DATE = '2013-04-15'",
        "gold": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2020-06-22' GROUP BY T1.name HAVING AVG(T2.percent_change_24h) > T2.PRICE",
        "pred": "SELECT T1.`name` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T2.`date` = '2013-06-22' AND ((T2.`price` - T2.`open`) / T2.`open`) > ( SELECT AVG((T4.`price` - T4.`open`) / T4.`open`) FROM historical AS T4 WHERE T4.`date` = '2013-06-22' )",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`name` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T2.`date` = '2013-06-22' AND ((T2.`price` - T2.`open`) / T2.`open`) > ( SELECT AVG((T4.`price` - T4.`open`) / T4.`open`) FROM historical AS T4 WHERE T4.`date` = '2013-06-22' )",
        "repair_result": 0
    },
    {
        "idx": 632,
        "db_id": "coinmarketcap",
        "question": "Which crytocurrency was ranked the first by CoinMarketCap on 2013/4/28?",
        "evidence": "ranked the first refers to cmc_rank = 1; on 2013/4/28 refers to date = '2013-04-28'",
        "gold": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T2.cmc_rank = 1",
        "pred": "SELECT T2.`name` FROM historical AS T1 INNER JOIN coins AS T2 ON T1.`coin_id` = T2.`id` WHERE T1.`cmc_rank` = 1 AND T1.`date` = '2013-04-28'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`name` FROM historical AS T1 INNER JOIN coins AS T2 ON T1.`coin_id` = T2.`id` WHERE T1.`cmc_rank` = 1 AND T1.`date` = '2013-04-28'",
        "repair_result": 1
    },
    {
        "idx": 633,
        "db_id": "coinmarketcap",
        "question": "How much dollars was a Bitcoin worth on 2013/4/28 according to the coin market?",
        "evidence": "worth refers to price; on 2013/4/28 refers to date = '2013-04-28'",
        "gold": "SELECT T2.market_cap FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'",
        "pred": "SELECT T2.`price` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`id` WHERE T1.`name` = 'Bitcoin' AND T2.`date` = '2013-04-28'",
        "pred_result": "no such column: T2.id",
        "repair_sql": "SELECT T2.`price` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`date` WHERE T1.`name` = 'Bitcoin' AND T2.`date` = '2013-04-28'",
        "repair_result": 0
    },
    {
        "idx": 634,
        "db_id": "coinmarketcap",
        "question": "Which crytocurrency was not opened on 2013/5/3?",
        "evidence": "not opened refers to open IS NULL; on 2013/5/3 refers to date = '2013-05-03'",
        "gold": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-05-03' AND T2.open IS NULL",
        "pred": "SELECT `name` FROM coins WHERE `date_launched` IS NULL OR `date_launched` != '2013-05-03'",
        "pred_result": 0,
        "repair_sql": "SELECT `name` FROM coins WHERE `date_launched` IS NULL OR `date_launched` != '2013-05-03'",
        "repair_result": 0
    },
    {
        "idx": 635,
        "db_id": "coinmarketcap",
        "question": "What was the price of Bitcoin when it closed at the end of the day on 2013/4/29?",
        "evidence": "price when it closed refers to close; on 2013/4/29 refers to date = '2013-04-29'",
        "gold": "SELECT T2.close FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T1.name = 'Bitcoin'",
        "pred": "SELECT T1.`price` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`id` WHERE T2.`close` IS NOT NULL AND DATE(T2.`date`) = '2013-04-29' AND T1.`symbol` = 'BTC'",
        "pred_result": "no such column: T1.price",
        "repair_sql": "SELECT T2.`close` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`id` WHERE T2.`close` IS NOT NULL AND DATE(T2.`date`) = '2013-04-29' AND T1.`symbol` = 'BTC'",
        "repair_result": "no such column: T2.id"
    },
    {
        "idx": 636,
        "db_id": "coinmarketcap",
        "question": "When did Bitcoin reach its highest price on 2013/4/29?",
        "evidence": "time that a coin reaches its highest price refers to time_high; on 2013/4/29 refers to date = '2013-04-29'",
        "gold": "SELECT T2.time_high FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T1.name = 'Bitcoin'",
        "pred": "SELECT T2.`time_high` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T1.`name` = 'Bitcoin' AND T2.`date` = '2013-04-29'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`time_high` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T1.`name` = 'Bitcoin' AND T2.`date` = '2013-04-29'",
        "repair_result": 1
    },
    {
        "idx": 637,
        "db_id": "coinmarketcap",
        "question": "What was the max profit a user can make on Bitcoin on 2013/4/28?",
        "evidence": "the max profit = subtract(high, low); on 2013/4/28 refers to date = '2013-04-28'",
        "gold": "SELECT T2.high - T2.low FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'",
        "pred": "SELECT MAX(`high` - `low`) AS max_profit FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `symbol` = 'BTC' ) AND `date` = '2013-04-28'",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(`high` - `low`) AS max_profit FROM historical JOIN coins ON historical.coin_id = coins.id WHERE coins.symbol = 'BTC' AND historical.date = '2013-04-28' AND `high` IS NOT NULL AND `low` IS NOT NULL",
        "repair_result": 1
    },
    {
        "idx": 638,
        "db_id": "coinmarketcap",
        "question": "What was the number of Bitcoins verifiably burned until 2013/4/28?",
        "evidence": "the number of Bitcoins verifiably burned = max_supply - total_supply; 2013/4/28 refers to date = '2013-04-28'",
        "gold": "SELECT T2.max_supply - T2.total_supply FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'",
        "pred": "SELECT (MAX(`max_supply`) - MAX(`total_supply`)) AS burned_bitcoins FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `symbol` = 'BTC' ) AND `date` <= '2013-04-28'",
        "pred_result": 1,
        "repair_sql": "SELECT (MAX(`max_supply`) - MAX(`total_supply`)) AS burned_bitcoins FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `symbol` = 'BTC' ) AND `date` <= '2013-04-28'",
        "repair_result": 1
    },
    {
        "idx": 639,
        "db_id": "coinmarketcap",
        "question": "Which crytocurrency was traded in the highest value on 2016/1/8?",
        "evidence": "traded in the highest value refers to max(volume_24h); on 2016/1/8 refers to date = '2016-01-08'",
        "gold": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2016-01-08' AND T2.volume_24h = ( SELECT MAX(volume_24h) FROM historical WHERE date = '2016-01-08' )",
        "pred": "SELECT T2.`name` FROM coins AS T2 INNER JOIN historical AS T1 ON T1.`coin_id` = T2.`id` WHERE T1.`date` = '2016-01-08' ORDER BY T1.`volume_24h` DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`name` FROM coins AS T2 INNER JOIN historical AS T1 ON T1.`coin_id` = T2.`id` WHERE T1.`date` = '2016-01-08' ORDER BY T1.`volume_24h` DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 640,
        "db_id": "coinmarketcap",
        "question": "Please list the names of the crytocurrencies that have a total amount of existence of over 10000000 on 2013/4/28.",
        "evidence": "a total amount of existence of over 10000000 refers to total_supply>10000000; on 2013/4/28 refers to date = '2013-04-28'",
        "gold": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T2.total_supply > 10000000",
        "pred": "SELECT DISTINCT T1.`name` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T2.`date` = '2013-04-28' AND T2.`total_supply` > 10000000",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`name` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T2.`date` = '2013-04-28' AND T2.`total_supply` > 10000000",
        "repair_result": 1
    },
    {
        "idx": 641,
        "db_id": "coinmarketcap",
        "question": "Had Bitcoin's price increased or decreased on 2013/5/5 compared with the price 7 days before?",
        "evidence": "price increased refers to percent_change_7d>0; decreased refers percent_change_7d<0; on 2013/5/5 refers to date = '2013-05-05'",
        "gold": "SELECT (CASE WHEN T2.percent_change_7d > 0 THEN 'INCREASED' ELSE 'DECREASED' END) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-05-05' AND T1.name = 'Bitcoin'",
        "pred": "SELECT CASE WHEN ( SELECT `price` FROM historical WHERE `date` = '2013-05-05' ) > ( SELECT `price` FROM historical WHERE `date` = '2013-04-28' ) THEN 'increased' ELSE 'decreased' END AS price_change",
        "pred_result": 0,
        "repair_sql": "SELECT CASE WHEN ( SELECT `price` FROM historical WHERE `date` = '2013-05-05' ) > ( SELECT `price` FROM historical WHERE `date` = '2013-04-28' ) THEN 'increased' ELSE 'decreased' END AS price_change",
        "repair_result": 0
    },
    {
        "idx": 642,
        "db_id": "coinmarketcap",
        "question": "Which crytocurrency had a bigger number of coins circulating in the market and in the general public's hands on 2013/4/28, Bitcoin or Litecoin?",
        "evidence": "a bigger number of coins circulating in the market refers to max(circulating_supply); on 2013/4/28 refers to date = '2013-04-28'",
        "gold": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name IN ('Bitcoin', 'Litecoin') ORDER BY T2.circulating_supply DESC LIMIT 1",
        "pred": "SELECT T1.`symbol`, T2.`coin_id`, MAX(T2.`circulating_supply`) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T1.`symbol` IN ('BTC', 'LTC') AND T2.`date` = '2013-04-28' GROUP BY T1.`symbol`",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`symbol`, T2.`coin_id`, MAX(T2.`circulating_supply`) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T1.`symbol` IN ('BTC', 'LTC') AND T2.`date` = '2013-04-28' GROUP BY T1.`symbol`",
        "repair_result": 0
    },
    {
        "idx": 643,
        "db_id": "coinmarketcap",
        "question": "How much was a Bitcoin on 2013/4/28?",
        "evidence": "how much refers to price; on 2013/4/28 refers to date = '2013-04-28'",
        "gold": "SELECT T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'",
        "pred": "SELECT `price` FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `name` = 'Bitcoin' ) AND `date` = '2013-04-28'",
        "pred_result": 1,
        "repair_sql": "SELECT `price` FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `name` = 'Bitcoin' ) AND `date` = '2013-04-28'",
        "repair_result": 1
    },
    {
        "idx": 644,
        "db_id": "coinmarketcap",
        "question": "What was the average price of a Bitcoin in the year 2013?",
        "evidence": "average price refers SUM(price)/COUNT(named = 'Bitcoin'); in the year 2013 refers to year(date) = 2013",
        "gold": "SELECT AVG(T2.price) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE STRFTIME('%Y', T2.date) = '2013' AND T1.name = 'Bitcoin'",
        "pred": "SELECT AVG(`price`) FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `name` = 'Bitcoin' ) AND strftime('%Y', `date`) = '2013'",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(`price`) FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `name` = 'Bitcoin' ) AND strftime('%Y', `date`) = '2013'",
        "repair_result": 1
    },
    {
        "idx": 645,
        "db_id": "coinmarketcap",
        "question": "What was the percentage of the Bitcoins verifiably burned until 2018/4/28?",
        "evidence": "the percentage of the Bitcoins verifiably burned = divide(subtract(SUM(max_supply), SUM(total_supply)),SUM(total_supply))*100%; until 2013/4/28 refers to date<'2013-04-08'",
        "gold": "SELECT CAST((SUM(T2.max_supply) - SUM(T2.total_supply)) AS REAL) / SUM(T2.total_supply) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date < '2018-04-28' AND T1.name = 'Bitcoin'",
        "pred": "SELECT ((MAX(`max_supply`) - SUM(`total_supply`)) / SUM(`total_supply`)) * 100 AS burned_percentage FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T2.`date` < '2018-04-28' AND T1.`symbol` = 'BTC'",
        "pred_result": 0,
        "repair_sql": "SELECT ((MAX(`max_supply`) - SUM(`total_supply`)) / SUM(`total_supply`)) * 100 AS burned_percentage FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T2.`date` < '2018-04-28' AND T1.`symbol` = 'BTC'",
        "repair_result": 0
    },
    {
        "idx": 646,
        "db_id": "coinmarketcap",
        "question": "Please list the names of coins that has been disappeared.",
        "evidence": "has disappeared refers to status = 'extinct'",
        "gold": "SELECT name FROM coins WHERE status = 'extinct'",
        "pred": "SELECT `name` FROM coins WHERE `status` = 'extinct'",
        "pred_result": 1,
        "repair_sql": "SELECT `name` FROM coins WHERE `status` = 'extinct'",
        "repair_result": 1
    },
    {
        "idx": 647,
        "db_id": "coinmarketcap",
        "question": "What's the descripition of BitBar?",
        "evidence": "",
        "gold": "SELECT description FROM coins WHERE name = 'BitBar'",
        "pred": "SELECT `description` FROM coins WHERE `id` = (SELECT `id` FROM coins WHERE `name` = 'BitBar')",
        "pred_result": 1,
        "repair_sql": "SELECT `description` FROM coins WHERE `id` = (SELECT `id` FROM coins WHERE `name` = 'BitBar')",
        "repair_result": 1
    },
    {
        "idx": 648,
        "db_id": "coinmarketcap",
        "question": "How many coins were added in May 2013? Please list the names of coins.",
        "evidence": "in May 2013 refers to year(date_added) = 2013 and month(date_added) = 5",
        "gold": "SELECT COUNT(id) num FROM coins WHERE STRFTIME('%Y-%m', date_added) = '2013-05' UNION ALL SELECT name FROM coins WHERE STRFTIME('%Y-%m', date_added) = '2013-05'",
        "pred": "SELECT `name` FROM coins WHERE strftime('%Y', `date_added`) = '2013' AND strftime('%m', `date_added`) = '05'",
        "pred_result": 0,
        "repair_sql": "SELECT `name` FROM coins WHERE strftime('%Y', `date_added`) = '2013' AND strftime('%m', `date_added`) = '05'",
        "repair_result": 0
    },
    {
        "idx": 649,
        "db_id": "coinmarketcap",
        "question": "List the names and symbols of the coins that were added on June 14, 2013.",
        "evidence": "added on June 14, 2013 refers to date_added like '2013-06-14%'",
        "gold": "SELECT name, symbol FROM coins WHERE date_added LIKE '2013-06-14%'",
        "pred": "SELECT `name`, `symbol` FROM coins WHERE `date_added` LIKE '2013-06-14%'",
        "pred_result": 1,
        "repair_sql": "SELECT `name`, `symbol` FROM coins WHERE `date_added` LIKE '2013-06-14%'",
        "repair_result": 1
    },
    {
        "idx": 650,
        "db_id": "coinmarketcap",
        "question": "List the names of coins that cannot be traded in 2014.",
        "evidence": "cannot be tracked refers to status = 'untracked'; in 2014 refers to year(date_added) = '2014'",
        "gold": "SELECT name FROM coins WHERE date_added LIKE '2014%' AND status = 'untracked'",
        "pred": "SELECT T1.`name` FROM coins AS T1 WHERE T1.`id` IN ( SELECT T2.`id` FROM coins AS T2 WHERE T2.`status` = 'untracked' AND strftime('%Y', T2.`date_added`) = '2014' )",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`name` FROM coins AS T1 WHERE T1.`id` IN ( SELECT T2.`id` FROM coins AS T2 WHERE T2.`status` = 'untracked' AND strftime('%Y', T2.`date_added`) = '2014' )",
        "repair_result": 1
    },
    {
        "idx": 651,
        "db_id": "coinmarketcap",
        "question": "Name the coins that have three tags.",
        "evidence": "have three tags refers to length(tag_names)-length(replace(tag_names,',','')) = 2",
        "gold": "SELECT name FROM coins WHERE LENGTH(tag_names) - LENGTH(replace(tag_names, ',', '')) = 2",
        "pred": "SELECT DISTINCT `name` FROM coins WHERE LENGTH(`tag_names`) - LENGTH(REPLACE(`tag_names`, ',', '')) = 2",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `name` FROM coins WHERE LENGTH(`tag_names`) - LENGTH(REPLACE(`tag_names`, ',', '')) = 2",
        "repair_result": 1
    },
    {
        "idx": 652,
        "db_id": "coinmarketcap",
        "question": "What is the name of the coin with the highest price?",
        "evidence": "the highest price refers to max(price)",
        "gold": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.price = ( SELECT MAX(price) FROM historical )",
        "pred": "SELECT `name` FROM coins WHERE `id` = ( SELECT `coin_id` FROM historical WHERE `price` = ( SELECT MAX(`price`) FROM historical ) )",
        "pred_result": 1,
        "repair_sql": "SELECT `name` FROM coins WHERE `id` = ( SELECT `coin_id` FROM historical WHERE `price` = ( SELECT MAX(`price`) FROM historical ) )",
        "repair_result": 1
    },
    {
        "idx": 653,
        "db_id": "coinmarketcap",
        "question": "Please name the coin that ranked first among the coins traded on April 29, 2013.",
        "evidence": "ranked first refers to cmc_rank = 1; on April 29, 2013 refers to date = '2013-04-29'",
        "gold": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T2.cmc_rank = 1",
        "pred": "SELECT T2.`name` FROM historical AS T1 INNER JOIN coins AS T2 ON T1.`coin_id` = T2.`id` WHERE T1.`date` = '2013-04-29' AND T1.`cmc_rank` = 1",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`name` FROM historical AS T1 INNER JOIN coins AS T2 ON T1.`coin_id` = T2.`id` WHERE T1.`date` = '2013-04-29' AND T1.`cmc_rank` = 1",
        "repair_result": 1
    },
    {
        "idx": 654,
        "db_id": "coinmarketcap",
        "question": "When is the best time to purchase Bitcoin?",
        "evidence": "lowest price refers to low; best time refers to date with the low;",
        "gold": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' ORDER BY T2.low LIMIT 1",
        "pred": "SELECT `date`, `time_low` FROM historical WHERE `symbol` = 'BTC' ORDER BY `low` ASC LIMIT 1",
        "pred_result": "no such column: symbol",
        "repair_sql": "SELECT h.date, h.time_low FROM historical h JOIN coins c ON h.symbol = c.symbol WHERE c.name = 'Bitcoin' ORDER BY h.low ASC LIMIT 1",
        "repair_result": "no such column: h.symbol"
    },
    {
        "idx": 655,
        "db_id": "coinmarketcap",
        "question": "What is the name of the coin that creates the most total value in the past 24 hours?",
        "evidence": "creates the most total value in the past 24 hours refers to max(volume_24h)",
        "gold": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.volume_24h = ( SELECT MAX(volume_24h) FROM historical )",
        "pred": "SELECT T1.`name` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T2.`date` = DATE('now', '-1 day') GROUP BY T1.`name` ORDER BY SUM(T2.`market_cap`) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`name` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T2.`date` = DATE('now', '-1 day') GROUP BY T1.`name` ORDER BY SUM(T2.`volume_24h`) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 656,
        "db_id": "coinmarketcap",
        "question": "Name the coins that were not opened on May 2013.",
        "evidence": "not opened refers to open IS NULL; on May 2013 refers to year(date) = 2019 AND month(date) = 5",
        "gold": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE STRFTIME('%Y-%m', T2.date) = '2013-05' AND T2.open IS NULL",
        "pred": "SELECT `name` FROM coins WHERE `id` NOT IN ( SELECT DISTINCT `coin_id` FROM historical WHERE strftime('%Y', `date`) = '2013' AND strftime('%m', `date`) = '05' )",
        "pred_result": 0,
        "repair_sql": "SELECT `name` FROM coins WHERE `id` NOT IN ( SELECT DISTINCT `coin_id` FROM historical WHERE strftime('%Y', `date`) = '2013' AND strftime('%m', `date`) = '05' )",
        "repair_result": 0
    },
    {
        "idx": 657,
        "db_id": "coinmarketcap",
        "question": "When is the highest closed price of CHNCoin?",
        "evidence": "the highest closed price refers to max(close)",
        "gold": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'CHNCoin' ORDER BY T2.close DESC LIMIT 1",
        "pred": "SELECT MAX(`close`) FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `name` = 'CHNCoin' )",
        "pred_result": 0,
        "repair_sql": "SELECT MAX(`close`) FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `name` = 'CHNCoin' ) AND `close` IS NOT NULL",
        "repair_result": 0
    },
    {
        "idx": 658,
        "db_id": "coinmarketcap",
        "question": "When did Peercoin rank fifth?",
        "evidence": "when refers to date; rank fifth refers to cmc_rank = 5",
        "gold": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Peercoin' AND T2.cmc_rank = 5",
        "pred": "SELECT T2.`date` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T1.`symbol` = 'PPC' AND T2.`cmc_rank` = 5",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`date` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T1.`symbol` = 'PPC' AND T2.`cmc_rank` = 5",
        "repair_result": 1
    },
    {
        "idx": 659,
        "db_id": "coinmarketcap",
        "question": "When is Devcoin most valuable in the market?",
        "evidence": "when refers to date; most valuable refers to max(market_cap)",
        "gold": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Devcoin' ORDER BY T2.market_cap DESC LIMIT 1",
        "pred": "SELECT T2.`date` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T1.`name` = 'Devcoin' ORDER BY T2.`market_cap` DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`date` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T1.`name` = 'Devcoin' ORDER BY T2.`market_cap` DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 660,
        "db_id": "coinmarketcap",
        "question": "List the names of the top five coins traded on January 1, 2014.",
        "evidence": "the top five coins refers to cmc_rank< = 5; on January 1, 2014 refers to date = '2014-01-01'",
        "gold": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2014-01-01' AND T2.cmc_rank <= 5",
        "pred": "SELECT T2.`name` FROM historical AS T1 INNER JOIN coins AS T2 ON T1.`coin_id` = T2.`id` WHERE T1.`coin_id` IN ( SELECT T2.`coin_id` FROM historical AS T2 WHERE T2.`date` = '2014-01-01' ORDER BY T2.`cmc_rank` ASC LIMIT 5 )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`name` FROM historical AS T1 INNER JOIN coins AS T2 ON T1.`coin_id` = T2.`id` WHERE T1.`coin_id` IN ( SELECT T2.`coin_id` FROM historical AS T2 WHERE T2.`date` = '2014-01-01' ORDER BY T2.`cmc_rank` ASC LIMIT 5 )",
        "repair_result": 1
    },
    {
        "idx": 661,
        "db_id": "coinmarketcap",
        "question": "When was Lebowskis not opened?",
        "evidence": "when refers to date; not opened refers to open IS NULL",
        "gold": "SELECT DISTINCT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Lebowskis' AND (T2.open IS NULL OR T2.open = 0)",
        "pred": "SELECT `date` FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `name` = 'Lebowskis' ) AND `open` IS NULL",
        "pred_result": 1,
        "repair_sql": "SELECT `date` FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `name` = 'Lebowskis' ) AND `open` IS NULL",
        "repair_result": 1
    },
    {
        "idx": 662,
        "db_id": "coinmarketcap",
        "question": "When is the highest price of Terracoin?",
        "evidence": "when refers to date; the highest price refers to max(price)",
        "gold": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Terracoin' ORDER BY T2.price DESC LIMIT 1",
        "pred": "SELECT `date` FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `symbol` = 'TRC' ) AND `price` = ( SELECT MAX(`price`) FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `symbol` = 'TRC' ) )",
        "pred_result": 1,
        "repair_sql": "SELECT `date` FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `symbol` = 'TRC' ) AND `price` = ( SELECT MAX(`price`) FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `symbol` = 'TRC' ) )",
        "repair_result": 1
    },
    {
        "idx": 663,
        "db_id": "coinmarketcap",
        "question": "How many times was Bytecoin traded in June 2013?",
        "evidence": "in June 2013 refers to year(date) = 2013 AND month(date) = 6",
        "gold": "SELECT COUNT(T2.coin_id) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bytecoin' AND STRFTIME('%Y-%m', T2.date) = '2013-06'",
        "pred": "SELECT COUNT(*) FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `symbol` = 'BCN' ) AND strftime('%Y', `date`) = '2013' AND strftime('%m', `date`) = '06'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM historical WHERE `coin_id` = ( SELECT `id` FROM coins WHERE `symbol` = 'BCN' ) AND strftime('%Y', `date`) = '2013' AND strftime('%m', `date`) = '06'",
        "repair_result": 0
    },
    {
        "idx": 664,
        "db_id": "coinmarketcap",
        "question": "List the names of the coins above the average price on April 28, 2013.",
        "evidence": "average price = divide(sum(price), count(name)); on April 28, 2013 refers to date = '2013-04-28'",
        "gold": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2018-04-28' AND T2.price > ( SELECT AVG(price) FROM historical WHERE date = '2018-04-28' )",
        "pred": "SELECT T1.`name` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T2.`date` = '2013-04-28' GROUP BY T1.`name` HAVING AVG(T2.`price`) > ( SELECT AVG(`price`) FROM historical WHERE `date` = '2013-04-28' )",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`name` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T2.`date` = '2013-04-28' GROUP BY T1.`name` HAVING AVG(T2.`price`) > ( SELECT AVG(`price`) FROM historical WHERE `date` = '2013-04-28' )",
        "repair_result": 0
    },
    {
        "idx": 665,
        "db_id": "coinmarketcap",
        "question": "What's the percentage of coins that is higher than the price 1 hour ago in May 29,2013? List the names of these coins.",
        "evidence": "percentage that is higher than the price 1 hour ago refers to percent_change_1h>0; in May 29,2013 refers to date = '2013-05-29'",
        "gold": "SELECT T1.NAME FROM coins AS T1 INNER JOIN historical AS T2 ON T1.ID = T2.coin_id WHERE T2.DATE = '2013-05-29' AND T2.percent_change_1h > 0",
        "pred": "SELECT T1.`symbol` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T2.date = '2013-05-29' AND T2.price > T2.open",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`symbol` FROM coins AS T1 INNER JOIN historical AS T2 ON T1.`id` = T2.`coin_id` WHERE T2.date = '2013-05-29' AND T2.price > T2.open",
        "repair_result": 0
    },
    {
        "idx": 666,
        "db_id": "retail_world",
        "question": "How many employees have obtained a doctorate?",
        "evidence": "doctorate refers to TitleOfCourtesy = 'Dr.;",
        "gold": "SELECT COUNT(EmployeeID) FROM Employees WHERE TitleOfCourtesy = 'Dr.'",
        "pred": "SELECT COUNT(*) FROM Employees WHERE TitleOfCourtesy = 'Dr.'",
        "pred_result": "no such column: TitleOfCourtesy",
        "repair_sql": "SELECT COUNT(*) FROM Employees WHERE TitleOfCourtesy = 'Dr.'",
        "repair_result": "no such column: TitleOfCourtesy"
    },
    {
        "idx": 667,
        "db_id": "retail_world",
        "question": "To whom does Nancy Davolio report? Please give that employee's full name.",
        "evidence": "to whom refers to ReportsTo; full name = FirstName, LastName;",
        "gold": "SELECT FirstName, LastName FROM Employees WHERE EmployeeID = ( SELECT ReportsTo FROM Employees WHERE LastName = 'Davolio' AND FirstName = 'Nancy' )",
        "pred": "SELECT T2.`FirstName`, T2.`LastName` FROM Employees AS T1 INNER JOIN Employees AS T2 ON T1.`ReportsTo` = T2.`EmployeeID` WHERE T1.`FirstName` = 'Nancy' AND T1.`LastName` = 'Davolio'",
        "pred_result": "no such column: T1.ReportsTo",
        "repair_sql": "SELECT T2.`FirstName`, T2.`LastName` FROM Employees AS T1 INNER JOIN Employees AS T2 ON T1.`ReportsTo` = T2.`EmployeeID` WHERE T1.`FirstName` = 'Nancy' AND T1.`LastName` = 'Davolio'",
        "repair_result": "no such column: T1.ReportsTo"
    },
    {
        "idx": 668,
        "db_id": "retail_world",
        "question": "Which phone number should I call if I want to reach Nancy Davolio's home?",
        "evidence": "phone number of Nancy Davolio's home refers to HomePhone WHERE FirstName = 'Nancy' AND LastName = 'Davolio';",
        "gold": "SELECT HomePhone FROM Employees WHERE LastName = 'Davolio' AND FirstName = 'Nancy'",
        "pred": "SELECT `Phone` FROM Customers WHERE `CustomerID` = ( SELECT `CustomerID` FROM Orders WHERE `EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Nancy' AND `LastName` = 'Davolio' ) )",
        "pred_result": "no such column: Phone",
        "repair_sql": "SELECT c.`Phone` FROM Customers c JOIN Orders o ON c.`CustomerID` = o.`CustomerID` JOIN Employees e ON o.`EmployeeID` = e.`EmployeeID` WHERE e.`FirstName` = 'Nancy' AND e.`LastName` = 'Davolio'",
        "repair_result": "no such column: c.Phone"
    },
    {
        "idx": 669,
        "db_id": "retail_world",
        "question": "How many employees have Andrew Fuller as their direct supervisor?",
        "evidence": "direct supervisor refers to ReportsTo where the person being reported to is usually the direct supervisor of the reporter;",
        "gold": "SELECT COUNT(EmployeeID) FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew' )",
        "pred": "SELECT COUNT(*) FROM Employees WHERE `ReportsTo` = ( SELECT `EmployeeID` FROM Employees WHERE `LastName` = 'Fuller' AND `FirstName` = 'Andrew' )",
        "pred_result": "no such column: ReportsTo",
        "repair_sql": "SELECT COUNT(*) FROM Employees WHERE EmployeeID IN ( SELECT EmployeeID FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew' )",
        "repair_result": "no such column: ReportsTo"
    },
    {
        "idx": 670,
        "db_id": "retail_world",
        "question": "Which employee has the highest salary? Please give his or her full name.",
        "evidence": "highest salary refers to MAX(Salary); full name = FirstName, LastName;",
        "gold": "SELECT FirstName, LastName FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )",
        "pred": "SELECT FirstName || ' ' || LastName AS Full_Name FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )",
        "pred_result": "no such column: Salary",
        "repair_sql": "SELECT FirstName || ' ' || LastName AS Full_Name FROM Employees WHERE EmployeeID = ( SELECT EmployeeID FROM Employees ORDER BY Salary DESC LIMIT 1 )",
        "repair_result": "no such column: Salary"
    },
    {
        "idx": 671,
        "db_id": "retail_world",
        "question": "How much higher is the salary of Andrew Fuller than that of Nancy Davolio?",
        "evidence": "how much higher = SUBTRACT(SUM(Salary WHERE LastName = 'Fuller' and FirstName = 'Andrew'), SUM(Salary WHERE LastName = 'Davolio' and FirstName = 'Nancy'));",
        "gold": "SELECT ( SELECT Salary FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew' ) - ( SELECT Salary FROM Employees WHERE LastName = 'Davolio' AND FirstName = 'Nancy' ) AS RESULT",
        "pred": "SELECT (SELECT T2.`Salary` FROM Employees AS T1 INNER JOIN Salaries AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T1.`FirstName` = 'Andrew' AND T1.`LastName` = 'Fuller') - (SELECT T2.`Salary` FROM Employees AS T1 INNER JOIN Salaries AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T1.`FirstName` = 'Nancy' AND T1.`LastName` = 'Davolio') AS Salary_Difference",
        "pred_result": "no such table: Salaries",
        "repair_sql": "SELECT (SELECT T2.`Salary` FROM Employees AS T1 WHERE T1.`FirstName` = 'Andrew' AND T1.`LastName` = 'Fuller') - (SELECT T2.`Salary` FROM Employees AS T1 WHERE T1.`FirstName` = 'Nancy' AND T1.`LastName` = 'Davolio') AS Salary_Difference",
        "repair_result": "no such column: T2.Salary"
    },
    {
        "idx": 672,
        "db_id": "retail_world",
        "question": "Among the employees working as Sales Representatives, how many of them are located in the UK?",
        "evidence": "Sales Representatives refers to Title = 'Sales Representative'; UK refers to Country = 'UK';",
        "gold": "SELECT COUNT(Country) FROM Employees WHERE Title = 'Sales Representative' AND Country = 'UK'",
        "pred": "SELECT COUNT(T1.`EmployeeID`) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN Customers AS T3 ON T2.`CustomerID` = T3.`CustomerID` WHERE T1.`Title` = 'Sales Representative' AND T3.`Country` = 'UK'",
        "pred_result": "no such column: T1.Title",
        "repair_sql": "SELECT COUNT(T1.`EmployeeID`) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN Customers AS T3 ON T2.`CustomerID` = T3.`CustomerID` WHERE T1.`Title` = 'Sales Representative' AND T3.`Country` = 'UK'",
        "repair_result": "no such column: T1.Title"
    },
    {
        "idx": 673,
        "db_id": "retail_world",
        "question": "Which employee is in charge of the sales in Hollis? Please give the employee's full name.",
        "evidence": "Hollis refers to TerritoryDescription = 'Hollis'; full name = FirstName, LastName;",
        "gold": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Hollis'",
        "pred": "SELECT T5.`FirstName` || ' ' || T5.`LastName` AS Full_Name FROM Orders AS T1 INNER JOIN Employees AS T5 ON T1.`EmployeeID` = T5.`EmployeeID` WHERE T1.`TerritoryDescription` = 'Hollis'",
        "pred_result": "no such column: T1.TerritoryDescription",
        "repair_sql": "SELECT T5.`FirstName` || ' ' || T5.`LastName` AS Full_Name FROM Orders AS T1 INNER JOIN Employees AS T5 ON T1.`EmployeeID` = T5.`EmployeeID` WHERE T1.`EmployeeID` IN ( SELECT T2.`EmployeeID` FROM Employees AS T2 WHERE T2.`EmployeeID` = T5.`EmployeeID` )",
        "repair_result": "no such table: EmployeeTerritories"
    },
    {
        "idx": 674,
        "db_id": "retail_world",
        "question": "The sales of how many territories is Nancy Davolio in charge of?",
        "evidence": "",
        "gold": "SELECT COUNT(T2.TerritoryID) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio'",
        "pred": "SELECT COUNT(DISTINCT `TerritoryID`) FROM Territories WHERE `EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Nancy' AND `LastName` = 'Davolio' )",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT COUNT(DISTINCT `TerritoryID`) FROM EmployeeTerritories WHERE `EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Nancy' AND `LastName` = 'Davolio' )",
        "repair_result": "no such table: EmployeeTerritories"
    },
    {
        "idx": 675,
        "db_id": "retail_world",
        "question": "Please list the names of all the territories whose sales are taken in charge by Nancy Davolio.",
        "evidence": "names of all territories refers to TerritoryDescription;",
        "gold": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio'",
        "pred": "SELECT DISTINCT T3.`TerritoryDescription` FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN Customers AS T3 ON T1.`CustomerID` = T3.`CustomerID` WHERE T2.`FirstName` = 'Nancy' AND T2.`LastName` = 'Davolio'",
        "pred_result": "no such column: T3.TerritoryDescription",
        "repair_sql": "SELECT DISTINCT T4.`TerritoryDescription` FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN Customers AS T3 ON T1.`CustomerID` = T3.`CustomerID` INNER JOIN Territories AS T4 ON T3.`TerritoryID` = T4.`TerritoryID` WHERE T2.`FirstName` = 'Nancy' AND T2.`LastName` = 'Davolio'",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 676,
        "db_id": "retail_world",
        "question": "The sales of how many territories in total do the employees in London take charge of?",
        "evidence": "London refers to city = 'London';",
        "gold": "SELECT COUNT(T2.TerritoryID) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.City = 'London'",
        "pred": "SELECT COUNT(DISTINCT `TerritoryID`) FROM EmployeeTerritories WHERE `EmployeeID` IN ( SELECT `EmployeeID` FROM Employees WHERE `City` = 'London' )",
        "pred_result": "no such table: EmployeeTerritories",
        "repair_sql": "SELECT COUNT(DISTINCT `TerritoryID`) FROM Employees JOIN EmployeeTerritories ON Employees.EmployeeID = EmployeeTerritories.EmployeeID WHERE `City` = 'London'",
        "repair_result": "no such table: EmployeeTerritories"
    },
    {
        "idx": 677,
        "db_id": "retail_world",
        "question": "Please list the territories whose sales are taken in charge by the employees who report to Andrew Fuller.",
        "evidence": "territories refers to TerritoryDescription;",
        "gold": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.ReportsTo = ( SELECT EmployeeID FROM Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller' )",
        "pred": "SELECT DISTINCT T3.`TerritoryDescription` FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN OrderDetails AS T3 ON T2.`OrderID` = T3.`OrderID` WHERE T1.`LastName` = 'Fuller' AND T1.`FirstName` = 'Andrew'",
        "pred_result": "no such column: T3.TerritoryDescription",
        "repair_sql": "SELECT DISTINCT T4.`TerritoryDescription` FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN OrderDetails AS T3 ON T2.`OrderID` = T3.`OrderID` INNER JOIN Territories AS T4 ON T3.`TerritoryID` = T4.`TerritoryID` WHERE T1.`LastName` = 'Fuller' AND T1.`FirstName` = 'Andrew'",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 678,
        "db_id": "retail_world",
        "question": "How many employees in the UK takes charge of the sales in over 4 territories?",
        "evidence": "UK refers to Country = 'UK'; employees with over 4 territories refers to EmployeeID WHERE TerritoryID > 4;",
        "gold": "SELECT COUNT(COUNTEID) FROM ( SELECT T1.EmployeeID AS COUNTEID FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.Country = 'UK' GROUP BY T1.EmployeeID HAVING COUNT(T2.TerritoryID) > 4 ) T1",
        "pred": "SELECT COUNT(*) FROM ( SELECT T1.`EmployeeID`, COUNT(T2.`TerritoryID`) AS num_territories FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T1.`Country` = 'UK' GROUP BY T1.`EmployeeID` HAVING num_territories > 4 ) AS subquery",
        "pred_result": "no such table: EmployeeTerritories",
        "repair_sql": "SELECT COUNT(*) FROM Employees WHERE Country = 'UK' AND EmployeeID IN ( SELECT EmployeeID FROM EmployeeTerritories GROUP BY EmployeeID HAVING COUNT(TerritoryID) > 4 )",
        "repair_result": "no such table: EmployeeTerritories"
    },
    {
        "idx": 679,
        "db_id": "retail_world",
        "question": "How many territories are there in the Eastern Region?",
        "evidence": "Eastern Region refers to RegionDescription = 'Eastern';",
        "gold": "SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern'",
        "pred": "SELECT COUNT(TerritoryID) FROM Territories WHERE RegionID = ( SELECT RegionID FROM Regions WHERE RegionDescription = 'Eastern' )",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT COUNT(TerritoryID) FROM Territories WHERE RegionID IN ( SELECT RegionID FROM Regions WHERE RegionDescription = 'Eastern' )",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 680,
        "db_id": "retail_world",
        "question": "Please list all the territories in the Eastern Region.",
        "evidence": "territories refers to TerritoryDescription; Eastern Region refers to RegionDescription = 'Eastern';",
        "gold": "SELECT DISTINCT T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern'",
        "pred": "SELECT TerritoryDescription FROM Territories WHERE RegionID = ( SELECT RegionID FROM Regions WHERE RegionDescription = 'Eastern' )",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT TerritoryDescription FROM Territories WHERE RegionID = ( SELECT RegionID FROM Regions WHERE RegionDescription = 'Eastern' )",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 681,
        "db_id": "retail_world",
        "question": "How many employees in total are in charge of the sales in the Eastern Region?",
        "evidence": "Eastern Region refers to RegionDescription = 'Eastern';",
        "gold": "SELECT COUNT(T.EmployeeID) FROM ( SELECT T3.EmployeeID FROM Region AS T1 INNER JOIN Territories AS T2 ON T1.RegionID = T2.RegionID INNER JOIN EmployeeTerritories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.RegionDescription = 'Eastern' GROUP BY T3.EmployeeID ) T",
        "pred": "SELECT COUNT(T1.`EmployeeID`) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN Shippers AS T3 ON T2.`ShipperID` = T3.`ShipperID` WHERE T3.`ShipperName` = 'Speedy Express'",
        "pred_result": "no such table: Region",
        "repair_sql": "SELECT COUNT(T1.`EmployeeID`) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN Shippers AS T3 ON T2.`ShipperID` = T3.`ShipperID` WHERE T3.`ShipperName` = 'Speedy Express'",
        "repair_result": "no such table: Region"
    },
    {
        "idx": 682,
        "db_id": "retail_world",
        "question": "Please list the home phone numbers of the employees who are in charge of the sales in the territories in the Eastern Region.",
        "evidence": "home phone numbers refers to HomePhone; Eastern Region refers to RegionDescription = 'Eastern';",
        "gold": "SELECT T1.HomePhone FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T4.RegionDescription = 'Eastern ' GROUP BY T1.HomePhone",
        "pred": "SELECT T2.`HomePhone` FROM Employees AS T2 WHERE T2.`EmployeeID` IN ( SELECT T3.`EmployeeID` FROM EmployeeTerritories AS T1 INNER JOIN Employees AS T3 ON T1.`EmployeeID` = T3.`EmployeeID` WHERE T1.`TerritoryID` IN ( SELECT T4.`TerritoryID` FROM Territories AS T4 WHERE T4.`RegionDescription` = 'Eastern' ) )",
        "pred_result": "no such table: EmployeeTerritories",
        "repair_sql": "SELECT T2.`HomePhone` FROM Employees AS T2 JOIN EmployeeTerritories AS T1 ON T1.`EmployeeID` = T2.`EmployeeID` JOIN Territories AS T4 ON T1.`TerritoryID` = T4.`TerritoryID` WHERE T4.`RegionDescription` = 'Eastern'",
        "repair_result": "no such table: EmployeeTerritories"
    },
    {
        "idx": 683,
        "db_id": "retail_world",
        "question": "How many more territories are there in than Eastern Region than in the Southern Region?",
        "evidence": "how many more = SUBTRACT(SUM(RegionDescription = 'Eastern'), SUM(RegionDescription = 'Southern')); Eastern Region refers to RegionDescription = 'Eastern'; Southern Region refers to RegionDescription = 'Southern';",
        "gold": "SELECT ( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern' ) - ( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Southern' ) AS Calu",
        "pred": "SELECT ( SELECT COUNT(*) FROM Territories WHERE RegionID = ( SELECT RegionID FROM Regions WHERE RegionDescription = 'Eastern' ) ) - ( SELECT COUNT(*) FROM Territories WHERE RegionID = ( SELECT RegionID FROM Regions WHERE RegionDescription = 'Southern' ) ) AS Difference",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT ( SELECT COUNT(*) FROM Territories WHERE RegionID = ( SELECT RegionID FROM Regions WHERE RegionDescription = 'Eastern' ) ) - ( SELECT COUNT(*) FROM Territories WHERE RegionID = ( SELECT RegionID FROM Regions WHERE RegionDescription = 'Southern' ) ) AS Difference",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 684,
        "db_id": "retail_world",
        "question": "Please list the names of all the products ordered in order no. 10248.",
        "evidence": "names of the products refers to ProductName; order no. refers to OrderID;",
        "gold": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10248",
        "pred": "SELECT `ProductName` FROM Products WHERE `ProductID` IN ( SELECT `ProductID` FROM OrderDetails WHERE `OrderID` = 10248 )",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT `ProductName` FROM Products WHERE `ProductID` IN ( SELECT `ProductID` FROM OrderDetails WHERE `OrderID` = 10248 )",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 685,
        "db_id": "retail_world",
        "question": "What is the quantity of Ikura ordered in order no. 10273?",
        "evidence": "Ikura refers to ProductName = 'Ikura'; order no. refers to OrderID;",
        "gold": "SELECT T2.Quantity FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10273 AND T1.ProductName = 'Ikura'",
        "pred": "SELECT `Quantity` FROM OrderDetails WHERE `ProductID` = ( SELECT `ProductID` FROM Products WHERE `ProductName` = 'Ikura' ) AND `OrderID` = 10273",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT `Quantity` FROM OrderDetails WHERE `ProductID` = ( SELECT `ProductID` FROM Products WHERE `ProductName` = 'Ikura' ) AND `OrderID` = 10273",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 686,
        "db_id": "retail_world",
        "question": "What is the total price of Ikura ordered in order no. 10273?",
        "evidence": "total price = MULTIPLY(UnitPrice, Quantity); Ikura refers to ProductName = 'Ikura'; order no. refers to OrderID;",
        "gold": "SELECT T2.UnitPrice * T2.Quantity FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10273 AND T1.ProductName = 'Ikura'",
        "pred": "SELECT SUM(P.`Price` * OD.`Quantity`) AS Total_Price FROM Products AS P INNER JOIN OrderDetails AS OD ON P.`ProductID` = OD.`ProductID` INNER JOIN Orders AS O ON OD.`OrderID` = O.`OrderID` WHERE P.`ProductName` = 'Ikura' AND O.`OrderID` = 10273",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT SUM(P.`Price` * OD.`Quantity`) AS Total_Price FROM Products AS P INNER JOIN OrderDetails AS OD ON P.`ProductID` = OD.`ProductID` INNER JOIN Orders AS O ON OD.`OrderID` = O.`OrderID` WHERE P.`ProductName` = 'Ikura' AND O.`OrderID` = 10273",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 687,
        "db_id": "retail_world",
        "question": "What is the total production of the product that is ordered in the highest quantity in order no. 10248?",
        "evidence": "total production of the product = SUM(units in stock, units on order); order no. refers to OrderID;",
        "gold": "SELECT T1.UnitsInStock + T1.UnitsOnOrder FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10248 ORDER BY T2.Quantity DESC LIMIT 1",
        "pred": "SELECT SUM(T2.`UnitsInStock`, T2.`UnitsOnOrder`) AS TotalProduction FROM Products AS T2 WHERE T2.`ProductID` = ( SELECT T1.`ProductID` FROM OrderDetails AS T1 WHERE T1.`OrderID` = 10248 ORDER BY T1.`Quantity` DESC LIMIT 1 )",
        "pred_result": "no such column: T2.UnitsInStock",
        "repair_sql": "SELECT SUM(P.`UnitsInStock`, P.`UnitsOnOrder`) AS TotalProduction FROM Products AS P JOIN OrderDetails AS OD ON P.`ProductID` = OD.`ProductID` WHERE OD.`OrderID` = 10248 ORDER BY OD.`Quantity` DESC LIMIT 1",
        "repair_result": "no such column: P.UnitsInStock"
    },
    {
        "idx": 688,
        "db_id": "retail_world",
        "question": "Of all the products ordered in order no. 10248, which product has the highest user satisfaction?",
        "evidence": "order no. refers to OrderID; highest user satisfaction refers to MAX(ReorderLevel);",
        "gold": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10248 ORDER BY T1.ReorderLevel DESC LIMIT 1",
        "pred": "SELECT T3.`ProductName` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` WHERE T1.`OrderID` = 10248 AND T3.`ReorderLevel` = ( SELECT MAX(T4.`ReorderLevel`) FROM Products AS T4 WHERE T4.`ProductID` IN ( SELECT T2.`ProductID` FROM Orders AS T5 INNER JOIN OrderDetails AS T6 ON T5.`OrderID` = T6.`OrderID` WHERE T5.`OrderID` = 10248 ) )",
        "pred_result": "no such column: T3.ReorderLevel",
        "repair_sql": "SELECT T3.`ProductName` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` WHERE T1.`OrderID` = 10248 AND T3.`ProductID` = ( SELECT T4.`ProductID` FROM Products AS T4 WHERE T4.`ReorderLevel` = ( SELECT MAX(T5.`ReorderLevel`) FROM Products AS T5 WHERE T5.`ProductID` IN ( SELECT T6.`ProductID` FROM Orders AS T7 INNER JOIN OrderDetails AS T6 ON T7.`OrderID` = T6.`OrderID` WHERE T7.`OrderID` = 10248 ) ) )",
        "repair_result": "no such column: T4.ReorderLevel"
    },
    {
        "idx": 689,
        "db_id": "retail_world",
        "question": "How many orders have asked for the product Tofu?",
        "evidence": "product refers to ProductName;",
        "gold": "SELECT COUNT(T2.OrderID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Tofu'",
        "pred": "SELECT COUNT(DISTINCT T1.`OrderID`) FROM OrderDetails AS T1 INNER JOIN Products AS T2 ON T1.`ProductID` = T2.`ProductID` WHERE T2.`ProductName` = 'Tofu'",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT COUNT(DISTINCT T1.`OrderID`) FROM OrderDetails AS T1 INNER JOIN Products AS T2 ON T1.`ProductID` = T2.`ProductID` WHERE T2.`ProductName` = 'Tofu'",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 690,
        "db_id": "retail_world",
        "question": "Please list the IDs of the orders with a product whose production is not continuous.",
        "evidence": "IDs of the orders refers to OrderID; production is not continuous refers to Discontinued = 1;",
        "gold": "SELECT T2.OrderID FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Discontinued = 1",
        "pred": "SELECT DISTINCT T1.`OrderID` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` WHERE T2.`ProductID` IN ( SELECT DISTINCT `ProductID` FROM Products WHERE Discontinued = 1 )",
        "pred_result": "no such column: Discontinued",
        "repair_sql": "SELECT DISTINCT T1.`OrderID` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` WHERE T3.`Discontinued` = 1",
        "repair_result": "no such column: T3.Discontinued"
    },
    {
        "idx": 691,
        "db_id": "retail_world",
        "question": "Of all the orders that have ordered Ikura, how many of them enjoys a unit price that's lower than its standard unit price?",
        "evidence": "Ikura refers to ProductName = 'Ikura'; ordered unit price that's lower than its standard unit price refers to \"Order Details\".UnitPrice < \"Product\".UnitPrice;",
        "gold": "SELECT COUNT(T2.OrderID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Ikura' AND T2.UnitPrice < T1.UnitPrice",
        "pred": "SELECT COUNT(*) FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` WHERE T3.`ProductName` = 'Ikura' AND T2.`UnitPrice` < ( SELECT `Price` FROM Products WHERE `ProductName` = 'Ikura' )",
        "pred_result": "no such column: T2.UnitPrice",
        "repair_sql": "SELECT COUNT(*) FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T3.ProductName = 'Ikura' AND T2.UnitPrice < ( SELECT Price FROM Products WHERE ProductName = 'Ikura' )",
        "repair_result": "no such column: T2.UnitPrice"
    },
    {
        "idx": 692,
        "db_id": "retail_world",
        "question": "What is the name of the supplier company for Aniseed Syrup?",
        "evidence": "name of the supplier refers to CompanyName; Aniseed Syrup refers to ProductName = 'Aniseed Syrup';",
        "gold": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Aniseed Syrup'",
        "pred": "SELECT `SupplierName` FROM Suppliers WHERE `SupplierID` = ( SELECT `SupplierID` FROM Products WHERE `ProductName` = 'Aniseed Syrup' )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT `SupplierName` FROM Suppliers WHERE `SupplierID` = ( SELECT `SupplierID` FROM Products WHERE `ProductName` = 'Aniseed Syrup' )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 693,
        "db_id": "retail_world",
        "question": "Please list the names of all the products whose supplier is in Japan.",
        "evidence": "names of the products refers to ProductName; Japan refers to Country = 'Japan';",
        "gold": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Japan'",
        "pred": "SELECT `ProductName` FROM Products WHERE `SupplierID` IN ( SELECT `SupplierID` FROM Suppliers WHERE `Country` = 'Japan' )",
        "pred_result": 1,
        "repair_sql": "SELECT `ProductName` FROM Products WHERE `SupplierID` IN ( SELECT `SupplierID` FROM Suppliers WHERE `Country` = 'Japan' )",
        "repair_result": 1
    },
    {
        "idx": 694,
        "db_id": "retail_world",
        "question": "Please list the phone numbers of the suppliers of the products that have a higher units on order than units in stock.",
        "evidence": "UnitsInStock < UnitsOnOrder;",
        "gold": "SELECT DISTINCT T2.Phone FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitsInStock < T1.UnitsOnOrder",
        "pred": "SELECT T3.`Phone` FROM Suppliers AS T3 INNER JOIN ( SELECT T1.`SupplierID` FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.`ProductID` = T2.`ProductID` WHERE T1.`UnitsOnOrder` > T1.`UnitsInStock` ) AS T4 ON T3.`SupplierID` = T4.`SupplierID`",
        "pred_result": "no such column: T1.UnitsOnOrder",
        "repair_sql": "SELECT T3.`Phone` FROM Suppliers AS T3 INNER JOIN ( SELECT T1.`SupplierID` FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.`ProductID` = T2.`ProductID` WHERE T2.`Quantity` > T1.`UnitsInStock` ) AS T4 ON T3.`SupplierID` = T4.`SupplierID`",
        "repair_result": "no such column: T1.UnitsInStock"
    },
    {
        "idx": 695,
        "db_id": "retail_world",
        "question": "Among the products that are no longer in continuous production, how many of them have their supplier in the USA?",
        "evidence": "no longer continuous refers to Discontinued = 1; USA refers to Country = 'USA';",
        "gold": "SELECT COUNT(T1.Discontinued) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'USA' AND T1.Discontinued = 1",
        "pred": "SELECT COUNT(*) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.Discontinued = 1 AND T2.Country = 'USA'",
        "pred_result": "no such column: T1.Discontinued",
        "repair_sql": "SELECT COUNT(*) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductID IN ( SELECT ProductID FROM Products WHERE Discontinued = 1 ) AND T2.Country = 'USA'",
        "repair_result": "no such column: Discontinued"
    },
    {
        "idx": 696,
        "db_id": "retail_world",
        "question": "Who is the supplier of the product with the highest unit price?",
        "evidence": "supplier of the product refers to CompanyName; highest unit price refers to MAX(UnitPrice);",
        "gold": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )",
        "pred": "SELECT T2.`SupplierName` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`Price` = ( SELECT MAX(`Price`) FROM Products )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT T2.`SupplierName` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`Price` = ( SELECT MAX(`Price`) FROM Products )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 697,
        "db_id": "retail_world",
        "question": "What is the average salary of the employees who takes charge of the sales of over 4 territories?",
        "evidence": "average salary = DIVIDE(SUM(Salary), COUNT(EmployeeID)); employees who takes charge of over 4 territories refers to EmployeeID WHERE COUNT(TerritoryID) > 4;",
        "gold": "SELECT AVG(T1.Salary) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.EmployeeID HAVING COUNT(T2.TerritoryID) > 4",
        "pred": "SELECT AVG(Salary) FROM Employees WHERE EmployeeID IN ( SELECT EmployeeID FROM EmployeeTerritories GROUP BY EmployeeID HAVING COUNT(TerritoryID) > 4 )",
        "pred_result": "no such table: EmployeeTerritories",
        "repair_sql": "SELECT AVG(Salary) FROM Employees WHERE EmployeeID IN ( SELECT EmployeeID FROM Orders GROUP BY EmployeeID HAVING COUNT(DISTINCT TerritoryID) > 4 )",
        "repair_result": "no such column: Salary"
    },
    {
        "idx": 698,
        "db_id": "retail_world",
        "question": "How much lower in percentage is the unit price of Ikura in order no. 10273 than its standard unit price?",
        "evidence": "how much lower in percentage = MULTIPLY(DIVIDE(SUBTRACT(Products.UnitPrice, Order Details.UnitPrice), Products.UnitPrice), 100); Ikura refers to ProductName = 'Ikura'; order no. refers to OrderID;",
        "gold": "SELECT CAST((T1.UnitPrice - T2.UnitPrice) AS REAL) * 100 / T1.UnitPrice FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10273 AND T1.ProductName = 'Ikura'",
        "pred": "SELECT ((P.`Price` - OD.`UnitPrice`) / P.`Price`) * 100 AS LowerPercentage FROM Products AS P INNER JOIN OrderDetails AS OD ON P.`ProductID` = OD.`ProductID` INNER JOIN Orders AS O ON OD.`OrderID` = O.`OrderID` WHERE P.`ProductName` = 'Ikura' AND O.`OrderID` = 10273",
        "pred_result": "no such column: OD.UnitPrice",
        "repair_sql": "SELECT ((P.`Price` - OD.`UnitPrice`) / P.`Price`) * 100 AS LowerPercentage FROM Products AS P INNER JOIN OrderDetails AS OD ON P.`ProductID` = OD.`ProductID` WHERE P.`ProductName` = 'Ikura' AND OD.`OrderID` = 10273",
        "repair_result": "no such column: OD.UnitPrice"
    },
    {
        "idx": 699,
        "db_id": "retail_world",
        "question": "What is the average quantity of Ikura ordered in one order?",
        "evidence": "average = AVG(Quantity); Ikura refers to ProductName = 'Ikura';",
        "gold": "SELECT CAST(SUM(T2.Quantity) AS REAL) / COUNT(T2.OrderID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Ikura'",
        "pred": "SELECT AVG(`Quantity`) FROM OrderDetails WHERE `ProductID` = ( SELECT `ProductID` FROM Products WHERE `ProductName` = 'Ikura' )",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT AVG(`Quantity`) FROM OrderDetails WHERE `ProductID` = ( SELECT `ProductID` FROM Products WHERE `ProductName` = 'Ikura' )",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 700,
        "db_id": "retail_world",
        "question": "Among the products ordered in order no. 10248, which product has the biggest ratio of units on order to units in stock?",
        "evidence": "order no. refers to OrderID; biggest ratio = MAX(DIVIDE(UnitsOnOrder, UnitsInStock));",
        "gold": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10248 ORDER BY T1.UnitsOnOrder / T1.UnitsInStock DESC LIMIT 1",
        "pred": "SELECT T1.`ProductName` FROM Products AS T1 INNER JOIN ( SELECT T1.`ProductID`, T1.`Unit`, MAX(CAST(T2.`Quantity` AS REAL) / T1.`UnitsInStock`) AS ratio FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.`ProductID` = T2.`ProductID` WHERE T2.`OrderID` = 10248 GROUP BY T1.`ProductID` ) AS T3 ON T1.`ProductID` = T3.`ProductID` WHERE CAST(T3.`ratio` AS REAL) = ( SELECT MAX(CAST(T4.`Quantity` AS REAL) / T4.`UnitsInStock`) FROM OrderDetails AS T4 WHERE T4.`OrderID` = 10248 )",
        "pred_result": "no such column: T1.UnitsInStock",
        "repair_sql": "SELECT T1.`ProductName` FROM Products AS T1 INNER JOIN ( SELECT T1.`ProductID`, T1.`UnitsInStock`, MAX(CAST(T2.`Quantity` AS REAL) / T1.`UnitsInStock`) AS ratio FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.`ProductID` = T2.`ProductID` WHERE T2.`OrderID` = 10248 GROUP BY T1.`ProductID` ) AS T3 ON T1.`ProductID` = T3.`ProductID` WHERE T3.`ratio` = ( SELECT MAX(CAST(T4.`Quantity` AS REAL) / T5.`UnitsInStock`) FROM OrderDetails AS T4 JOIN Products AS T5 ON T4.`ProductID` = T5.`ProductID` WHERE T4.`OrderID` = 10248 )",
        "repair_result": "no such column: T1.UnitsInStock"
    },
    {
        "idx": 701,
        "db_id": "retail_world",
        "question": "Give the full name of the youngest employee.",
        "evidence": "full name = FirstName, LastName; youngest refers to latest BirthDate;",
        "gold": "SELECT FirstName, LastName FROM Employees WHERE BirthDate = ( SELECT MAX(BirthDate) FROM Employees )",
        "pred": "SELECT `FirstName`, `LastName` FROM Employees WHERE `BirthDate` = ( SELECT MIN(`BirthDate`) FROM Employees )",
        "pred_result": 0,
        "repair_sql": "SELECT `FirstName`, `LastName` FROM Employees WHERE `BirthDate` = ( SELECT MIN(`BirthDate`) FROM Employees )",
        "repair_result": 0
    },
    {
        "idx": 702,
        "db_id": "retail_world",
        "question": "Who is the newest hired employee? Give the full name.",
        "evidence": "newest hired refers to latest HireDate; full name = FirstName, LastName;",
        "gold": "SELECT FirstName, LastName FROM Employees WHERE HireDate = ( SELECT MAX(HireDate) FROM Employees )",
        "pred": "SELECT `FirstName`, `LastName` FROM Employees WHERE `HireDate` = ( SELECT MAX(`HireDate`) FROM Employees )",
        "pred_result": "no such column: HireDate",
        "repair_sql": "SELECT FirstName, LastName FROM Employees ORDER BY HireDate DESC LIMIT 1;",
        "repair_result": "no such column: HireDate"
    },
    {
        "idx": 703,
        "db_id": "retail_world",
        "question": "Provide the number of orders that were handled by Michael Suyama.",
        "evidence": "",
        "gold": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'",
        "pred": "SELECT COUNT(DISTINCT OD.`OrderID`) AS num_orders FROM Orders AS O INNER JOIN Employees AS E ON O.`EmployeeID` = E.`EmployeeID` INNER JOIN OrderDetails AS OD ON O.`OrderID` = OD.`OrderID` WHERE E.`FirstName` = 'Michael' AND E.`LastName` = 'Suyama'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT OD.`OrderID`) AS num_orders FROM Orders AS O INNER JOIN Employees AS E ON O.`EmployeeID` = E.`EmployeeID` INNER JOIN OrderDetails AS OD ON O.`OrderID` = OD.`OrderID` WHERE E.`FirstName` = 'Michael' AND E.`LastName` = 'Suyama'",
        "repair_result": 1
    },
    {
        "idx": 704,
        "db_id": "retail_world",
        "question": "Give the name of the territory where Mr. Robert King works.",
        "evidence": "name of territory refers to TerritoryDescription; Mr. refers to TitleOfCourtesy = 'Mr';",
        "gold": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.TitleOfCourtesy = 'Mr.' AND T1.FirstName = 'Robert' AND T1.LastName = 'King'",
        "pred": "SELECT T2.`TerritoryDescription` FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T1.`LastName` = 'King' AND T1.`FirstName` = 'Robert'",
        "pred_result": "no such table: EmployeeTerritories",
        "repair_sql": "SELECT T3.`TerritoryDescription` FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN Territories AS T3 ON T2.`TerritoryID` = T3.`TerritoryID` WHERE T1.`LastName` = 'King' AND T1.`FirstName` = 'Robert'",
        "repair_result": "no such table: EmployeeTerritories"
    },
    {
        "idx": 705,
        "db_id": "retail_world",
        "question": "Which territory does Ms. Laura Callahan's direct supervisor work in? Give the name of the territory.",
        "evidence": "Ms. refers to TitleOfCourtesy = 'Ms'; ReportsTo\u2019 represents a hierarchical relationship where the person being reported to is usually the direct supervisor of the reporter; name of the territory refers to TerritoryDescription;",
        "gold": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.EmployeeID = ( SELECT ReportsTo FROM Employees WHERE TitleOfCourtesy = 'Ms.' AND FirstName = 'Laura' AND LastName = 'Callahan' )",
        "pred": "SELECT `TerritoryDescription` FROM Territories WHERE `TerritoryID` = ( SELECT `TerritoryID` FROM EmployeeTerritories WHERE `EmployeeID` = ( SELECT `ReportsTo` FROM Employees WHERE `EmployeeID` = ( SELECT `ReportsTo` FROM Employees WHERE `FirstName` = 'Laura' AND `LastName` = 'Callahan' ) ) )",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT t.`TerritoryDescription` FROM Territories t JOIN EmployeeTerritories et ON t.`TerritoryID` = et.`TerritoryID` JOIN Employees e1 ON et.`EmployeeID` = e1.`EmployeeID` JOIN Employees e2 ON e1.`ReportsTo` = e2.`EmployeeID` WHERE e2.`FirstName` = 'Laura' AND e2.`LastName` = 'Callahan'",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 706,
        "db_id": "retail_world",
        "question": "Who is in charge of the \"Santa Monica\" territory? Give the full name.",
        "evidence": "Santa Monica refers to TerritoryDescription = 'Santa Monica'; full name = FirstName, MiddleName, LastName;",
        "gold": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Santa Monica'",
        "pred": "SELECT T1.`FirstName` || ' ' || T1.`MiddleName` || ' ' || T1.`LastName` AS Full_Name FROM Employees AS T1 INNER JOIN Territories AS T2 ON T1.`TerritoryID` = T2.`TerritoryID` WHERE T2.`TerritoryDescription` = 'Santa Monica'",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT T1.`FirstName` || ' ' || T1.`LastName` AS Full_Name FROM Employees AS T1 JOIN EmployeeTerritories AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` JOIN Territories AS T3 ON T2.`TerritoryID` = T3.`TerritoryID` WHERE T3.`TerritoryDescription` = 'Santa Monica'",
        "repair_result": "no such table: EmployeeTerritories"
    },
    {
        "idx": 707,
        "db_id": "retail_world",
        "question": "Give the home phone number of the employee who is in charge of \"Savannah\" territory.",
        "evidence": "home phone number refers to HomePhone; Savannah refers to TerritoryDescription = 'Savannah';",
        "gold": "SELECT T1.HomePhone FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Savannah'",
        "pred": "SELECT T1.`HomePhone` FROM Employees AS T1 WHERE T1.`TerritoryDescription` = 'Savannah'",
        "pred_result": "no such column: T1.HomePhone",
        "repair_sql": "SELECT T1.`HomePhone` FROM Employees AS T1 JOIN Territories AS T2 ON T1.`TerritoryID` = T2.`TerritoryID` WHERE T2.`TerritoryDescription` = 'Savannah'",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 708,
        "db_id": "retail_world",
        "question": "For the order from \"HILAA\" on 1997/12/25, what was the total quantity of the products in that order?",
        "evidence": "HILLA refers to CustomerID = 'HILAA'; on 1997/12/25 refers to OrderDate = '1997/12/25';",
        "gold": "SELECT SUM(T2.Quantity) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID WHERE T1.CustomerID = 'HILAA' AND T1.OrderDate LIKE '1997-12-25%'",
        "pred": "SELECT SUM(`Quantity`) FROM OrderDetails WHERE `OrderID` = ( SELECT `OrderID` FROM Orders WHERE `CustomerID` = ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'HILAA' ) AND `OrderDate` = '1997-12-25' )",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT SUM(`Quantity`) FROM OrderDetails JOIN Orders ON OrderDetails.OrderID = Orders.OrderID JOIN Customers ON Orders.CustomerID = Customers.CustomerID WHERE Customers.CustomerName = 'HILAA' AND Orders.OrderDate = '1997-12-25'",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 709,
        "db_id": "retail_world",
        "question": "For the order paying the highest freight, how many kinds of products does it contain?",
        "evidence": "highest freight refers to MAX(Freight); kinds of products refers to ProductID;",
        "gold": "SELECT COUNT(T2.ProductID) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID WHERE T1.Freight = ( SELECT MAX(Freight) FROM Orders ) GROUP BY T1.OrderID",
        "pred": "SELECT COUNT(DISTINCT T2.`ProductID`) FROM OrderDetails AS T2 WHERE T2.`OrderID` = ( SELECT T1.`OrderID` FROM Orders AS T1 ORDER BY T1.`Freight` DESC LIMIT 1 )",
        "pred_result": "no such column: T1.Freight",
        "repair_sql": "SELECT COUNT(DISTINCT T2.`ProductID`) FROM OrderDetails AS T2 JOIN Orders AS T1 ON T2.`OrderID` = T1.`OrderID` ORDER BY T1.`Freight` DESC LIMIT 1",
        "repair_result": "no such column: T1.Freight"
    },
    {
        "idx": 710,
        "db_id": "retail_world",
        "question": "Tell the name of the shipper company for the order No.10585.",
        "evidence": "name of the shipper company refers to ShipName; order No. refers to OrderID;",
        "gold": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10585",
        "pred": "SELECT ShipperName FROM Shippers INNER JOIN Orders ON Shippers.ShipperID = Orders.ShipperID WHERE Orders.OrderID = 10585",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT ShipperName FROM Shippers JOIN Orders ON Shippers.ShipperID = Orders.ShipperID WHERE Orders.OrderID = 10585",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 711,
        "db_id": "retail_world",
        "question": "Give the number of orders that were shipped by \"Federal Shipping\".",
        "evidence": "Federal Shipping refers to CompanyName = 'Federal Shipping';",
        "gold": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping'",
        "pred": "SELECT COUNT(*) FROM Orders WHERE `ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'Federal Shipping' )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT COUNT(*) FROM Orders WHERE `ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'Federal Shipping' )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 712,
        "db_id": "retail_world",
        "question": "How many kinds of products are there in the the category of \"dairy products\"?",
        "evidence": "kinds of products refers to ProductID; category refers to CategoryName;",
        "gold": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Dairy Products'",
        "pred": "SELECT COUNT(ProductID) FROM Products WHERE CategoryID = ( SELECT CategoryID FROM Categories WHERE CategoryName = 'Dairy Products' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(ProductID) FROM Products WHERE CategoryID = ( SELECT CategoryID FROM Categories WHERE CategoryName = 'Dairy Products' )",
        "repair_result": 1
    },
    {
        "idx": 713,
        "db_id": "retail_world",
        "question": "Which category does \"tofu\" belong to?",
        "evidence": "category refers to CategoryName; tofu refers to ProductName = 'Tofu';",
        "gold": "SELECT T2.CategoryName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.ProductName = 'Tofu'",
        "pred": "SELECT C.`CategoryName` FROM Categories AS C INNER JOIN Products AS P ON C.`CategoryID` = P.`CategoryID` WHERE P.`ProductName` = 'Tofu'",
        "pred_result": 1,
        "repair_sql": "SELECT C.`CategoryName` FROM Categories AS C INNER JOIN Products AS P ON C.`CategoryID` = P.`CategoryID` WHERE P.`ProductName` = 'Tofu'",
        "repair_result": 1
    },
    {
        "idx": 714,
        "db_id": "retail_world",
        "question": "What is the total production of the products from the supplier \u201cEscargots Nouveaux\u201d?",
        "evidence": "total production of the products = add(units in stock , units on order); supplier \u201cEscargots Nouveaux\u201d refers to CompanyName = 'Escargots Nouveaux'",
        "gold": "SELECT SUM(T1.UnitsInStock + T1.UnitsOnOrder) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Escargots Nouveaux'",
        "pred": "SELECT SUM(`UnitsInStock` + `UnitsOnOrder`) AS TotalProduction FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Escargots Nouveaux' )",
        "pred_result": "no such column: UnitsInStock",
        "repair_sql": "SELECT SUM(p.`UnitsInStock` + p.`UnitsOnOrder`) AS TotalProduction FROM Products p JOIN Suppliers s ON p.`SupplierID` = s.`SupplierID` WHERE s.`SupplierName` = 'Escargots Nouveaux'",
        "repair_result": "no such column: p.UnitsInStock"
    },
    {
        "idx": 715,
        "db_id": "retail_world",
        "question": "Give the reorder level for the products from the supplier \"Nord-Ost-Fisch Handelsgesellschaft mbH\".",
        "evidence": "supplier \"Nord-Ost-Fisch Handelsgesellschaft mbH\" refers to CompanyName = 'Nord-Ost-Fisch Handelsgesellschaft mbH'",
        "gold": "SELECT T1.ReorderLevel FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Nord-Ost-Fisch Handelsgesellschaft mbH'",
        "pred": "SELECT `ProductID`, `ReorderLevel` FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `ContactName` = 'Nord-Ost-Fisch Handelsgesellschaft mbH' )",
        "pred_result": "no such column: ReorderLevel",
        "repair_sql": "SELECT p.ProductID, p.ProductName, p.ReorderLevel FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.ContactName = 'Nord-Ost-Fisch Handelsgesellschaft mbH'",
        "repair_result": "no such column: p.ReorderLevel"
    },
    {
        "idx": 716,
        "db_id": "retail_world",
        "question": "How many kinds of products are supplied by \"Karkki Oy\" company?",
        "evidence": "supplied by refers to CompanyName",
        "gold": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Karkki Oy'",
        "pred": "SELECT COUNT(DISTINCT `ProductID`) FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Karkki Oy' )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT COUNT(DISTINCT `ProductID`) FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Karkki Oy' )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 717,
        "db_id": "retail_world",
        "question": "Give the contact name of the supplier for the product \"Gudbrandsdalsost\".",
        "evidence": "product refers to ProductName",
        "gold": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Gudbrandsdalsost'",
        "pred": "SELECT `ContactName` FROM Suppliers WHERE `SupplierID` = ( SELECT `SupplierID` FROM Products WHERE `ProductName` = 'Gudbrandsdalsost' )",
        "pred_result": 1,
        "repair_sql": "SELECT `ContactName` FROM Suppliers WHERE `SupplierID` = ( SELECT `SupplierID` FROM Products WHERE `ProductName` = 'Gudbrandsdalsost' )",
        "repair_result": 1
    },
    {
        "idx": 718,
        "db_id": "retail_world",
        "question": "Tell the country name of the supplier for \"Scottish Longbreads\".",
        "evidence": "\"Scottish Longbreads\" refers to ProductName = 'Scottish Longbreads'",
        "gold": "SELECT T2.Country FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Scottish Longbreads'",
        "pred": "SELECT T2.`Country` FROM Suppliers AS T2 WHERE T2.`SupplierID` = ( SELECT T1.`SupplierID` FROM Products AS T1 WHERE T1.`ProductName` = 'Scottish Longbreads' )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`Country` FROM Suppliers AS T2 WHERE T2.`SupplierID` = ( SELECT T1.`SupplierID` FROM Products AS T1 WHERE T1.`ProductName` = 'Scottish Longbreads' )",
        "repair_result": 1
    },
    {
        "idx": 719,
        "db_id": "retail_world",
        "question": "Give the number of territories in the \"Northern\" region.",
        "evidence": "\"Northern\" region refers to RegionDescription = 'Northern'",
        "gold": "SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Northern'",
        "pred": "SELECT COUNT(TerritoryID) FROM Territories WHERE RegionID = ( SELECT RegionID FROM Regions WHERE RegionDescription = 'Northern' )",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT COUNT(TerritoryID) FROM Territories WHERE RegionID IN ( SELECT RegionID FROM Regions WHERE RegionDescription = 'Northern' )",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 720,
        "db_id": "retail_world",
        "question": "Which region is \"Columbia\" in?",
        "evidence": "region refers to RegionID; \"Columbia\" refers to TerritoryDescription = 'Columbia'",
        "gold": "SELECT T2.RegionDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T1.TerritoryDescription = 'Columbia'",
        "pred": "SELECT RegionDescription FROM Regions WHERE RegionID = ( SELECT RegionID FROM Territories WHERE TerritoryDescription = 'Columbia' )",
        "pred_result": "no such table: Regions",
        "repair_sql": "SELECT RegionDescription FROM Territories JOIN Regions ON Territories.RegionID = Regions.RegionID WHERE TerritoryDescription = 'Columbia'",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 721,
        "db_id": "retail_world",
        "question": "For the orders of Customer \"WHITC\", what is the percentage of the orders were fulfilled with shipper company \"United Package\"?",
        "evidence": "Customer \"WHITC\" refers to CustomerID = 'WHITC'; shipper company \"United Package\" refers to CompanyName = 'United Package'; percentage = divide(count(ShipperID where CompanyName = 'United Package') , count(ShipperID)) * 100%",
        "gold": "SELECT CAST(COUNT(CASE WHEN T2.CompanyName = 'United Package' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.CustomerID = 'WHITC'",
        "pred": "SELECT (COUNT(OD.`ShipperID`) * 100.0) / COUNT(*) FROM Orders AS O JOIN OrderDetails AS OD ON O.`OrderID` = OD.`OrderID` WHERE O.`CustomerID` = ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'WHITC' ) AND O.`ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'United Package' )",
        "pred_result": "no such column: OD.ShipperID",
        "repair_sql": "SELECT (COUNT(O.`ShipperID`) * 100.0) / COUNT(*) FROM Orders AS O JOIN OrderDetails AS OD ON O.`OrderID` = OD.`OrderID` WHERE O.`CustomerID` = ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'WHITC' ) AND O.`ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'United Package' )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 722,
        "db_id": "retail_world",
        "question": "How many percent more orders were fulfilled with shipper company \"United Package\" than with \"Speedy Express\"?",
        "evidence": "percent = divide(subtract(count(OrderID where CompanyName = 'United Package') , count(OrderID where CompanyName = 'Speedy Express')) , count(OrderID where CompanyName = 'Speedy Express')) * 100%",
        "gold": "SELECT CAST((COUNT(CASE WHEN T2.CompanyName = 'United Package' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T2.CompanyName = 'Speedy Express' THEN 1 ELSE NULL END)) AS REAL) * 100 / COUNT(CASE WHEN T2.CompanyName = 'Speedy Express' THEN 1 ELSE NULL END) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID",
        "pred": "SELECT ROUND( (CAST(( SELECT COUNT(DISTINCT OD.`OrderID`) FROM Orders AS O INNER JOIN OrderDetails AS OD ON O.`OrderID` = OD.`OrderID` WHERE O.`ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'United Package' ) ) AS REAL) - CAST(( SELECT COUNT(DISTINCT OD.`OrderID`) FROM Orders AS O INNER JOIN OrderDetails AS OD ON O.`OrderID` = OD.`OrderID` WHERE O.`ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'Speedy Express' ) ) AS REAL)) / CAST(( SELECT COUNT(DISTINCT OD.`OrderID`) FROM Orders AS O INNER JOIN OrderDetails AS OD ON O.`OrderID` = OD.`OrderID` WHERE O.`ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'Speedy Express' ) ) AS REAL) * 100, 2) AS percentage_difference",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT ROUND( (CAST(( SELECT COUNT(DISTINCT OD.`OrderID`) FROM Orders AS O INNER JOIN OrderDetails AS OD ON O.`OrderID` = OD.`OrderID` WHERE O.`ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'United Package' ) ) AS REAL) - CAST(( SELECT COUNT(DISTINCT OD.`OrderID`) FROM Orders AS O INNER JOIN OrderDetails AS OD ON O.`OrderID` = OD.`OrderID` WHERE O.`ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'Speedy Express' ) ) AS REAL)) / CAST(( SELECT COUNT(DISTINCT OD.`OrderID`) FROM Orders AS O INNER JOIN OrderDetails AS OD ON O.`OrderID` = OD.`OrderID` WHERE O.`ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'Speedy Express' ) ) AS REAL) * 100, 2) AS percentage_difference",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 723,
        "db_id": "retail_world",
        "question": "How many times is the number of territories in \"Eastern Region\" than \"Southern Region\"?",
        "evidence": "\"Eastern Region\" refers to RegionDescription = 'Eastern'; \"Southern Region\" refers to RegionDescription = 'Southern'; times = divide(count(TerritoryDescription where RegionDescription = 'Eastern') , count(TerritoryDescription where RegionDescription = 'Southern'))",
        "gold": "SELECT CAST(( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern' ) AS REAL) / ( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Southern' ) AS Calu",
        "pred": "SELECT COUNT(TerritoryDescription) / ( SELECT COUNT(TerritoryDescription) FROM Territories WHERE RegionDescription = 'Southern' ) AS Times FROM Territories WHERE RegionDescription = 'Eastern'",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT COUNT(TerritoryDescription) / ( SELECT COUNT(TerritoryDescription) FROM Territories WHERE RegionDescription = 'Southern' ) AS Times FROM Territories WHERE RegionDescription = 'Eastern'",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 724,
        "db_id": "retail_world",
        "question": "How many customers are there in the country with the highest number of customers?",
        "evidence": "highest number refers to max(count(CustomerID))",
        "gold": "SELECT COUNT(CustomerID) FROM Customers GROUP BY Country ORDER BY COUNT(CustomerID) DESC LIMIT 1",
        "pred": "SELECT COUNT(T1.`CustomerID`) AS total_customers FROM Customers AS T1 WHERE T1.`Country` = ( SELECT T2.`Country` FROM Customers AS T2 GROUP BY T2.`Country` ORDER BY COUNT(T2.`CustomerID`) DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(T1.`CustomerID`) AS total_customers FROM Customers AS T1 WHERE T1.`Country` = ( SELECT T2.`Country` FROM Customers AS T2 GROUP BY T2.`Country` ORDER BY COUNT(T2.`CustomerID`) DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 725,
        "db_id": "retail_world",
        "question": "What are the order ids of the orders with freight of over 800?",
        "evidence": "freight of over 800 refers to Freight > 800",
        "gold": "SELECT OrderID FROM Orders WHERE Freight > 800",
        "pred": "SELECT DISTINCT T1.`OrderID` FROM Orders AS T1 WHERE T1.`Freight` > 800",
        "pred_result": "no such column: T1.Freight",
        "repair_sql": "SELECT DISTINCT T1.`OrderID` FROM Orders AS T1 JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` WHERE T3.`Price` > 800",
        "repair_result": "no such column: Freight"
    },
    {
        "idx": 726,
        "db_id": "retail_world",
        "question": "What is the Island Trading customer's complete address?",
        "evidence": "Island Trading refers to CompanyName = 'Island Trading'; complete address = Address, City, Region, Country, PostalCode",
        "gold": "SELECT Address, City, Region, Country, PostalCode FROM Customers WHERE CompanyName = 'Island Trading'",
        "pred": "SELECT `Address`, `City`, `Country`, `PostalCode` FROM Customers WHERE `CustomerName` = 'Island Trading'",
        "pred_result": "no such column: Region",
        "repair_sql": "SELECT `Address`, `City`, `Country`, `PostalCode` FROM Customers WHERE `CustomerName` = 'Island Trading'",
        "repair_result": "no such column: Region"
    },
    {
        "idx": 727,
        "db_id": "retail_world",
        "question": "What is the most expensive product?",
        "evidence": "product refers to ProductName; most expensive refers to max(UnitPrice)",
        "gold": "SELECT ProductName FROM Products WHERE UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )",
        "pred": "SELECT `ProductName`, `Price` FROM Products ORDER BY `Price` DESC LIMIT 1",
        "pred_result": "no such column: UnitPrice",
        "repair_sql": "SELECT `ProductName`, `Price` FROM Products ORDER BY `Price` DESC LIMIT 1",
        "repair_result": "no such column: UnitPrice"
    },
    {
        "idx": 728,
        "db_id": "retail_world",
        "question": "How many suppliers are there in the United States of America?",
        "evidence": "United States of America refers to Country = 'USA'",
        "gold": "SELECT COUNT(SupplierID) FROM Suppliers WHERE Country = 'USA'",
        "pred": "SELECT COUNT(*) FROM Suppliers WHERE `Country` = 'USA'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Suppliers WHERE `Country` = 'USA'",
        "repair_result": 1
    },
    {
        "idx": 729,
        "db_id": "retail_world",
        "question": "Which product have the highest user satisfaction?",
        "evidence": "product refers to ProductName; highest user satisfaction refers to max(ReorderLevel)",
        "gold": "SELECT ProductName FROM Products WHERE ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )",
        "pred": "SELECT T1.`ProductName` FROM Products AS T1 WHERE T1.`ReorderLevel` = ( SELECT MAX(`ReorderLevel`) FROM Products )",
        "pred_result": "no such column: T1.ReorderLevel",
        "repair_sql": "SELECT T1.`ProductName` FROM Products AS T1 WHERE T1.`ProductID` = ( SELECT T2.`ProductID` FROM Products AS T2 WHERE T2.`ReorderLevel` = ( SELECT MAX(`ReorderLevel`) FROM Products ) )",
        "repair_result": "no such column: T2.ReorderLevel"
    },
    {
        "idx": 730,
        "db_id": "retail_world",
        "question": "What is the full name of the employee with the highest salary?",
        "evidence": "full name refers to FirstName LastName; highest salary refers to max(Salary)",
        "gold": "SELECT FirstName, LastName FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )",
        "pred": "SELECT FirstName || ' ' || LastName AS full_name FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )",
        "pred_result": "no such column: Salary",
        "repair_sql": "SELECT FirstName || ' ' || LastName AS full_name FROM Employees WHERE EmployeeID = ( SELECT EmployeeID FROM Employees ORDER BY Salary DESC LIMIT 1 )",
        "repair_result": "no such column: Salary"
    },
    {
        "idx": 731,
        "db_id": "retail_world",
        "question": "What are the names of the products that were discountinued?",
        "evidence": "discontinued refers to Discontinued = 1; name of products refers to ProductName",
        "gold": "SELECT ProductName FROM Products WHERE Discontinued = 1",
        "pred": "SELECT `ProductName` FROM Products WHERE Discontinued = 1",
        "pred_result": "no such column: Discontinued",
        "repair_sql": "SELECT ProductName FROM Products WHERE Discontinued = 1",
        "repair_result": "no such column: Discontinued"
    },
    {
        "idx": 732,
        "db_id": "retail_world",
        "question": "What is the average salary of sales representatives in the United Kingdom?",
        "evidence": "average salary = avg(Salary); sales representative refers to Title = 'Sales Representative'; in the United Kingdom refers to Country = 'UK'",
        "gold": "SELECT AVG(Salary) FROM Employees WHERE Title = 'Sales Representative' AND Country = 'UK'",
        "pred": "SELECT AVG(T1.`Salary`) FROM Employees AS T1 WHERE T1.`EmployeeID` IN ( SELECT T2.`EmployeeID` FROM Employees AS T2 WHERE T2.`Title` = 'Sales Representative' AND T2.`Country` = 'UK' )",
        "pred_result": "no such column: T1.Salary",
        "repair_sql": "SELECT AVG(T1.`Salary`) FROM Employees AS T1 WHERE T1.`EmployeeID` IN ( SELECT T2.`EmployeeID` FROM Employees AS T2 WHERE T2.`Title` = 'Sales Representative' AND T2.`Country` = 'UK' )",
        "repair_result": "no such column: T1.Salary"
    },
    {
        "idx": 733,
        "db_id": "retail_world",
        "question": "What is the most widely used shipping company in the United States of America?",
        "evidence": "most widely used refers to max(count(ShipVia)); shipping company refers to CompanyName; in the United States of America refers to ShipCountry = 'USA'",
        "gold": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.ShipCountry = 'USA' GROUP BY T2.CompanyName ORDER BY COUNT(T2.CompanyName) DESC LIMIT 1",
        "pred": "SELECT T4.`ShipperName` FROM Orders AS T1 INNER JOIN Shippers AS T4 ON T1.`ShipperID` = T4.`ShipperID` INNER JOIN Customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T2.`Country` = 'USA' GROUP BY T4.`ShipperName` ORDER BY COUNT(T1.`OrderID`) DESC LIMIT 1",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT T4.`ShipperName` FROM Orders AS T1 INNER JOIN Shippers AS T4 ON T1.`ShipperID` = T4.`ShipperID` INNER JOIN Customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T2.`Country` = 'USA' GROUP BY T4.`ShipperName` ORDER BY COUNT(T1.`OrderID`) DESC LIMIT 1",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 734,
        "db_id": "retail_world",
        "question": "How many products were supplied by Pavlova, Ltd.?",
        "evidence": "Pavlova, Ltd. refers to CompanyName = 'Pavlova, Ltd.'",
        "gold": "SELECT COUNT(T1.ProductName) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Pavlova, Ltd.'",
        "pred": "SELECT COUNT(*) FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Pavlova, Ltd.' )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT COUNT(*) FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Pavlova, Ltd.' )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 735,
        "db_id": "retail_world",
        "question": "How many orders were shipped to GREAL via United Package?",
        "evidence": "GREAL refers to CustomerID = 'GREAL'; via United Package refers to CompanyName = 'United Package'",
        "gold": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.CustomerID = 'GREAL' AND T2.CompanyName = 'United Package'",
        "pred": "SELECT COUNT(DISTINCT T1.`OrderID`) AS num_orders FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` WHERE T1.`CustomerID` = ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'GREAL' ) AND T1.`ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'United Package' )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT COUNT(DISTINCT T1.`OrderID`) AS num_orders FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` WHERE T1.`CustomerID` = ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'GREAL' ) AND T1.`ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'United Package' )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 736,
        "db_id": "retail_world",
        "question": "What are the names of the suppliers whose products have the highest user satisfaction?",
        "evidence": "name of the supplier refers to SupplierID; highest user satisfaction refers to max(ReorderLevel)",
        "gold": "SELECT DISTINCT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )",
        "pred": "SELECT T2.`SupplierName` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`ReorderLevel` = ( SELECT MAX(`ReorderLevel`) FROM Products )",
        "pred_result": "no such column: T1.ReorderLevel",
        "repair_sql": "SELECT T2.`SupplierName` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`ProductID` = ( SELECT T3.`ProductID` FROM Products AS T3 WHERE T3.`ReorderLevel` = ( SELECT MAX(`ReorderLevel`) FROM Products ) )",
        "repair_result": "no such column: T3.ReorderLevel"
    },
    {
        "idx": 737,
        "db_id": "retail_world",
        "question": "In total, how many orders were shipped via United Package?",
        "evidence": "via United Package refers to CompanyName = 'United Package'",
        "gold": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'United Package'",
        "pred": "SELECT COUNT(*) FROM Orders WHERE `ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'United Package' )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT COUNT(*) FROM Orders WHERE `ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'United Package' )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 738,
        "db_id": "retail_world",
        "question": "How many suppliers in Australia whose products were discontinued?",
        "evidence": "in Australia refers to Country = 'Australia'; discontinued refers to Discontinued = 1",
        "gold": "SELECT COUNT(T1.Discontinued) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.Discontinued = 1 AND T2.Country = 'Australia'",
        "pred": "SELECT COUNT(DISTINCT T1.`SupplierID`) FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`Country` = 'Australia' AND T2.`Discontinued` = 1",
        "pred_result": "no such column: T2.Discontinued",
        "repair_sql": "SELECT COUNT(DISTINCT T1.`SupplierID`) FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`Country` = 'Australia' AND T2.`ProductID` IN (SELECT `ProductID` FROM Products WHERE `Discontinued` = 1)",
        "repair_result": "no such column: Discontinued"
    },
    {
        "idx": 739,
        "db_id": "retail_world",
        "question": "How much is the total purchase price, including freight, of the top 2 most expensive products?",
        "evidence": "total purchase price including freight refers to add(multiply(UnitPrice , Quantity) , Freight); most expensive refers to max(UnitPrice)",
        "gold": "SELECT T2.UnitPrice * T2.Quantity + T1.Freight FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID ORDER BY T2.UnitPrice * T2.Quantity + T1.Freight DESC LIMIT 2",
        "pred": "SELECT SUM((T1.`Price` * T2.`Quantity`) + T3.`Freight`) AS TotalPurchasePrice FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.`ProductID` = T2.`ProductID` INNER JOIN Orders AS T3 ON T2.`OrderID` = T3.`OrderID` WHERE T1.`ProductID` IN ( SELECT T4.`ProductID` FROM Products AS T4 ORDER BY T4.`Price` DESC LIMIT 2 )",
        "pred_result": "no such column: T3.Freight",
        "repair_sql": "SELECT SUM((T1.`Price` * T2.`Quantity`) + T3.`Freight`) AS TotalPurchasePrice FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.`ProductID` = T2.`ProductID` INNER JOIN Orders AS T3 ON T2.`OrderID` = T3.`OrderID` WHERE T1.`ProductID` IN ( SELECT T4.`ProductID` FROM Products AS T4 ORDER BY T4.`Price` DESC LIMIT 2 )",
        "repair_result": "no such column: T3.Freight"
    },
    {
        "idx": 740,
        "db_id": "retail_world",
        "question": "What is the name of the supplier that supplies the most products to the company?",
        "evidence": "name of the supplier refers to SupplierID; the most product refers to max(count(ProductID))",
        "gold": "SELECT T1.SupplierID FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID GROUP BY T1.SupplierID ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT T1.`SupplierName` FROM Suppliers AS T1 WHERE T1.`SupplierID` = ( SELECT T2.`SupplierID` FROM ( SELECT T3.`SupplierID`, COUNT(T4.`ProductID`) AS product_count FROM Suppliers AS T3 INNER JOIN Products AS T4 ON T3.`SupplierID` = T4.`SupplierID` GROUP BY T3.`SupplierID` ORDER BY product_count DESC LIMIT 1 ) AS T2 )",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`SupplierName` FROM Suppliers AS T1 WHERE T1.`SupplierID` = ( SELECT T2.`SupplierID` FROM ( SELECT T3.`SupplierID`, COUNT(T4.`ProductID`) AS product_count FROM Suppliers AS T3 INNER JOIN Products AS T4 ON T3.`SupplierID` = T4.`SupplierID` GROUP BY T3.`SupplierID` ORDER BY product_count DESC LIMIT 1 ) AS T2 )",
        "repair_result": 0
    },
    {
        "idx": 741,
        "db_id": "retail_world",
        "question": "What are the names of the products that were ordered that have a unit price of no more than 5?",
        "evidence": "unit price of no more than 5 refers to UnitPrice < 5; name of products refers to ProductName",
        "gold": "SELECT DISTINCT T1.ProductName FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.UnitPrice < 5",
        "pred": "SELECT DISTINCT T1.`ProductName` FROM Products AS T1 WHERE T1.`Price` <= 5",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT DISTINCT T1.`ProductName` FROM Products AS T1 WHERE T1.`Price` <= 5",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 742,
        "db_id": "retail_world",
        "question": "What is the title of the employee with the highest number of territories in charge?",
        "evidence": "highest number of territories refers to max(TerritoryID)",
        "gold": "SELECT T1.Title FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.Title ORDER BY COUNT(T2.TerritoryID) DESC LIMIT 1",
        "pred": "SELECT T1.`Title` FROM Employees AS T1 INNER JOIN ( SELECT T1.`EmployeeID`, COUNT(T2.`TerritoryID`) AS num_territories FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` GROUP BY T1.`EmployeeID` ORDER BY num_territories DESC LIMIT 1 ) AS T2 ON T1.`EmployeeID` = T2.`EmployeeID`",
        "pred_result": "no such table: EmployeeTerritories",
        "repair_sql": "SELECT T1.`Title` FROM Employees AS T1 INNER JOIN ( SELECT T1.`EmployeeID`, COUNT(T2.`TerritoryID`) AS num_territories FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` GROUP BY T1.`EmployeeID` ORDER BY num_territories DESC LIMIT 1 ) AS T2 ON T1.`EmployeeID` = T2.`EmployeeID`",
        "repair_result": "no such table: EmployeeTerritories"
    },
    {
        "idx": 743,
        "db_id": "retail_world",
        "question": "What is the most ordered products by customers?",
        "evidence": "most ordered refers to max(count(ProductID)); product refers to ProductID",
        "gold": "SELECT T1.ProductID FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN ( SELECT ProductID FROM ( SELECT ProductID, COUNT(*) AS OrderCount FROM OrderDetails GROUP BY ProductID ORDER BY OrderCount DESC LIMIT 1 ) AS T ) AS T2 ON T1.ProductID = T2.ProductID",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN ( SELECT ProductID FROM ( SELECT ProductID, COUNT(*) AS OrderCount FROM OrderDetails GROUP BY ProductID ORDER BY OrderCount DESC LIMIT 1 ) AS T ) AS T2 ON T1.ProductID = T2.ProductID",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 744,
        "db_id": "retail_world",
        "question": "Which territories is the employee with a doctorate in charge of? List all of the territory descriptions.",
        "evidence": "with a doctorate refers to TitleOfCourtesy = 'Dr.'",
        "gold": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.TitleOfCourtesy = 'Dr.'",
        "pred": "SELECT DISTINCT T3.`TerritoryDescription` FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN EmployeeTerritories AS T3 ON T1.`EmployeeID` = T3.`EmployeeID` WHERE T1.`TitleOfCourtesy` = 'Dr.'",
        "pred_result": "no such table: EmployeeTerritories",
        "repair_sql": "SELECT DISTINCT T3.`TerritoryDescription` FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN EmployeeTerritories AS T3 ON T1.`EmployeeID` = T3.`EmployeeID` WHERE T1.`TitleOfCourtesy` = 'Dr.'",
        "repair_result": "no such table: EmployeeTerritories"
    },
    {
        "idx": 745,
        "db_id": "retail_world",
        "question": "What are the territory descriptions of territories in the Eastern region?",
        "evidence": "in the Eastern region refers to RegionDescription = 'Eastern'",
        "gold": "SELECT DISTINCT T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern' ORDER BY T1.TerritoryDescription",
        "pred": "SELECT T1.`TerritoryDescription` FROM Territories AS T1 WHERE T1.`RegionDescription` = 'Eastern'",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT T1.`TerritoryDescription` FROM Territories AS T1 JOIN Region AS R ON T1.RegionID = R.RegionID WHERE R.RegionDescription = 'Eastern'",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 746,
        "db_id": "retail_world",
        "question": "What is the average number of territories do each sales representative is in charge of?",
        "evidence": "sales representative refers to Title = 'Sales Representative'; average number of territories = divide(count(TerritoryID) , count(EmployeeID)) where Title = 'Sales Representative'",
        "gold": "SELECT CAST(COUNT(T2.TerritoryID) AS REAL) / COUNT(DISTINCT T1.EmployeeID) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.Title = 'Sales Representative'",
        "pred": "SELECT CAST(COUNT(T2.`TerritoryID`) AS REAL) / ( SELECT COUNT(DISTINCT T3.`EmployeeID`) FROM Employees AS T3 WHERE T3.`Title` = 'Sales Representative' ) AS avg_territories_per_rep FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T1.`Title` = 'Sales Representative'",
        "pred_result": "no such table: EmployeeTerritories",
        "repair_sql": "SELECT CAST(COUNT(T2.`TerritoryID`) AS REAL) / ( SELECT COUNT(DISTINCT T3.`EmployeeID`) FROM Employees AS T3 WHERE T3.`Title` = 'Sales Representative' ) AS avg_territories_per_rep FROM Employees AS T1 WHERE T1.`Title` = 'Sales Representative'",
        "repair_result": "no such column: T2.TerritoryID"
    },
    {
        "idx": 747,
        "db_id": "retail_world",
        "question": "Among the beverages, which product has the highest customer satisfaction?",
        "evidence": "beverage refers to CategoryName = 'Beverages'; highest customer satisfaction refers to max(ReorderLevel)",
        "gold": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Beverages' ORDER BY T1.ReorderLevel DESC LIMIT 1",
        "pred": "SELECT ProductName FROM Products WHERE ProductID = ( SELECT T1.ProductID FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.ProductID = T2.ProductID WHERE T1.CategoryID = ( SELECT CategoryID FROM Categories WHERE CategoryName = 'Beverages' ) GROUP BY T1.ProductID ORDER BY MAX(T1.ReorderLevel) DESC LIMIT 1 )",
        "pred_result": "no such column: T1.ReorderLevel",
        "repair_sql": "SELECT ProductName FROM Products WHERE CategoryID = ( SELECT CategoryID FROM Categories WHERE CategoryName = 'Beverages' ) AND ProductID = ( SELECT ProductID FROM ( SELECT T1.ProductID, MAX(T1.ReorderLevel) AS MaxReorderLevel FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID ORDER BY MaxReorderLevel DESC LIMIT 1 ) )",
        "repair_result": "no such column: T1.ReorderLevel"
    },
    {
        "idx": 748,
        "db_id": "retail_world",
        "question": "What is the full name of the employee who handled the highest amount of orders?",
        "evidence": "full name refers to FirstName LastName; highest amount of orders refers to max(count(OrderID))",
        "gold": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.FirstName, T1.LastName ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT T2.`FirstName`, T2.`LastName` FROM ( SELECT T3.`EmployeeID`, T2.`FirstName`, T2.`LastName`, COUNT(T1.`OrderID`) AS order_count FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` GROUP BY T3.`EmployeeID` ) AS T3 WHERE T3.`order_count` = ( SELECT MAX(order_count) FROM ( SELECT T3.`EmployeeID`, T2.`FirstName`, T2.`LastName`, COUNT(T1.`OrderID`) AS order_count FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` GROUP BY T3.`EmployeeID` ) )",
        "pred_result": "no such column: T3.EmployeeID",
        "repair_sql": "SELECT T2.`FirstName` || ' ' || T2.`LastName` AS full_name FROM ( SELECT T2.`EmployeeID`, T2.`FirstName`, T2.`LastName`, COUNT(T1.`OrderID`) AS order_count FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` GROUP BY T2.`EmployeeID`, T2.`FirstName`, T2.`LastName` ) AS T3 WHERE T3.`order_count` = ( SELECT MAX(order_count) FROM ( SELECT T2.`EmployeeID`, T2.`FirstName`, T2.`LastName`, COUNT(T1.`OrderID`) AS order_count FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` GROUP BY T2.`EmployeeID`, T2.`FirstName`, T2.`LastName` ) )",
        "repair_result": "no such column: T2.FirstName"
    },
    {
        "idx": 749,
        "db_id": "retail_world",
        "question": "How many products were ordered in the order with the highest freight?",
        "evidence": "highest freight refers to max(Freight)",
        "gold": "SELECT COUNT(T2.ProductID) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID GROUP BY T2.ProductID ORDER BY COUNT(T1.Freight) DESC LIMIT 1",
        "pred": "SELECT SUM(`Quantity`) FROM OrderDetails WHERE `OrderID` = ( SELECT `OrderID` FROM Orders ORDER BY `Freight` DESC LIMIT 1 )",
        "pred_result": "no such column: Freight",
        "repair_sql": "SELECT SUM(`Quantity`) FROM OrderDetails WHERE `OrderID` = ( SELECT `OrderID` FROM Orders ORDER BY `Freight` DESC LIMIT 1 )",
        "repair_result": "no such column: Freight"
    },
    {
        "idx": 750,
        "db_id": "retail_world",
        "question": "Among the seafood products, which product have the highest total production of the production?",
        "evidence": "seafood product refers to CategoryName = 'Seafood'; product refers to ProductID; highest total production refers to max(add(units in stock, units on order))",
        "gold": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Seafood' ORDER BY T1.UnitsInStock + T1.UnitsOnOrder DESC LIMIT 1",
        "pred": "SELECT T1.`ProductID` FROM ( SELECT T1.`ProductID`, SUM(T1.`UnitsInStock` + T1.`UnitsOnOrder`) AS total_production FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.`CategoryID` = T2.`CategoryID` WHERE T2.`CategoryName` = 'Seafood' GROUP BY T1.`ProductID` ) AS subquery ORDER BY subquery.total_production DESC LIMIT 1",
        "pred_result": "no such column: T1.UnitsInStock",
        "repair_sql": "SELECT T1.`ProductID` FROM ( SELECT T1.`ProductID`, SUM(T1.`UnitsInStock` + T1.`UnitsOnOrder`) AS total_production FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.`CategoryID` = T2.`CategoryID` WHERE T2.`CategoryName` = 'Seafood' GROUP BY T1.`ProductID` ) AS subquery ORDER BY subquery.total_production DESC LIMIT 1",
        "repair_result": "no such column: T1.UnitsInStock"
    },
    {
        "idx": 751,
        "db_id": "retail_world",
        "question": "What is the difference in salary of the top 2 employees with the highest number of territories in charge?",
        "evidence": "highest number of territories refers to max(TerritoryID); difference in salary = subtract(employeeA.Salary, employeeB.Salary)",
        "gold": "SELECT MAX(Salary) - MIN(Salary) FROM ( SELECT T1.Salary FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.EmployeeID, T1.Salary ORDER BY COUNT(T2.TerritoryID) DESC LIMIT 2 ) T1",
        "pred": "SELECT (MAX(T1.`Salary`) - MIN(T1.`Salary`)) AS SalaryDifference FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T1.`EmployeeID` IN ( SELECT T3.`EmployeeID` FROM Employees AS T3 INNER JOIN EmployeeTerritories AS T4 ON T3.`EmployeeID` = T4.`EmployeeID` GROUP BY T3.`EmployeeID` ORDER BY COUNT(T4.`TerritoryID`) DESC LIMIT 2 )",
        "pred_result": "no such table: EmployeeTerritories",
        "repair_sql": "SELECT (MAX(T1.`Salary`) - MIN(T1.`Salary`)) AS SalaryDifference FROM Employees AS T1 WHERE T1.`EmployeeID` IN ( SELECT T3.`EmployeeID` FROM Employees AS T3 INNER JOIN EmployeeTerritories AS T4 ON T3.`EmployeeID` = T4.`EmployeeID` GROUP BY T3.`EmployeeID` ORDER BY COUNT(T4.`TerritoryID`) DESC LIMIT 2 )",
        "repair_result": "no such table: EmployeeTerritories"
    },
    {
        "idx": 752,
        "db_id": "retail_world",
        "question": "What is the average price of products with more than fifty units in stock?",
        "evidence": "more than fifty units in stock refers to UnitsInStock > 50; average price = avg(UnitPrice where UnitsInStock > 50)",
        "gold": "SELECT SUM(UnitPrice) / COUNT(UnitPrice) FROM Products WHERE UnitsInStock > 50",
        "pred": "SELECT AVG(`Price`) FROM Products WHERE `UnitsInStock` > 50",
        "pred_result": "no such column: UnitsInStock",
        "repair_sql": "SELECT AVG(`Price`) FROM Products JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID WHERE OrderDetails.Quantity > 50",
        "repair_result": "no such column: UnitPrice"
    },
    {
        "idx": 753,
        "db_id": "retail_world",
        "question": "List the company names of customers from the city with the most customers.",
        "evidence": "most customers refers to max(count(Relationship))",
        "gold": "SELECT CompanyName FROM `Customer and Suppliers by City` WHERE CITY = ( SELECT City FROM `Customer and Suppliers by City` GROUP BY City ORDER BY COUNT(Relationship) DESC LIMIT 1 )",
        "pred": "SELECT `CustomerName` FROM Customers WHERE `City` = ( SELECT `City` FROM Customers GROUP BY `City` ORDER BY COUNT(`CustomerID`) DESC LIMIT 1 )",
        "pred_result": "no such table: Customer and Suppliers by City",
        "repair_sql": "SELECT `CustomerName` FROM Customers WHERE `City` = ( SELECT `City` FROM Customers GROUP BY `City` ORDER BY COUNT(`CustomerID`) DESC LIMIT 1 )",
        "repair_result": "no such table: Customer and Suppliers by City"
    },
    {
        "idx": 754,
        "db_id": "retail_world",
        "question": "Find and list the company name, company contact name, and contact title of customers from Madrid.",
        "evidence": "from Madrid refers to City = 'Madrid'",
        "gold": "SELECT CompanyName, ContactName, ContactTitle FROM Customers WHERE City = 'Madrid'",
        "pred": "SELECT `CustomerName`, `ContactName`, `ContactTitle` FROM Customers WHERE `City` = 'Madrid'",
        "pred_result": "no such column: ContactTitle",
        "repair_sql": "SELECT `CustomerName`, `ContactName`, `ContactTitle` FROM Customers WHERE `City` = 'Madrid'",
        "repair_result": "no such column: ContactTitle"
    },
    {
        "idx": 755,
        "db_id": "retail_world",
        "question": "Give the full name and contact number of employees in descending order of age.",
        "evidence": "full name refers to FirstName LastName; contact number refers to HomePhone; descending order of age refers to order by BirthDate desc limit 1",
        "gold": "SELECT FirstName, LastName, HomePhone FROM Employees ORDER BY BirthDate DESC",
        "pred": "SELECT `FirstName` || ' ' || `LastName` AS full_name, `HomePhone` FROM Employees ORDER BY `BirthDate` DESC",
        "pred_result": "no such column: HomePhone",
        "repair_sql": "SELECT `FirstName` || ' ' || `LastName` AS full_name, `HomePhone` FROM Employees JOIN Orders ON Employees.EmployeeID = Orders.EmployeeID JOIN Customers ON Orders.CustomerID = Customers.CustomerID ORDER BY Employees.BirthDate DESC LIMIT 1",
        "repair_result": "no such column: HomePhone"
    },
    {
        "idx": 756,
        "db_id": "retail_world",
        "question": "Calculate the average price of products shipped to the UK.",
        "evidence": "average price = divide(sum(UnitPrice) , count(ProductID)); the UK refers to Country = 'UK'",
        "gold": "SELECT AVG(UnitPrice) AS avg FROM Invoices WHERE Country = 'UK'",
        "pred": "SELECT AVG(T5.`Price`) FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Suppliers AS T4 ON T3.`SupplierID` = T4.`SupplierID` INNER JOIN Shippers AS T5 ON T1.`ShipperID` = T5.`ShipperID` INNER JOIN Customers AS T6 ON T1.`CustomerID` = T6.`CustomerID` WHERE T6.`Country` = 'UK'",
        "pred_result": "no such column: T5.Price",
        "repair_sql": "SELECT AVG(T3.`Price`) FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Suppliers AS T4 ON T3.`SupplierID` = T4.`SupplierID` INNER JOIN Shippers AS T5 ON T1.`ShipperID` = T5.`ShipperID` INNER JOIN Customers AS T6 ON T1.`CustomerID` = T6.`CustomerID` WHERE T6.`Country` = 'UK'",
        "repair_result": "no such table: Invoices"
    },
    {
        "idx": 757,
        "db_id": "retail_world",
        "question": "Among all the orders, which products sold for the most amount?",
        "evidence": "the most amount refers to max(sum(Quantity))",
        "gold": "SELECT ProductID FROM `Order Details` GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 1",
        "pred": "SELECT T4.`ProductName` FROM ( SELECT T3.`ProductID`, SUM(T3.`Quantity`) AS total_amount FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` GROUP BY T3.`ProductID` ) AS max_amount INNER JOIN Products AS T4 ON max_amount.`ProductID` = T4.`ProductID` ORDER BY max_amount.`total_amount` DESC LIMIT 1",
        "pred_result": "no such column: T3.Quantity",
        "repair_sql": "SELECT T4.`ProductName` FROM ( SELECT T3.`ProductID`, SUM(T2.`Quantity`) AS total_amount FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` GROUP BY T3.`ProductID` ) AS max_amount INNER JOIN Products AS T4 ON max_amount.`ProductID` = T4.`ProductID` ORDER BY max_amount.`total_amount` DESC LIMIT 1",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 758,
        "db_id": "retail_world",
        "question": "List the name, address, and phone number of companies that supply products for more than thirty dollars per unit.",
        "evidence": "more than thirty dollars per unit refers to UnitPrice > 30",
        "gold": "SELECT T2.CompanyName, T2.Address, T2.Phone FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice > 30",
        "pred": "SELECT DISTINCT T1.`SupplierName`, T2.`Address`, T2.`Phone` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`Price` > 30",
        "pred_result": "no such column: T1.SupplierName",
        "repair_sql": "SELECT DISTINCT T2.`SupplierName`, T2.`Address`, T2.`Phone` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`Price` > 30",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 759,
        "db_id": "retail_world",
        "question": "Among the customers, list customers' company names and addresses who paid more than average in freight.",
        "evidence": "paid more than average in freight refers to Freight > divide(sum(Freight) , count(OrderID))",
        "gold": "SELECT DISTINCT T1.CompanyName, T1.Address FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Freight > ( SELECT AVG(Freight) FROM Orders )",
        "pred": "SELECT DISTINCT c.CustomerName, c.Address FROM Customers AS c INNER JOIN Orders AS o ON c.CustomerID = o.CustomerID WHERE o.Freight > ( SELECT AVG(Freight) FROM Orders )",
        "pred_result": "no such column: o.Freight",
        "repair_sql": "SELECT DISTINCT c.CustomerName, c.Address FROM Customers AS c INNER JOIN Orders AS o ON c.CustomerID = o.CustomerID WHERE o.Freight > ( SELECT AVG(Freight) FROM Orders )",
        "repair_result": "no such column: o.Freight"
    },
    {
        "idx": 760,
        "db_id": "retail_world",
        "question": "Find and list the full name of employees who are from the territory, Wilton.",
        "evidence": "full name refers to FirstName LastName; Wilton refers to TerritoryDescription = 'Wilton'",
        "gold": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Wilton'",
        "pred": "SELECT T1.`FirstName` || ' ' || T1.`LastName` AS full_name FROM Employees AS T1 INNER JOIN district AS T2 ON T1.`district_id` = T2.`district_id` WHERE T2.TerritoryDescription = 'Wilton'",
        "pred_result": "no such table: district",
        "repair_sql": "SELECT T1.`FirstName` || ' ' || T1.`LastName` AS full_name FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN Territories AS T3 ON T2.`TerritoryID` = T3.`TerritoryID` WHERE T3.`TerritoryDescription` = 'Wilton'",
        "repair_result": "no such table: EmployeeTerritories"
    },
    {
        "idx": 761,
        "db_id": "retail_world",
        "question": "List the names of non-US suppliers that have discontinued.",
        "evidence": "non-US refers to Country <> 'USA'; discontinued refers to Discontinued = 1",
        "gold": "SELECT DISTINCT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.Discontinued = 1 AND T2.Country != 'USA'",
        "pred": "SELECT DISTINCT T1.`SupplierName` FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`Country` <> 'USA' AND T2.`Discontinued` = 1",
        "pred_result": "no such column: T2.Discontinued",
        "repair_sql": "SELECT DISTINCT T1.`SupplierName` FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.`SupplierID` = T2.`SupplierID` INNER JOIN Categories AS T3 ON T2.`CategoryID` = T3.`CategoryID` WHERE T1.`Country` <> 'USA' AND T2.`ProductID` IN ( SELECT DISTINCT T4.`ProductID` FROM Products AS T4 INNER JOIN OrderDetails AS T5 ON T4.`ProductID` = T5.`ProductID` WHERE T5.`Quantity` = 1 )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 762,
        "db_id": "retail_world",
        "question": "List the top five most costly products in 1998.",
        "evidence": "most costly refers to max(add(unit price , Freight)); in 1998 refers to OrderDate > = '1998-01-01 00:00:00' AND OrderDate < '1999-01-01 00:00:00'",
        "gold": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.OrderDate LIKE '1998%' ORDER BY T3.UnitPrice + T1.Freight DESC LIMIT 5",
        "pred": "SELECT T6.`ProductName`, T7.`SupplierName`, T8.`CategoryName`, T9.`TotalCostWithFreight` FROM ( SELECT T5.`ProductID`, SUM(T4.`Price` * T3.`Quantity`) + T1.`Freight` AS TotalCostWithFreight FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Suppliers AS T4 ON T3.`SupplierID` = T4.`SupplierID` WHERE T1.`OrderDate` >= '1998-01-01 00:00:00' AND T1.`OrderDate` < '1999-01-01 00:00:00' GROUP BY T5.`ProductID` ORDER BY TotalCostWithFreight DESC LIMIT 5 ) AS T5 INNER JOIN Products AS T6 ON T5.`ProductID` = T6.`ProductID` INNER JOIN Suppliers AS T7 ON T6.`SupplierID` = T7.`SupplierID` INNER JOIN Categories AS T8 ON T6.`CategoryID` = T8.`CategoryID`",
        "pred_result": "no such column: T5.ProductID",
        "repair_sql": "SELECT T6.`ProductName`, T7.`SupplierName`, T8.`CategoryName`, MAX(T5.`TotalCostWithFreight`) AS TotalCostWithFreight FROM ( SELECT T3.`ProductID`, SUM(T4.`Price` * T2.`Quantity`) + T1.`Freight` AS TotalCostWithFreight FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Suppliers AS T4 ON T3.`SupplierID` = T4.`SupplierID` WHERE T1.`OrderDate` >= '1998-01-01 00:00:00' AND T1.`OrderDate` < '1999-01-01 00:00:00' GROUP BY T3.`ProductID` ) AS T5 INNER JOIN Products AS T6 ON T5.`ProductID` = T6.`ProductID` INNER JOIN Suppliers AS T7 ON T6.`SupplierID` = T7.`SupplierID` INNER JOIN Categories AS T8 ON T6.`CategoryID` = T8.`CategoryID` ORDER BY TotalCostWithFreight DESC LIMIT 5",
        "repair_result": "no such column: T1.Freight"
    },
    {
        "idx": 763,
        "db_id": "retail_world",
        "question": "Of the customers who are from Canada, how many used Federal Shipping?",
        "evidence": "from Canada refers to Country = 'Canada'; Federal Shipping refers to ShipName = 'Federal Shipping'",
        "gold": "SELECT COUNT(T3.CustomerID) FROM Shippers AS T1 INNER JOIN Orders AS T2 ON T1.ShipperID = T2.ShipVia INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T2.ShipName = 'Federal Shipping'",
        "pred": "SELECT COUNT(DISTINCT T1.`CustomerID`) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` WHERE T1.`CustomerID` IN ( SELECT `CustomerID` FROM Customers WHERE `Country` = 'Canada' ) AND T2.`ShipperName` = 'Federal Shipping'",
        "pred_result": "no such column: T2.ShipName",
        "repair_sql": "SELECT COUNT(DISTINCT T1.`CustomerID`) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` WHERE T1.`CustomerID` IN ( SELECT `CustomerID` FROM Customers WHERE `Country` = 'Canada' ) AND T2.`ShipperName` = 'Federal Shipping'",
        "repair_result": "no such column: T2.ShipName"
    },
    {
        "idx": 764,
        "db_id": "retail_world",
        "question": "List the name of the top ten most ordered product's names in descending order of the number of orders.",
        "evidence": "most ordered refers to max(COUNT(OrderID))",
        "gold": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID GROUP BY T3.ProductName ORDER BY COUNT(*) DESC LIMIT 10",
        "pred": "SELECT P.`ProductName`, COUNT(OD.`OrderID`) AS OrderCount FROM Products AS P INNER JOIN OrderDetails AS OD ON P.`ProductID` = OD.`ProductID` GROUP BY P.`ProductName` ORDER BY OrderCount DESC LIMIT 10",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT P.`ProductName`, COUNT(OD.`OrderID`) AS OrderCount FROM Products AS P INNER JOIN OrderDetails AS OD ON P.`ProductID` = OD.`ProductID` GROUP BY P.`ProductName` ORDER BY OrderCount DESC LIMIT 10",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 765,
        "db_id": "retail_world",
        "question": "Which supplier supplies the most amount of products?",
        "evidence": "supplier refers to SupplierID; most amount refers to max(count(ProductID))",
        "gold": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID GROUP BY T2.SupplierID, T2.CompanyName ORDER BY COUNT(T1.ProductName) DESC LIMIT 1",
        "pred": "SELECT T1.`SupplierName` FROM Suppliers AS T1 WHERE T1.`SupplierID` = ( SELECT T2.`SupplierID` FROM ( SELECT T3.`SupplierID`, COUNT(T4.`ProductID`) AS product_count FROM Suppliers AS T3 INNER JOIN Products AS T4 ON T3.`SupplierID` = T4.`SupplierID` GROUP BY T3.`SupplierID` ) AS T2 ORDER BY T2.product_count DESC LIMIT 1 )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT T1.`SupplierName` FROM Suppliers AS T1 WHERE T1.`SupplierID` = ( SELECT T2.`SupplierID` FROM ( SELECT T3.`SupplierID`, COUNT(T4.`ProductID`) AS product_count FROM Suppliers AS T3 INNER JOIN Products AS T4 ON T3.`SupplierID` = T4.`SupplierID` GROUP BY T3.`SupplierID` ) AS T2 ORDER BY T2.product_count DESC LIMIT 1 )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 766,
        "db_id": "retail_world",
        "question": "Please list the full name and region of each employee in alphabetical order.",
        "evidence": "full name refers to FirstName LastName; region refers to RegionDescription",
        "gold": "SELECT DISTINCT T1.FirstName, T1.LastName, T4.RegionDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID ORDER BY T1.FirstName",
        "pred": "SELECT T1.`FirstName` || ' ' || T1.`LastName` AS full_name, T2.`RegionDescription` FROM Employees AS T1 INNER JOIN Regions AS T2 ON T1.`RegionID` = T2.`RegionID` ORDER BY full_name ASC",
        "pred_result": "no such table: Regions",
        "repair_sql": "SELECT T1.`FirstName` || ' ' || T1.`LastName` AS full_name, T2.`RegionDescription` FROM Employees AS T1 ORDER BY full_name ASC",
        "repair_result": "no such column: T2.RegionDescription"
    },
    {
        "idx": 767,
        "db_id": "retail_world",
        "question": "Which employee handled the most amount of orders in 1996? Give the full name, title, and address of this employee.",
        "evidence": "most amount of orders refers to max(count(OrderID)); in 1996 refers to OrderDate > = '1996-01-01 00:00:00' AND OrderDate < '1997-01-01 00:00:00'; full name refers to FirstName, LastName",
        "gold": "SELECT FirstName, LastName, Title, address FROM Employees WHERE EmployeeID = ( SELECT T1.EmployeeID FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderDate BETWEEN '1996-01-01 00:00:00' AND '1997-01-01 00:00:00' GROUP BY T1.EmployeeID ORDER BY COUNT(T2.OrderID) DESC LIMIT 1 )",
        "pred": "SELECT T2.`FirstName` || ' ' || T2.`LastName` AS Full_Name, T2.`Title`, T2.`Address` FROM Employees AS T2 WHERE T2.`EmployeeID` = ( SELECT T1.`EmployeeID` FROM Orders AS T1 WHERE T1.`OrderDate` >= '1996-01-01 00:00:00' AND T1.`OrderDate` < '1997-01-01 00:00:00' GROUP BY T1.`EmployeeID` ORDER BY COUNT(T1.`OrderID`) DESC LIMIT 1 )",
        "pred_result": "no such column: T2.Title",
        "repair_sql": "SELECT T2.`FirstName` || ' ' || T2.`LastName` AS Full_Name, T2.`Title`, T2.`Address` FROM Employees AS T2 WHERE T2.`EmployeeID` = ( SELECT T1.`EmployeeID` FROM Orders AS T1 WHERE T1.`OrderDate` >= '1996-01-01 00:00:00' AND T1.`OrderDate` < '1997-01-01 00:00:00' GROUP BY T1.`EmployeeID` ORDER BY COUNT(T1.`OrderID`) DESC LIMIT 1 )",
        "repair_result": "no such column: T2.Title"
    },
    {
        "idx": 768,
        "db_id": "retail_world",
        "question": "What was the average unit price of products shipped via United Package in 1997?",
        "evidence": "via United Package refers to CompanyName = 'United Package'; in 1997 refers to OrderDate > = '1997-01-01 00:00:00' AND OrderDate < '1998-01-01 00:00:00'; average unit price = divide(sum(UnitPrice), count(ShipperID))",
        "gold": "SELECT AVG(T2.UnitPrice) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Shippers AS T3 ON T1.ShipVia = T3.ShipperID WHERE T1.OrderDate LIKE '1997%' AND T3.CompanyName = 'United Package'",
        "pred": "SELECT AVG(T5.`Price`) FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Shippers AS T4 ON T1.`ShipperID` = T4.`ShipperID` WHERE T4.`ShipperName` = 'United Package' AND T1.`OrderDate` >= '1997-01-01 00:00:00' AND T1.`OrderDate` < '1998-01-01 00:00:00'",
        "pred_result": "no such column: T5.Price",
        "repair_sql": "SELECT AVG(T3.`Price`) FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Shippers AS T4 ON T1.`ShipperID` = T4.`ShipperID` WHERE T4.`ShipperName` = 'United Package' AND T1.`OrderDate` >= '1997-01-01 00:00:00' AND T1.`OrderDate` < '1998-01-01 00:00:00'",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 769,
        "db_id": "retail_world",
        "question": "Calculate the percentage of shipping done through Speedy Express.",
        "evidence": "through Speedy Express refers to CompanyName = 'Speedy Express'; percentage = divide(count(ShipperID where CompanyName = 'Speedy Express') , count(ShipperID)) * 100%",
        "gold": "SELECT CAST(COUNT(CASE WHEN T2.CompanyName = 'Speedy Express' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.ShipVia) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID",
        "pred": "SELECT (CAST((SELECT COUNT(*) AS Speedy_Express_Orders FROM Orders WHERE ShipperID = ( SELECT ShipperID FROM Shippers WHERE ShipperName = 'Speedy Express' )) AS REAL) / CAST((SELECT COUNT(*) AS Total_Orders FROM Orders) AS REAL)) * 100 AS Percentage_Shipping_Speedy_Express",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT (CAST((SELECT COUNT(*) AS Speedy_Express_Orders FROM Orders WHERE ShipperID = ( SELECT ShipperID FROM Shippers WHERE ShipperName = 'Speedy Express' )) AS REAL) / CAST((SELECT COUNT(*) AS Total_Orders FROM Orders) AS REAL)) * 100 AS Percentage_Shipping_Speedy_Express",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 770,
        "db_id": "retail_world",
        "question": "Indicate the courtesy title of the 3 employees who have the lowest salary.",
        "evidence": "courtesy title refers to TitleOfCourtesy; the lowest salary refers to MIN(Salary);",
        "gold": "SELECT TitleOfCourtesy FROM Employees ORDER BY Salary LIMIT 3",
        "pred": "SELECT TitleOfCourtesy FROM Employees WHERE EmployeeID IN ( SELECT EmployeeID FROM Employees ORDER BY Salary ASC LIMIT 3 )",
        "pred_result": "no such column: TitleOfCourtesy",
        "repair_sql": "SELECT TitleOfCourtesy FROM Employees WHERE EmployeeID IN ( SELECT EmployeeID FROM Employees ORDER BY Salary ASC LIMIT 3 )",
        "repair_result": "no such column: TitleOfCourtesy"
    },
    {
        "idx": 771,
        "db_id": "retail_world",
        "question": "What is the last name of the employees who must report to the Vice President of Sales?",
        "evidence": "report to represents a hierarchical relationship where the person being reported to is usually the direct supervisor of the reporter; Vice President of Sales refers to Title = 'Vice President, Sales';",
        "gold": "SELECT LastName FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE Title = 'Vice President, Sales' )",
        "pred": "SELECT T1.`LastName` FROM Employees AS T1 WHERE T1.`ReportsTo` = ( SELECT `EmployeeID` FROM Employees WHERE `Title` = 'Vice President, Sales' )",
        "pred_result": "no such column: T1.ReportsTo",
        "repair_sql": "SELECT T1.`LastName` FROM Employees AS T1 WHERE T1.`EmployeeID` IN ( SELECT `EmployeeID` FROM Employees WHERE `Title` = 'Vice President, Sales' )",
        "repair_result": "no such column: Title"
    },
    {
        "idx": 772,
        "db_id": "retail_world",
        "question": "What is the highest total price paid for an order?",
        "evidence": "the highest total price paid for an order can be calculated as MAX(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1-Discount)));",
        "gold": "SELECT UnitPrice * Quantity * (1 - Discount) AS THETOP FROM `Order Details` ORDER BY UnitPrice * Quantity * (1 - Discount) DESC LIMIT 1",
        "pred": "SELECT MAX(TotalPrice) AS HighestTotalPrice FROM ( SELECT T1.`OrderID`, SUM(T2.`Price` * T3.`Quantity` * (1 - T3.`Discount`)) AS TotalPrice FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.`OrderID` = T2.`ProductID` INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` GROUP BY T1.`OrderID` )",
        "pred_result": "no such column: T3.Discount",
        "repair_sql": "SELECT MAX(TotalPrice) AS HighestTotalPrice FROM ( SELECT T1.`OrderID`, SUM(T2.`Price` * T3.`Quantity` * (1 - T2.`Discount`)) AS TotalPrice FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.`OrderID` = T2.`ProductID` INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` GROUP BY T1.`OrderID` )",
        "repair_result": "no such column: T2.Discount"
    },
    {
        "idx": 773,
        "db_id": "retail_world",
        "question": "Which 3 products are produced in greater quantity?",
        "evidence": "3 products produced in greater quantity refer to MAX(SUM(UnitsInStock, UnitsOnOrder)) Limit 3;",
        "gold": "SELECT ProductName FROM Products ORDER BY UnitsInStock + UnitsOnOrder DESC LIMIT 3",
        "pred": "SELECT T1.`ProductID`, T2.`ProductName`, T3.`CategoryName`, T1.`total_quantity` FROM ( SELECT T4.`ProductID`, SUM(T4.`UnitsInStock` + T4.`UnitsOnOrder`) AS total_quantity FROM Products AS T4 GROUP BY T4.`ProductID` ORDER BY total_quantity DESC LIMIT 3 ) AS T1 INNER JOIN Products AS T2 ON T1.`ProductID` = T2.`ProductID` INNER JOIN Categories AS T3 ON T2.`CategoryID` = T3.`CategoryID`",
        "pred_result": "no such column: T4.UnitsInStock",
        "repair_sql": "SELECT T2.`ProductID`, T2.`ProductName`, T4.`CategoryName`, T1.`total_quantity` FROM ( SELECT T3.`ProductID`, SUM(T3.`UnitsInStock` + T3.`UnitsOnOrder`) AS total_quantity FROM Products AS T3 GROUP BY T3.`ProductID` ORDER BY total_quantity DESC LIMIT 3 ) AS T1 INNER JOIN Products AS T2 ON T1.`ProductID` = T2.`ProductID` INNER JOIN Categories AS T4 ON T2.`CategoryID` = T4.`CategoryID`",
        "repair_result": "no such column: T3.UnitsInStock"
    },
    {
        "idx": 774,
        "db_id": "retail_world",
        "question": "Of the 10 products with the highest unit price, identify by their ID the ones that have generated the least satisfaction.",
        "evidence": "High reorder level generally means high user satisfaction of the product and vice versa; the least satisfaction refers to MIN(ReorderLevel); the highest unit price refers to MAX(UnitPrice);",
        "gold": "SELECT ProductID FROM Products ORDER BY ReorderLevel ASC, UnitPrice DESC LIMIT 1",
        "pred": "SELECT T1.`ProductID` FROM Products AS T1 WHERE T1.`ProductID` IN ( SELECT T2.`ProductID` FROM OrderDetails AS T2 GROUP BY T2.`ProductID` ORDER BY MIN(T2.`Quantity`) ASC ) AND T1.`ProductID` IN ( SELECT T3.`ProductID` FROM ( SELECT T4.`ProductID` FROM Products AS T4 ORDER BY T4.`Price` DESC LIMIT 10 ) AS T3 )",
        "pred_result": "no such column: ReorderLevel",
        "repair_sql": "SELECT T1.`ProductID` FROM Products AS T1 WHERE T1.`ProductID` IN ( SELECT T2.`ProductID` FROM OrderDetails AS T2 GROUP BY T2.`ProductID` ORDER BY MIN(T2.`Quantity`) ASC ) AND T1.`ProductID` IN ( SELECT T3.`ProductID` FROM ( SELECT T4.`ProductID` FROM Products AS T4 ORDER BY T4.`Price` DESC LIMIT 10 ) AS T3 )",
        "repair_result": "no such column: ReorderLevel"
    },
    {
        "idx": 775,
        "db_id": "retail_world",
        "question": "How many non-discontinued products are there in the dairy category?",
        "evidence": "non-discontinued products in the dairy category refer to ProductID where Discontinued = 0 and CategoryName = 'Dairy Products';",
        "gold": "SELECT COUNT(T1.CategoryID) FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.CategoryName = 'Dairy Products' AND T2.Discontinued = 0",
        "pred": "SELECT COUNT(*) FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.`CategoryID` = T2.`CategoryID` WHERE T1.`Discontinued` = 0 AND T2.`CategoryName` = 'Dairy Products'",
        "pred_result": "no such column: T1.Discontinued",
        "repair_sql": "SELECT COUNT(*) FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.CategoryID = (SELECT CategoryID FROM Categories WHERE CategoryName = 'Dairy Products') AND T1.ProductID NOT IN (SELECT ProductID FROM Products WHERE Discontinued = 1)",
        "repair_result": "no such column: Discontinued"
    },
    {
        "idx": 776,
        "db_id": "retail_world",
        "question": "What territories is the Inside Sales Coordinator in charge of?",
        "evidence": "territories refer to TerritoryDescription; Title = 'Inside Sales Coordinator';",
        "gold": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.Title = 'Inside Sales Coordinator'",
        "pred": "SELECT DISTINCT `TerritoryDescription` FROM Territories INNER JOIN EmployeeTerritories ON Territories.`TerritoryID` = EmployeeTerritories.`TerritoryID` WHERE EmployeeTerritories.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `Title` = 'Inside Sales Coordinator' )",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT DISTINCT `TerritoryDescription` FROM Territories INNER JOIN EmployeeTerritories ON Territories.`TerritoryID` = EmployeeTerritories.`TerritoryID` INNER JOIN Employees ON Employees.`EmployeeID` = EmployeeTerritories.`EmployeeID` WHERE Employees.`Title` = 'Inside Sales Coordinator'",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 777,
        "db_id": "retail_world",
        "question": "Indicate the name of the companies that have freighted products for a value greater than 2,000,000.",
        "evidence": "freighted products for a value greater than 2,000,000 refer to Freight > 2000000; name of companies refers to CompanyName;",
        "gold": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Freight > 2000000",
        "pred": "SELECT DISTINCT T6.`SupplierName` FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` INNER JOIN Products AS T4 ON T3.`ProductID` = T4.`ProductID` INNER JOIN Suppliers AS T5 ON T4.`SupplierID` = T5.`SupplierID` INNER JOIN Categories AS T6 ON T4.`CategoryID` = T6.`CategoryID` WHERE T3.`Quantity` * T4.`Price` > 2000000",
        "pred_result": "no such column: T6.SupplierName",
        "repair_sql": "SELECT DISTINCT T5.`SupplierName` FROM Orders AS T1 INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` INNER JOIN Products AS T4 ON T3.`ProductID` = T4.`ProductID` INNER JOIN Suppliers AS T5 ON T4.`SupplierID` = T5.`SupplierID` INNER JOIN Categories AS T6 ON T4.`CategoryID` = T6.`CategoryID` WHERE T3.`Quantity` * T4.`Price` > 2000000",
        "repair_result": "no such column: T1.CompanyName"
    },
    {
        "idx": 778,
        "db_id": "retail_world",
        "question": "Through which companies have products been shipped the most times to the city of Aachen?",
        "evidence": "shipped the most times refer to MAX(COUNT(ShipVia)); city of Aachen refers to ShipCity = 'Aache'; companies refers to CompanyName;",
        "gold": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.ShipCity = 'Aachen' GROUP BY T2.CompanyName ORDER BY COUNT(T1.ShipVia) DESC LIMIT 1",
        "pred": "SELECT T4.`ShipperName` AS CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T4 ON T1.`ShipperID` = T4.`ShipperID` WHERE T1.`ShipperID` = ( SELECT T1.`ShipperID` FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` INNER JOIN Customers AS T3 ON T1.`CustomerID` = T3.`CustomerID` WHERE T3.`City` = 'Aachen' GROUP BY T1.`ShipperID` ORDER BY COUNT(T1.`ShipperID`) DESC LIMIT 1 )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT T4.`ShipperName` AS CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T4 ON T1.`ShipperID` = T4.`ShipperID` WHERE T1.`ShipperID` = ( SELECT T1.`ShipperID` FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` INNER JOIN Customers AS T3 ON T1.`CustomerID` = T3.`CustomerID` WHERE T3.`City` = 'Aachen' GROUP BY T1.`ShipperID` ORDER BY COUNT(T1.`ShipperID`) DESC LIMIT 1 )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 779,
        "db_id": "retail_world",
        "question": "List the full name of all employees who work in the Northern region.",
        "evidence": "full names = FirstName, LastName; Northern region refers to RegionDescription = 'Northern';",
        "gold": "SELECT DISTINCT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T4.RegionDescription = 'Northern'",
        "pred": "SELECT T1.`FirstName` || ' ' || T1.`LastName` AS full_name FROM Employees AS T1 INNER JOIN district AS T2 ON T1.`district_id` = T2.`district_id` WHERE T2.`RegionDescription` = 'Northern'",
        "pred_result": "no such table: district",
        "repair_sql": "SELECT T1.`FirstName` || ' ' || T1.`LastName` AS full_name FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN Customers AS T3 ON T2.`CustomerID` = T3.`CustomerID` WHERE T3.`RegionDescription` = 'Northern'",
        "repair_result": "no such column: T3.RegionDescription"
    },
    {
        "idx": 780,
        "db_id": "retail_world",
        "question": "What is the name of the contact person of the Pavlova supplier company?",
        "evidence": "contact person refers to ContactName; Pavlova is the name of the product;",
        "gold": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Pavlova'",
        "pred": "SELECT T1.`ContactName` FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T2.`ProductName` = 'Pavlova'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`ContactName` FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T2.`ProductName` = 'Pavlova'",
        "repair_result": 1
    },
    {
        "idx": 781,
        "db_id": "retail_world",
        "question": "Indicate the name of the products that have been shipped to the city of Paris.",
        "evidence": "shipped to the city of Paris refers to ShipCity = 'Paris';",
        "gold": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.ShipCity = 'Paris'",
        "pred": "SELECT DISTINCT T5.`ProductName` FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` INNER JOIN Customers AS T3 ON T1.`CustomerID` = T3.`CustomerID` INNER JOIN OrderDetails AS T4 ON T1.`OrderID` = T4.`OrderID` INNER JOIN Products AS T5 ON T4.`ProductID` = T5.`ProductID` WHERE T3.`City` = 'Paris'",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT DISTINCT T5.`ProductName` FROM Orders AS T1 INNER JOIN Customers AS T3 ON T1.`CustomerID` = T3.`CustomerID` INNER JOIN OrderDetails AS T4 ON T1.`OrderID` = T4.`OrderID` INNER JOIN Products AS T5 ON T4.`ProductID` = T5.`ProductID` WHERE T3.`City` = 'Paris'",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 782,
        "db_id": "retail_world",
        "question": "What product is the least shipped to the postal code 28023?",
        "evidence": "the least shipped product refers ProductName where MIN(Quantity);",
        "gold": "SELECT T4.ProductName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T1.PostalCode = 28023 ORDER BY T3.Quantity LIMIT 1",
        "pred": "SELECT T5.`ProductName` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Suppliers AS T4 ON T3.`SupplierID` = T4.`SupplierID` INNER JOIN Customers AS T5 ON T1.`CustomerID` = T5.`CustomerID` WHERE T5.`PostalCode` = '28023' GROUP BY T3.`ProductName` ORDER BY SUM(T2.`Quantity`) ASC LIMIT 1",
        "pred_result": "no such column: T5.ProductName",
        "repair_sql": "SELECT T3.`ProductName` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Suppliers AS T4 ON T3.`SupplierID` = T4.`SupplierID` INNER JOIN Customers AS T5 ON T1.`CustomerID` = T5.`CustomerID` WHERE T5.`PostalCode` = '28023' GROUP BY T3.`ProductName` ORDER BY SUM(T2.`Quantity`) ASC LIMIT 1",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 783,
        "db_id": "retail_world",
        "question": "What is the full name of the employee in charge of the Southern region who is to report to Andrew Fuller?",
        "evidence": "full names = FirstName, LastName; report to represents a hierarchical relationship where the person being reported to is usually the direct supervisor of the reporter; Andrew Fuller refers to Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller'; Southern region refers to RegionDescription = 'Southern';",
        "gold": "SELECT DISTINCT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T4.RegionDescription = 'Southern' AND T1.ReportsTo = ( SELECT EmployeeID FROM Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller' )",
        "pred": "SELECT T1.`FirstName` || ' ' || T1.`LastName` AS `Full Name` FROM Employees AS T1 INNER JOIN Employees AS T2 ON T1.`ReportsTo` = T2.`EmployeeID` INNER JOIN EmployeeTerritories AS T3 ON T1.`EmployeeID` = T3.`EmployeeID` INNER JOIN Territories AS T4 ON T3.`TerritoryID` = T4.`TerritoryID` WHERE T2.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Andrew' AND `LastName` = 'Fuller' ) AND T4.`RegionDescription` = 'Southern'",
        "pred_result": "no such table: EmployeeTerritories",
        "repair_sql": "SELECT T1.`FirstName` || ' ' || T1.`LastName` AS `Full Name` FROM Employees AS T1 INNER JOIN Employees AS T2 ON T1.`ReportsTo` = T2.`EmployeeID` INNER JOIN Orders AS O ON T1.`EmployeeID` = O.`EmployeeID` INNER JOIN Customers AS C ON O.`CustomerID` = C.`CustomerID` INNER JOIN Territories AS T ON C.`RegionDescription` = T.`RegionDescription` WHERE T2.`FirstName` = 'Andrew' AND T2.`LastName` = 'Fuller' AND T.`RegionDescription` = 'Southern'",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 784,
        "db_id": "retail_world",
        "question": "On what date did the Du monde entier company request that 9 units of Filo Mix be sent to it?",
        "evidence": "9 units of Filo Mix refer to ProductName where Quantity = 9; Du monde entier is the name of the customer; date refers to OrderDate;",
        "gold": "SELECT T2.OrderDate FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T4.ProductName = 'Filo Mix' AND T3.Quantity = 9 AND T1.CompanyName = 'Du monde entier'",
        "pred": "SELECT T1.`OrderDate` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` WHERE T1.`CustomerID` = ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'Du monde entier' ) AND T2.`ProductID` = ( SELECT `ProductID` FROM Products WHERE `ProductName` = 'Filo Mix' ) AND T2.`Quantity` = 9",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT T1.`OrderDate` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Customers AS C ON T1.`CustomerID` = C.`CustomerID` INNER JOIN Products AS P ON T2.`ProductID` = P.`ProductID` WHERE C.`CustomerName` = 'Du monde entier' AND P.`ProductName` = 'Filo Mix' AND T2.`Quantity` = 9",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 785,
        "db_id": "retail_world",
        "question": "Indicate the name of the categories to which the products of order number 10933 belong.",
        "evidence": "order number 10933 refers to OrderID = 10933;",
        "gold": "SELECT T3.CategoryName FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T2.OrderID = 10933",
        "pred": "SELECT DISTINCT T4.`CategoryName` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Categories AS T4 ON T3.`CategoryID` = T4.`CategoryID` WHERE T1.`OrderID` = 10933",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT DISTINCT T4.`CategoryName` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Categories AS T4 ON T3.`CategoryID` = T4.`CategoryID` WHERE T1.`OrderID` = 10933;",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 786,
        "db_id": "retail_world",
        "question": "What is the phone number for the employee in charge of the Portsmouth territory?",
        "evidence": "phone refers to HomePhone; Portsmouth territory refers to TerritoryDescription = 'Portsmouth';",
        "gold": "SELECT T1.HomePhone FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Portsmouth'",
        "pred": "SELECT T1.`Phone` FROM Employees AS T1 WHERE T1.`TerritoryDescription` = 'Portsmouth'",
        "pred_result": "no such column: T1.Phone",
        "repair_sql": "SELECT T1.`HomePhone` FROM Employees AS T1 JOIN Territories AS T2 ON T1.`TerritoryID` = T2.`TerritoryID` WHERE T2.`TerritoryDescription` = 'Portsmouth'",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 787,
        "db_id": "retail_world",
        "question": "What is the average quantity of product that have been shipped by Federal Shipping in November 1996?",
        "evidence": "Federal Shipping refers to CompanyName = 'Federal Shipping'; DIVIDE(SUM(Quantity), COUNT(ProductID)) where CompanyName = 'Federal Shipping' and ShippedDate > = '1996-11-01 00:00:00' AND ShippedDate < '1996-12-01 00:00:00';",
        "gold": "SELECT CAST(SUM(T2.Quantity) AS REAL) / COUNT(T2.OrderID) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Shippers AS T3 ON T1.ShipVia = T3.ShipperID WHERE T1.ShippedDate LIKE '1996-11%' AND T3.CompanyName = 'Federal Shipping'",
        "pred": "SELECT AVG(T3.`Quantity`) FROM OrderDetails AS T3 WHERE T3.`OrderID` IN ( SELECT DISTINCT T1.`OrderID` FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` WHERE T2.`ShipperName` = 'Federal Shipping' AND T1.`OrderDate` >= '1996-11-01' AND T1.`OrderDate` < '1996-12-01' )",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT AVG(T3.`Quantity`) FROM OrderDetails AS T3 WHERE T3.`OrderID` IN ( SELECT DISTINCT T1.`OrderID` FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` WHERE T2.`ShipperName` = 'Federal Shipping' AND T1.`OrderDate` >= '1996-11-01' AND T1.`OrderDate` < '1996-12-01' )",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 788,
        "db_id": "retail_world",
        "question": "Of all the shipments made by United Package throughout the year 1996, what percentage correspond to the month of September?",
        "evidence": "DIVIDE(COUNT(OrderID where CompanyName = 'United Package' and ShippedDate > = '1996-09-01 00:00:00' AND ShippedDate < '1996-09-30 00:00:00')), (COUNT(OrderID where CompanyName = 'United Package' and ShippedDate > = '1996-01-01 00:00:00' AND ShippedDate < '1997-01-01 00:00:00')) as percentage; \n",
        "gold": "SELECT CAST(COUNT(CASE WHEN T1.ShippedDate LIKE '1996-09%' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.ShipVia) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'United Package' AND T1.ShippedDate LIKE '1996%'",
        "pred": "SELECT (COUNT(T1.`OrderID`) * 1.0) / ( SELECT COUNT(T3.`OrderID`) FROM Orders AS T3 INNER JOIN Shippers AS T4 ON T3.`ShipperID` = T4.`ShipperID` WHERE T4.`ShipperName` = 'United Package' AND T3.`OrderDate` >= '1996-01-01 00:00:00' AND T3.`OrderDate` < '1997-01-01 00:00:00' ) as percentage FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` WHERE T2.`ShipperName` = 'United Package' AND T1.`OrderDate` >= '1996-09-01 00:00:00' AND T1.`OrderDate` < '1996-10-01 00:00:00'",
        "pred_result": "no such column: T1.ShippedDate",
        "repair_sql": "SELECT (COUNT(T1.`OrderID`) * 1.0) / ( SELECT COUNT(T3.`OrderID`) FROM Orders AS T3 INNER JOIN Shippers AS T4 ON T3.`ShipperID` = T4.`ShipperID` WHERE T4.`ShipperName` = 'United Package' AND T3.`OrderDate` >= '1996-01-01 00:00:00' AND T3.`OrderDate` < '1997-01-01 00:00:00' ) as percentage FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` WHERE T2.`ShipperName` = 'United Package' AND T1.`OrderDate` >= '1996-09-01 00:00:00' AND T1.`OrderDate` < '1996-10-01 00:00:00'",
        "repair_result": "no such column: T1.ShippedDate"
    },
    {
        "idx": 789,
        "db_id": "retail_world",
        "question": "How many owners are located in Mexico?",
        "evidence": "owners in Mexico refer to ContactTitle where Country = 'Mexico';",
        "gold": "SELECT COUNT(ContactTitle) FROM Customers WHERE Country = 'Mexico' AND ContactTitle = 'Owner'",
        "pred": "SELECT COUNT(DISTINCT `CustomerID`) FROM Customers WHERE `Country` = 'Mexico'",
        "pred_result": "no such column: ContactTitle",
        "repair_sql": "SELECT COUNT(DISTINCT `CustomerID`) FROM Customers WHERE `Country` = 'Mexico'",
        "repair_result": "no such column: ContactTitle"
    },
    {
        "idx": 790,
        "db_id": "retail_world",
        "question": "What is the full address of Andr Fonseca?",
        "evidence": "full address includes Address, City, Region, PostalCode and Country; ContactName = 'Andr Fonseca';",
        "gold": "SELECT Address, City, Region, PostalCode, Country FROM Customers WHERE ContactName = 'Andr Fonseca'",
        "pred": "SELECT `Address`, `City`, `PostalCode`, `Country` FROM Customers WHERE `ContactName` = 'Andr Fonseca'",
        "pred_result": "no such column: Region",
        "repair_sql": "SELECT `Address`, `City`, `PostalCode`, `Country` FROM Customers WHERE `ContactName` = 'Andr Fonseca'",
        "repair_result": "no such column: Region"
    },
    {
        "idx": 791,
        "db_id": "retail_world",
        "question": "What are the companies that have the same phone area code as 171?",
        "evidence": "phone area code as 171 refers to Phone LIKE '(171)%'; companies refer to CompanyName;",
        "gold": "SELECT CompanyName FROM Customers WHERE Phone LIKE '(171)%'",
        "pred": "SELECT DISTINCT `SupplierName` FROM Suppliers WHERE `Phone` LIKE '(171)%'",
        "pred_result": "no such column: CompanyName",
        "repair_sql": "SELECT DISTINCT `SupplierName` FROM Suppliers WHERE `Phone` LIKE '(171)%'",
        "repair_result": "no such column: CompanyName"
    },
    {
        "idx": 792,
        "db_id": "retail_world",
        "question": "What is the difference in the number of employees from the UK and the USA who work as sales representatives?",
        "evidence": "SUBTRACT(COUNT(EmployeeID where Country = 'UK' and Title = 'sales representative'), COUNT(EmployeeID where Country = 'USA' and Title = 'sales representative'));",
        "gold": "SELECT ( SELECT COUNT(Title) FROM Employees WHERE Country = 'UK' AND Title = 'Sales Representative' ) - ( SELECT COUNT(Title) FROM Employees WHERE Country = 'USA' AND Title = 'Sales Representative' ) AS DIFFERENCE",
        "pred": "SELECT ( SELECT COUNT(*) FROM Employees WHERE Country = 'UK' AND Title = 'sales representative' ) - ( SELECT COUNT(*) FROM Employees WHERE Country = 'USA' AND Title = 'sales representative' ) AS Difference",
        "pred_result": "no such column: Country",
        "repair_sql": "SELECT ( SELECT COUNT(*) FROM Employees WHERE EmployeeID IN ( SELECT EmployeeID FROM Employees JOIN Orders ON Employees.EmployeeID = Orders.EmployeeID WHERE Country = 'UK' AND Title = 'Sales Representative' ) ) - ( SELECT COUNT(*) FROM Employees WHERE EmployeeID IN ( SELECT EmployeeID FROM Employees JOIN Orders ON Employees.EmployeeID = Orders.EmployeeID WHERE Country = 'USA' AND Title = 'Sales Representative' ) ) AS Difference",
        "repair_result": "ambiguous column name: EmployeeID"
    },
    {
        "idx": 793,
        "db_id": "retail_world",
        "question": "How many sales associates are located in Sao Paulo, Brazil?",
        "evidence": "sales associates refer to ContactTitle; Sao Paulo is the name of the city in the country Brazil;",
        "gold": "SELECT COUNT(CustomerID) FROM Customers WHERE City = 'Sao Paulo' AND Country = 'Brazil' AND ContactTitle = 'Sales Associate'",
        "pred": "SELECT COUNT(T1.`EmployeeID`) FROM Employees AS T1 INNER JOIN Customers AS T2 ON T1.`LastName` = T2.`ContactName` WHERE T2.`City` = 'S\u00e3o Paulo' AND T2.`Country` = 'Brazil'",
        "pred_result": "no such column: ContactTitle",
        "repair_sql": "SELECT COUNT(T1.`EmployeeID`) FROM Employees AS T1 INNER JOIN Customers AS T2 ON T1.`LastName` = T2.`ContactName` WHERE T2.`City` = 'S\u00e3o Paulo' AND T2.`Country` = 'Brazil'",
        "repair_result": "no such column: ContactTitle"
    },
    {
        "idx": 794,
        "db_id": "retail_world",
        "question": "What is the family name of the employee who shipped the order 10521 to CACTU?",
        "evidence": "order 10521 refers to OrderID = 10521; CustomerID = 'CACTU'; family name refers to LastName;",
        "gold": "SELECT T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10521 AND T2.CustomerID = 'CACTU'",
        "pred": "SELECT T4.`LastName` FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` INNER JOIN Employees AS T3 ON T1.`EmployeeID` = T3.`EmployeeID` WHERE T1.`OrderID` = 10521 AND T1.`CustomerID` = 'CACTU'",
        "pred_result": "no such column: T4.LastName",
        "repair_sql": "SELECT T3.`LastName` FROM Orders AS T1 INNER JOIN Employees AS T3 ON T1.`EmployeeID` = T3.`EmployeeID` WHERE T1.`OrderID` = 10521 AND T1.`CustomerID` = 'CACTU'",
        "repair_result": 1
    },
    {
        "idx": 795,
        "db_id": "retail_world",
        "question": "What is the shipping cost for order number 10692 from the company Alfreds Futterkiste?",
        "evidence": "Alfreds Futterkiste is the name of the company; order number 10692 refers to OrderID = 10692;",
        "gold": "SELECT T2.Freight FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10692 AND T1.CompanyName = 'Alfreds Futterkiste'",
        "pred": "SELECT `Price` FROM Products INNER JOIN OrderDetails ON Products.`ProductID` = OrderDetails.`ProductID` INNER JOIN Orders ON OrderDetails.`OrderID` = Orders.`OrderID` WHERE Orders.`OrderID` = ( SELECT `OrderID` FROM Orders WHERE `CustomerID` = ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'Alfreds Futterkiste' ) AND `OrderID` = 10692 )",
        "pred_result": "no such column: T2.Freight",
        "repair_sql": "SELECT Products.`Price` FROM Products INNER JOIN OrderDetails ON Products.`ProductID` = OrderDetails.`ProductID` INNER JOIN Orders ON OrderDetails.`OrderID` = Orders.`OrderID` INNER JOIN Customers ON Orders.`CustomerID` = Customers.`CustomerID` WHERE Customers.`CustomerName` = 'Alfreds Futterkiste' AND Orders.`OrderID` = 10692",
        "repair_result": "no such column: T2.Freight"
    },
    {
        "idx": 796,
        "db_id": "retail_world",
        "question": "What is the shipping company for order number 10558?",
        "evidence": "order number 10558 refers to OrderID = 10558;",
        "gold": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10558",
        "pred": "SELECT S.`ShipperName` FROM Orders AS O INNER JOIN Shippers AS S ON O.`ShipperID` = S.`ShipperID` WHERE O.`OrderID` = 10558",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT S.`ShipperName` FROM Orders AS O INNER JOIN Shippers AS S ON O.`ShipperID` = S.`ShipperID` WHERE O.`OrderID` = 10558;",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 797,
        "db_id": "retail_world",
        "question": "Please list any three order numbers that have been shipped using Speedy Express.",
        "evidence": "Speedy Express is the name of the shipping company; three order numbers refer to OrderID LIMIT 3;",
        "gold": "SELECT T1.OrderID FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Speedy Express' LIMIT 3",
        "pred": "SELECT `OrderID` FROM Orders WHERE `ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'Speedy Express' ) LIMIT 3",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT `OrderID` FROM Orders WHERE `ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'Speedy Express' ) LIMIT 3",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 798,
        "db_id": "retail_world",
        "question": "What are the products that belong to the beverage category?",
        "evidence": "products belong to beverage category refer to ProductName where CategoryName = 'beverage';",
        "gold": "SELECT T2.ProductName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.CategoryName = 'Beverages'",
        "pred": "SELECT ProductName FROM Products WHERE CategoryID = ( SELECT CategoryID FROM Categories WHERE CategoryName = 'Beverages' )",
        "pred_result": 1,
        "repair_sql": "SELECT ProductName FROM Products WHERE CategoryID = ( SELECT CategoryID FROM Categories WHERE CategoryName = 'Beverages' )",
        "repair_result": 1
    },
    {
        "idx": 799,
        "db_id": "retail_world",
        "question": "What is the description of the category that tofu belongs to?",
        "evidence": "tofu is the name of the product;",
        "gold": "SELECT T1.Description FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.ProductName = 'tofu'",
        "pred": "SELECT `Description` FROM Categories WHERE `CategoryID` = ( SELECT `CategoryID` FROM Products WHERE `ProductName` = 'tofu' )",
        "pred_result": 1,
        "repair_sql": "SELECT Description FROM Categories WHERE CategoryID = ( SELECT CategoryID FROM Products WHERE ProductName = 'Tofu' )",
        "repair_result": 0
    },
    {
        "idx": 800,
        "db_id": "retail_world",
        "question": "Which company supplies Gula Malacca?",
        "evidence": "Gula Malacca is the name of the product; company refers to CompanyName;",
        "gold": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Gula Malacca'",
        "pred": "SELECT `SupplierName` FROM Suppliers WHERE `SupplierID` = ( SELECT `SupplierID` FROM Products WHERE `ProductName` = 'Gula Malacca' )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT `SupplierName` FROM Suppliers WHERE `SupplierID` = ( SELECT `SupplierID` FROM Products WHERE `ProductName` = 'Gula Malacca' )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 801,
        "db_id": "retail_world",
        "question": "What are the products that are supplied by Aux joyeux ecclsiastiques?",
        "evidence": "Aux joyeux ecclsiastiques is the name of supply company; products refer to ProductName;",
        "gold": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Aux joyeux ecclsiastiques'",
        "pred": "SELECT `ProductName` FROM Products WHERE `ProductID` IN ( SELECT `ProductID` FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Aux joyeux ecclsiastiques' ) )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT p.ProductName FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.SupplierName = 'Aux joyeux ecclsiastiques'",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 802,
        "db_id": "retail_world",
        "question": "How much per unit of Konbu does Mayumi's charge?",
        "evidence": "Mayumi's is the name of the company; how much per unit of Konbu refers to UnitPrice where ProductName = 'Konbu';",
        "gold": "SELECT T1.UnitPrice FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName LIKE 'Mayumi%' AND T1.ProductName = 'Konbu'",
        "pred": "SELECT T1.`Price` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`ProductName` = 'Konbu' AND T2.`SupplierName` = 'Mayumi\\'s'",
        "pred_result": "near \"s\": syntax error",
        "repair_sql": "SELECT T1.`Price` FROM Products AS T1 JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`ProductName` = 'Konbu' AND T2.`SupplierName` = 'Mayumi''s'",
        "repair_result": "no such column: T1.UnitPrice"
    },
    {
        "idx": 803,
        "db_id": "retail_world",
        "question": "Who is the person to contact to get Camembert Pierrot?",
        "evidence": "Camembert Pierrot is the name of the product; person to contact refers to ContactName;",
        "gold": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Camembert Pierrot'",
        "pred": "SELECT `ContactName` FROM Suppliers WHERE `SupplierID` = ( SELECT `SupplierID` FROM Products WHERE `ProductName` = 'Camembert Pierrot' )",
        "pred_result": 1,
        "repair_sql": "SELECT `ContactName` FROM Suppliers WHERE `SupplierID` = ( SELECT `SupplierID` FROM Products WHERE `ProductName` = 'Camembert Pierrot' )",
        "repair_result": 1
    },
    {
        "idx": 804,
        "db_id": "retail_world",
        "question": "Please name any three products that have been discontinued in the meat or poultry category.",
        "evidence": "three products that have been discontinued refer to ProductName LIMIT 3 where Discontinued = 1; CategoryName = 'Meat/Poultry';",
        "gold": "SELECT T2.ProductName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.Discontinued = 1 AND T1.CategoryName = 'Meat/Poultry' LIMIT 3",
        "pred": "SELECT T1.`ProductName` FROM Products AS T1 WHERE T1.`CategoryID` = ( SELECT `CategoryID` FROM Categories WHERE `CategoryName` = 'Meat/Poultry' ) AND T1.`Discontinued` = 1 LIMIT 3",
        "pred_result": "no such column: T1.Discontinued",
        "repair_sql": "SELECT T1.`ProductName` FROM Products AS T1 JOIN Categories AS T2 ON T1.`CategoryID` = T2.`CategoryID` WHERE T2.`CategoryName` = 'Meat/Poultry' AND T1.`Discontinued` = 1 LIMIT 3;",
        "repair_result": "no such column: T1.Discontinued"
    },
    {
        "idx": 805,
        "db_id": "retail_world",
        "question": "Please name any two products that have the highest satisfaction levels among users of Heli Swaren GmbH & Co. KG.",
        "evidence": "High reorder level generally means high user satisfaction; the highest satisfaction levels refer to MAX(ReorderLevel); two products refer to ProductName LIMIT 2; CompanyName = 'Heli Swaren GmbH & Co. KG';",
        "gold": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Heli Swaren GmbH & Co. KG' ORDER BY T1.ReorderLevel DESC LIMIT 2",
        "pred": "SELECT T4.`ProductName` FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.`CustomerID` = T2.`CustomerID` INNER JOIN OrderDetails AS T3 ON T2.`OrderID` = T3.`OrderID` INNER JOIN Products AS T4 ON T3.`ProductID` = T4.`ProductID` WHERE T1.`CustomerName` = 'Heli Swaren GmbH & Co. KG' GROUP BY T4.`ProductName` ORDER BY MAX(T4.`ReorderLevel`) DESC LIMIT 2",
        "pred_result": "no such column: T4.ReorderLevel",
        "repair_sql": "SELECT T4.`ProductName` FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.`CustomerID` = T2.`CustomerID` INNER JOIN OrderDetails AS T3 ON T2.`OrderID` = T3.`OrderID` INNER JOIN Products AS T4 ON T3.`ProductID` = T4.`ProductID` WHERE T1.`CustomerName` = 'Heli Swaren GmbH & Co. KG' GROUP BY T4.`ProductName` ORDER BY MAX(T4.`ReorderLevel`) DESC LIMIT 2",
        "repair_result": "no such column: T4.ReorderLevel"
    },
    {
        "idx": 806,
        "db_id": "retail_world",
        "question": "Who is the one representing the company \"Heli Swaren GmbH & Co. KG\"?",
        "evidence": "Heli Swaren GmbH & Co. KG is the name of the company; who is representing refers to ContactName;",
        "gold": "SELECT ContactName FROM Suppliers WHERE CompanyName = 'Heli Swaren GmbH & Co. KG'",
        "pred": "SELECT `ContactName` FROM Suppliers WHERE `SupplierName` = 'Heli Swaren GmbH & Co. KG'",
        "pred_result": "no such column: CompanyName",
        "repair_sql": "SELECT ContactName FROM Suppliers WHERE SupplierName = 'Heli Swaren GmbH & Co. KG'",
        "repair_result": "no such column: CompanyName"
    },
    {
        "idx": 807,
        "db_id": "retail_world",
        "question": "From which country is the company \"Drachenblut Delikatessen\" from?",
        "evidence": "Drachenblut Delikatessen is the company name;",
        "gold": "SELECT Country FROM Customers WHERE CompanyName = 'Drachenblut Delikatessen'",
        "pred": "SELECT Country FROM Suppliers WHERE SupplierName = 'Drachenblut Delikatessen'",
        "pred_result": "no such column: CompanyName",
        "repair_sql": "SELECT Country FROM Suppliers WHERE SupplierName = 'Drachenblut Delikatessen'",
        "repair_result": "no such column: CompanyName"
    },
    {
        "idx": 808,
        "db_id": "retail_world",
        "question": "How many territories are there?",
        "evidence": "",
        "gold": "SELECT COUNT(TerritoryID) FROM Territories",
        "pred": "SELECT COUNT(DISTINCT City) AS Number_of_territories FROM Customers",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT COUNT(DISTINCT City) AS Number_of_territories FROM Customers",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 809,
        "db_id": "retail_world",
        "question": "What is the largest total price for an order?",
        "evidence": "the largest total price for an order can be calculated as MAX(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1-Discount)));",
        "gold": "SELECT SUM(UnitPrice) FROM `Order Details` GROUP BY OrderID ORDER BY SUM(UnitPrice) DESC LIMIT 1",
        "pred": "SELECT MAX(TotalPrice) AS LargestTotalPrice FROM ( SELECT T1.`OrderID`, SUM(T2.`Price` * T3.`Quantity`) AS TotalPrice FROM Orders AS T1 INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` INNER JOIN Products AS T2 ON T3.`ProductID` = T2.`ProductID` GROUP BY T1.`OrderID` )",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT MAX(TotalPrice) AS LargestTotalPrice FROM ( SELECT T1.`OrderID`, SUM(T2.`Price` * T3.`Quantity`) AS TotalPrice FROM Orders AS T1 INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` INNER JOIN Products AS T2 ON T3.`ProductID` = T2.`ProductID` GROUP BY T1.`OrderID` )",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 810,
        "db_id": "retail_world",
        "question": "Which product is the most expensive?",
        "evidence": "most expensive product refers to ProductName where MAX(UnitPrice);",
        "gold": "SELECT ProductName FROM Products WHERE UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )",
        "pred": "SELECT `ProductName` FROM Products WHERE `Price` = ( SELECT MAX(`Price`) FROM Products )",
        "pred_result": "no such column: UnitPrice",
        "repair_sql": "SELECT `ProductName` FROM Products WHERE `Price` = ( SELECT MAX(`Price`) FROM Products )",
        "repair_result": "no such column: UnitPrice"
    },
    {
        "idx": 811,
        "db_id": "retail_world",
        "question": "How many of the orders are shipped to France?",
        "evidence": "shipped to France refers to ShipCountry = 'France';",
        "gold": "SELECT COUNT(ShipCountry) FROM Orders WHERE ShipCountry = 'France'",
        "pred": "SELECT COUNT(DISTINCT T1.`OrderID`) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` WHERE T1.`ShipCountry` = 'France'",
        "pred_result": "no such column: T1.ShipCountry",
        "repair_sql": "SELECT COUNT(DISTINCT T1.`OrderID`) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` INNER JOIN Customers AS T3 ON T1.`CustomerID` = T3.`CustomerID` WHERE T3.`Country` = 'France'",
        "repair_result": "no such column: ShipCountry"
    },
    {
        "idx": 812,
        "db_id": "retail_world",
        "question": "Which region does Hoffman Estates belong to?",
        "evidence": "Hoffman Estates refer to TerritoryDescription;",
        "gold": "SELECT T2.RegionDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T1.TerritoryDescription = 'Hoffman Estates'",
        "pred": "SELECT T1.`TerritoryDescription` FROM Territories AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.`TerritoryID` = T2.`TerritoryID` INNER JOIN Employees AS T3 ON T2.`EmployeeID` = T3.`EmployeeID` WHERE T3.`LastName` = 'Hoffman'",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT T1.`TerritoryDescription` FROM Territories AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.`TerritoryID` = T2.`TerritoryID` INNER JOIN Employees AS T3 ON T2.`EmployeeID` = T3.`EmployeeID` WHERE T3.`LastName` = 'Hoffman Estates'",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 813,
        "db_id": "retail_world",
        "question": "What is the homepage link for the company that supplies the product \"Thringer Rostbratwurst\"?",
        "evidence": "ProductName = 'Thringer Rostbratwurst';",
        "gold": "SELECT T2.HomePage FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Thringer Rostbratwurst'",
        "pred": "SELECT T2.`HomePage` FROM Suppliers AS T2 WHERE T2.`SupplierID` = ( SELECT T1.`SupplierID` FROM Products AS T1 WHERE T1.`ProductName` = 'Thringer Rostbratwurst' )",
        "pred_result": "no such column: T2.HomePage",
        "repair_sql": "SELECT T2.`HomePage` FROM Suppliers AS T2 JOIN Products AS T1 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`ProductName` = 'Thringer Rostbratwurst'",
        "repair_result": "no such column: T2.HomePage"
    },
    {
        "idx": 814,
        "db_id": "retail_world",
        "question": "List the first names of the employees who take the orders that ship to the city of \"Reims\".",
        "evidence": "ship to the city of \"Reims\" refers to ShipCity = Reims';",
        "gold": "SELECT DISTINCT T1.FirstName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.ShipCity = 'Reims'",
        "pred": "SELECT T3.`FirstName` FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` INNER JOIN Employees AS T3 ON T1.`EmployeeID` = T3.`EmployeeID` INNER JOIN Customers AS T4 ON T1.`CustomerID` = T4.`CustomerID` WHERE T4.`City` = 'Reims'",
        "pred_result": "no such column: T2.ShipCity",
        "repair_sql": "SELECT T3.`FirstName` FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` INNER JOIN Employees AS T3 ON T1.`EmployeeID` = T3.`EmployeeID` INNER JOIN Customers AS T4 ON T1.`CustomerID` = T4.`CustomerID` WHERE T4.`City` = 'Reims'",
        "repair_result": "no such column: T2.ShipCity"
    },
    {
        "idx": 815,
        "db_id": "retail_world",
        "question": "What is the largest quantity of \"Manjimup Dried Apples\" for an order?",
        "evidence": "the largest quantity of \"Manjimup Dried Apples\" refers to MAX(Quantity) where ProductName = 'Manjimup Dried Apples';",
        "gold": "SELECT T2.Quantity FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T2.ProductID = T1.ProductID WHERE T1.ProductName = 'Manjimup Dried Apples' ORDER BY T2.Quantity DESC LIMIT 1",
        "pred": "SELECT MAX(`Quantity`) FROM OrderDetails WHERE `ProductID` = ( SELECT `ProductID` FROM Products WHERE `ProductName` = 'Manjimup Dried Apples' )",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT MAX(`Quantity`) FROM OrderDetails WHERE `ProductID` = ( SELECT `ProductID` FROM Products WHERE `ProductName` = 'Manjimup Dried Apples' )",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 816,
        "db_id": "retail_world",
        "question": "How many orders were shipped by \"Speedy Express\"?",
        "evidence": "\"Speedy Express\" is the name of the shipping company; orders refer to OrderID;",
        "gold": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Speedy Express'",
        "pred": "SELECT COUNT(*) FROM Orders WHERE `ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'Speedy Express' )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT COUNT(*) FROM Orders WHERE `ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'Speedy Express' )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 817,
        "db_id": "retail_world",
        "question": "Make a list of all the territories in the Southern region.",
        "evidence": "territories in the Southern region refer to TerritoryDescription WHERE RegionDescription = 'Southern';",
        "gold": "SELECT DISTINCT T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Southern'",
        "pred": "SELECT TerritoryDescription FROM Territories AS T INNER JOIN Region AS R ON T.RegionID = R.RegionID WHERE R.RegionDescription = 'Southern'",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT TerritoryDescription FROM Territories WHERE RegionID IN (SELECT RegionID FROM Region WHERE RegionDescription = 'Southern');",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 818,
        "db_id": "retail_world",
        "question": "What are the prices on cheese products?",
        "evidence": "prices on cheese refer to UnitPrice WHERE Description = 'Cheeses';",
        "gold": "SELECT T2.UnitPrice FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.Description = 'Cheeses'",
        "pred": "SELECT Price FROM Products WHERE ProductID IN ( SELECT ProductID FROM OrderDetails WHERE ProductID = ( SELECT ProductID FROM Products WHERE CategoryID = ( SELECT CategoryID FROM Categories WHERE CategoryName = 'Dairy Products' ) ) )",
        "pred_result": "no such column: T2.UnitPrice",
        "repair_sql": "SELECT Price FROM Products WHERE ProductID IN ( SELECT ProductID FROM OrderDetails WHERE ProductID = ( SELECT ProductID FROM Products WHERE CategoryID = ( SELECT CategoryID FROM Categories WHERE CategoryName = 'Dairy Products' ) ) )",
        "repair_result": "no such column: T2.UnitPrice"
    },
    {
        "idx": 819,
        "db_id": "retail_world",
        "question": "How many orders did \"Laughing Bacchus Wine Cellars\" make?",
        "evidence": "\"Laughing Bacchus Wine Cellars\" is the name of the company; orders refer to OrderID;",
        "gold": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CompanyName = 'Laughing Bacchus Wine Cellars'",
        "pred": "SELECT COUNT(DISTINCT T1.`OrderID`) AS num_orders FROM Orders AS T1 WHERE T1.`CustomerID` = ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'Laughing Bacchus Wine Cellars' )",
        "pred_result": "no such column: T1.CompanyName",
        "repair_sql": "SELECT COUNT(DISTINCT T1.`OrderID`) AS num_orders FROM Orders AS T1 WHERE T1.`CustomerID` = ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'Laughing Bacchus Wine Cellars' )",
        "repair_result": "no such column: T1.CompanyName"
    },
    {
        "idx": 820,
        "db_id": "retail_world",
        "question": "List all the products that were shipped to Starenweg 5.",
        "evidence": "products shipped to Starenweg 5 refer to ProductName where ShipAddress = 'Starenweg 5';",
        "gold": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.ShipAddress = 'Starenweg 5' GROUP BY T3.ProductName",
        "pred": "SELECT `ProductName` FROM Products WHERE `ProductID` IN ( SELECT `ProductID` FROM OrderDetails WHERE `OrderID` IN ( SELECT `OrderID` FROM Orders WHERE `CustomerID` = ( SELECT `CustomerID` FROM Customers WHERE `Address` = 'Starenweg 5' ) ) )",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID WHERE c.Address = 'Starenweg 5';",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 821,
        "db_id": "retail_world",
        "question": "What are the products by the company \"Bigfoot Breweries\"?",
        "evidence": "Bigfoot Breweries is the name of the company; products refer to ProductName;",
        "gold": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Bigfoot Breweries'",
        "pred": "SELECT DISTINCT T1.`ProductName` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T2.`SupplierName` = 'Bigfoot Breweries'",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT DISTINCT T1.`ProductName` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T2.`SupplierName` = 'Bigfoot Breweries'",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 822,
        "db_id": "retail_world",
        "question": "What are the names of Robert King's territories?",
        "evidence": "Robert King is a full name of an employee where LastName = 'King' AND FirstName = 'Robert'; names of territories refer to TerritoryDescription;",
        "gold": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.LastName = 'King' AND T1.FirstName = 'Robert'",
        "pred": "SELECT DISTINCT `TerritoryDescription` FROM Territories INNER JOIN EmployeeTerritories ON Territories.`TerritoryID` = EmployeeTerritories.`TerritoryID` WHERE EmployeeTerritories.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `LastName` = 'King' AND `FirstName` = 'Robert' )",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT DISTINCT TerritoryDescription FROM Territories INNER JOIN EmployeeTerritories ON Territories.TerritoryID = EmployeeTerritories.TerritoryID WHERE EmployeeTerritories.EmployeeID = ( SELECT EmployeeID FROM Employees WHERE LastName = 'King' AND FirstName = 'Robert' )",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 823,
        "db_id": "retail_world",
        "question": "Provide the name of the contact person who made the orders that shipped to Switzerland.",
        "evidence": "shipped to Switzerland refers to ShipCountry = 'Switzerland'; contact person refers to Customers;",
        "gold": "SELECT T1.ContactName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.ShipCountry = 'Switzerland' GROUP BY T1.ContactName",
        "pred": "SELECT T2.`ContactName` FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`ShipCountry` = 'Switzerland'",
        "pred_result": "no such column: T1.ShipCountry",
        "repair_sql": "SELECT T2.`ContactName` FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`ShipCountry` = 'Switzerland'",
        "repair_result": "no such column: T1.ShipCountry"
    },
    {
        "idx": 824,
        "db_id": "retail_world",
        "question": "What proportion of orders are taken by the Sales Representative?",
        "evidence": "DIVIDE(COUNT(OrderID where Title = 'Sales Representative'), COUNT(OrderID)) as percentage;",
        "gold": "SELECT CAST(COUNT(CASE WHEN T1.Title = 'Sales Representative' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID",
        "pred": "SELECT COUNT(T1.`OrderID`) * 1.0 / (SELECT COUNT(`OrderID`) FROM Orders) AS percentage FROM Orders AS T1 WHERE T1.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `Title` = 'Sales Representative' )",
        "pred_result": "no such column: Title",
        "repair_sql": "SELECT COUNT(T1.`OrderID`) * 1.0 / (SELECT COUNT(`OrderID`) FROM Orders) AS percentage FROM Orders AS T1 JOIN Employees AS E ON T1.`EmployeeID` = E.`EmployeeID` WHERE E.`Title` = 'Sales Representative'",
        "repair_result": "no such column: E.Title"
    },
    {
        "idx": 825,
        "db_id": "retail_world",
        "question": "Among the USA employess, how many of them has PhD title of courtesy?",
        "evidence": "\"USA\" is the Country; PhD title of courtesy refers to TitleOfCourtesy = 'Dr.'",
        "gold": "SELECT COUNT(Country) FROM Employees WHERE TitleOfCourtesy = 'Dr.' AND Country = 'USA'",
        "pred": "SELECT COUNT(T1.`EmployeeID`) FROM Employees AS T1 WHERE T1.`TitleOfCourtesy` = 'Dr.' AND T1.`Country` = 'USA'",
        "pred_result": "no such column: T1.TitleOfCourtesy",
        "repair_sql": "SELECT COUNT(T1.`EmployeeID`) FROM Employees AS T1 JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T1.`TitleOfCourtesy` = 'Dr.' AND T2.`Country` = 'USA'",
        "repair_result": "no such column: T1.TitleOfCourtesy"
    },
    {
        "idx": 826,
        "db_id": "retail_world",
        "question": "What is the average salary for employees from ID 1 to 9?",
        "evidence": "ID 1 to 9 refers to EmployeeID BETWEEN 1 AND 9; Average salary = AVG(Salary)",
        "gold": "SELECT AVG(Salary) FROM Employees WHERE EmployeeID BETWEEN 1 AND 9",
        "pred": "SELECT AVG(T1.`Salary`) FROM Employees AS T1 WHERE T1.`EmployeeID` BETWEEN 1 AND 9",
        "pred_result": "no such column: T1.Salary",
        "repair_sql": "SELECT AVG(T1.`Salary`) FROM Employees AS T1 WHERE T1.`EmployeeID` BETWEEN 1 AND 9",
        "repair_result": "no such column: T1.Salary"
    },
    {
        "idx": 827,
        "db_id": "retail_world",
        "question": "Calculate the total salary for employees from UK.",
        "evidence": "\"UK\" is the Country; total salary refers to Sum(Salary)",
        "gold": "SELECT SUM(Salary) FROM Employees WHERE Country = 'UK'",
        "pred": "SELECT SUM(T1.`Salary`) FROM Employees AS T1 WHERE T1.`EmployeeID` IN ( SELECT T2.`EmployeeID` FROM Employees AS T2 WHERE T2.`Country` = 'UK' )",
        "pred_result": "no such column: T1.Salary",
        "repair_sql": "SELECT SUM(T1.`Salary`) FROM Employees AS T1 WHERE T1.`EmployeeID` IN ( SELECT T2.`EmployeeID` FROM Employees AS T2 WHERE T2.`Country` = 'UK' )",
        "repair_result": "no such column: T1.Salary"
    },
    {
        "idx": 828,
        "db_id": "retail_world",
        "question": "Is (206) 555-1189 the home phone number for Laura Callahan?",
        "evidence": "\"Laura Callahan\" refers to FirstName = 'Laura AND LastName = 'Callahan",
        "gold": "SELECT CASE WHEN HomePhone = '(206) 555-1189' THEN 'YES' ELSE 'NO' END FROM Employees WHERE FirstName = 'Laura' AND LastName = 'Callahan'",
        "pred": "SELECT CASE WHEN EXISTS ( SELECT `Phone` FROM Employees WHERE `EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Laura' AND `LastName` = 'Callahan' ) AND `Phone` = '(206) 555-1189' ) THEN 'Yes' ELSE 'No' END AS \"Is (206) 555-1189 the home phone number for Laura Callahan?\"",
        "pred_result": "no such column: Phone",
        "repair_sql": "SELECT CASE WHEN EXISTS ( SELECT `Phone` FROM Employees WHERE `FirstName` = 'Laura' AND `LastName` = 'Callahan' AND `Phone` = '(206) 555-1189' ) THEN 'Yes' ELSE 'No' END AS \"Is (206) 555-1189 the home phone number for Laura Callahan?\"",
        "repair_result": "no such column: Phone"
    },
    {
        "idx": 829,
        "db_id": "retail_world",
        "question": "Write down the notes of employee with the highest salary.",
        "evidence": "highest salary refers to Max(Salary)",
        "gold": "SELECT Notes FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )",
        "pred": "SELECT Notes FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )",
        "pred_result": "no such column: Salary",
        "repair_sql": "SELECT Notes FROM Employees WHERE EmployeeID = ( SELECT EmployeeID FROM Employees ORDER BY Salary DESC LIMIT 1 )",
        "repair_result": "no such column: Salary"
    },
    {
        "idx": 830,
        "db_id": "retail_world",
        "question": "List down the customer ids who placed order with Michael Suyama.",
        "evidence": "",
        "gold": "SELECT T2.CustomerID FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'",
        "pred": "SELECT DISTINCT `CustomerID` FROM Orders WHERE `OrderID` IN ( SELECT `OrderID` FROM Orders WHERE `EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Michael' AND `LastName` = 'Suyama' ) )",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `CustomerID` FROM Orders WHERE `OrderID` IN ( SELECT `OrderID` FROM Orders WHERE `EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Michael' AND `LastName` = 'Suyama' ) )",
        "repair_result": 1
    },
    {
        "idx": 831,
        "db_id": "retail_world",
        "question": "Where are the ship countries of orders placed by Janet Leverling?",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.ShipCountry FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Janet' AND T1.LastName = 'Leverling'",
        "pred": "SELECT DISTINCT `ShipperName` FROM Shippers WHERE `ShipperID` IN ( SELECT `ShipperID` FROM Orders WHERE `EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `LastName` = 'Leverling' AND `FirstName` = 'Janet' ) )",
        "pred_result": "no such column: T2.ShipCountry",
        "repair_sql": "SELECT DISTINCT `ShipperName` FROM Shippers WHERE `ShipperID` IN ( SELECT `ShipperID` FROM Orders WHERE `EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `LastName` = 'Leverling' AND `FirstName` = 'Janet' ) )",
        "repair_result": "no such column: T2.ShipCountry"
    },
    {
        "idx": 832,
        "db_id": "retail_world",
        "question": "How many orders have Margaret Peacock placed?",
        "evidence": "",
        "gold": "SELECT COUNT(T2.EmployeeID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Margaret' AND T1.LastName = 'Peacock'",
        "pred": "SELECT COUNT(DISTINCT T1.`OrderID`) AS num_orders FROM Orders AS T1 WHERE T1.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Margaret' AND `LastName` = 'Peacock' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`OrderID`) AS num_orders FROM Orders AS T1 WHERE T1.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Margaret' AND `LastName` = 'Peacock' )",
        "repair_result": 1
    },
    {
        "idx": 833,
        "db_id": "retail_world",
        "question": "Calculate the average salary per order for Andrew Fuller.",
        "evidence": "average salary = AVG(Salary)",
        "gold": "SELECT CAST(SUM(T1.Salary) AS REAL) / COUNT(T2.EmployeeID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Andrew' AND T1.LastName = 'Fuller'",
        "pred": "SELECT AVG(T3.`A11`) FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN district AS T3 ON T2.`district_id` = T3.`district_id` WHERE T2.`LastName` = 'Fuller' AND T2.`FirstName` = 'Andrew'",
        "pred_result": "no such table: district",
        "repair_sql": "SELECT AVG(T3.`Salary`) FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T2.`LastName` = 'Fuller' AND T2.`FirstName` = 'Andrew'",
        "repair_result": "no such column: T3.Salary"
    },
    {
        "idx": 834,
        "db_id": "retail_world",
        "question": "What are the product names of Exotic Liquids?",
        "evidence": "\"Exotic Liquids\" is the CompanyName",
        "gold": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids'",
        "pred": "SELECT `ProductName` FROM Products WHERE `ProductID` IN ( SELECT `ProductID` FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Exotic Liquids' ) )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT p.ProductName FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.SupplierName = 'Exotic Liquids'",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 835,
        "db_id": "retail_world",
        "question": "List down the quantity per unit for products of Tokyo Traders.",
        "evidence": "\"Tokyo Traders\" is the CompanyName",
        "gold": "SELECT T1.QuantityPerUnit FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Tokyo Traders'",
        "pred": "SELECT `Unit`, `Quantity` FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.`ProductID` = T2.`ProductID` INNER JOIN Orders AS T3 ON T2.`OrderID` = T3.`OrderID` INNER JOIN Suppliers AS T4 ON T1.`SupplierID` = T4.`SupplierID` WHERE T4.`SupplierName` = 'Tokyo Traders'",
        "pred_result": "no such column: T1.QuantityPerUnit",
        "repair_sql": "SELECT `Unit`, `Quantity` FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.`ProductID` = T2.`ProductID` INNER JOIN Orders AS T3 ON T2.`OrderID` = T3.`OrderID` INNER JOIN Suppliers AS T4 ON T1.`SupplierID` = T4.`SupplierID` WHERE T4.`SupplierName` = 'Tokyo Traders'",
        "repair_result": "no such column: T1.QuantityPerUnit"
    },
    {
        "idx": 836,
        "db_id": "retail_world",
        "question": "How many products have been discountinued by New Orleans Cajun Delights?",
        "evidence": "\"New Orleans Cajun Delights\" is the CompanyName; discontinued refers to Discontinued = 1",
        "gold": "SELECT COUNT(T1.Discontinued) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'New Orleans Cajun Delights'",
        "pred": "SELECT COUNT(*) FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.`ProductID` = T2.`ProductID` INNER JOIN Orders AS T3 ON T2.`OrderID` = T3.`OrderID` WHERE T3.`CustomerID` = ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'New Orleans Cajun Delights' ) AND T1.`Discontinued` = 1",
        "pred_result": "no such column: T1.Discontinued",
        "repair_sql": "SELECT COUNT(*) FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.`ProductID` = T2.`ProductID` INNER JOIN Orders AS T3 ON T2.`OrderID` = T3.`OrderID` WHERE T3.`CustomerID` = ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'New Orleans Cajun Delights' ) AND T1.`Discontinued` = 1",
        "repair_result": "no such column: T1.Discontinued"
    },
    {
        "idx": 837,
        "db_id": "retail_world",
        "question": "Please calculate the average unit price for products of Formaggi Fortini s.r.l.",
        "evidence": "\"Formaggi Fortini s.r.l.\" is the CompanyName; average unit price = AVG(UnitPrice)",
        "gold": "SELECT SUM(T1.UnitPrice) / COUNT(T1.SupplierID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Formaggi Fortini s.r.l.'",
        "pred": "SELECT AVG(`Price`) FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Formaggi Fortini s.r.l.' )",
        "pred_result": "no such column: T1.UnitPrice",
        "repair_sql": "SELECT AVG(`Price`) FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Formaggi Fortini s.r.l.' )",
        "repair_result": "no such column: T1.UnitPrice"
    },
    {
        "idx": 838,
        "db_id": "retail_world",
        "question": "Calculate the total products that are supplied by Japan suppliers.",
        "evidence": "Japan Supplier refers to Country = 'Japan'; total product refers to Count (ProductName)",
        "gold": "SELECT COUNT(T1.SupplierID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Japan'",
        "pred": "SELECT COUNT(T1.`ProductName`) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T2.`Country` = 'Japan'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(T1.`ProductName`) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T2.`Country` = 'Japan'",
        "repair_result": 1
    },
    {
        "idx": 839,
        "db_id": "retail_world",
        "question": "What is the contact name for product Teatime Chocolate Biscuits?",
        "evidence": "\"Teatime Chocolate Biscuits\" is the ProductName",
        "gold": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Teatime Chocolate Biscuits'",
        "pred": "SELECT `ContactName` FROM Suppliers WHERE `SupplierID` = ( SELECT `SupplierID` FROM Products WHERE `ProductName` = 'Teatime Chocolate Biscuits' )",
        "pred_result": 1,
        "repair_sql": "SELECT `ContactName` FROM Suppliers WHERE `SupplierID` = ( SELECT `SupplierID` FROM Products WHERE `ProductName` = 'Teatime Chocolate Biscuits' )",
        "repair_result": 1
    },
    {
        "idx": 840,
        "db_id": "retail_world",
        "question": "List down the company names that have the highest reorder level.",
        "evidence": "Highest reorder level refers to Max(ReorderLevel)",
        "gold": "SELECT DISTINCT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )",
        "pred": "SELECT DISTINCT T5.`SupplierName` FROM Products AS T1 INNER JOIN Suppliers AS T5 ON T1.`SupplierID` = T5.`SupplierID` WHERE T1.`ReorderLevel` = ( SELECT MAX(`ReorderLevel`) FROM Products )",
        "pred_result": "no such column: T1.ReorderLevel",
        "repair_sql": "SELECT DISTINCT T5.`SupplierName` FROM Products AS T1 INNER JOIN Suppliers AS T5 ON T1.`SupplierID` = T5.`SupplierID` WHERE T1.`ProductID` = ( SELECT T2.`ProductID` FROM Products AS T2 WHERE T2.`ReorderLevel` = ( SELECT MAX(`ReorderLevel`) FROM Products ) )",
        "repair_result": "no such column: T2.ReorderLevel"
    },
    {
        "idx": 841,
        "db_id": "retail_world",
        "question": "What is the contact title for the person who supplied a product that is 10 boxes x 12 pieces.",
        "evidence": "\"10 boxes x 12 pieces\" is the QuantityPerUnit",
        "gold": "SELECT T2.ContactTitle FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.QuantityPerUnit = '10 boxes x 12 pieces'",
        "pred": "SELECT `ContactName` FROM Suppliers WHERE `SupplierID` = ( SELECT `SupplierID` FROM Products WHERE `QuantityPerUnit` = '10 boxes x 12 pieces' )",
        "pred_result": "no such column: QuantityPerUnit",
        "repair_sql": "SELECT s.ContactName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE p.Unit = '10 boxes x 12 pieces'",
        "repair_result": "no such column: T2.ContactTitle"
    },
    {
        "idx": 842,
        "db_id": "retail_world",
        "question": "What is the total units on order from Exotic Liquids?",
        "evidence": "\"Exotic Liquids\" is the CompanyName; total unit on order = Sum(UnitsOnOrder)",
        "gold": "SELECT SUM(T1.UnitsOnOrder) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids'",
        "pred": "SELECT SUM(`Quantity`) FROM OrderDetails WHERE `ProductID` IN ( SELECT `ProductID` FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Exotic Liquids' ) )",
        "pred_result": "no such column: T1.UnitsOnOrder",
        "repair_sql": "SELECT SUM(`Quantity`) FROM OrderDetails JOIN Products ON OrderDetails.ProductID = Products.ProductID JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID WHERE Suppliers.SupplierName = 'Exotic Liquids'",
        "repair_result": "no such column: T1.UnitsOnOrder"
    },
    {
        "idx": 843,
        "db_id": "retail_world",
        "question": "Calculate the percentage of products supplied by Gai pturage over all products.",
        "evidence": "\"Gai pturage\" is the CompanyName; Percentage = Divide (Count(SupplierID where CompanyName = 'Gai pturage'), Count (SupplierID)) * 100",
        "gold": "SELECT CAST(COUNT(CASE WHEN T2.CompanyName = 'Gai pturage' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.SupplierID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID",
        "pred": "SELECT (CAST(COUNT(CASE WHEN Suppliers.`SupplierName` = 'Gai pturage' THEN 1 END) AS REAL) / COUNT(*)) * 100 FROM Products INNER JOIN Suppliers ON Products.`SupplierID` = Suppliers.`SupplierID`",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT (CAST(COUNT(CASE WHEN Suppliers.`SupplierName` = 'Gai pturage' THEN 1 END) AS REAL) / COUNT(*)) * 100 FROM Products INNER JOIN Suppliers ON Products.`SupplierID` = Suppliers.`SupplierID`",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 844,
        "db_id": "retail_world",
        "question": "List the product ID of the top five products, by descending order, the number of quantities in stock.",
        "evidence": "by descending in number of quantity in stock refers to max(UnitsInStock)",
        "gold": "SELECT ProductID FROM Products ORDER BY UnitsInStock DESC LIMIT 5",
        "pred": "SELECT T1.`ProductID` FROM Products AS T1 ORDER BY T1.`UnitsInStock` DESC LIMIT 5",
        "pred_result": "no such column: T1.UnitsInStock",
        "repair_sql": "SELECT T1.`ProductID` FROM Products AS T1 ORDER BY T1.`UnitsInStock` DESC LIMIT 5",
        "repair_result": "no such column: T1.UnitsInStock"
    },
    {
        "idx": 845,
        "db_id": "retail_world",
        "question": "Among the products, how many of them were discontinued in production?",
        "evidence": "discontinued refers to Discontinued = 1",
        "gold": "SELECT COUNT(*) FROM Products WHERE Discontinued = 1",
        "pred": "SELECT COUNT(*) FROM Products WHERE Discontinued = 1",
        "pred_result": "no such column: Discontinued",
        "repair_sql": "SELECT COUNT(*) FROM Products WHERE Discontinued = 1",
        "repair_result": "no such column: Discontinued"
    },
    {
        "idx": 846,
        "db_id": "retail_world",
        "question": "Give me the address, home phone and salary of the Sales Manager.",
        "evidence": "\"Sales Manage\" is the Title",
        "gold": "SELECT Address, HomePhone, Salary FROM Employees WHERE Title = 'Sales Manager'",
        "pred": "SELECT T1.`Address`, T1.`HomePhone`, T2.`Salary` FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T1.`Title` = 'Sales Manager'",
        "pred_result": "no such column: T1.Address",
        "repair_sql": "SELECT T1.`Address`, T1.`HomePhone`, T1.`Salary` FROM Employees AS T1 JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T1.`Title` = 'Sales Manager'",
        "repair_result": "no such column: T1.Address"
    },
    {
        "idx": 847,
        "db_id": "retail_world",
        "question": "What is the full name of the Vice President of Sales. Give me the URL of his/her photo.",
        "evidence": "\"Vice Present of Sales\" refers to Title = 'Vice President, Sales'; full name refers to FirstName, LastName; url of photo refers to PhotoPath",
        "gold": "SELECT FirstName, LastName FROM Employees WHERE Title = 'Vice President, Sales'",
        "pred": "SELECT `Photo` FROM Employees WHERE `EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `Title` = 'Vice President, Sales' )",
        "pred_result": "no such column: Title",
        "repair_sql": "SELECT E.Photo FROM Employees E WHERE E.EmployeeID = ( SELECT EmployeeID FROM Employees WHERE Title = 'Vice President, Sales' )",
        "repair_result": "no such column: Title"
    },
    {
        "idx": 848,
        "db_id": "retail_world",
        "question": "Write down the top ten companies with the most total sales by amount.",
        "evidence": "most total sales refers to Max(SaleAmount); companies refers to CompanyName",
        "gold": "SELECT CompanyName FROM `Sales Totals by Amount` ORDER BY SaleAmount DESC LIMIT 10",
        "pred": "SELECT C.`CustomerName`, SUM(P.`Price` * OD.`Quantity`) AS TotalSales FROM Customers AS C JOIN Orders AS O ON C.`CustomerID` = O.`CustomerID` JOIN OrderDetails AS OD ON O.`OrderID` = OD.`OrderID` JOIN Products AS P ON OD.`ProductID` = P.`ProductID` GROUP BY C.`CustomerName` ORDER BY TotalSales DESC LIMIT 10",
        "pred_result": "no such table: Sales Totals by Amount",
        "repair_sql": "SELECT C.`CustomerName`, SUM(P.`Price` * OD.`Quantity`) AS TotalSales FROM Customers AS C JOIN Orders AS O ON C.`CustomerID` = O.`CustomerID` JOIN OrderDetails AS OD ON O.`OrderID` = OD.`OrderID` JOIN Products AS P ON OD.`ProductID` = P.`ProductID` GROUP BY C.`CustomerName` ORDER BY TotalSales DESC LIMIT 10",
        "repair_result": "no such table: Sales Totals by Amount"
    },
    {
        "idx": 849,
        "db_id": "retail_world",
        "question": "What is the average sales for each categories?",
        "evidence": "average sales = AVG(ProductSales)",
        "gold": "SELECT AVG(ProductSales) FROM `Sales by Category` GROUP BY CategoryName",
        "pred": "SELECT C.`CategoryName`, AVG(ProductSales) AS AverageSales FROM ( SELECT C.`CategoryName`, P.`ProductName`, SUM(OD.`Quantity` * P.`Price`) AS ProductSales FROM Categories AS C INNER JOIN Products AS P ON C.`CategoryID` = P.`CategoryID` INNER JOIN OrderDetails AS OD ON P.`ProductID` = OD.`ProductID` INNER JOIN Orders AS O ON OD.`OrderID` = O.`OrderID` GROUP BY C.`CategoryName`, P.`ProductName` ) AS SubQuery GROUP BY C.`CategoryName`",
        "pred_result": "no such column: C.CategoryName",
        "repair_sql": "SELECT C.`CategoryName`, AVG(ProductSales) AS AverageSales FROM ( SELECT C.`CategoryName`, SUM(OD.`Quantity` * P.`Price`) AS ProductSales FROM Categories AS C INNER JOIN Products AS P ON C.`CategoryID` = P.`CategoryID` INNER JOIN OrderDetails AS OD ON P.`ProductID` = OD.`ProductID` INNER JOIN Orders AS O ON OD.`OrderID` = O.`OrderID` GROUP BY C.`CategoryName` ) AS SubQuery GROUP BY C.`CategoryName`",
        "repair_result": "no such column: C.CategoryName"
    },
    {
        "idx": 850,
        "db_id": "retail_world",
        "question": "Compute the total order quantity for Uncle Bob's Organic Dried Pears so far.",
        "evidence": "\"Uncle Bob's Organic Dried Pears\" is the ProductName; total order quantity refers to Sum(Quantity)",
        "gold": "SELECT SUM(T2.Quantity) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName LIKE 'Uncle Bob%s Organic Dried Pears'",
        "pred": "SELECT SUM(T3.`Quantity`) FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` WHERE T3.`ProductName` = 'Uncle Bob''s Organic Dried Pears'",
        "pred_result": "no such column: T3.Quantity",
        "repair_sql": "SELECT SUM(T2.`Quantity`) FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` WHERE T3.`ProductName` = 'Uncle Bob''s Organic Dried Pears'",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 851,
        "db_id": "retail_world",
        "question": "Among the seafoods, how many of them have an order quantity of more than 50?",
        "evidence": "\"Seafood\" is the CategoryName; order quantity of more than 50 refers to Quantity > 50",
        "gold": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Seafood' AND T2.Quantity > 50",
        "pred": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.ProductID = T2.ProductID WHERE T1.CategoryID = ( SELECT CategoryID FROM Categories WHERE CategoryName = 'Seafood' ) AND T2.Quantity > 50",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.ProductID = T2.ProductID WHERE T1.CategoryID = ( SELECT CategoryID FROM Categories WHERE CategoryName = 'Seafood' ) AND T2.Quantity > 50",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 852,
        "db_id": "retail_world",
        "question": "List the products whose supplier is Pavlova, Ltd. Please include the product ID and re-order level.",
        "evidence": "\"Pavlova, Ltd\" is the CompanyName; products refers to ProductName",
        "gold": "SELECT T1.ProductName, T1.ProductID, T1.ReorderLevel FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Pavlova, Ltd.'",
        "pred": "SELECT T1.`ProductID`, T1.`ReorderLevel` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T2.`SupplierName` = 'Pavlova, Ltd'",
        "pred_result": "no such column: T1.ReorderLevel",
        "repair_sql": "SELECT T1.`ProductID`, T1.`ReorderLevel` FROM Products AS T1 JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T2.`SupplierName` = 'Pavlova, Ltd'",
        "repair_result": "no such column: T1.ReorderLevel"
    },
    {
        "idx": 853,
        "db_id": "retail_world",
        "question": "Who are the suppliers of the discontinued products?",
        "evidence": "discontinued product refers to Discontinued = 1; supplier refers to CompanyName",
        "gold": "SELECT DISTINCT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.Discontinued = 1",
        "pred": "SELECT DISTINCT `SupplierName` FROM Suppliers WHERE `SupplierID` IN ( SELECT DISTINCT `SupplierID` FROM Products WHERE `ProductID` IN ( SELECT `ProductID` FROM Products WHERE Discontinued = 1 ) )",
        "pred_result": "no such column: Discontinued",
        "repair_sql": "SELECT DISTINCT s.`SupplierName` FROM Suppliers s JOIN Products p ON s.`SupplierID` = p.`SupplierID` WHERE p.`ProductID` IN ( SELECT `ProductID` FROM Products WHERE Discontinued = 1 )",
        "repair_result": "no such column: Discontinued"
    },
    {
        "idx": 854,
        "db_id": "retail_world",
        "question": "Among the employees, give me the full names of those who have less than 4 territories.",
        "evidence": "less than 4 territories refers to EmployeeID where Count(TerritoryID) < 4",
        "gold": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.EmployeeID < 4",
        "pred": "SELECT T1.`FirstName` || ' ' || T1.`LastName` AS FullName FROM Employees AS T1 LEFT JOIN EmployeeTerritories AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` GROUP BY T1.`EmployeeID` HAVING COUNT(T2.`TerritoryID`) < 4",
        "pred_result": "no such table: EmployeeTerritories",
        "repair_sql": "SELECT T1.`FirstName` || ' ' || T1.`LastName` AS FullName FROM Employees AS T1 LEFT JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` LEFT JOIN OrderDetails AS T3 ON T2.`OrderID` = T3.`OrderID` GROUP BY T1.`EmployeeID` HAVING COUNT(DISTINCT T3.`OrderID`) < 4",
        "repair_result": "no such table: EmployeeTerritories"
    },
    {
        "idx": 855,
        "db_id": "retail_world",
        "question": "How many employees have territories in the Eastern region?",
        "evidence": "\"Eastern\" is the RegionDescription",
        "gold": "SELECT COUNT(DISTINCT T1.FirstName) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T4.RegionDescription = 'Eastern'",
        "pred": "SELECT COUNT(*) FROM EmployeeTerritories AS T1 INNER JOIN Territories AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T2.RegionID = ( SELECT RegionID FROM Region WHERE RegionDescription = 'Eastern' )",
        "pred_result": "no such table: EmployeeTerritories",
        "repair_sql": "SELECT COUNT(DISTINCT EmployeeID) FROM Employees AS E JOIN EmployeeTerritories AS ET ON E.EmployeeID = ET.EmployeeID JOIN Territories AS T ON ET.TerritoryID = T.TerritoryID JOIN Region AS R ON T.RegionID = R.RegionID WHERE R.RegionDescription = 'Eastern'",
        "repair_result": "no such table: EmployeeTerritories"
    },
    {
        "idx": 856,
        "db_id": "retail_world",
        "question": "From 1/3/97 to 8/10/97, how many orders were shipped via Federal Shipping?",
        "evidence": "from 1/3/97 to 8/10/97 refers to 1997-03-01 < ShippedDate < 1997-10-08; 'Federal Shipping' is the CompanyName",
        "gold": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping' AND T1.ShippedDate BETWEEN '1997-03-01 00:00:00' AND '1997-10-08 23:59:59'",
        "pred": "SELECT COUNT(DISTINCT T1.`OrderID`) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` WHERE T2.`ShipperName` = 'Federal Shipping' AND T1.`OrderDate` BETWEEN '1997-03-01' AND '1997-10-08'",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT COUNT(DISTINCT T1.`OrderID`) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` WHERE T2.`ShipperName` = 'Federal Shipping' AND T1.`OrderDate` BETWEEN '1997-03-01' AND '1997-10-08'",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 857,
        "db_id": "retail_world",
        "question": "Tally the customer ID of orders that were shipped to Brazil by Margaret Peacock from 3/31/97 to 12/10/97.",
        "evidence": "\"Brazil\" is the ShipCountry; from 3/31/97 to 12/10/97 refers to 1997-03-31 < ShippedDate < 1997-10-12",
        "gold": "SELECT DISTINCT T2.CustomerID FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.LastName = 'Peacock' AND T1.FirstName = 'Margaret' AND T2.ShipCountry = 'Brazil' AND T2.ShippedDate BETWEEN '1997-03-31 00:00:00' AND '1997-12-10 23:59:59'",
        "pred": "SELECT DISTINCT T1.`CustomerID` FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN Shippers AS T3 ON T1.`ShipperID` = T3.`ShipperID` WHERE T3.`ShipperName` = 'Brazil' AND T2.`FirstName` = 'Margaret' AND T2.`LastName` = 'Peacock' AND T1.`OrderDate` BETWEEN '1997-03-31' AND '1997-12-10'",
        "pred_result": "no such column: T2.ShipCountry",
        "repair_sql": "SELECT DISTINCT T1.`CustomerID` FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN Shippers AS T3 ON T1.`ShipperID` = T3.`ShipperID` INNER JOIN Customers AS T4 ON T1.`CustomerID` = T4.`CustomerID` WHERE T3.`ShipperName` = 'Brazil' AND T2.`FirstName` = 'Margaret' AND T2.`LastName` = 'Peacock' AND T1.`OrderDate` BETWEEN '1997-03-31' AND '1997-12-10'",
        "repair_result": "no such column: T2.ShipCountry"
    },
    {
        "idx": 858,
        "db_id": "retail_world",
        "question": "What is the re-order level of products that have an order quantity of 1?",
        "evidence": "order quantity of 1 refers to Quantity = 1",
        "gold": "SELECT T1.ReorderLevel FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Quantity = 1",
        "pred": "SELECT T2.`ReorderLevel` FROM Products AS T2 WHERE T2.`ProductID` IN ( SELECT DISTINCT T1.`ProductID` FROM OrderDetails AS T1 WHERE T1.`Quantity` = 1 )",
        "pred_result": "no such column: T2.ReorderLevel",
        "repair_sql": "SELECT T2.`ReorderLevel` FROM Products AS T2 JOIN OrderDetails AS T1 ON T1.`ProductID` = T2.`ProductID` WHERE T1.`Quantity` = 1",
        "repair_result": "no such column: T2.ReorderLevel"
    },
    {
        "idx": 859,
        "db_id": "retail_world",
        "question": "What is the stock value of every condiments?",
        "evidence": "\"Condiments\" is the CategoryName; Stock value = MULTIPLY( UnitPrice, UnitInStock)",
        "gold": "SELECT T1.UnitPrice * T1.UnitsInStock FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID",
        "pred": "SELECT P.ProductName, P.Price * OD.Quantity AS StockValue FROM Products AS P JOIN Categories AS C ON P.CategoryID = C.CategoryID JOIN OrderDetails AS OD ON P.ProductID = OD.ProductID JOIN Orders AS O ON OD.OrderID = O.OrderID WHERE C.CategoryName = 'Condiments'",
        "pred_result": "no such column: T1.UnitPrice",
        "repair_sql": "SELECT P.ProductName, P.Price * OD.Quantity AS StockValue FROM Products AS P JOIN Categories AS C ON P.CategoryID = C.CategoryID JOIN OrderDetails AS OD ON P.ProductID = OD.ProductID JOIN Orders AS O ON OD.OrderID = O.OrderID WHERE C.CategoryName = 'Condiments'",
        "repair_result": "no such column: T1.UnitPrice"
    },
    {
        "idx": 860,
        "db_id": "retail_world",
        "question": "How many territories are owned by Anne Dodsworth?",
        "evidence": "",
        "gold": "SELECT COUNT(T2.TerritoryID) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Anne' AND T1.LastName = 'Dodsworth'",
        "pred": "SELECT COUNT(DISTINCT `City`) FROM Customers WHERE `CustomerID` = ( SELECT `CustomerID` FROM Orders WHERE `EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `LastName` = 'Dodsworth' AND `FirstName` = 'Anne' ) )",
        "pred_result": "no such table: EmployeeTerritories",
        "repair_sql": "SELECT COUNT(DISTINCT `City`) FROM Customers WHERE `CustomerID` = ( SELECT `CustomerID` FROM Orders WHERE `EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `LastName` = 'Dodsworth' AND `FirstName` = 'Anne' ) )",
        "repair_result": "no such table: EmployeeTerritories"
    },
    {
        "idx": 861,
        "db_id": "retail_world",
        "question": "Which of the American customers have experienced a delay in the shipment and how long was the longest?",
        "evidence": "\"American\" refers to Country = 'USA'; longest delay in shipment refers to Max(Subtract(RequiredDate, ShippedDate)); customer refers to CustomerID",
        "gold": "SELECT T1.CompanyName, TIMESTAMPDIFF(DAY, T2.ShippedDate, T2.RequiredDate) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Country = 'USA' AND TIMESTAMPDIFF(DAY, T2.ShippedDate, T2.RequiredDate) < 0",
        "pred": "SELECT MAX(julianday(T1.`ShippedDate`) - julianday(T1.`RequiredDate`)) AS LongestDelay FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T2.`Country` = 'USA' AND EXISTS ( SELECT * FROM OrderDetails AS T3 WHERE T3.`OrderID` = T1.`OrderID` AND T1.`ShippedDate` > T1.`RequiredDate` )",
        "pred_result": "no such column: T1.RequiredDate",
        "repair_sql": "SELECT T2.`CustomerID`, MAX(julianday(T1.`ShippedDate`) - julianday(T1.`RequiredDate`)) AS LongestDelay FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T2.`Country` = 'USA' AND T1.`ShippedDate` > T1.`RequiredDate` GROUP BY T2.`CustomerID`",
        "repair_result": "no such column: T1.RequiredDate"
    },
    {
        "idx": 862,
        "db_id": "retail_world",
        "question": "What is the contact name and phone number of the customer who has made the most total payment on the order to date?",
        "evidence": "most total payment = Max(Multiply(Quantity, UnitPrice, Subtract(1, Discount)))",
        "gold": "SELECT T1.ContactName, T1.Phone FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID GROUP BY T2.OrderID, T1.ContactName, T1.Phone ORDER BY SUM(T3.UnitPrice * T3.Quantity * (1 - T3.Discount)) DESC LIMIT 1",
        "pred": "SELECT T4.`ContactName`, T4.`Phone` FROM Orders AS T1 INNER JOIN Customers AS T4 ON T1.`CustomerID` = T4.`CustomerID` WHERE T1.`OrderID` = ( SELECT T1.`OrderID` FROM ( SELECT T1.`OrderID`, SUM(T2.`Quantity` * T3.`Price` * (1 - T2.`Discount`)) AS TotalPayment FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` GROUP BY T1.`OrderID` ) AS T1 ORDER BY T1.`TotalPayment` DESC LIMIT 1 )",
        "pred_result": "no such column: T4.Phone",
        "repair_sql": "SELECT T4.`ContactName`, T4.`Phone` FROM Customers AS T4 INNER JOIN ( SELECT T1.`CustomerID`, SUM(T2.`Quantity` * T3.`Price` * (1 - T2.`Discount`)) AS TotalPayment FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` GROUP BY T1.`CustomerID` ORDER BY TotalPayment DESC LIMIT 1 ) AS MaxTotalPayment ON T4.`CustomerID` = MaxTotalPayment.`CustomerID`",
        "repair_result": "no such column: T2.Discount"
    },
    {
        "idx": 863,
        "db_id": "retail_world",
        "question": "Who is the sales representative of the customer who has made the highest payment? Include the full name of employee and his/her supervisor.",
        "evidence": "highest payment refers to Max(Multiply(Quantity, UnitPrice, Subtract(1, Discount))); full name refers to FirstName, LastName; his/her supervisor refers to 'ReportsTo'",
        "gold": "SELECT T4.LastName, T4.FirstName, T4.ReportsTo , T1.Quantity * T1.UnitPrice * (1 - T1.Discount) AS payment FROM `Order Details` AS T1 INNER JOIN Orders AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID INNER JOIN Employees AS T4 ON T2.EmployeeID = T4.EmployeeID ORDER BY payment DESC LIMIT 1",
        "pred": "SELECT T5.`FirstName` || ' ' || T5.`LastName` AS SalesRepresentative, T6.`FirstName` || ' ' || T6.`LastName` AS Supervisor FROM Orders AS T1 INNER JOIN Employees AS T5 ON T1.`EmployeeID` = T5.`EmployeeID` INNER JOIN Employees AS T6 ON T5.`ReportsTo` = T6.`EmployeeID` INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN ( SELECT T1.`OrderID`, SUM(T2.`Quantity` * T3.`Price` * (1 - T2.`Discount`)) AS TotalPayment FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` GROUP BY T1.`OrderID` ORDER BY TotalPayment DESC LIMIT 1 ) AS T4 ON T1.`OrderID` = T4.`OrderID`",
        "pred_result": "no such column: T2.Discount",
        "repair_sql": "SELECT T5.`FirstName` || ' ' || T5.`LastName` AS SalesRepresentative, T6.`FirstName` || ' ' || T6.`LastName` AS Supervisor FROM Orders AS T1 INNER JOIN Employees AS T5 ON T1.`EmployeeID` = T5.`EmployeeID` INNER JOIN Employees AS T6 ON T5.`ReportsTo` = T6.`EmployeeID` INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN ( SELECT T1.`OrderID`, MAX(T2.`Quantity` * T3.`Price` * (1 - T2.`Discount`)) AS MaxPayment FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` GROUP BY T1.`OrderID` ) AS T4 ON T1.`OrderID` = T4.`OrderID` ORDER BY T4.MaxPayment DESC LIMIT 1",
        "repair_result": "no such column: T2.Discount"
    },
    {
        "idx": 864,
        "db_id": "retail_world",
        "question": "How many customers are there in Berlin, Germany?",
        "evidence": "\"Berlin\" is the City; 'Germany' is the Country",
        "gold": "SELECT COUNT(City) FROM Customers WHERE Country = 'Germany' AND City = 'Berlin'",
        "pred": "SELECT COUNT(DISTINCT `CustomerID`) FROM Customers WHERE `City` = 'Berlin' AND `Country` = 'Germany'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT `CustomerID`) FROM Customers WHERE `City` = 'Berlin' AND `Country` = 'Germany'",
        "repair_result": 1
    },
    {
        "idx": 865,
        "db_id": "retail_world",
        "question": "How many products does the company Exotic Liquids supply?",
        "evidence": "\"Exotic Liquids\" is the CompanyName of supplier",
        "gold": "SELECT COUNT(T1.ProductName) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids'",
        "pred": "SELECT COUNT(*) FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Exotic Liquids' )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT COUNT(*) FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Exotic Liquids' )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 866,
        "db_id": "retail_world",
        "question": "Which company has the lowest unit price? Please give the company name and the product name.",
        "evidence": "lowest unit price refers to Min(UnitPrice)",
        "gold": "SELECT T2.CompanyName, T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = ( SELECT MIN(UnitPrice) FROM Products )",
        "pred": "SELECT S.`SupplierName`, P.`ProductName` FROM Products AS P INNER JOIN Suppliers AS S ON P.`SupplierID` = S.`SupplierID` WHERE P.`Price` = ( SELECT MIN(`Price`) FROM Products )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT S.`SupplierName`, P.`ProductName` FROM Products AS P INNER JOIN Suppliers AS S ON P.`SupplierID` = S.`SupplierID` WHERE P.`Price` = ( SELECT MIN(`Price`) FROM Products )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 867,
        "db_id": "retail_world",
        "question": "What is the average unit price of Tokyo Traders' products?",
        "evidence": "\"Tokyo Traders\" is the CompanyName; average unit price = AVG(UnitPrice)",
        "gold": "SELECT SUM(T1.UnitPrice) / COUNT(T2.SupplierID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Tokyo Traders'",
        "pred": "SELECT AVG(`Price`) AS AverageUnitPrice FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Tokyo Traders' )",
        "pred_result": "no such column: T1.UnitPrice",
        "repair_sql": "SELECT AVG(`Price`) AS AverageUnitPrice FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Tokyo Traders' )",
        "repair_result": "no such column: T1.UnitPrice"
    },
    {
        "idx": 868,
        "db_id": "retail_world",
        "question": "How many territories are there in the Eastern region?",
        "evidence": "\"Eastern\" is the RegionDescription",
        "gold": "SELECT COUNT(T1.RegionID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern'",
        "pred": "SELECT COUNT(TerritoryID) FROM Territories WHERE RegionID = ( SELECT RegionID FROM Regions WHERE RegionDescription = 'Eastern' )",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT COUNT(TerritoryID) FROM Territories JOIN Region ON Territories.RegionID = Region.RegionID WHERE Region.RegionDescription = 'Eastern'",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 869,
        "db_id": "retail_world",
        "question": "Which region has the most territories?",
        "evidence": "region refers to RegionDescription; most territories refers to Max(Count(TerritoryID))",
        "gold": "SELECT T2.RegionID FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID GROUP BY T2.RegionID ORDER BY COUNT(T1.TerritoryID) DESC LIMIT 1",
        "pred": "SELECT T1.`RegionDescription` FROM Regions AS T1 INNER JOIN Territories AS T2 ON T1.`RegionID` = T2.`RegionID` GROUP BY T1.`RegionDescription` ORDER BY COUNT(T2.`TerritoryID`) DESC LIMIT 1",
        "pred_result": "no such table: Regions",
        "repair_sql": "SELECT T1.`RegionDescription`, COUNT(T2.`TerritoryID`) AS TerritoryCount FROM Territories AS T2 JOIN Region AS T1 ON T1.`RegionID` = T2.`RegionID` GROUP BY T1.`RegionDescription` ORDER BY TerritoryCount DESC LIMIT 1;",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 870,
        "db_id": "retail_world",
        "question": "Which region does territory id 2116 belong to?",
        "evidence": "region refers to RegionDescription",
        "gold": "SELECT T2.RegionDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T1.TerritoryID = 2116",
        "pred": "SELECT T1.`RegionDescription` FROM Territories AS T1 WHERE T1.`TerritoryID` = 2116",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT R.`RegionDescription` FROM Territories AS T JOIN Region AS R ON T.RegionID = R.RegionID WHERE T.`TerritoryID` = 2116",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 871,
        "db_id": "retail_world",
        "question": "What percentage of orders were placed by customers in Madrid city in 1996?",
        "evidence": "\"Madrid\" is the City; in 1996 refers to YEAR (OrderDate) = 1996; percentage = Divide (Count (CustomerID where City = 'Madrid'), Count (CustomerID)) * 100",
        "gold": "SELECT CAST(COUNT(CASE WHEN T1.City = 'Madrid' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.City) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = 1996",
        "pred": "SELECT (COUNT(DISTINCT T1.`OrderID`) * 1.0 / ( SELECT COUNT(DISTINCT `OrderID`) FROM Orders WHERE strftime('%Y', `OrderDate`) = '1996' )) * 100 AS Percentage FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T2.`City` = 'Madrid' AND strftime('%Y', T1.`OrderDate`) = '1996'",
        "pred_result": 0,
        "repair_sql": "SELECT (COUNT(DISTINCT T1.`OrderID`) * 1.0 / ( SELECT COUNT(DISTINCT `OrderID`) FROM Orders WHERE strftime('%Y', `OrderDate`) = '1996' )) * 100 AS Percentage FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T2.`City` = 'Madrid' AND strftime('%Y', T1.`OrderDate`) = '1996'",
        "repair_result": 0
    },
    {
        "idx": 872,
        "db_id": "retail_world",
        "question": "Please list the full names and titles of all employees.",
        "evidence": "full name refers to LastName, FirstName",
        "gold": "SELECT FirstName, LastName, Title FROM Employees",
        "pred": "SELECT T1.`LastName` || ' ' || T1.`FirstName` AS full_name FROM Employees AS T1",
        "pred_result": "no such column: Title",
        "repair_sql": "SELECT T1.`LastName` || ' ' || T1.`FirstName` AS full_name FROM Employees AS T1",
        "repair_result": "no such column: Title"
    },
    {
        "idx": 873,
        "db_id": "retail_world",
        "question": "Who has the highest salary? Please give their first name.",
        "evidence": "highest salary refers to Max(Salary)",
        "gold": "SELECT FirstName, LastName FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )",
        "pred": "SELECT FirstName FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )",
        "pred_result": "no such column: Salary",
        "repair_sql": "SELECT FirstName FROM Employees WHERE EmployeeID = ( SELECT EmployeeID FROM Employees ORDER BY Salary DESC LIMIT 1 )",
        "repair_result": "no such column: Salary"
    },
    {
        "idx": 874,
        "db_id": "retail_world",
        "question": "How many sales representatives whose salaries are higher than 2000?",
        "evidence": "\"Sales Representative\" is the Title; higher than 2000 refers to Salary > 2000",
        "gold": "SELECT COUNT(Title) FROM Employees WHERE Salary > 2000 AND Title = 'Sales Representative'",
        "pred": "SELECT COUNT(*) FROM Employees WHERE `Title` = 'Sales Representative' AND `Salary` > 2000",
        "pred_result": "no such column: Title",
        "repair_sql": "SELECT COUNT(*) FROM Employees JOIN Orders ON Employees.EmployeeID = Orders.EmployeeID WHERE Employees.Title = 'Sales Representative' AND Employees.Salary > 2000",
        "repair_result": "no such column: Employees.Title"
    },
    {
        "idx": 875,
        "db_id": "retail_world",
        "question": "In 1996, how many orders were from customers in the UK?",
        "evidence": "in 1996 refers to YEAR (OrderDate) = 1996; 'UK' is the Country;",
        "gold": "SELECT COUNT(T1.CustomerID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = '1996' AND T1.Country = 'UK'",
        "pred": "SELECT COUNT(DISTINCT T1.`OrderID`) FROM Orders AS T1 WHERE T1.`CustomerID` IN ( SELECT `CustomerID` FROM Customers WHERE `Country` = 'UK' ) AND strftime('%Y', T1.`OrderDate`) = '1996'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`OrderID`) FROM Orders AS T1 WHERE T1.`CustomerID` IN ( SELECT `CustomerID` FROM Customers WHERE `Country` = 'UK' ) AND strftime('%Y', T1.`OrderDate`) = '1996'",
        "repair_result": 1
    },
    {
        "idx": 876,
        "db_id": "retail_world",
        "question": "Which company had the most orders in 1998?",
        "evidence": "in 1998 refers to YEAR (OrderDate) = 1998; most orders = Max(Count(CustomerID)); company refers to CompanyName",
        "gold": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = '1998' GROUP BY T1.CompanyName ORDER BY COUNT(T2.OrderID) DESC LIMIT 1",
        "pred": "SELECT T1.`CustomerName` FROM ( SELECT C.`CustomerName`, COUNT(O.`CustomerID`) AS order_count FROM Customers AS C JOIN Orders AS O ON C.`CustomerID` = O.`CustomerID` WHERE strftime('%Y', O.`OrderDate`) = '1998' GROUP BY C.`CustomerID` ) AS T1 WHERE T1.order_count = ( SELECT MAX(order_count) FROM ( SELECT COUNT(O.`CustomerID`) AS order_count FROM Customers AS C JOIN Orders AS O ON C.`CustomerID` = O.`CustomerID` WHERE strftime('%Y', O.`OrderDate`) = '1998' GROUP BY C.`CustomerID` ) )",
        "pred_result": "no such column: T1.CompanyName",
        "repair_sql": "SELECT C.`CustomerName` FROM Customers AS C JOIN Orders AS O ON C.`CustomerID` = O.`CustomerID` WHERE strftime('%Y', O.`OrderDate`) = '1998' GROUP BY C.`CustomerID` ORDER BY COUNT(O.`CustomerID`) DESC LIMIT 1",
        "repair_result": "no such column: T1.CompanyName"
    },
    {
        "idx": 877,
        "db_id": "retail_world",
        "question": "Please calculate the number of orders from customers by country in 1996.",
        "evidence": "in 1996 refer to YEAR(OrderDate) = 1996; number of order = Count(OrderID)",
        "gold": "SELECT COUNT(T2.CustomerID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = '1996' GROUP BY T1.Country",
        "pred": "SELECT C.`Country`, COUNT(DISTINCT O.`OrderID`) AS NumOrders FROM Customers AS C INNER JOIN Orders AS O ON C.`CustomerID` = O.`CustomerID` WHERE strftime('%Y', O.`OrderDate`) = '1996' GROUP BY C.`Country`",
        "pred_result": 0,
        "repair_sql": "SELECT C.`Country`, COUNT(DISTINCT O.`OrderID`) AS NumOrders FROM Customers AS C INNER JOIN Orders AS O ON C.`CustomerID` = O.`CustomerID` WHERE strftime('%Y', O.`OrderDate`) = '1996' GROUP BY C.`Country`",
        "repair_result": 0
    },
    {
        "idx": 878,
        "db_id": "retail_world",
        "question": "How many orders were from Hanna Moos company in 1999?",
        "evidence": "\"Hanna Moos\" is the CompanyName; in 1999 refer to YEAR (OrderDate) = 1999",
        "gold": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = '1999' AND T1.CompanyName = 'Hanna Moos'",
        "pred": "SELECT COUNT(DISTINCT T1.`OrderID`) FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` WHERE T1.`CustomerID` = ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'Hanna Moos' ) AND strftime('%Y', T1.`OrderDate`) = '1999'",
        "pred_result": "no such column: T1.CompanyName",
        "repair_sql": "SELECT COUNT(DISTINCT T1.`OrderID`) FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` WHERE T1.`CustomerID` = ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'Hanna Moos' ) AND strftime('%Y', T1.`OrderDate`) = '1999'",
        "repair_result": "no such column: T1.CompanyName"
    },
    {
        "idx": 879,
        "db_id": "retail_world",
        "question": "How many days was the fastest shipping of Berglunds snabbkp's order?",
        "evidence": "Berglunds snabbkp is the CompanyName; fastest shipping = Min(Subtract(ShippedDate, OrderDate))",
        "gold": "SELECT datediff(T2.ShippedDate, T2.OrderDate) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CompanyName = 'Berglunds snabbkp' ORDER BY datediff(T2.ShippedDate, T2.OrderDate) LIMIT 1",
        "pred": "SELECT MIN(julianday(T1.`ShippedDate`) - julianday(T1.`OrderDate`)) AS fastest_shipping_days FROM Orders AS T1 WHERE T1.`CustomerID` = ( SELECT T2.`CustomerID` FROM Customers AS T2 WHERE T2.`CustomerName` = 'Berglunds snabbkp' )",
        "pred_result": "no such column: T1.ShippedDate",
        "repair_sql": "SELECT MIN(julianday(T1.`ShippedDate`) - julianday(T1.`OrderDate`)) AS fastest_shipping_days FROM Orders AS T1 JOIN Customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T2.`CustomerName` = 'Berglunds snabbkp'",
        "repair_result": "no such column: T1.ShippedDate"
    },
    {
        "idx": 880,
        "db_id": "retail_world",
        "question": "Which company placed the order with the id 10257?",
        "evidence": "\"10257\" is the OrderID; company refers to CompanyName",
        "gold": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10257",
        "pred": "SELECT C.`CompanyName` FROM Customers AS C INNER JOIN Orders AS O ON C.`CustomerID` = O.`CustomerID` WHERE O.`OrderID` = 10257",
        "pred_result": "no such column: C.CompanyName",
        "repair_sql": "SELECT C.`CustomerName` AS CompanyName FROM Customers AS C INNER JOIN Orders AS O ON C.`CustomerID` = O.`CustomerID` WHERE O.`OrderID` = 10257",
        "repair_result": "no such column: T1.CompanyName"
    },
    {
        "idx": 881,
        "db_id": "retail_world",
        "question": "In which year did Around the Horn place the most orders?",
        "evidence": "Around the Horn is the CompanyName; year with the most order refers to Year (OrderDate) where Max(Count(OrderID))",
        "gold": "SELECT STRFTIME('%Y', T2.OrderDate) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CompanyName = 'Around the Horn' GROUP BY STRFTIME('%Y', T2.OrderDate) ORDER BY COUNT(T2.OrderID) DESC LIMIT 1",
        "pred": "SELECT OrderYear FROM ( SELECT strftime('%Y', O.`OrderDate`) AS OrderYear, COUNT(OD.`OrderID`) AS NumOrders FROM Orders AS O JOIN Customers AS C ON O.`CustomerID` = C.`CustomerID` WHERE C.`CustomerName` = 'Around the Horn' GROUP BY OrderYear ORDER BY NumOrders DESC LIMIT 1 )",
        "pred_result": "no such column: OD.OrderID",
        "repair_sql": "SELECT strftime('%Y', O.`OrderDate`) AS OrderYear, COUNT(OD.`OrderID`) AS NumOrders FROM Orders AS O JOIN Customers AS C ON O.`CustomerID` = C.`CustomerID` JOIN OrderDetails AS OD ON O.`OrderID` = OD.`OrderID` WHERE C.`CustomerName` = 'Around the Horn' GROUP BY OrderYear ORDER BY NumOrders DESC LIMIT 1",
        "repair_result": "no such column: T1.CompanyName"
    },
    {
        "idx": 882,
        "db_id": "retail_world",
        "question": "How many employees report to Andrew Fuller?",
        "evidence": "\"Andrew Fuller\" refers to FirstName = 'Andrew' AND LastName = 'Fuller'; report to refers to ReportsTo ! = NULL",
        "gold": "SELECT COUNT(EmployeeID) FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew' )",
        "pred": "SELECT COUNT(*) FROM Employees WHERE `ReportsTo` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Andrew' AND `LastName` = 'Fuller' )",
        "pred_result": "no such column: ReportsTo",
        "repair_sql": "SELECT COUNT(*) FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller' )",
        "repair_result": "no such column: ReportsTo"
    },
    {
        "idx": 883,
        "db_id": "retail_world",
        "question": "Which country are the majority of the suppliers located?",
        "evidence": "majority of the suppliers located refers to MAX(COUNT(SupplierID))",
        "gold": "SELECT Country FROM Suppliers GROUP BY Country ORDER BY COUNT(SupplierID) DESC LIMIT 1",
        "pred": "SELECT `Country` FROM ( SELECT `Country`, COUNT(`SupplierID`) AS `SupplierCount` FROM Suppliers GROUP BY `Country` ) ORDER BY `SupplierCount` DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT `Country` FROM ( SELECT `Country`, COUNT(`SupplierID`) AS `SupplierCount` FROM Suppliers GROUP BY `Country` ) ORDER BY `SupplierCount` DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 884,
        "db_id": "retail_world",
        "question": "What is the full name of the employees who report to the Sales Manager?",
        "evidence": "full name refers to LastName, FirstName; the Sales Manager refers to Title = 'Sales Manager'; report to refers to ReportsTo is not NULL;",
        "gold": "SELECT FirstName, LastName FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE Title = 'Sales Manager' )",
        "pred": "SELECT T1.`LastName` || ' ' || T1.`FirstName` AS full_name FROM Employees AS T1 WHERE T1.`ReportsTo` = ( SELECT `EmployeeID` FROM Employees WHERE `Title` = 'Sales Manager' )",
        "pred_result": "no such column: T1.ReportsTo",
        "repair_sql": "SELECT T1.`LastName` || ' ' || T1.`FirstName` AS full_name FROM Employees AS T1 WHERE T1.`EmployeeID` IN ( SELECT `EmployeeID` FROM Employees WHERE `Title` = 'Sales Manager' )",
        "repair_result": "no such column: Title"
    },
    {
        "idx": 885,
        "db_id": "retail_world",
        "question": "In August of 1996, how many orders were placed by the customer with the highest amount of orders?",
        "evidence": "August of 1996 refers to OrderDate = '1996-8'; highest amount of orders refers to MAX(COUNT(OrderID))",
        "gold": "SELECT COUNT(OrderID) FROM Orders WHERE OrderDate LIKE '1996-08%' GROUP BY CustomerID ORDER BY COUNT(OrderID) DESC LIMIT 1",
        "pred": "SELECT COUNT(T2.`OrderID`) FROM Orders AS T2 WHERE T2.`CustomerID` = ( SELECT T1.`CustomerID` FROM Orders AS T1 WHERE T1.`OrderDate` LIKE '1996-08%' GROUP BY T1.`CustomerID` ORDER BY COUNT(T1.`OrderID`) DESC LIMIT 1 ) AND T2.`OrderDate` LIKE '1996-08%'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(T2.`OrderID`) FROM Orders AS T2 WHERE T2.`CustomerID` = ( SELECT T1.`CustomerID` FROM Orders AS T1 WHERE T1.`OrderDate` LIKE '1996-08%' GROUP BY T1.`CustomerID` ORDER BY COUNT(T1.`OrderID`) DESC LIMIT 1 ) AND T2.`OrderDate` LIKE '1996-08%'",
        "repair_result": 1
    },
    {
        "idx": 886,
        "db_id": "retail_world",
        "question": "How much is the salary of the first employee that was hired?",
        "evidence": "first employee that was hired refers to MIN(HireDate)",
        "gold": "SELECT Salary FROM Employees WHERE HireDate = ( SELECT MIN(HireDate) FROM Employees )",
        "pred": "SELECT `Salary` FROM Employees WHERE `HireDate` = ( SELECT MIN(`HireDate`) FROM Employees )",
        "pred_result": "no such column: Salary",
        "repair_sql": "SELECT Salary FROM Employees ORDER BY HireDate LIMIT 1",
        "repair_result": "no such column: Salary"
    },
    {
        "idx": 887,
        "db_id": "retail_world",
        "question": "How old was the oldest employee at the time he or she was hired?",
        "evidence": "oldest employee at the time he or she was hired refers to MAX(SUBTRACT(HireDate, Birthdate))",
        "gold": "SELECT MAX(TIMESTAMPDIFF(YEAR, BirthDate, HireDate)) FROM Employees",
        "pred": "SELECT MAX((CAST(strftime('%Y', T2.`OrderDate`) AS INTEGER) - CAST(strftime('%Y', T1.`BirthDate`) AS INTEGER)) AS OldestAgeAtHire FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID`",
        "pred_result": "near \"AS\": syntax error",
        "repair_sql": "SELECT MAX((CAST(strftime('%Y', T2.`OrderDate') AS INTEGER) - CAST(strftime('%Y', T1.`BirthDate') AS INTEGER)) AS OldestAgeAtHire FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID`",
        "repair_result": "near \"BirthDate\": syntax error"
    },
    {
        "idx": 888,
        "db_id": "retail_world",
        "question": "What is the total sales amount of all discontinued products?",
        "evidence": "discontinued products refers to Discontinued = 1; total sales amount refers to SUM(MULTIPLY(UnitPrice, Quantity))",
        "gold": "SELECT SUM(T2.UnitPrice * T2.Quantity) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Discontinued = 1",
        "pred": "SELECT SUM(`Price` * T2.`Quantity`) AS TotalSalesAmount FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.`ProductID` = T2.`ProductID` WHERE T1.`Discontinued` = 1",
        "pred_result": "no such column: T1.Discontinued",
        "repair_sql": "SELECT SUM(T1.`Price` * T2.`Quantity`) AS TotalSalesAmount FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.`ProductID` = T2.`ProductID` WHERE T1.`ProductID` IN (SELECT `ProductID` FROM Products WHERE `Discontinued` = 1)",
        "repair_result": "no such column: Discontinued"
    },
    {
        "idx": 889,
        "db_id": "retail_world",
        "question": "What is the category of the product that has the highest number of discontinued products?",
        "evidence": "discontinued products refers to Discontinued = 1; highest number of discontinued products refers to MAX(Discontinued = 1)",
        "gold": "SELECT T2.CategoryName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.Discontinued = 1 GROUP BY T2.CategoryName ORDER BY COUNT(T1.ProductID) DESC LIMIT 1",
        "pred": "SELECT T4.`CategoryName` FROM Categories AS T4 WHERE T4.`CategoryID` = ( SELECT T3.`CategoryID` FROM Products AS T1 INNER JOIN Categories AS T3 ON T1.`CategoryID` = T3.`CategoryID` WHERE T1.`Discontinued` = 1 GROUP BY T3.`CategoryID` ORDER BY COUNT(T1.`ProductID`) DESC LIMIT 1 )",
        "pred_result": "no such column: T1.Discontinued",
        "repair_sql": "SELECT T4.`CategoryName` FROM Categories AS T4 WHERE T4.`CategoryID` = ( SELECT T3.`CategoryID` FROM Products AS T1 INNER JOIN Categories AS T3 ON T1.`CategoryID` = T3.`CategoryID` WHERE T1.`Discontinued` = 1 GROUP BY T3.`CategoryID` ORDER BY COUNT(T1.`ProductID`) DESC LIMIT 1 )",
        "repair_result": "no such column: T1.Discontinued"
    },
    {
        "idx": 890,
        "db_id": "retail_world",
        "question": "How many condiments were sold in 1997?",
        "evidence": "\"Condiments\" is the CategoryName; in 1997 refers to year(OrderDate) = 1997;",
        "gold": "SELECT COUNT(T2.ProductID) FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID INNER JOIN `Order Details` AS T3 ON T2.ProductID = T3.ProductID INNER JOIN Orders AS T4 ON T3.OrderID = T4.OrderID WHERE T1.CategoryName = 'Condiments' AND T1.CategoryID = 2 AND T4.OrderDate LIKE '1997%'",
        "pred": "SELECT SUM(T3.`Quantity`) AS total_condiments_sold FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` WHERE T3.`CategoryID` = ( SELECT `CategoryID` FROM Categories WHERE `CategoryName` = 'Condiments' ) AND strftime('%Y', T1.`OrderDate`) = '1997'",
        "pred_result": "no such column: T3.Quantity",
        "repair_sql": "SELECT SUM(T2.`Quantity`) AS total_condiments_sold FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` WHERE T3.`CategoryID` = ( SELECT `CategoryID` FROM Categories WHERE `CategoryName` = 'Condiments' ) AND strftime('%Y', T1.`OrderDate`) = '1997'",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 891,
        "db_id": "retail_world",
        "question": "Who is the customer who purchased the highest number of products in a single order?",
        "evidence": "highest number of products refers to MAX(COUNT(ProductID))",
        "gold": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID GROUP BY T1.CompanyName ORDER BY COUNT(T3.ProductID) DESC LIMIT 1",
        "pred": "SELECT T3.`CustomerID` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Customers AS T3 ON T1.`CustomerID` = T3.`CustomerID` WHERE T1.`OrderID` = ( SELECT T1.`OrderID` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` GROUP BY T1.`OrderID` ORDER BY COUNT(T2.`ProductID`) DESC LIMIT 1 )",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT T3.`CustomerID` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Customers AS T3 ON T1.`CustomerID` = T3.`CustomerID` WHERE T1.`OrderID` = ( SELECT T1.`OrderID` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` GROUP BY T1.`OrderID` ORDER BY COUNT(T2.`ProductID`) DESC LIMIT 1 )",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 892,
        "db_id": "retail_world",
        "question": "What is the monthly average number of products shipped via Federal Shipping for the year 1996?",
        "evidence": "monthly average number of products refers to DIVIDE(SUM(OrderID), 12); shipped via Federal Shipping refers to CompanyName = 'Federal Shipping'; for the year 1996 refers to year(ShippedDate) = 1996",
        "gold": "SELECT CAST(SUM(T1.ShipVia) AS REAL) / 12 FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping' AND T1.ShippedDate LIKE '1996%'",
        "pred": "SELECT AVG(TotalProductsShipped) AS MonthlyAvgProductsShipped FROM ( SELECT SUM(OD.`Quantity`) AS TotalProductsShipped FROM Orders AS O JOIN Shippers AS S ON O.`ShipperID` = S.`ShipperID` JOIN OrderDetails AS OD ON O.`OrderID` = OD.`OrderID` WHERE S.`ShipperName` = 'Federal Shipping' AND strftime('%Y', O.`OrderDate`) = '1996' GROUP BY strftime('%m', O.`OrderDate`) )",
        "pred_result": "no such column: T1.ShipVia",
        "repair_sql": "SELECT AVG(TotalProductsShipped) AS MonthlyAvgProductsShipped FROM ( SELECT SUM(OD.`Quantity`) AS TotalProductsShipped FROM Orders AS O JOIN Shippers AS S ON O.`ShipperID` = S.`ShipperID` JOIN OrderDetails AS OD ON O.`OrderID` = OD.`OrderID` WHERE S.`ShipperName` = 'Federal Shipping' AND strftime('%Y', O.`OrderDate`) = '1996' GROUP BY strftime('%m', O.`OrderDate`) )",
        "repair_result": "no such column: T1.ShipVia"
    },
    {
        "idx": 893,
        "db_id": "retail_world",
        "question": "Which products are being supplied by \"G'day, Mate\"? List all of their names.",
        "evidence": "supplied by \"G'day, Mate\" refers to CompanyName = 'G''day, Mate';",
        "gold": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName LIKE 'G%day, Mate'",
        "pred": "SELECT `ProductName` FROM Products WHERE `ProductID` IN ( SELECT `ProductID` FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'G''day, Mate' ) )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT `ProductName` FROM Products WHERE `ProductID` IN ( SELECT `ProductID` FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'G''day, Mate' ) )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 894,
        "db_id": "retail_world",
        "question": "How many territories are there in the region with the highest number of territories?",
        "evidence": "highest number of territories refers to max(TerritoryID)",
        "gold": "SELECT COUNT(T2.RegionDescription), T1.TerritoryDescription, COUNT(*) AS num FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID GROUP BY T1.TerritoryDescription ORDER BY num DESC LIMIT 1",
        "pred": "SELECT COUNT(DISTINCT TerritoryID) AS NumTerritories FROM Territories WHERE RegionID = ( SELECT RegionID FROM Territories GROUP BY RegionID ORDER BY COUNT(DISTINCT TerritoryID) DESC LIMIT 1 )",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT COUNT(DISTINCT TerritoryID) AS NumTerritories FROM Territories WHERE RegionID IN ( SELECT RegionID FROM Territories GROUP BY RegionID ORDER BY COUNT(DISTINCT TerritoryID) DESC LIMIT 1 )",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 895,
        "db_id": "retail_world",
        "question": "What is the company name of the supplier who supplies the product with the highest unit price?",
        "evidence": "the highest unit price refers to MAX(UnitPrice);",
        "gold": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )",
        "pred": "SELECT T2.`SupplierName` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`Price` = ( SELECT MAX(`Price`) FROM Products )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT T2.`SupplierName` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`Price` = ( SELECT MAX(`Price`) FROM Products )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 896,
        "db_id": "retail_world",
        "question": "How many female employees are in charge of 3 or more territories?",
        "evidence": "female employees refers to TitleOfCourtesy = 'Mrs.' or TitleOfCourtesy = 'Ms.'; in charge of 3 or more territories refers to TerritoryID > = 3;",
        "gold": "SELECT COUNT(EID) FROM ( SELECT T1.EmployeeID AS EID FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.TitleOfCourtesy IN ('Ms.' OR 'Mrs.') GROUP BY T1.EmployeeID HAVING COUNT(T2.TerritoryID) >= 3 ) T1",
        "pred": "SELECT COUNT(*) FROM Employees WHERE TitleOfCourtesy = 'Mrs.' OR TitleOfCourtesy = 'Ms.' AND EmployeeID IN ( SELECT EmployeeID FROM EmployeeTerritories GROUP BY EmployeeID HAVING COUNT(TerritoryID) >= 3 )",
        "pred_result": "no such table: EmployeeTerritories",
        "repair_sql": "SELECT COUNT(*) FROM Employees WHERE (TitleOfCourtesy = 'Mrs.' OR TitleOfCourtesy = 'Ms.') AND EmployeeID IN ( SELECT EmployeeID FROM Territories GROUP BY EmployeeID HAVING COUNT(TerritoryID) >= 3 )",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 897,
        "db_id": "retail_world",
        "question": "Who are the top 8 suppliers supplying the products with the highest user satisfaction?",
        "evidence": "highest user satisfaction refers to max(ReorderLevel);",
        "gold": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID ORDER BY T1.ReorderLevel DESC LIMIT 8",
        "pred": "SELECT T2.`SupplierName` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`ReorderLevel` = ( SELECT MAX(`ReorderLevel`) FROM Products ) LIMIT 8",
        "pred_result": "no such column: T1.ReorderLevel",
        "repair_sql": "SELECT T2.`SupplierName` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`ProductID` IN ( SELECT T3.`ProductID` FROM Products AS T3 WHERE T3.`ReorderLevel` = ( SELECT MAX(`ReorderLevel`) FROM Products ) ) LIMIT 8;",
        "repair_result": "no such column: T3.ReorderLevel"
    },
    {
        "idx": 898,
        "db_id": "retail_world",
        "question": "What is the company name of the customer who made the biggest amount of purchase in a single order before discount?",
        "evidence": "biggest amount of purchase in a single order refers to MAX(MULTIPLY(UnitPrice, Quantity)); before discount refers to Discount = 0",
        "gold": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID WHERE T3.Discount = 0 GROUP BY T1.CompanyName ORDER BY SUM(T3.UnitPrice * T3.Quantity) DESC LIMIT 1",
        "pred": "SELECT T4.`CustomerName` FROM ( SELECT T1.`OrderID` FROM ( SELECT T1.`OrderID`, SUM(T2.`Price` * T3.`Quantity`) AS TotalAmount FROM Orders AS T1 INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` INNER JOIN Products AS T2 ON T3.`ProductID` = T2.`ProductID` GROUP BY T1.`OrderID` ) AS MaxPurchase WHERE TotalAmount = ( SELECT MAX(TotalAmount) FROM ( SELECT T1.`OrderID`, SUM(T2.`Price` * T3.`Quantity`) AS TotalAmount FROM Orders AS T1 INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` INNER JOIN Products AS T2 ON T3.`ProductID` = T2.`ProductID` GROUP BY T1.`OrderID` ) ) ) AS T5 INNER JOIN Orders AS T6 ON T5.`OrderID` = T6.`OrderID` INNER JOIN Customers AS T4 ON T6.`CustomerID` = T4.`CustomerID`",
        "pred_result": "no such column: T1.OrderID",
        "repair_sql": "SELECT T4.`CustomerName` FROM ( SELECT T1.`CustomerID`, SUM(T2.`Price` * T3.`Quantity`) AS TotalAmount FROM Orders AS T1 INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` INNER JOIN Products AS T2 ON T3.`ProductID` = T2.`ProductID` WHERE T2.`Price` * T3.`Quantity` = ( SELECT MAX(T2.`Price` * T3.`Quantity`) FROM OrderDetails AS T3 INNER JOIN Products AS T2 ON T3.`ProductID` = T2.`ProductID` WHERE T2.`Price` * T3.`Quantity = 0 ) GROUP BY T1.`CustomerID` ) AS MaxPurchase INNER JOIN Customers AS T4 ON MaxPurchase.`CustomerID` = T4.`CustomerID`",
        "repair_result": "near \"CustomerID\": syntax error"
    },
    {
        "idx": 899,
        "db_id": "retail_world",
        "question": "What was the total amount of sales handled by Nancy Davolio in December 1996, excluding discounts?",
        "evidence": "in December 1996 refers to year(OrderDate) = 1996 AND month(OrderDate) = 12; excluding discounts refers to Discount = 0; total amount of sales refers to MULTIPLY((UnitPrice, Quantity))",
        "gold": "SELECT SUM(T3.UnitPrice * T3.Quantity) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio' AND T2.OrderDate LIKE '1996-12%' AND T3.Discount = 0",
        "pred": "SELECT SUM(T5.`Price` * T6.`Quantity`) AS TotalSales FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` INNER JOIN Products AS T4 ON T3.`ProductID` = T4.`ProductID` INNER JOIN Customers AS T5 ON T1.`CustomerID` = T5.`CustomerID` WHERE T2.`FirstName` = 'Nancy' AND T2.`LastName` = 'Davolio' AND strftime('%Y', T1.`OrderDate`) = '1996' AND strftime('%m', T1.`OrderDate`) = '12'",
        "pred_result": "no such column: T5.Price",
        "repair_sql": "SELECT SUM(T4.`Price` * T3.`Quantity`) AS TotalSales FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` INNER JOIN Products AS T4 ON T3.`ProductID` = T4.`ProductID` INNER JOIN Customers AS T5 ON T1.`CustomerID` = T5.`CustomerID` WHERE T2.`FirstName` = 'Nancy' AND T2.`LastName` = 'Davolio' AND strftime('%Y', T1.`OrderDate`) = '1996' AND strftime('%m', T1.`OrderDate`) = '12' AND T3.`Discount` = 0",
        "repair_result": "no such column: T3.Discount"
    },
    {
        "idx": 900,
        "db_id": "retail_world",
        "question": "What is the total amount of sales made in the year 1997?",
        "evidence": "year 1997 refers to year(OrderDate) = 1997; total amount of sales refers to (UnitPrice * Quantity)",
        "gold": "SELECT SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID WHERE T1.OrderDate LIKE '1997%'",
        "pred": "SELECT SUM(TotalSales) AS TotalAmount FROM ( SELECT T4.`OrderID`, SUM(T5.`Price` * T6.`Quantity`) AS TotalSales FROM Orders AS T4 INNER JOIN OrderDetails AS T6 ON T4.`OrderID` = T6.`OrderID` INNER JOIN Products AS T5 ON T6.`ProductID` = T5.`ProductID` WHERE strftime('%Y', T4.`OrderDate`) = '1997' GROUP BY T4.`OrderID` )",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT SUM(TotalSales) AS TotalAmount FROM ( SELECT T4.`OrderID`, SUM(T5.`Price` * T6.`Quantity`) AS TotalSales FROM Orders AS T4 INNER JOIN OrderDetails AS T6 ON T4.`OrderID` = T6.`OrderID` INNER JOIN Products AS T5 ON T6.`ProductID` = T5.`ProductID` WHERE strftime('%Y', T4.`OrderDate`) = '1997' GROUP BY T4.`OrderID` )",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 901,
        "db_id": "retail_world",
        "question": "What is the average annual amount of shipped sales from 1997 to 1998?",
        "evidence": "from 1997 to 1998 refers to ShippedDate > '1996-1-1' and ShippedDate < '1998-12-31'; average annual amount refers to SUM(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))",
        "gold": "SELECT SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) / 3 FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID WHERE T1.ShippedDate BETWEEN '1996-01-01 00:00:00' AND '1998-12-31 23:59:59'",
        "pred": "SELECT AVG(TotalAmount) AS AverageAnnualAmount FROM ( SELECT STRFTIME('%Y', T1.`OrderDate`) AS Year, SUM(T3.`Price` * T4.`Quantity` * (1 - T4.`Discount`)) AS TotalAmount FROM Orders AS T1 INNER JOIN OrderDetails AS T4 ON T1.`OrderID` = T4.`OrderID` INNER JOIN Products AS T3 ON T4.`ProductID` = T3.`ProductID` WHERE T1.`OrderDate` > '1996-01-01' AND T1.`OrderDate` < '1999-01-01' GROUP BY Year )",
        "pred_result": "no such column: T4.Discount",
        "repair_sql": "SELECT AVG(TotalAmount) AS AverageAnnualAmount FROM ( SELECT STRFTIME('%Y', T1.`OrderDate`) AS Year, SUM(T3.`Price` * T4.`Quantity` * (1 - T3.`Discount`)) AS TotalAmount FROM Orders AS T1 INNER JOIN OrderDetails AS T4 ON T1.`OrderID` = T4.`OrderID` INNER JOIN Products AS T3 ON T4.`ProductID` = T3.`ProductID` WHERE T1.`OrderDate` > '1996-01-01' AND T1.`OrderDate` < '1999-01-01' GROUP BY Year )",
        "repair_result": "no such column: T3.Discount"
    },
    {
        "idx": 902,
        "db_id": "retail_world",
        "question": "How many orders were shipped to Venezuela in 1996?",
        "evidence": "shipped to Venezuela refers to ShipCountry = 'Venezuela'; in 1996 refers to year(ShippedDate) = '1996';",
        "gold": "SELECT COUNT(OrderID) FROM Orders WHERE ShipCountry = 'Venezuela' AND STRFTIME('%Y', ShippedDate) = '1996'",
        "pred": "SELECT COUNT(DISTINCT T1.`OrderID`) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` WHERE T1.`ShipCountry` = 'Venezuela' AND strftime('%Y', T1.`ShippedDate`) = '1996'",
        "pred_result": "no such column: T1.ShipCountry",
        "repair_sql": "SELECT COUNT(DISTINCT T1.`OrderID`) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` WHERE T1.`ShipCountry` = 'Venezuela' AND strftime('%Y', T1.`ShippedDate`) = '1996'",
        "repair_result": "no such column: T1.ShipCountry"
    },
    {
        "idx": 903,
        "db_id": "retail_world",
        "question": "What are the ID and description of the condiments category?",
        "evidence": "condiments category refers to CategoryName = 'Condiments'; the ID refers to CategoryID",
        "gold": "SELECT CategoryID, Description FROM Categories WHERE CategoryName = 'Condiments'",
        "pred": "SELECT Description FROM Categories WHERE CategoryName = 'Condiments'",
        "pred_result": 0,
        "repair_sql": "SELECT Description FROM Categories WHERE CategoryName = 'Condiments'",
        "repair_result": 0
    },
    {
        "idx": 904,
        "db_id": "retail_world",
        "question": "List the order IDs, product IDs and unit price of orders which total payment is greater than 15000.",
        "evidence": "total payment is greater than 15000 refers to MULTIPLY((Quantity * UnitPrice * (1 - Discount))) > 15000\n",
        "gold": "SELECT ProductID, OrderID, UnitPrice FROM `Order Details` WHERE UnitPrice * Quantity * (1 - Discount) > 15000",
        "pred": "SELECT T1.`OrderID`, T2.`ProductID`, T3.`Price` AS unit_price FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` WHERE ( SELECT SUM(T4.`Quantity` * T5.`Price` * (1 - T4.`Discount`)) FROM OrderDetails AS T4 INNER JOIN Products AS T5 ON T4.`ProductID` = T5.`ProductID` WHERE T4.`OrderID` = T1.`OrderID` ) > 15000",
        "pred_result": "no such column: T4.Discount",
        "repair_sql": "SELECT T1.`OrderID`, T2.`ProductID`, T3.`Price` AS unit_price FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` WHERE ( SELECT SUM(T4.`Quantity` * T5.`Price` * (1 - T4.`Discount`)) FROM OrderDetails AS T4 INNER JOIN Products AS T5 ON T4.`ProductID` = T5.`ProductID` WHERE T4.`OrderID` = T1.`OrderID` AND T4.`Discount` IS NOT NULL ) > 15000",
        "repair_result": "no such column: T4.Discount"
    },
    {
        "idx": 905,
        "db_id": "retail_world",
        "question": "Provide the territory IDs under employee ID of 7.",
        "evidence": "",
        "gold": "SELECT TerritoryID FROM EmployeeTerritories WHERE EmployeeID = 7",
        "pred": "SELECT T1.`district_id` FROM client AS T1 INNER JOIN account AS T2 ON T1.`account_id` = T2.`account_id` INNER JOIN district AS T3 ON T2.`district_id` = T3.`district_id` WHERE T1.`EmployeeID` = 7",
        "pred_result": "no such table: client",
        "repair_sql": "SELECT T3.`district_id` FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN Customers AS T3 ON T2.`CustomerID` = T3.`CustomerID` WHERE T1.`EmployeeID` = 7",
        "repair_result": "no such column: T3.district_id"
    },
    {
        "idx": 906,
        "db_id": "retail_world",
        "question": "Provide the supplier company name in Sydney and its homepage address if available.",
        "evidence": "in Sydney refers to City = 'Sydney';",
        "gold": "SELECT CompanyName, HomePage FROM Suppliers WHERE City = 'Sydney'",
        "pred": "SELECT T1.`SupplierName`, T1.`HomePage` FROM Suppliers AS T1 WHERE T1.`City` = 'Sydney'",
        "pred_result": "no such column: T1.HomePage",
        "repair_sql": "SELECT T1.`SupplierName`, T1.`HomePage` FROM Suppliers AS T1 WHERE T1.`City` = 'Sydney' AND T1.`HomePage` IS NOT NULL",
        "repair_result": "no such column: T1.HomePage"
    },
    {
        "idx": 907,
        "db_id": "retail_world",
        "question": "Write down the full name of Vie President of Sales and his age when he was hired.",
        "evidence": "Vice President of Sales refers to Title = 'Vice President, Sales';",
        "gold": "SELECT FirstName, LastName , TIMESTAMPDIFF(YEAR, BirthDate, HireDate) AS AGE FROM Employees WHERE Title = 'Vice President, Sales'",
        "pred": "SELECT strftime('%Y', 'now') - strftime('%Y', T1.`BirthDate`) - (strftime('%m-%d', 'now') < strftime('%m-%d', T1.`BirthDate`)) AS Age_When_Hired FROM Employees AS T1 WHERE T1.`EmployeeID` = ( SELECT T2.`EmployeeID` FROM Employees AS T2 WHERE T2.`Title` = 'Vice President, Sales' )",
        "pred_result": "no such column: T2.Title",
        "repair_sql": "SELECT T1.`FirstName` || ' ' || T1.`LastName` AS Vice_President_Name, strftime('%Y', 'now') - strftime('%Y', T1.`BirthDate`) - (strftime('%m-%d', 'now') < strftime('%m-%d', T1.`BirthDate`)) AS Age_When_Hired FROM Employees AS T1 WHERE T1.`EmployeeID` = ( SELECT T2.`EmployeeID` FROM Employees AS T2 WHERE T2.`Title` = 'Vice President, Sales' )",
        "repair_result": "no such column: T2.Title"
    },
    {
        "idx": 908,
        "db_id": "retail_world",
        "question": "List the supplier company names located in Germany.",
        "evidence": "located in Germany refers to Country = 'Germany';",
        "gold": "SELECT CompanyName FROM Suppliers WHERE Country = 'Germany'",
        "pred": "SELECT `SupplierName` FROM Suppliers WHERE `SupplierID` IN ( SELECT `SupplierID` FROM Suppliers WHERE `Country` = 'Germany' )",
        "pred_result": "no such column: CompanyName",
        "repair_sql": "SELECT `SupplierName` FROM Suppliers WHERE `SupplierID` IN ( SELECT `SupplierID` FROM Suppliers WHERE `Country` = 'Germany' )",
        "repair_result": "no such column: CompanyName"
    },
    {
        "idx": 909,
        "db_id": "retail_world",
        "question": "List the employees' full names and ages in 2022 who lived in London.",
        "evidence": "in London refers to City = 'London'; ages in 2022 refers to SUBTRACT(2022, year(BirthDate)); full names refers to FirstName, LastName",
        "gold": "SELECT TitleOfCourtesy, FirstName, LastName , TIMESTAMPDIFF(YEAR, BirthDate, NOW()) AS ages FROM Employees WHERE City = 'London'",
        "pred": "SELECT T1.`FirstName`, T1.`LastName`, 2022 - CAST(SUBSTR(T1.`BirthDate`, 1, 4) AS INTEGER) AS Age FROM Employees AS T1 INNER JOIN Customers AS T2 ON T1.`City` = 'London'",
        "pred_result": "no such column: T1.City",
        "repair_sql": "SELECT T1.`FirstName`, T1.`LastName`, 2022 - CAST(SUBSTR(T1.`BirthDate`, 1, 4) AS INTEGER) AS Age FROM Employees AS T1 WHERE T1.`City` = 'London'",
        "repair_result": "no such column: T1.City"
    },
    {
        "idx": 910,
        "db_id": "retail_world",
        "question": "List down the customer company names, addresses, phones and faxes which are located in London.",
        "evidence": "in London refers to City = 'London'",
        "gold": "SELECT CompanyName, Address, Phone, Fax FROM Customers WHERE City = 'London'",
        "pred": "SELECT T1.`CustomerName`, T1.`Address`, T1.`Phone` FROM Customers AS T1 WHERE T1.`CustomerID` IN ( SELECT DISTINCT T3.`CustomerID` FROM Customers AS T2 INNER JOIN Orders AS T3 ON T2.`CustomerID` = T3.`CustomerID` WHERE T2.`City` = 'London' )",
        "pred_result": "no such column: T1.Phone",
        "repair_sql": "SELECT T1.`CustomerName`, T1.`Address`, T1.`Phone` FROM Customers AS T1 JOIN Orders AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`City` = 'London'",
        "repair_result": "no such column: T1.Phone"
    },
    {
        "idx": 911,
        "db_id": "retail_world",
        "question": "List the full name of employees and titles who have to report to Sales Manager.",
        "evidence": "Sales Manager refers to Title = 'Sales Manager'; full name refers to FirstName, LastName",
        "gold": "SELECT FirstName, LastName, Title FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE Title = 'Sales Manager' )",
        "pred": "SELECT CONCAT(`FirstName`, ' ', `LastName`) AS full_name, `Title` FROM Employees WHERE `ReportsTo` = ( SELECT `EmployeeID` FROM Employees WHERE `Title` = 'Sales Manager' )",
        "pred_result": "no such column: Title",
        "repair_sql": "SELECT CONCAT(`FirstName`, ' ', `LastName`) AS full_name, `Title` FROM Employees WHERE `EmployeeID` IN ( SELECT `EmployeeID` FROM Employees WHERE `Title` = 'Sales Manager' )",
        "repair_result": "no such column: Title"
    },
    {
        "idx": 912,
        "db_id": "retail_world",
        "question": "List all the customer company names and cities located in Canada.",
        "evidence": "located in Canada refers to Country = 'Canada'",
        "gold": "SELECT CompanyName, City FROM Customers WHERE Country = 'Canada'",
        "pred": "SELECT T1.`CustomerName`, T1.`City` FROM Customers AS T1 WHERE T1.`CustomerID` IN ( SELECT DISTINCT T2.`CustomerID` FROM Customers AS T2 WHERE T2.`Country` = 'Canada' )",
        "pred_result": "no such column: CompanyName",
        "repair_sql": "SELECT T1.`CustomerName`, T1.`City` FROM Customers AS T1 WHERE T1.`CustomerID` IN ( SELECT DISTINCT T2.`CustomerID` FROM Customers AS T2 WHERE T2.`Country` = 'Canada' )",
        "repair_result": "no such column: CompanyName"
    },
    {
        "idx": 913,
        "db_id": "retail_world",
        "question": "Find the total production amount and product names which had \"10 - 500 g pkgs.\" as quantity per unit.",
        "evidence": "total production amount refers to ADD(UnitsInstock, UnitsOnOrder)",
        "gold": "SELECT UnitsInStock + UnitsOnOrder, ProductName FROM Products WHERE QuantityPerUnit = '10 - 500 g pkgs.'",
        "pred": "SELECT T1.`ProductID`, T1.`ProductName`, (T1.`UnitsInStock` + T1.`UnitsOnOrder`) AS TotalProductionAmount FROM Products AS T1 WHERE T1.`Unit` = '10 - 500 g pkgs.'",
        "pred_result": "no such column: T1.UnitsInStock",
        "repair_sql": "SELECT T1.`ProductID`, T1.`ProductName`, (T1.`UnitsInStock` + T1.`UnitsOnOrder`) AS TotalProductionAmount FROM Products AS T1 WHERE T1.`Unit` = '10 - 500 g pkgs.'",
        "repair_result": "no such column: T1.UnitsInStock"
    },
    {
        "idx": 914,
        "db_id": "retail_world",
        "question": "List all the product names and categories of the highest reorder level.",
        "evidence": "Highest reorder level refers to Max(ReorderLevel)",
        "gold": "SELECT T2.ProductName, T1.CategoryName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID ORDER BY T2.ReorderLevel DESC LIMIT 1",
        "pred": "SELECT P.ProductName, C.CategoryName FROM Products AS P INNER JOIN Categories AS C ON P.CategoryID = C.CategoryID WHERE P.ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )",
        "pred_result": "no such column: P.ReorderLevel",
        "repair_sql": "SELECT P.ProductName, C.CategoryName FROM Products AS P INNER JOIN Categories AS C ON P.CategoryID = C.CategoryID WHERE P.ProductID = ( SELECT ProductID FROM Products WHERE ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products ) )",
        "repair_result": "no such column: ReorderLevel"
    },
    {
        "idx": 915,
        "db_id": "retail_world",
        "question": "Describe the supplier companies, cities and products which total production amount is more than 120.",
        "evidence": "total production amount is more than 120 refers to ADD(UnitsInstock, UnitsOnOrder) > 120",
        "gold": "SELECT T2.CompanyName, T2.City, T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitsInStock + UnitsOnOrder > 120",
        "pred": "SELECT T2.`SupplierName`, T2.`City`, T1.`ProductName` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE (T1.`UnitsInStock` + T1.`UnitsOnOrder`) > 120",
        "pred_result": "no such column: T1.UnitsInStock",
        "repair_sql": "SELECT T2.`SupplierName`, T2.`City`, T1.`ProductName` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` INNER JOIN Categories AS T3 ON T1.`CategoryID` = T3.`CategoryID` WHERE (T1.`UnitsInStock` + T1.`UnitsOnOrder`) > 120",
        "repair_result": "no such column: T1.UnitsInStock"
    },
    {
        "idx": 916,
        "db_id": "retail_world",
        "question": "Provide the contact person name, title and supplied products by \"Escargots Nouveaux\" company.",
        "evidence": "\"Escargots Nouveaux\" company refers to CompanyName = 'Escargots Nouveaux';",
        "gold": "SELECT T2.ContactName, T2.ContactTitle, T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Escargots Nouveaux'",
        "pred": "SELECT `ProductName` FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Escargots Nouveaux' )",
        "pred_result": "no such column: T2.ContactTitle",
        "repair_sql": "SELECT `ProductName` FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Escargots Nouveaux' )",
        "repair_result": "no such column: T2.ContactTitle"
    },
    {
        "idx": 917,
        "db_id": "retail_world",
        "question": "List the territory IDs, description and region description under the in-charge of Mrs. Margaret Peacock.",
        "evidence": "",
        "gold": "SELECT T3.TerritoryID, T3.TerritoryDescription, T4.RegionDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T1.TitleOfCourtesy = 'Mrs.' AND T1.LastName = 'Peacock' AND T1.FirstName = 'Margaret'",
        "pred": "SELECT T1.`TerritoryID`, T1.`Description`, T1.`RegionDescription` FROM Territories AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.`TerritoryID` = T2.`TerritoryID` WHERE T2.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `LastName` = 'Peacock' AND `FirstName` = 'Margaret' )",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT T1.`TerritoryID`, T1.`Description`, T1.`RegionDescription` FROM Territories AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.`TerritoryID` = T2.`TerritoryID` INNER JOIN Employees AS E ON T2.`EmployeeID` = E.`EmployeeID` WHERE E.`LastName` = 'Peacock' AND E.`FirstName` = 'Margaret'",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 918,
        "db_id": "retail_world",
        "question": "What were the products supplied by the company in Spain?",
        "evidence": "company in Spain refers to Country = 'Spain'; product supplied refers to ProductName",
        "gold": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Spain'",
        "pred": "SELECT `ProductName` FROM Products WHERE `ProductID` IN ( SELECT `ProductID` FROM Products WHERE `SupplierID` IN ( SELECT `SupplierID` FROM Suppliers WHERE `Country` = 'Spain' ) )",
        "pred_result": 1,
        "repair_sql": "SELECT `ProductName` FROM Products WHERE `ProductID` IN ( SELECT `ProductID` FROM Products WHERE `SupplierID` IN ( SELECT `SupplierID` FROM Suppliers WHERE `Country` = 'Spain' ) )",
        "repair_result": 1
    },
    {
        "idx": 919,
        "db_id": "retail_world",
        "question": "What products were ordered by the customer ID \"WILMK\" which were required on 3/26/1998?",
        "evidence": "required on 3/26/1998 refers to RequiredDate = '1998-03-26 00:00:00'; products ordered refers to ProductName",
        "gold": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.RequiredDate LIKE '1998-03-26%' AND T1.CustomerID = 'WILMK'",
        "pred": "SELECT DISTINCT T5.`ProductName` FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.`CustomerID` = T2.`CustomerID` INNER JOIN OrderDetails AS T3 ON T2.`OrderID` = T3.`OrderID` INNER JOIN Products AS T4 ON T3.`ProductID` = T4.`ProductID` WHERE T1.`CustomerName` = 'WILMK' AND T2.`OrderDate` = '1998-03-26'",
        "pred_result": "no such column: T5.ProductName",
        "repair_sql": "SELECT DISTINCT T4.`ProductName` FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.`CustomerID` = T2.`CustomerID` INNER JOIN OrderDetails AS T3 ON T2.`OrderID` = T3.`OrderID` INNER JOIN Products AS T4 ON T3.`ProductID` = T4.`ProductID` WHERE T1.`CustomerID` = 'WILMK' AND T2.`OrderDate` = '1998-03-26'",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 920,
        "db_id": "retail_world",
        "question": "Provide the list of product IDs and names under the meat/poultry category.",
        "evidence": "meat/poultry category refers to CategoryName = 'Meat/Poultry';",
        "gold": "SELECT T2.ProductName, T1.CategoryName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )",
        "pred": "SELECT `ProductID`, `ProductName` FROM Products WHERE `CategoryID` = ( SELECT `CategoryID` FROM Categories WHERE `CategoryName` = 'Meat/Poultry' )",
        "pred_result": "no such column: T2.ReorderLevel",
        "repair_sql": "SELECT `ProductID`, `ProductName` FROM Products WHERE `CategoryID` = ( SELECT `CategoryID` FROM Categories WHERE `CategoryName` = 'Meat/Poultry' )",
        "repair_result": "no such column: T2.ReorderLevel"
    },
    {
        "idx": 921,
        "db_id": "retail_world",
        "question": "How many orders were made by the customers in Ireland.",
        "evidence": "in Ireland refers to Country = 'Ireland';",
        "gold": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Country = 'Ireland'",
        "pred": "SELECT COUNT(DISTINCT T1.`OrderID`) FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T2.`Country` = 'Ireland'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT T1.`OrderID`) FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T2.`Country` = 'Ireland'",
        "repair_result": 1
    },
    {
        "idx": 922,
        "db_id": "retail_world",
        "question": "Provide the products list which were ordered in 1996 by the company in Norway.",
        "evidence": "ordered in 1996 refers to year(OrderDate) = 1996; in Norway refers to Country = 'Norway'",
        "gold": "SELECT T4.ProductName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T1.Country = 'Norway' AND STRFTIME('%Y', T2.OrderDate) = '1996'",
        "pred": "SELECT DISTINCT T5.`ProductName` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Customers AS T4 ON T1.`CustomerID` = T4.`CustomerID` WHERE strftime('%Y', T1.`OrderDate`) = '1996' AND T4.`Country` = 'Norway'",
        "pred_result": "no such column: T5.ProductName",
        "repair_sql": "SELECT DISTINCT T3.`ProductName` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Customers AS T4 ON T1.`CustomerID` = T4.`CustomerID` WHERE strftime('%Y', T1.`OrderDate`) = '1996' AND T4.`Country` = 'Norway'",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 923,
        "db_id": "retail_world",
        "question": "Among orders shipping to Brazil, mention the supplier company of the order which was done by employee Anne Dodsworth in December, 1996 .",
        "evidence": "shipping to Brazil refers to ShipCountry = 'Brazil'; in December, 1996\u00a0 refers to year(OrderDate) = 1996 and month(OrderDate) = 12;",
        "gold": "SELECT T5.CompanyName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID INNER JOIN Suppliers AS T5 ON T4.SupplierID = T5.SupplierID WHERE T1.FirstName = 'Anne' AND T1.LastName = 'Dodsworth' AND T2.ShipCountry = 'Brazil' AND T2.OrderDate LIKE '1996-12%'",
        "pred": "SELECT DISTINCT T4.`SupplierName` FROM OrderDetails AS T1 INNER JOIN Orders AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T1.`ProductID` = T3.`ProductID` INNER JOIN Suppliers AS T4 ON T3.`SupplierID` = T4.`SupplierID` WHERE T2.`OrderID` IN ( SELECT DISTINCT T5.`OrderID` FROM Orders AS T5 INNER JOIN Shippers AS T6 ON T5.`ShipperID` = T6.`ShipperID` WHERE T5.`ShipCountry` = 'Brazil' AND strftime('%Y', T5.`OrderDate`) = '1996' AND strftime('%m', T5.`OrderDate`) = '12' ) AND T2.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Anne' AND `LastName` = 'Dodsworth' )",
        "pred_result": "no such column: T5.ShipCountry",
        "repair_sql": "SELECT DISTINCT T4.`SupplierName` FROM OrderDetails AS T1 INNER JOIN Orders AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T1.`ProductID` = T3.`ProductID` INNER JOIN Suppliers AS T4 ON T3.`SupplierID` = T4.`SupplierID` WHERE T2.`OrderID` IN ( SELECT DISTINCT T5.`OrderID` FROM Orders AS T5 WHERE T5.`ShipperID` IN ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'Speedy Express' ) AND T5.`ShipCountry` = 'Brazil' AND strftime('%Y', T5.`OrderDate`) = '1996' AND strftime('%m', T5.`OrderDate`) = '12' ) AND T2.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Anne' AND `LastName` = 'Dodsworth' )",
        "repair_result": "no such column: T5.ShipCountry"
    },
    {
        "idx": 924,
        "db_id": "retail_world",
        "question": "Mention the oldest empoyee's full name, title, salary and number of orders which were shipped to USA by him.",
        "evidence": "full name refers to FirstName, LastName; shipped to USA refers to ShipCountry = 'USA'",
        "gold": "SELECT T1.FirstName, T1.LastName, T1.Title, T1.Salary , COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE ShipCountry = 'USA' GROUP BY T1.FirstName, T1.LastName, T1.Title, T1.Salary, T1.BirthDate ORDER BY T1.BirthDate LIMIT 1",
        "pred": "SELECT COUNT(*) AS `Number of Orders` FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` WHERE T1.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees ORDER BY `BirthDate` ASC LIMIT 1 ) AND T2.`ShipperName` = 'United Package'",
        "pred_result": "no such column: T1.Title",
        "repair_sql": "SELECT COUNT(*) AS `Number of Orders` FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` WHERE T1.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees ORDER BY `BirthDate` ASC LIMIT 1 ) AND T2.`ShipperName` = 'United Package'",
        "repair_result": "no such column: T1.Title"
    },
    {
        "idx": 925,
        "db_id": "retail_world",
        "question": "List down the territory IDs and descriptions existed in Southern region.",
        "evidence": "in Southern region refers to RegionDescription = 'Southern';",
        "gold": "SELECT T1.TerritoryID, T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Southern'",
        "pred": "SELECT T1.`TerritoryID`, T1.`TerritoryDescription` FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.`RegionID` = T2.`RegionID` WHERE T2.`RegionDescription` = 'Southern'",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT T1.`TerritoryID`, T1.`TerritoryDescription` FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.`RegionID` = T2.`RegionID` WHERE T2.`RegionDescription` = 'Southern';",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 926,
        "db_id": "retail_world",
        "question": "Calculate the average payment per product under confections category.",
        "evidence": "under confections category refers to CategoryName = 'Confections';",
        "gold": "SELECT SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) / COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Confections'",
        "pred": "SELECT AVG(total_payment) AS average_payment_per_product FROM ( SELECT `ProductID`, SUM(`Price` * `Quantity`) AS total_payment FROM OrderDetails WHERE `ProductID` IN ( SELECT `ProductID` FROM Products WHERE `CategoryID` = ( SELECT `CategoryID` FROM Categories WHERE `CategoryName` = 'Confections' ) ) GROUP BY `ProductID` )",
        "pred_result": "no such column: Price",
        "repair_sql": "SELECT AVG(total_payment) AS average_payment_per_product FROM ( SELECT od.`ProductID`, SUM(p.`Price` * od.`Quantity`) AS total_payment FROM OrderDetails od JOIN Products p ON od.`ProductID` = p.`ProductID` WHERE p.`CategoryID` = ( SELECT `CategoryID` FROM Categories WHERE `CategoryName` = 'Confections' ) GROUP BY od.`ProductID` )",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 927,
        "db_id": "retail_world",
        "question": "Find the total payment of the orders by customers from San Francisco.",
        "evidence": "from San Francisco refers to City = 'San Francisco'; total payment refers to sum(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))",
        "gold": "SELECT SUM(T3.UnitPrice * T3.Quantity * (1 - T3.Discount)) AS TOTALPAYMENT FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID WHERE T1.City = 'San Francisco'",
        "pred": "SELECT SUM(TotalPayment) AS TotalPayment FROM ( SELECT T3.`OrderID`, SUM(T5.`Price` * T4.`Quantity` * (1 - T4.`Discount`)) AS TotalPayment FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.`CustomerID` = T2.`CustomerID` INNER JOIN OrderDetails AS T4 ON T2.`OrderID` = T4.`OrderID` INNER JOIN Products AS T5 ON T4.`ProductID` = T5.`ProductID` WHERE T1.`City` = 'San Francisco' GROUP BY T3.`OrderID` )",
        "pred_result": "no such column: T3.OrderID",
        "repair_sql": "SELECT SUM(TotalPayment) AS TotalPayment FROM ( SELECT T2.`OrderID`, SUM(T5.`Price` * T4.`Quantity` * (1 - T4.`Discount`)) AS TotalPayment FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.`CustomerID` = T2.`CustomerID` INNER JOIN OrderDetails AS T4 ON T2.`OrderID` = T4.`OrderID` INNER JOIN Products AS T5 ON T4.`ProductID` = T5.`ProductID` WHERE T1.`City` = 'San Francisco' GROUP BY T2.`OrderID` )",
        "repair_result": "no such column: T4.Discount"
    },
    {
        "idx": 928,
        "db_id": "retail_world",
        "question": "Calculate the total production for each product which were supplied from Japan",
        "evidence": "from Japan refers to Country = 'Japan'; total production refers to ADD(UnitsInstock, UnitsOnOrder)",
        "gold": "SELECT SUM(T1.UnitsInStock + T1.UnitsOnOrder) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Japan'",
        "pred": "SELECT P.`ProductName`, SUM(P.`UnitsInStock` + P.`UnitsOnOrder`) AS TotalProduction FROM Products AS P INNER JOIN Suppliers AS S ON P.`SupplierID` = S.`SupplierID` WHERE S.`Country` = 'Japan' GROUP BY P.`ProductName`",
        "pred_result": "no such column: P.UnitsInStock",
        "repair_sql": "SELECT P.`ProductName`, SUM(P.`UnitsInStock` + P.`UnitsOnOrder`) AS TotalProduction FROM Products AS P INNER JOIN Suppliers AS S ON P.`SupplierID` = S.`SupplierID` WHERE S.`Country` = 'Japan' GROUP BY P.`ProductName`",
        "repair_result": "no such column: P.UnitsInStock"
    },
    {
        "idx": 929,
        "db_id": "retail_world",
        "question": "Among the supplied products from Australia, describe the discontinued products and the category.",
        "evidence": "from Australia refers to Country = 'Australia'; discontinued products refers to Discontinued = 1;",
        "gold": "SELECT T2.ProductName, T3.CategoryName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T1.Country = 'Australia' AND T2.Discontinued = 1",
        "pred": "SELECT T1.`ProductName`, T3.`CategoryName` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` INNER JOIN Categories AS T3 ON T1.`CategoryID` = T3.`CategoryID` WHERE T2.`Country` = 'Australia' AND T1.`Discontinued` = 1",
        "pred_result": "no such column: T1.Discontinued",
        "repair_sql": "SELECT T1.`ProductName`, T3.`CategoryName` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` INNER JOIN Categories AS T3 ON T1.`CategoryID` = T3.`CategoryID` WHERE T2.`Country` = 'Australia' AND T1.`ProductID` IN (SELECT `ProductID` FROM Products WHERE `Discontinued` = 1)",
        "repair_result": "no such column: Discontinued"
    },
    {
        "idx": 930,
        "db_id": "retail_world",
        "question": "Mention the supplier country of Ipoh Coffee and the order ID which had maximum in total payment.",
        "evidence": "Ipoh Coffee refers to ProductName = 'Ipoh Coffee'; maximum in total payment refers to MAX(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))",
        "gold": "SELECT T3.Country, T1.OrderID FROM `Order Details` AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Suppliers AS T3 ON T2.SupplierID = T3.SupplierID WHERE T2.ProductName = 'Ipoh Coffee' ORDER BY T1.UnitPrice * T1.Quantity * (1 - T1.Discount) DESC LIMIT 1",
        "pred": "SELECT O.`OrderID` FROM Orders AS O INNER JOIN ( SELECT OD.`OrderID`, SUM(P.`Price` * OD.`Quantity` * (1 - OD.`Discount`)) AS TotalPayment FROM OrderDetails AS OD INNER JOIN Products AS P ON OD.`ProductID` = P.`ProductID` GROUP BY OD.`OrderID` ORDER BY TotalPayment DESC LIMIT 1 ) AS T ON O.`OrderID` = T.`OrderID`",
        "pred_result": "no such column: OD.Discount",
        "repair_sql": "SELECT S.`Country`, O.`OrderID` FROM Orders AS O INNER JOIN ( SELECT OD.`OrderID`, SUM(P.`Price` * OD.`Quantity` * (1 - OD.`Discount`)) AS TotalPayment FROM OrderDetails AS OD INNER JOIN Products AS P ON OD.`ProductID` = P.`ProductID` WHERE P.`ProductName` = 'Ipoh Coffee' GROUP BY OD.`OrderID` ORDER BY TotalPayment DESC LIMIT 1 ) AS T ON O.`OrderID` = T.`OrderID` INNER JOIN Customers AS C ON O.`CustomerID` = C.`CustomerID` INNER JOIN Suppliers AS S ON P.`SupplierID` = S.`SupplierID`",
        "repair_result": "no such column: OD.Discount"
    },
    {
        "idx": 931,
        "db_id": "retail_world",
        "question": "Provide the list of products ordered by ID 10979 and calculate its total payment.",
        "evidence": "ordered by ID 10979 refers to OrderID = '10979'; total payment refers to SUM(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))",
        "gold": "SELECT T1.ProductName , SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10979 GROUP BY T1.ProductName",
        "pred": "SELECT SUM(T2.`Price` * T1.`Quantity` * (1 - T1.`Discount`)) FROM Orders AS T3 INNER JOIN OrderDetails AS T1 ON T3.`OrderID` = T1.`OrderID` INNER JOIN Products AS T2 ON T1.`ProductID` = T2.`ProductID` WHERE T3.`OrderID` = 10979",
        "pred_result": "no such column: T1.Discount",
        "repair_sql": "SELECT SUM(T2.`Price` * T1.`Quantity` * (1 - IFNULL(T1.`Discount`, 0))) FROM Orders AS T3 INNER JOIN OrderDetails AS T1 ON T3.`OrderID` = T1.`OrderID` INNER JOIN Products AS T2 ON T1.`ProductID` = T2.`ProductID` WHERE T3.`OrderID` = '10979'",
        "repair_result": "no such column: T1.Discount"
    },
    {
        "idx": 932,
        "db_id": "retail_world",
        "question": "Among the products under grains/cereals category, provide the contact person and title of the supplier with one digit ID.",
        "evidence": "grains/cereals category refers to CategoryName = 'Grains/Cereals'; supplier with one digit ID refers to SupplierID between 1 and 10;",
        "gold": "SELECT DISTINCT T1.ContactName, T1.ContactTitle FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Grains/Cereals' AND T1.SupplierID BETWEEN 1 AND 10 LIMIT 1",
        "pred": "SELECT `ContactName`, `ContactTitle` FROM Suppliers WHERE `SupplierID` IN ( SELECT `SupplierID` FROM Products WHERE `CategoryID` = ( SELECT `CategoryID` FROM Categories WHERE `CategoryName` = 'Grains/Cereals' ) AND `SupplierID` BETWEEN 1 AND 10 )",
        "pred_result": "no such column: ContactTitle",
        "repair_sql": "SELECT s.ContactName, s.ContactTitle FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Grains/Cereals' AND s.SupplierID BETWEEN 1 AND 10",
        "repair_result": "no such column: s.ContactTitle"
    },
    {
        "idx": 933,
        "db_id": "retail_world",
        "question": "Provide Speedy Express's phone number and number of shipped orders on 30th January, 1998.",
        "evidence": "Speedy Express's refers to CompanyName = 'Speedy Express'; orders on 30th January, 1998 refers to ShippedDate = '1998-01-30 00:00:00'",
        "gold": "SELECT T2.Phone, COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Speedy Express' AND T1.ShippedDate LIKE '1998-01-30%' GROUP BY T2.Phone",
        "pred": "SELECT Phone, ( SELECT COUNT(*) FROM Orders WHERE ShipperID = ( SELECT ShipperID FROM Shippers WHERE Phone = '(503) 555-9831' ) AND OrderID IN ( SELECT OrderID FROM OrderDetails WHERE OrderID IN ( SELECT OrderID FROM Orders WHERE OrderDate = '1998-01-30' ) ) ) AS ShippedOrders FROM Shippers WHERE ShipperID = ( SELECT ShipperID FROM Shippers WHERE Phone = '(503) 555-9831' )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT Phone, ( SELECT COUNT(*) FROM Orders WHERE ShipperID = ( SELECT ShipperID FROM Shippers WHERE Phone = '(503) 555-9831' ) AND OrderID IN ( SELECT OrderID FROM OrderDetails WHERE OrderID IN ( SELECT OrderID FROM Orders WHERE OrderDate = '1998-01-30' ) ) ) AS ShippedOrders FROM Shippers WHERE ShipperID = ( SELECT ShipperID FROM Shippers WHERE Phone = '(503) 555-9831' )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 934,
        "db_id": "retail_world",
        "question": "Describe the ordered products which were the most overdue from required date.",
        "evidence": "the most overdue from required date refers to MIN(SUBTRACT(ShippedDate, RequiredDate) < 0)",
        "gold": "SELECT DISTINCT T3.ProductName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE DATEDIFF(T1.ShippedDate, T1.RequiredDate) < 0",
        "pred": "SELECT T1.`ProductName` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` WHERE (julianday(T1.`ShippedDate`) - julianday(T1.`RequiredDate`)) = ( SELECT MIN(julianday(T3.`ShippedDate`) - julianday(T3.`RequiredDate`)) FROM Orders AS T3 INNER JOIN OrderDetails AS T4 ON T3.`OrderID` = T4.`OrderID` )",
        "pred_result": "no such column: T1.ProductName",
        "repair_sql": "SELECT T5.`ProductName` FROM Orders AS T5 INNER JOIN OrderDetails AS T6 ON T5.`OrderID` = T6.`OrderID` WHERE (julianday(T5.`ShippedDate`) - julianday(T5.`RequiredDate`)) = ( SELECT MIN(julianday(T7.`ShippedDate`) - julianday(T7.`RequiredDate`)) FROM Orders AS T7 INNER JOIN OrderDetails AS T8 ON T7.`OrderID` = T8.`OrderID` )",
        "repair_result": "no such column: T5.ProductName"
    },
    {
        "idx": 935,
        "db_id": "retail_world",
        "question": "Under the in-charge of inside sales coordinator, provide the product lists which were shipped to Mexico in 1996.",
        "evidence": "shipped to Mexico refers to ShipCountry = 'Mexico'; in 1996 refers to year(ShippedDate) = 1996; charge of inside sales coordinator refers to Title = 'Inside Sales Coordinator'",
        "gold": "SELECT T4.ProductName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T1.Title = 'Inside Sales Coordinator' AND T2.ShippedDate LIKE '1996%' AND T2.ShipCountry = 'Mexico'",
        "pred": "SELECT DISTINCT T4.`ProductName` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Shippers AS T4 ON T1.`ShipperID` = T4.`ShipperID` WHERE T1.`ShipCountry` = 'Mexico' AND strftime('%Y', T1.`ShippedDate`) = '1996'",
        "pred_result": "no such column: T4.ProductName",
        "repair_sql": "SELECT DISTINCT T3.`ProductName` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Shippers AS T4 ON T1.`ShipperID` = T4.`ShipperID` INNER JOIN Employees AS T5 ON T1.`EmployeeID` = T5.`EmployeeID` WHERE T4.`ShipperName` = 'United Package' AND T1.`ShipCountry` = 'Mexico' AND strftime('%Y', T1.`ShippedDate`) = '1996' AND T5.`Title` = 'Inside Sales Coordinator';",
        "repair_result": "no such column: T1.ShipCountry"
    },
    {
        "idx": 936,
        "db_id": "retail_world",
        "question": "Identify the name of the most popular dairy product in terms of reorder quantity.",
        "evidence": "'dairy product' refers to CategoryName; most popular reorder quantity refers to MAX(ReorderLevel)",
        "gold": "SELECT T2.ProductName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.CategoryName = 'Dairy Products' AND T2.ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )",
        "pred": "SELECT P.ProductName FROM Products AS P INNER JOIN OrderDetails AS OD ON P.ProductID = OD.ProductID WHERE P.CategoryID = ( SELECT CategoryID FROM Categories WHERE CategoryName = 'Dairy Products' ) GROUP BY P.ProductName ORDER BY SUM(OD.Quantity) DESC LIMIT 1",
        "pred_result": "no such column: T2.ReorderLevel",
        "repair_sql": "SELECT P.ProductName FROM Products AS P INNER JOIN OrderDetails AS OD ON P.ProductID = OD.ProductID WHERE P.CategoryID = ( SELECT CategoryID FROM Categories WHERE CategoryName = 'Dairy Products' ) GROUP BY P.ProductName ORDER BY SUM(OD.Quantity) DESC LIMIT 1",
        "repair_result": "no such column: T2.ReorderLevel"
    },
    {
        "idx": 937,
        "db_id": "retail_world",
        "question": "Calculate the production volume of the dairy product 'Mascarpone Fabioli'.",
        "evidence": "'Mascarpone Fabioli' is a ProductName; calculation = SUM(UnitsInStock, UnitsOnOrder)",
        "gold": "SELECT SUM(UnitsInStock + UnitsOnOrder) FROM Products WHERE ProductName = 'Mascarpone Fabioli'",
        "pred": "SELECT SUM(`UnitsInStock` + `UnitsOnOrder`) AS ProductionVolume FROM Products WHERE `ProductID` = ( SELECT `ProductID` FROM Products WHERE `ProductName` = 'Mascarpone Fabioli' )",
        "pred_result": "no such column: UnitsInStock",
        "repair_sql": "SELECT SUM(`UnitsInStock` + `UnitsOnOrder`) AS ProductionVolume FROM Products WHERE `ProductName` = 'Mascarpone Fabioli'",
        "repair_result": "no such column: UnitsInStock"
    },
    {
        "idx": 938,
        "db_id": "retail_world",
        "question": "Identify the name and product category for the most expensive and the least expensive products.",
        "evidence": "name of product refers to ProductName; category of product refers to CategoryName; the most expensive products refers to MAX(UnitPrice); the least expensive products refers to MIN(UnitPrice);",
        "gold": "SELECT T2.ProductName, T1.CategoryName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.UnitPrice IN (( SELECT MIN(UnitPrice) FROM Products ), ( SELECT MAX(UnitPrice) FROM Products ))",
        "pred": "SELECT T1.`ProductName`, T3.`CategoryName` FROM Products AS T1 INNER JOIN Categories AS T3 ON T1.`CategoryID` = T3.`CategoryID` WHERE T1.`Price` = ( SELECT MIN(`Price`) FROM Products )",
        "pred_result": "no such column: T2.UnitPrice",
        "repair_sql": "SELECT T1.`ProductName`, T3.`CategoryName` FROM Products AS T1 INNER JOIN Categories AS T3 ON T1.`CategoryID` = T3.`CategoryID` WHERE T1.`Price` = ( SELECT MIN(`Price`) FROM Products )",
        "repair_result": "no such column: T2.UnitPrice"
    },
    {
        "idx": 939,
        "db_id": "retail_world",
        "question": "Identify the customer, which placed the largest order in terms of value.",
        "evidence": "value refers to SUM(UnitPrice * Quantity * SUBTRACT(1, Discount)); the largest order in value refers to MAX(value)",
        "gold": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID GROUP BY T2.CustomerID ORDER BY SUM(T3.UnitPrice * T3.Quantity * (1 - T3.Discount)) DESC LIMIT 1",
        "pred": "SELECT T4.`CustomerID` FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.`OrderID` = T2.`ProductID` INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` INNER JOIN ( SELECT T1.`OrderID`, SUM(T2.`Price` * T3.`Quantity` * (1 - T3.`Discount`)) AS order_value FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.`OrderID` = T2.`ProductID` INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` GROUP BY T1.`OrderID` ) AS T4 ON T1.`OrderID` = T4.`OrderID` ORDER BY T4.`order_value` DESC LIMIT 1",
        "pred_result": "no such column: T3.Discount",
        "repair_sql": "SELECT T1.`CustomerID` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN ( SELECT T1.`OrderID`, SUM(T3.`Price` * T2.`Quantity` * (1 - T3.`Discount`)) AS order_value FROM Orders AS T1 INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` GROUP BY T1.`OrderID` ) AS T4 ON T1.`OrderID` = T4.`OrderID` ORDER BY T4.`order_value` DESC LIMIT 1",
        "repair_result": "no such column: T2.Quantity"
    },
    {
        "idx": 940,
        "db_id": "retail_world",
        "question": "Identify the number of employees in Northern sales region.",
        "evidence": "Northern sales region refers to RegionDescription = 'Northern'",
        "gold": "SELECT COUNT(T2.EmployeeID) FROM Territories AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.TerritoryID = T2.TerritoryID INNER JOIN Region AS T3 ON T1.RegionID = T3.RegionID WHERE T3.RegionDescription = 'Northern'",
        "pred": "SELECT COUNT(EmployeeID) FROM Employees WHERE RegionID = ( SELECT RegionID FROM Region WHERE RegionDescription = 'Northern' )",
        "pred_result": "no such table: Region",
        "repair_sql": "SELECT COUNT(EmployeeID) FROM Employees WHERE EmployeeID IN ( SELECT EmployeeID FROM Orders WHERE EmployeeID IS NOT NULL AND EmployeeID IN ( SELECT EmployeeID FROM Customers WHERE CustomerID IN ( SELECT CustomerID FROM Orders WHERE ShipperID IN ( SELECT ShipperID FROM Shippers WHERE ShipperName = 'United Package' ) ) ) )",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 941,
        "db_id": "retail_world",
        "question": "What is the average value of the sales order?",
        "evidence": "calculation = DIVIDE(SUM(UnitPrice * Quantity * SUBTRACT(1, Discount)), COUNT(OrderID))",
        "gold": "SELECT SUM(UnitPrice * Quantity * (1 - Discount)) / COUNT(OrderID) FROM `Order Details`",
        "pred": "SELECT AVG(TotalSales) AS AverageSalesOrder FROM ( SELECT T1.`OrderID`, SUM(T2.`Price` * T3.`Quantity` * (1 - T3.`Discount`)) AS TotalSales FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.`OrderID` = T2.`ProductID` INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` GROUP BY T1.`OrderID` )",
        "pred_result": "no such column: T3.Discount",
        "repair_sql": "SELECT AVG(TotalSales) AS AverageSalesOrder FROM ( SELECT T1.`OrderID`, SUM(T2.`Price` * T3.`Quantity` * (1 - IFNULL(T3.`Discount`, 0))) AS TotalSales FROM Orders AS T1 INNER JOIN Products AS T2 ON T3.`ProductID` = T2.`ProductID` INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` GROUP BY T1.`OrderID` )",
        "repair_result": "no such column: T3.Discount"
    },
    {
        "idx": 942,
        "db_id": "retail_world",
        "question": "Find the percentage of discontinued products in Northwind's portfolio of products.",
        "evidence": "discontinued products refers to Discontinued = 1; calculation = DIVIDE(SUM(Discontinued = 1), COUNT(ProductID)) * 100",
        "gold": "SELECT CAST(COUNT(CASE WHEN Discontinued = 1 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(ProductID) FROM Products",
        "pred": "SELECT (CAST(COUNT(ProductID) AS REAL) / ( SELECT COUNT(ProductID) FROM Products )) * 100 FROM Products WHERE Discontinued = 1",
        "pred_result": "no such column: Discontinued",
        "repair_sql": "SELECT (CAST(SUM(Discontinued = 1) AS REAL) / COUNT(ProductID)) * 100 AS Percentage_Discontinued FROM Products",
        "repair_result": "no such column: Discontinued"
    },
    {
        "idx": 943,
        "db_id": "retail_world",
        "question": "Provide the full name of the employee who processed the sales order with ID 10274.",
        "evidence": "full name refers to FirstName, LastName; sales order with ID 10274 refers to OrderID = 10274",
        "gold": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10274",
        "pred": "SELECT `FirstName`, `LastName` FROM Employees WHERE `EmployeeID` = ( SELECT `EmployeeID` FROM Orders WHERE `OrderID` = 10274 )",
        "pred_result": 1,
        "repair_sql": "SELECT `FirstName`, `LastName` FROM Employees WHERE `EmployeeID` = ( SELECT `EmployeeID` FROM Orders WHERE `OrderID` = 10274 )",
        "repair_result": 1
    },
    {
        "idx": 944,
        "db_id": "retail_world",
        "question": "Calculate the total number of orders placed by the company 'GROSELLA-Restaurante'.",
        "evidence": "'GROSELLA-Restaurante' refers to CompanyName;",
        "gold": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CompanyName = 'GROSELLA-Restaurante'",
        "pred": "SELECT COUNT(*) FROM Orders WHERE `CustomerID` = ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'GROSELLA-Restaurante' )",
        "pred_result": "no such column: T1.CompanyName",
        "repair_sql": "SELECT COUNT(*) FROM Orders WHERE `CustomerID` = ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'GROSELLA-Restaurante' )",
        "repair_result": "no such column: T1.CompanyName"
    },
    {
        "idx": 945,
        "db_id": "retail_world",
        "question": "Name products and their quantity ordered by the company 'GROSELLA-Restaurante' in the sales order that was processed by Nancy Davolio.",
        "evidence": "name products refers to ProductName; 'GROSELLA-Restaurante' refers to CompanyName; 'Nancy Davolio' is the full name of an employee; full name refers to FirstName, LastName;",
        "gold": "SELECT T4.ProductName, T3.Quantity FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID INNER JOIN Customers AS T5 ON T2.CustomerID = T5.CustomerID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio' AND T5.CompanyName = 'GROSELLA-Restaurante'",
        "pred": "SELECT T2.`ProductName`, T3.`Quantity` FROM OrderDetails AS T3 INNER JOIN Products AS T2 ON T3.`ProductID` = T2.`ProductID` WHERE T3.`OrderID` = ( SELECT T1.`OrderID` FROM Orders AS T1 WHERE T1.`CustomerID` = ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'GROSELLA-Restaurante' ) AND T1.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Nancy' AND `LastName` = 'Davolio' ) )",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT T2.`ProductName`, T3.`Quantity` FROM OrderDetails AS T3 INNER JOIN Products AS T2 ON T3.`ProductID` = T2.`ProductID` INNER JOIN Orders AS T1 ON T3.`OrderID` = T1.`OrderID` INNER JOIN Customers ON T1.`CustomerID` = Customers.`CustomerID` INNER JOIN Employees ON T1.`EmployeeID` = Employees.`EmployeeID` WHERE Customers.`CustomerName` = 'GROSELLA-Restaurante' AND Employees.`FirstName` = 'Nancy' AND Employees.`LastName` = 'Davolio'",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 946,
        "db_id": "retail_world",
        "question": "Identify the total number of orders placed by the customer 'Laughing Bacchus Wine Cellars' and it's average value.",
        "evidence": "'Laughing Bacchus Wine Cellars' refers to CompanyName; calculation = DIVIDE(SUM(UnitPrice * Quantity * SUBTRACT(1, Discount)), COUNT(OrderID))",
        "gold": "SELECT COUNT(T2.OrderID) , SUM(T3.UnitPrice * T3.Quantity * (1 - T3.Discount)) / COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID WHERE T1.CompanyName = 'Laughing Bacchus Wine Cellars'",
        "pred": "SELECT AVG(T2.`Price` * T3.`Quantity` * (1 - T3.`Discount`)) FROM Orders AS T1 INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` INNER JOIN Products AS T2 ON T3.`ProductID` = T2.`ProductID` WHERE T1.`CustomerID` = ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'Laughing Bacchus Wine Cellars' )",
        "pred_result": "no such column: T3.Discount",
        "repair_sql": "SELECT COUNT(T1.`OrderID`) AS TotalOrders, AVG(T2.`Price` * T3.`Quantity` * (1 - T3.`Discount`)) AS AverageValue FROM Orders AS T1 INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` INNER JOIN Products AS T2 ON T3.`ProductID` = T2.`ProductID` WHERE T1.`CustomerID` = ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'Laughing Bacchus Wine Cellars' )",
        "repair_result": "no such column: T3.Discount"
    },
    {
        "idx": 947,
        "db_id": "retail_world",
        "question": "How many boxes of 'Pavlova' did Northwind sell?",
        "evidence": "'Pavlova' is a ProductName",
        "gold": "SELECT COUNT(T2.Quantity) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Pavlova'",
        "pred": "SELECT SUM(T3.`Quantity`) AS Total_Boxes_Sold FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` WHERE T2.`ProductID` = ( SELECT `ProductID` FROM Products WHERE `ProductName` = 'Pavlova' ) AND T1.`CustomerID` IN ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'Northwind' )",
        "pred_result": "no such column: T3.Quantity",
        "repair_sql": "SELECT SUM(T2.`Quantity`) AS Total_Boxes_Sold FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` WHERE T2.`ProductID` = ( SELECT `ProductID` FROM Products WHERE `ProductName` = 'Pavlova' ) AND T1.`CustomerID` IN ( SELECT `CustomerID` FROM Customers WHERE `CustomerName` = 'Northwind' )",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 948,
        "db_id": "retail_world",
        "question": "What is the salary range for sales representative in Northwind?",
        "evidence": "salary range is BETWEEN max(Salary) AND min(Salary); sales representative is a title",
        "gold": "SELECT ( SELECT MIN(Salary) FROM Employees WHERE Title = 'Sales Representative' ) AS MIN , ( SELECT MAX(Salary) FROM Employees WHERE Title = 'Sales Representative' ) AS MAX",
        "pred": "SELECT MAX(T1.`Salary`) AS max_salary, MIN(T1.`Salary`) AS min_salary FROM Employees AS T1 WHERE T1.`Title` = 'Sales Representative'",
        "pred_result": "no such column: T1.Salary",
        "repair_sql": "SELECT MAX(T1.`Salary`) AS max_salary, MIN(T1.`Salary`) AS min_salary FROM Employees AS T1 JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.`Title` = 'Sales Representative' AND T3.Region = 'Northwind'",
        "repair_result": "no such table: EmployeeTerritories"
    },
    {
        "idx": 949,
        "db_id": "retail_world",
        "question": "How many suppliers does Northwind have in USA?",
        "evidence": "'USA' is a country; supplier refers to CompanyName",
        "gold": "SELECT COUNT(SupplierID) FROM Suppliers WHERE Country = 'USA'",
        "pred": "SELECT COUNT(DISTINCT `SupplierID`) FROM Suppliers WHERE `Country` = 'USA'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(DISTINCT `SupplierID`) FROM Suppliers WHERE `Country` = 'USA'",
        "repair_result": 1
    },
    {
        "idx": 950,
        "db_id": "retail_world",
        "question": "What products are no longer sold by Northwind?",
        "evidence": "no longer sold refers to Discontinued = 1; products refers to ProductName",
        "gold": "SELECT ProductName FROM Products WHERE Discontinued = 1",
        "pred": "SELECT T1.`ProductName` FROM Products AS T1 WHERE T1.`ProductID` IN ( SELECT T2.`ProductID` FROM Products AS T2 WHERE T2.`Discontinued` = 1 )",
        "pred_result": "no such column: T2.Discontinued",
        "repair_sql": "SELECT T1.`ProductName` FROM Products AS T1 WHERE T1.`ProductID` IN ( SELECT T2.`ProductID` FROM Products AS T2 WHERE T2.`ProductID` NOT IN ( SELECT DISTINCT T3.`ProductID` FROM OrderDetails AS T3 ) )",
        "repair_result": "no such column: Discontinued"
    },
    {
        "idx": 951,
        "db_id": "retail_world",
        "question": "Who is the Sales Agent for the company 'Eastern Connection'?",
        "evidence": "'Eastern Connection' is a CompanyName; 'Sales Agent' is a ContactTitle",
        "gold": "SELECT ContactName FROM Customers WHERE CompanyName = 'Eastern Connection' AND ContactTitle = 'Sales Agent'",
        "pred": "SELECT T2.`FirstName`, T2.`LastName` FROM Employees AS T2 WHERE T2.`EmployeeID` = ( SELECT DISTINCT T3.`EmployeeID` FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN Customers AS T3 ON T1.`CustomerID` = T3.`CustomerID` WHERE T3.`CustomerName` = 'Eastern Connection' )",
        "pred_result": "no such column: T3.EmployeeID",
        "repair_sql": "SELECT T2.`FirstName`, T2.`LastName` FROM Employees AS T2 INNER JOIN Orders AS T1 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN Customers AS T3 ON T1.`CustomerID` = T3.`CustomerID` WHERE T3.`CustomerName` = 'Eastern Connection'",
        "repair_result": "no such column: CompanyName"
    },
    {
        "idx": 952,
        "db_id": "retail_world",
        "question": "How many companies do ship Northwind's orders?",
        "evidence": "companies refers to ShipperID",
        "gold": "SELECT COUNT(ShipperID) FROM Shippers",
        "pred": "SELECT COUNT(DISTINCT T6.`ShipperID`) FROM Orders AS T4 INNER JOIN OrderDetails AS T5 ON T4.`OrderID` = T5.`OrderID` INNER JOIN Shippers AS T6 ON T5.`ShipperID` = T6.`ShipperID` WHERE T4.`CustomerID` = 'Northwind'",
        "pred_result": "no such column: T5.ShipperID",
        "repair_sql": "SELECT COUNT(DISTINCT T6.`ShipperID`) FROM Orders AS T4 INNER JOIN Shippers AS T6 ON T4.`ShipperID` = T6.`ShipperID` WHERE T4.`CustomerID` = 'Northwind'",
        "repair_result": 0
    },
    {
        "idx": 953,
        "db_id": "retail_world",
        "question": "Identify the total number of orders processed by Northwind employee named Andrew Fuller. What percent of those orders was shipped to Austria?",
        "evidence": "'Andrew Fuller' is the full name of an employee; full name refers to FistName, LastName; Austria refers to ShipCountry; calculation = DIVIDE(SUM(ShipCountry = 'Austria'), COUNT(OrderID)) * 100",
        "gold": "SELECT CAST(COUNT(CASE WHEN T2.ShipCountry = 'Austria' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Andrew' AND T1.LastName = 'Fuller'",
        "pred": "SELECT (CAST(OrdersToAustria AS REAL) / TotalOrders) * 100 AS PercentageToAustria FROM ( SELECT COUNT(DISTINCT T1.`OrderID`) AS TotalOrders FROM Orders AS T1 WHERE T1.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Andrew' AND `LastName` = 'Fuller' ) ) AS Total, ( SELECT COUNT(DISTINCT T1.`OrderID`) AS OrdersToAustria FROM Orders AS T1 WHERE T1.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Andrew' AND `LastName` = 'Fuller' ) AND T1.`ShipCountry` = 'Austria' ) AS Austria",
        "pred_result": "no such column: T1.ShipCountry",
        "repair_sql": "SELECT (CAST(Austria.OrdersToAustria AS REAL) / Total.TotalOrders) * 100 AS PercentageToAustria FROM ( SELECT COUNT(DISTINCT T1.OrderID) AS TotalOrders FROM Orders AS T1 WHERE T1.EmployeeID = ( SELECT EmployeeID FROM Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller' ) ) AS Total JOIN ( SELECT COUNT(DISTINCT T1.OrderID) AS OrdersToAustria FROM Orders AS T1 WHERE T1.EmployeeID = ( SELECT EmployeeID FROM Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller' ) AND T1.OrderID IN ( SELECT OrderID FROM Orders WHERE ShipCountry = 'Austria' ) ) AS Austria",
        "repair_result": "no such column: ShipCountry"
    },
    {
        "idx": 954,
        "db_id": "retail_world",
        "question": "Indicate category name of soft drinks, coffees, teas, beers, and ales in description list.",
        "evidence": "Soft drinks, coffees, teas, beers, and ales' is Description of CategoryName",
        "gold": "SELECT CategoryName FROM Categories WHERE Description = 'Soft drinks, coffees, teas, beers, and ales'",
        "pred": "SELECT DISTINCT P.ProductName FROM Products AS P WHERE P.CategoryID IN ( SELECT CategoryID FROM Categories WHERE CategoryName IN ('Soft drinks', 'Coffees', 'Teas', 'Beers', 'Ales') )",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT P.ProductName FROM Products AS P JOIN Categories AS C ON P.CategoryID = C.CategoryID WHERE C.CategoryName IN ('Soft drinks', 'Coffees', 'Teas', 'Beers', 'Ales')",
        "repair_result": 0
    },
    {
        "idx": 955,
        "db_id": "retail_world",
        "question": "List the phone number of company named Around the Horn.",
        "evidence": "phone number refers to Phone; 'Around the Horn' is a CompanyName",
        "gold": "SELECT Phone FROM Customers WHERE CompanyName = 'Around the Horn'",
        "pred": "SELECT Phone FROM Suppliers WHERE SupplierName = 'Around the Horn'",
        "pred_result": "no such column: Phone",
        "repair_sql": "SELECT Phone FROM Suppliers WHERE SupplierName = 'Around the Horn'",
        "repair_result": "no such column: Phone"
    },
    {
        "idx": 956,
        "db_id": "retail_world",
        "question": "Indicate the fax of the company Blondesddsl pre et fils in Strasbourg city.",
        "evidence": "'Blondesddsl pre et fils' is a CompanyName",
        "gold": "SELECT Fax FROM Customers WHERE CompanyName = 'Blondesddsl pre et fils' AND City = 'Strasbourg'",
        "pred": "SELECT Phone FROM Suppliers WHERE SupplierName = 'Blondesddsl pre et fils' AND City = 'Strasbourg'",
        "pred_result": "no such column: Fax",
        "repair_sql": "SELECT Phone FROM Suppliers WHERE SupplierName = 'Blondesddsl pre et fils' AND City = 'Strasbourg';",
        "repair_result": "no such column: Fax"
    },
    {
        "idx": 957,
        "db_id": "retail_world",
        "question": "How many companies are there in the city of London?",
        "evidence": "companies refers to CompanyName;",
        "gold": "SELECT COUNT(CompanyName) FROM Customers WHERE City = 'London'",
        "pred": "SELECT COUNT(DISTINCT T1.`SupplierName`) AS num_companies FROM Suppliers AS T1 WHERE T1.`City` = 'London'",
        "pred_result": "no such column: CompanyName",
        "repair_sql": "SELECT COUNT(DISTINCT T1.`SupplierName`) AS num_companies FROM Suppliers AS T1 WHERE T1.`City` = 'London'",
        "repair_result": "no such column: CompanyName"
    },
    {
        "idx": 958,
        "db_id": "retail_world",
        "question": "Indicate the address of the company Eastern Connection whose contact name is Ann Devon.",
        "evidence": "'Eastern Connection' is a CompanyName; 'Ann Devon' is the full name of an employee; full name refers to FirstName, LastName",
        "gold": "SELECT Address FROM Customers WHERE CompanyName = 'Eastern Connection' AND ContactName = 'Ann Devon'",
        "pred": "SELECT Address FROM Suppliers WHERE SupplierName = 'Eastern Connection' AND SupplierID = ( SELECT SupplierID FROM Products WHERE CategoryID = ( SELECT CategoryID FROM Categories WHERE CategoryName = 'Seafood' ) )",
        "pred_result": "no such column: CompanyName",
        "repair_sql": "SELECT s.Address FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID JOIN Categories c ON p.CategoryID = c.CategoryID WHERE s.SupplierName = 'Eastern Connection' AND c.CategoryName = 'Seafood'",
        "repair_result": "no such column: CompanyName"
    },
    {
        "idx": 959,
        "db_id": "retail_world",
        "question": "Indicate which company is located in France?",
        "evidence": "company refers to CompanyName; France is a country",
        "gold": "SELECT CompanyName FROM Customers WHERE Country = 'France'",
        "pred": "SELECT DISTINCT T1.`SupplierName` FROM Suppliers AS T1 WHERE T1.`Country` = 'France'",
        "pred_result": "no such column: CompanyName",
        "repair_sql": "SELECT DISTINCT T1.`SupplierName` FROM Suppliers AS T1 WHERE T1.`Country` = 'France'",
        "repair_result": "no such column: CompanyName"
    },
    {
        "idx": 960,
        "db_id": "retail_world",
        "question": "How many product names does the supplier Exotic Liquids have?",
        "evidence": "'Exotic Liquids' is a CompanyName",
        "gold": "SELECT COUNT(T1.ProductName) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids'",
        "pred": "SELECT COUNT(`ProductName`) FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Exotic Liquids' )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT COUNT(`ProductName`) FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Exotic Liquids' )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 961,
        "db_id": "retail_world",
        "question": "What is the name of the company that has the product with the highest unit price?",
        "evidence": "name of the company refers to CompanyName; the highest unit price refers to MAX(UnitPrice)",
        "gold": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )",
        "pred": "SELECT DISTINCT T5.`SupplierName` FROM Products AS T1 INNER JOIN Suppliers AS T5 ON T1.`SupplierID` = T5.`SupplierID` WHERE T1.`Price` = ( SELECT MAX(`Price`) FROM Products )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT DISTINCT T5.`SupplierName` FROM Products AS T1 INNER JOIN Suppliers AS T5 ON T1.`SupplierID` = T5.`SupplierID` WHERE T1.`Price` = ( SELECT MAX(`Price`) FROM Products )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 962,
        "db_id": "retail_world",
        "question": "Which company name in London city has the most stocked products?",
        "evidence": "the most stocked products refers to MAX(UnitsInStock)",
        "gold": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.City = 'London' ORDER BY T1.UnitsInStock DESC LIMIT 1",
        "pred": "SELECT T1.`SupplierName` FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.`SupplierID` = T2.`SupplierID` INNER JOIN OrderDetails AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Orders AS T4 ON T3.`OrderID` = T4.`OrderID` WHERE T1.`City` = 'London' GROUP BY T1.`SupplierName` ORDER BY SUM(T3.`Quantity`) DESC LIMIT 1",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT T1.`SupplierName` FROM Suppliers AS T1 JOIN Products AS T2 ON T1.`SupplierID` = T2.`SupplierID` JOIN OrderDetails AS T3 ON T2.`ProductID` = T3.`ProductID` JOIN Orders AS T4 ON T3.`OrderID` = T4.`OrderID` WHERE T1.`City` = 'London' GROUP BY T1.`SupplierName` ORDER BY SUM(T3.`Quantity`) DESC LIMIT 1",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 963,
        "db_id": "retail_world",
        "question": "Which product of Exotic Liquids company that have the highest reorder levels?",
        "evidence": "'Exotic Liquids' is a CompanyName; the highest reorder levels refers to MAX(ReorderLevel)",
        "gold": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids' ORDER BY T1.ReorderLevel DESC LIMIT 1",
        "pred": "SELECT T2.`ProductName` FROM Products AS T2 WHERE T2.`ProductID` = ( SELECT T1.`ProductID` FROM Products AS T1 WHERE T1.`SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Exotic Liquids' ) GROUP BY T1.`ProductID` ORDER BY MAX(T1.`ReorderLevel`) DESC LIMIT 1 )",
        "pred_result": "no such column: T1.ReorderLevel",
        "repair_sql": "SELECT T2.`ProductName` FROM Products AS T2 JOIN ( SELECT T1.`ProductID`, MAX(T1.`ReorderLevel`) AS MaxReorderLevel FROM Products AS T1 JOIN Suppliers ON T1.`SupplierID` = Suppliers.`SupplierID` WHERE Suppliers.`SupplierName` = 'Exotic Liquids' GROUP BY T1.`ProductID` ) AS MaxReorder ON T2.`ProductID` = MaxReorder.`ProductID` WHERE T2.`ReorderLevel` = MaxReorder.`MaxReorderLevel`",
        "repair_result": "no such column: T1.ReorderLevel"
    },
    {
        "idx": 964,
        "db_id": "retail_world",
        "question": "Provide the category name of the Chef Anton's Gumbo Mix product that New Orleans Cajun Delights company has.",
        "evidence": "'Chef Anton's Gumbo Mix' is a ProductName; 'New Orleans Cajun Delights' is a CompanyName;",
        "gold": "SELECT T3.CategoryName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T1.CompanyName = 'New Orleans Cajun Delights' AND T2.ProductName LIKE 'Chef Anton%s Gumbo Mix'",
        "pred": "SELECT C.`CategoryName` FROM Products AS P INNER JOIN Categories AS C ON P.`CategoryID` = C.`CategoryID` WHERE P.`ProductName` = 'Chef Anton\\'s Gumbo Mix' AND P.`SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'New Orleans Cajun Delights' )",
        "pred_result": "near \"s\": syntax error",
        "repair_sql": "SELECT C.`CategoryName` FROM Products AS P INNER JOIN Categories AS C ON P.`CategoryID` = C.`CategoryID` INNER JOIN Suppliers AS S ON P.`SupplierID` = S.`SupplierID` WHERE P.`ProductName` = 'Chef Anton\\'s Gumbo Mix' AND S.`SupplierName` = 'New Orleans Cajun Delights'",
        "repair_result": "near \"s\": syntax error"
    },
    {
        "idx": 965,
        "db_id": "retail_world",
        "question": "Indicate the name of the country where Leka Trading supplies Ipoh Coffee product.",
        "evidence": "'Leka Trading' is a CompanyName; 'Ipoh Coffee' is a ProductName",
        "gold": "SELECT T2.Country FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Ipoh Coffee' AND T2.CompanyName = 'Leka Trading'",
        "pred": "SELECT T1.`Country` FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`SupplierName` = 'Leka Trading' AND T2.`ProductName` = 'Ipoh Coffee'",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT T1.`Country` FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`SupplierName` = 'Leka Trading' AND T2.`ProductName` = 'Ipoh Coffee'",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 966,
        "db_id": "retail_world",
        "question": "Indicate the category name of the product name with the highest units on order.",
        "evidence": "",
        "gold": "SELECT T2.CategoryName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.UnitsOnOrder = ( SELECT MAX(T1.UnitsOnOrder) FROM Products )",
        "pred": "SELECT T3.`CategoryName` FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.`ProductID` = T2.`ProductID` INNER JOIN Categories AS T3 ON T1.`CategoryID` = T3.`CategoryID` WHERE T1.`ProductName` = ( SELECT T1.`ProductName` FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.`ProductID` = T2.`ProductID` GROUP BY T1.`ProductName` ORDER BY SUM(T2.`Quantity`) DESC LIMIT 1 )",
        "pred_result": "no such column: T1.UnitsOnOrder",
        "repair_sql": "SELECT T3.`CategoryName` FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.`ProductID` = T2.`ProductID` INNER JOIN Categories AS T3 ON T1.`CategoryID` = T3.`CategoryID` WHERE T1.`ProductName` = ( SELECT T1.`ProductName` FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.`ProductID` = T2.`ProductID` GROUP BY T1.`ProductName` ORDER BY SUM(T2.`Quantity`) DESC LIMIT 1 )",
        "repair_result": "no such column: T1.UnitsOnOrder"
    },
    {
        "idx": 967,
        "db_id": "retail_world",
        "question": "What is the difference in number of unit price from Chef Anton's Cajun Seasoning product and Chef Anton's Gumbo Mix product of New Orleans Cajun Delights company.",
        "evidence": "Chef Anton's Cajun Seasoning' AND 'Chef Anton''s Gumbo Mix' are ProductName; 'New Orleans Cajun Delights' is a CompanyName; calculation = SUBTRACT(UnitPrice where ProductName = 'Chef Anton's Cajun Seasoning', UnitPrice where ProductName = 'Chef Anton''s Gumbo Mix')",
        "gold": "SELECT ( SELECT T1.UnitPrice FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'New Orleans Cajun Delights' AND T1.ProductName LIKE 'Chef Anton%s Cajun Seasoning' ) - ( SELECT T1.UnitPrice FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'New Orleans Cajun Delights' AND T1.ProductName LIKE 'Chef Anton%s Gumbo Mix' ) AS calu",
        "pred": "SELECT ( SELECT P1.`Price` FROM Products AS P1 INNER JOIN Suppliers AS S ON P1.`SupplierID` = S.`SupplierID` WHERE P1.`ProductName` = 'Chef Anton''s Cajun Seasoning' AND S.`SupplierName` = 'New Orleans Cajun Delights' ) - ( SELECT P2.`Price` FROM Products AS P2 INNER JOIN Suppliers AS S ON P2.`SupplierID` = S.`SupplierID` WHERE P2.`ProductName` = 'Chef Anton''s Gumbo Mix' AND S.`SupplierName` = 'New Orleans Cajun Delights' ) AS Price_Difference",
        "pred_result": "no such column: T1.UnitPrice",
        "repair_sql": "SELECT ( SELECT P1.`Price` FROM Products AS P1 INNER JOIN Suppliers AS S ON P1.`SupplierID` = S.`SupplierID` WHERE P1.`ProductName` = 'Chef Anton''s Cajun Seasoning' AND S.`SupplierName` = 'New Orleans Cajun Delights' ) - ( SELECT P2.`Price` FROM Products AS P2 INNER JOIN Suppliers AS S ON P2.`SupplierID` = S.`SupplierID` WHERE P2.`ProductName` = 'Chef Anton''s Gumbo Mix' AND S.`SupplierName` = 'New Orleans Cajun Delights' ) AS Price_Difference",
        "repair_result": "no such column: T1.UnitPrice"
    },
    {
        "idx": 968,
        "db_id": "retail_world",
        "question": "Which of Cooperativa de Quesos 'Las Cabras' products have a unit price greater than 20?",
        "evidence": "Cooperativa de Quesos 'Las Cabras'' is a CompanyName; unit price greater than 20 refers to UnitPrice > 20",
        "gold": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName LIKE 'Cooperativa de Quesos%' AND T1.UnitPrice > 20",
        "pred": "SELECT `ProductName` FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Cooperativa de Quesos ''Las Cabras''' ) AND `Price` > 20",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT `ProductName` FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Cooperativa de Quesos ''Las Cabras''' ) AND `Price` > 20",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 969,
        "db_id": "retail_world",
        "question": "Please indicate the product name of Tokyo Traders company with order quantity greater than 40.",
        "evidence": "'Tokyo Traders' is a CompanyName; order quantity greater than 40 refers to Quantity > 40",
        "gold": "SELECT DISTINCT T2.ProductName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN `Order Details` AS T3 ON T2.ProductID = T3.ProductID WHERE T1.CompanyName = 'Tokyo Traders' AND T3.Quantity > 40",
        "pred": "SELECT DISTINCT T5.`ProductName` FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.`SupplierID` = T2.`SupplierID` INNER JOIN OrderDetails AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Orders AS T4 ON T3.`OrderID` = T4.`OrderID` INNER JOIN Customers AS T5 ON T4.`CustomerID` = T5.`CustomerID` WHERE T1.`SupplierName` = 'Tokyo Traders' AND T3.`Quantity` > 40",
        "pred_result": "no such column: T5.ProductName",
        "repair_sql": "SELECT DISTINCT T2.`ProductName` FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.`SupplierID` = T2.`SupplierID` INNER JOIN OrderDetails AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Orders AS T4 ON T3.`OrderID` = T4.`OrderID` INNER JOIN Customers AS T5 ON T4.`CustomerID` = T5.`CustomerID` WHERE T1.`SupplierName` = 'Tokyo Traders' AND T3.`Quantity` > 40",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 970,
        "db_id": "retail_world",
        "question": "List all category name of Exotic Liquids 's product with units in stock over 100.",
        "evidence": "'Exotic Liquids' is a CompanyName; units in stock over 100 refers to UnitsInStock > 100",
        "gold": "SELECT T3.CategoryName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T2.UnitsInStock > 100 AND T1.CompanyName = 'Exotic Liquids'",
        "pred": "SELECT DISTINCT C.`CategoryName` FROM Categories AS C INNER JOIN Products AS P ON C.`CategoryID` = P.`CategoryID` WHERE P.`ProductID` IN ( SELECT `ProductID` FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Exotic Liquids' ) AND `UnitsInStock` > 100 )",
        "pred_result": "no such column: UnitsInStock",
        "repair_sql": "SELECT DISTINCT C.`CategoryName` FROM Categories AS C INNER JOIN Products AS P ON C.`CategoryID` = P.`CategoryID` WHERE P.`SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Exotic Liquids' ) AND P.`UnitsInStock` > 100",
        "repair_result": "no such column: P.UnitsInStock"
    },
    {
        "idx": 971,
        "db_id": "retail_world",
        "question": "How many product names have order quantity less than 50? Calculate the percentage of orders less than 50 out of total order quantity.",
        "evidence": "order quantity less than 50 refers to Quantity < 50; Calculation = DIVIDE(SUM(Quantity < 50), SUM(ProductID)) * 100",
        "gold": "SELECT SUM(CASE WHEN T2.Quantity < 50 THEN 1 ELSE 0 END) , CAST(SUM(IF(T2.Quantity < 50, 1, 0)) AS REAL) / COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID",
        "pred": "SELECT (COUNT(DISTINCT P.`ProductName`) * 100.0) / ( SELECT SUM(OD.`Quantity`) FROM OrderDetails AS OD ) AS Percentage FROM Products AS P INNER JOIN OrderDetails AS OD ON P.`ProductID` = OD.`ProductID` WHERE OD.`Quantity` < 50",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT (COUNT(DISTINCT P.`ProductName`) * 100.0) / ( SELECT SUM(OD.`Quantity`) FROM OrderDetails AS OD ) AS Percentage FROM Products AS P INNER JOIN OrderDetails AS OD ON P.`ProductID` = OD.`ProductID` WHERE OD.`Quantity` < 50",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 972,
        "db_id": "retail_world",
        "question": "Please indicate total order quantity of product Geitost and calculate the percentage of such product among all the order quantity.",
        "evidence": "'Geitost' is a ProductName; calculation = DIVIDE(ProductName = 'Geitost', COUNT(ProductID)) * 100",
        "gold": "SELECT SUM(IF(T1.ProductName = 'Geitost', 1, 0)) AS sum , CAST(SUM(IF(T1.ProductName = 'Geitost', 1, 0)) AS REAL) / COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID",
        "pred": "SELECT (CAST(SUM(T4.`Quantity`) AS REAL) / ( SELECT SUM(T6.`Quantity`) FROM Orders AS T5 INNER JOIN OrderDetails AS T6 ON T5.`OrderID` = T6.`OrderID` )) * 100 FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` WHERE T3.`ProductName` = 'Geitost'",
        "pred_result": "no such column: T4.Quantity",
        "repair_sql": "SELECT (CAST(SUM(T2.`Quantity`) AS REAL) / ( SELECT SUM(T6.`Quantity`) FROM Orders AS T5 INNER JOIN OrderDetails AS T6 ON T5.`OrderID` = T6.`OrderID` )) * 100 FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` WHERE T3.`ProductName` = 'Geitost'",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 973,
        "db_id": "retail_world",
        "question": "What is the position of Robert King?",
        "evidence": "'Robert King' is the full name of an employee; full name refers to FirstName, LastName; position refers to Title",
        "gold": "SELECT Title FROM Employees WHERE FirstName = 'Robert' AND LastName = 'King'",
        "pred": "SELECT T2.`Title` FROM Employees AS T1 INNER JOIN EmployeeTitles AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T1.`FirstName` = 'Robert' AND T1.`LastName` = 'King'",
        "pred_result": "no such table: EmployeeTitles",
        "repair_sql": "SELECT T1.`Title` FROM Employees AS T1 WHERE T1.`FirstName` = 'Robert' AND T1.`LastName` = 'King'",
        "repair_result": "no such column: T1.Title"
    },
    {
        "idx": 974,
        "db_id": "retail_world",
        "question": "Write the shipping company name with the telephone number of (503) 555-9931.",
        "evidence": "telephone number of (503) 555-9931 refers to Phone = '(503) 555-9931'",
        "gold": "SELECT CompanyName FROM Shippers WHERE Phone = '(503) 555-9931'",
        "pred": "SELECT `ShipperName` FROM Shippers WHERE `Phone` = '(503) 555-9931'",
        "pred_result": "no such column: CompanyName",
        "repair_sql": "SELECT `ShipperName` FROM Shippers WHERE `Phone` = '(503) 555-9931'",
        "repair_result": "no such column: CompanyName"
    },
    {
        "idx": 975,
        "db_id": "retail_world",
        "question": "Write the address and phone number of Margaret Peacock.",
        "evidence": "Margaret Peacock is the full name of an employee; full name refers to FirstName, LastName; phone number refers to HomePhone",
        "gold": "SELECT Address, HomePhone FROM Employees WHERE FirstName = 'Margaret' AND LastName = 'Peacock'",
        "pred": "SELECT `Address`, `Phone` FROM Employees WHERE `EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Margaret' AND `LastName` = 'Peacock' )",
        "pred_result": "no such column: Address",
        "repair_sql": "SELECT e.Address, s.Phone FROM Employees e JOIN Suppliers s ON e.EmployeeID = s.SupplierID WHERE e.FirstName = 'Margaret' AND e.LastName = 'Peacock'",
        "repair_result": "no such column: e.Address"
    },
    {
        "idx": 976,
        "db_id": "retail_world",
        "question": "What is the full address of Rattlesnake Canyon Grocery?",
        "evidence": "full address refers to ShipAddress, ShipCity, ShipRegion,ShipPostalCode, ShipCountry; 'Rattlesnake Canyon Grocery' is a ShipName;",
        "gold": "SELECT DISTINCT ShipAddress, ShipCity, ShipRegion, ShipPostalCode, ShipCountry FROM Orders WHERE ShipName = 'Rattlesnake Canyon Grocery'",
        "pred": "SELECT `Address`, `City`, `PostalCode`, `Country` FROM Customers WHERE `CustomerName` = 'Rattlesnake Canyon Grocery'",
        "pred_result": "no such column: ShipAddress",
        "repair_sql": "SELECT `Address`, `City`, `PostalCode`, `Country` FROM Customers WHERE `CustomerName` = 'Rattlesnake Canyon Grocery'",
        "repair_result": "no such column: ShipAddress"
    },
    {
        "idx": 977,
        "db_id": "retail_world",
        "question": "List all product names under Confections.",
        "evidence": "'Confections' is a CompanyName;",
        "gold": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Confections'",
        "pred": "SELECT `ProductName` FROM Products WHERE `CategoryID` = ( SELECT `CategoryID` FROM Categories WHERE `CategoryName` = 'Confections' )",
        "pred_result": 1,
        "repair_sql": "SELECT `ProductName` FROM Products WHERE `CategoryID` = ( SELECT `CategoryID` FROM Categories WHERE `CategoryName` = 'Confections' )",
        "repair_result": 1
    },
    {
        "idx": 978,
        "db_id": "retail_world",
        "question": "Sir Rodney's Marmalade is supplied by which company and who is the contact for this company?",
        "evidence": "'Sir Rodney's Marmalade' is a ProductName; company refers to CompanyName; contact for a company refers to ContactName",
        "gold": "SELECT T2.CompanyName, T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName LIKE 'Sir Rodney%s Marmalade'",
        "pred": "SELECT T2.`SupplierName`, T2.`ContactName` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`ProductName` = 'Sir Rodney''s Marmalade'",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT T2.`SupplierName`, T2.`ContactName` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T1.`ProductName` = 'Sir Rodney''s Marmalade'",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 979,
        "db_id": "retail_world",
        "question": "What is the full name of the employee who is in charge of the territory of Denver?",
        "evidence": "full name refers to FirstName, LastName; Denver is a TerritoryDescription",
        "gold": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Denver'",
        "pred": "SELECT T1.`FirstName` || ' ' || T1.`LastName` AS FullName FROM Employees AS T1 WHERE T1.`EmployeeID` = ( SELECT T2.`EmployeeID` FROM Employees AS T2 WHERE T2.`Notes` LIKE '%Denver%' )",
        "pred_result": "no such table: EmployeeTerritories",
        "repair_sql": "SELECT T1.`FirstName` || ' ' || T1.`LastName` AS FullName FROM Employees AS T1 JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T2.`Notes` LIKE '%Denver%'",
        "repair_result": "no such table: EmployeeTerritories"
    },
    {
        "idx": 980,
        "db_id": "retail_world",
        "question": "List all the territories where Laura Callahan is in charge.",
        "evidence": "territories refers to TerritoryDescription; Laura Callahan is the full name of an employee; full name refers to FirstName, LastName",
        "gold": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.FirstName = 'Laura' AND T1.LastName = 'Callahan'",
        "pred": "SELECT DISTINCT `TerritoryDescription` FROM Territories INNER JOIN EmployeeTerritories ON Territories.`TerritoryID` = EmployeeTerritories.`TerritoryID` WHERE EmployeeTerritories.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Laura' AND `LastName` = 'Callahan' )",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT DISTINCT `TerritoryDescription` FROM EmployeeTerritories JOIN Territories ON EmployeeTerritories.`TerritoryID` = Territories.`TerritoryID` WHERE EmployeeTerritories.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Laura' AND `LastName` = 'Callahan' )",
        "repair_result": "no such table: EmployeeTerritories"
    },
    {
        "idx": 981,
        "db_id": "retail_world",
        "question": "How many orders were shipped via Federal Shipping?",
        "evidence": "'Federal Shipping' is a CompanyName; orders refers to OrderID",
        "gold": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping' AND T1.ShipVia = 3",
        "pred": "SELECT COUNT(*) FROM Orders WHERE `ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'Federal Shipping' )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT COUNT(*) FROM Orders WHERE `ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'Federal Shipping' )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 982,
        "db_id": "retail_world",
        "question": "Name the products where the suppliers come from Finland.",
        "evidence": "'Finland' is a Country; product refers to ProductName; suppliers refers to SupplierID",
        "gold": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Finland'",
        "pred": "SELECT DISTINCT T1.`ProductName` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T2.`Country` = 'Finland'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`ProductName` FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.`SupplierID` = T2.`SupplierID` WHERE T2.`Country` = 'Finland'",
        "repair_result": 1
    },
    {
        "idx": 983,
        "db_id": "retail_world",
        "question": "The product 'Mozzarella di Giovanni' belongs in which category? Include the category's description as well.",
        "evidence": "Mozzarella di Giovanni' is a ProductName; category refers to CategoryName;",
        "gold": "SELECT T2.CategoryName, T2.Description FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.ProductName = 'Mozzarella di Giovanni'",
        "pred": "SELECT T2.`CategoryName`, T2.`Description` FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.`CategoryID` = T2.`CategoryID` WHERE T1.`ProductName` = 'Mozzarella di Giovanni'",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`CategoryName`, T2.`Description` FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.`CategoryID` = T2.`CategoryID` WHERE T1.`ProductName` = 'Mozzarella di Giovanni'",
        "repair_result": 1
    },
    {
        "idx": 984,
        "db_id": "retail_world",
        "question": "Name the suppliers that supply products under the category 'cheeses.'",
        "evidence": "suppliers refers to CompanyName; 'cheeses' is a Description",
        "gold": "SELECT DISTINCT T1.CompanyName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T3.Description = 'Cheeses'",
        "pred": "SELECT DISTINCT T5.`SupplierName` FROM Products AS T1 INNER JOIN Suppliers AS T5 ON T1.`SupplierID` = T5.`SupplierID` WHERE T1.`CategoryID` = ( SELECT CategoryID FROM Categories WHERE CategoryName = 'Cheeses' )",
        "pred_result": "no such column: T1.CompanyName",
        "repair_sql": "SELECT DISTINCT T5.`SupplierName` FROM Products AS T1 INNER JOIN Suppliers AS T5 ON T1.`SupplierID` = T5.`SupplierID` INNER JOIN Categories AS T2 ON T1.`CategoryID` = T2.`CategoryID` WHERE T2.`CategoryName` = 'Cheeses'",
        "repair_result": "no such column: T1.CompanyName"
    },
    {
        "idx": 985,
        "db_id": "retail_world",
        "question": "Name all products supplied by Zaanse Snoepfabriek.",
        "evidence": "products refers to ProductName; 'Zaanse Snoepfabriek' is a CompanyName",
        "gold": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Zaanse Snoepfabriek'",
        "pred": "SELECT `ProductName` FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Zaanse Snoepfabriek' )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT `ProductName` FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Zaanse Snoepfabriek' )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 986,
        "db_id": "retail_world",
        "question": "Which products by Plutzer Lebensmittelgromrkte AG were discontinued and what are their price?",
        "evidence": "products refers to ProductName; 'Plutzer Lebensmittelgromrkte AG' is a CompanyName; price refers to UnitPrice; \ndiscontinued products refers to discontinued = 1",
        "gold": "SELECT T1.UnitPrice FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Plutzer Lebensmittelgromrkte AG' AND T1.Discontinued = 1",
        "pred": "SELECT `ProductName`, `Price` FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Plutzer Lebensmittelgromrkte AG' ) AND `Discontinued` = 1",
        "pred_result": "no such column: Discontinued",
        "repair_sql": "SELECT `ProductName`, `Price` FROM Products JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID WHERE Suppliers.SupplierName = 'Plutzer Lebensmittelgro\u00dfm\u00e4rkte AG' AND Discontinued = 1",
        "repair_result": "no such column: Discontinued"
    },
    {
        "idx": 987,
        "db_id": "retail_world",
        "question": "List the cities where the product 'Mishi Kobe Niku' were shipped to.",
        "evidence": "cities refers to ShipCity; 'Mishi Kobe Niku' is a ProductName",
        "gold": "SELECT T1.ShipCity FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T3.ProductName = 'Mishi Kobe Niku'",
        "pred": "SELECT DISTINCT T5.`City` FROM Customers AS T5 INNER JOIN Orders AS T3 ON T5.`CustomerID` = T3.`CustomerID` INNER JOIN OrderDetails AS T1 ON T3.`OrderID` = T1.`OrderID` INNER JOIN Products AS T2 ON T1.`ProductID` = T2.`ProductID` INNER JOIN Shippers AS T4 ON T3.`ShipperID` = T4.`ShipperID` WHERE T2.`ProductName` = 'Mishi Kobe Niku'",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT DISTINCT T5.`City` FROM Customers AS T5 INNER JOIN Orders AS T3 ON T5.`CustomerID` = T3.`CustomerID` INNER JOIN OrderDetails AS T1 ON T3.`OrderID` = T1.`OrderID` INNER JOIN Products AS T2 ON T1.`ProductID` = T2.`ProductID` INNER JOIN Shippers AS T4 ON T3.`ShipperID` = T4.`ShipperID` WHERE T2.`ProductName` = 'Mishi Kobe Niku'",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 988,
        "db_id": "retail_world",
        "question": "What percentage does the shipment of products by Speedy Express to Sweden make up to the shipping company's total?",
        "evidence": "Speedy Express is a company; Sweden is a ShipCountry; calculation = DIVIDE(SUM(ShipCountry = 'Sweden'), SEM(ShipCountry)) * 100",
        "gold": "SELECT CAST(COUNT(CASE WHEN T1.ShipCountry = 'Sweden' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Speedy Express'",
        "pred": "SELECT (CAST(SUM(CASE WHEN T1.`ShipCountry` = 'Sweden' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` WHERE T2.`ShipperName` = 'Speedy Express'",
        "pred_result": "no such column: T1.ShipCountry",
        "repair_sql": "SELECT (CAST(SUM(CASE WHEN T1.`ShipCountry` = 'Sweden' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` WHERE T2.`ShipperName` = 'Speedy Express'",
        "repair_result": "no such column: T1.ShipCountry"
    },
    {
        "idx": 989,
        "db_id": "retail_world",
        "question": "How many territory fall into region 1?",
        "evidence": "region 1 refers to RegionID = 1\n\n",
        "gold": "SELECT COUNT(TerritoryID) FROM Territories WHERE RegionID = 1",
        "pred": "SELECT COUNT(DISTINCT T2.`TerritoryID`) FROM Territories AS T1 INNER JOIN RegionTerritories AS T2 ON T1.`TerritoryID` = T2.`TerritoryID` WHERE T2.`RegionID` = 1",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT COUNT(DISTINCT T2.`TerritoryID`) FROM RegionTerritories AS T2 WHERE T2.`RegionID` = 1",
        "repair_result": "no such table: RegionTerritories"
    },
    {
        "idx": 990,
        "db_id": "retail_world",
        "question": "What are the the total number of territory in each region?",
        "evidence": "",
        "gold": "SELECT COUNT(TerritoryDescription) FROM Territories WHERE RegionID IN (1, 2, 3, 4) GROUP BY RegionID",
        "pred": "SELECT T2.`Region`, COUNT(DISTINCT T1.`TerritoryID`) AS TotalTerritories FROM Territories AS T1 INNER JOIN Regions AS T2 ON T1.`RegionID` = T2.`RegionID` GROUP BY T2.`Region`",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT T2.`Region`, COUNT(DISTINCT T1.`TerritoryID`) AS TotalTerritories FROM Regions AS T2 INNER JOIN Territories AS T1 ON T1.`RegionID` = T2.`RegionID` GROUP BY T2.`Region`",
        "repair_result": "no such table: Regions"
    },
    {
        "idx": 991,
        "db_id": "retail_world",
        "question": "How many suppliers are from UK?",
        "evidence": "from UK refers to Country = 'UK'",
        "gold": "SELECT COUNT(SupplierID) FROM Suppliers WHERE Country = 'UK'",
        "pred": "SELECT COUNT(*) FROM Suppliers WHERE Country = 'UK'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Suppliers WHERE Country = 'UK'",
        "repair_result": 1
    },
    {
        "idx": 992,
        "db_id": "retail_world",
        "question": "Please give the contact name for Tokyo Traders.",
        "evidence": "Tokyo Traders refers to CompanyName = 'Tokyo Traders'",
        "gold": "SELECT ContactName FROM Suppliers WHERE CompanyName = 'Tokyo Traders'",
        "pred": "SELECT `ContactName` FROM Suppliers WHERE `SupplierName` = 'Tokyo Traders'",
        "pred_result": "no such column: CompanyName",
        "repair_sql": "SELECT `ContactName` FROM Suppliers WHERE `SupplierName` = 'Tokyo Traders'",
        "repair_result": "no such column: CompanyName"
    },
    {
        "idx": 993,
        "db_id": "retail_world",
        "question": "How many employees from USA with Sales Representative title?",
        "evidence": "from USA refers to Country = 'USA'",
        "gold": "SELECT COUNT(Country) FROM Employees WHERE Country = 'USA' AND Title = 'Sales Representative'",
        "pred": "SELECT COUNT(T1.`EmployeeID`) FROM Employees AS T1 WHERE T1.`Title` = 'Sales Representative' AND T1.`Country` = 'USA'",
        "pred_result": "no such column: T1.Title",
        "repair_sql": "SELECT COUNT(T1.`EmployeeID`) FROM Employees AS T1 JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` JOIN Customers AS T3 ON T2.`CustomerID` = T3.`CustomerID` WHERE T1.`Title` = 'Sales Representative' AND T3.`Country` = 'USA'",
        "repair_result": "no such column: T1.Title"
    },
    {
        "idx": 994,
        "db_id": "retail_world",
        "question": "What are the highest salary earn by the the employee and what is his/her position in the company?",
        "evidence": "highest salary refers to max(salary); position refers to Title",
        "gold": "SELECT Salary, Title FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )",
        "pred": "SELECT T1.`Title` FROM Employees AS T1 WHERE T1.`Salary` = ( SELECT MAX(T2.`Salary`) FROM Employees AS T2 )",
        "pred_result": "no such column: T1.Title",
        "repair_sql": "SELECT T1.`Title` FROM Employees AS T1 WHERE T1.`Salary` = ( SELECT MAX(T2.`Salary`) FROM Employees AS T2 )",
        "repair_result": "no such column: T1.Title"
    },
    {
        "idx": 995,
        "db_id": "retail_world",
        "question": "How many products supplied by Plutzer Lebensmittelgromrkte AG that is currently out of stock and on order?",
        "evidence": "Plutzer Lebensmittelgromrkte AG refers to CompanyName; is currently out of stock and on order refers to UnitsInStock = 0 and UnitsOnOrder > 0",
        "gold": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Plutzer Lebensmittelgromrkte AG' AND T1.UnitsInStock = 0 AND T1.UnitsOnOrder = 0",
        "pred": "SELECT COUNT(`ProductID`) FROM Products WHERE `SupplierID` = ( SELECT `SupplierID` FROM Suppliers WHERE `SupplierName` = 'Plutzer Lebensmittelgromrkte AG' ) AND `UnitsInStock` = 0 AND `UnitsOnOrder` > 0",
        "pred_result": "no such column: UnitsInStock",
        "repair_sql": "SELECT COUNT(ProductID) FROM Products JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID WHERE Suppliers.SupplierName = 'Plutzer Lebensmittelgromrkte AG' AND UnitsInStock = 0 AND UnitsOnOrder > 0",
        "repair_result": "no such column: UnitsInStock"
    },
    {
        "idx": 996,
        "db_id": "retail_world",
        "question": "What product have the highest unit price and how many quantity have been being sold?",
        "evidence": "product refers to ProductID; highest unit price refers to Max(UnitPrice)",
        "gold": "SELECT T1.ProductName, T2.Quantity FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.UnitPrice DESC LIMIT 1",
        "pred": "SELECT SUM(T2.`Quantity`) AS TotalQuantity FROM OrderDetails AS T2 WHERE T2.`ProductID` = ( SELECT T1.`ProductID` FROM Products AS T1 WHERE T1.`Price` = ( SELECT MAX(`Price`) FROM Products ) )",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT SUM(T2.`Quantity`) AS TotalQuantity FROM OrderDetails AS T2 WHERE T2.`ProductID` = ( SELECT T1.`ProductID` FROM Products AS T1 WHERE T1.`Price` = ( SELECT MAX(`Price`) FROM Products ) )",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 997,
        "db_id": "retail_world",
        "question": "Which employee has created the least order and please indicates the employee's title?",
        "evidence": "least order refers to Min(OrderID)",
        "gold": "SELECT T1.Title FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.Title ORDER BY COUNT(T2.OrderID) LIMIT 1",
        "pred": "SELECT T1.`LastName`, T1.`FirstName` FROM Employees AS T1 LEFT JOIN ( SELECT T2.`EmployeeID`, COUNT(T3.`OrderID`) AS order_count FROM Employees AS T2 LEFT JOIN Orders AS T3 ON T2.`EmployeeID` = T3.`EmployeeID` GROUP BY T2.`EmployeeID` ORDER BY order_count ASC LIMIT 1 ) AS T4 ON T1.`EmployeeID` = T4.`EmployeeID`",
        "pred_result": "no such column: T1.Title",
        "repair_sql": "SELECT T1.`LastName`, T1.`FirstName` FROM Employees AS T1 LEFT JOIN ( SELECT T2.`EmployeeID`, COUNT(T3.`OrderID`) AS order_count FROM Employees AS T2 LEFT JOIN Orders AS T3 ON T2.`EmployeeID` = T3.`EmployeeID` GROUP BY T2.`EmployeeID` ORDER BY order_count ASC LIMIT 1 ) AS T4 ON T1.`EmployeeID` = T4.`EmployeeID`",
        "repair_result": "no such column: T1.Title"
    },
    {
        "idx": 998,
        "db_id": "retail_world",
        "question": "What is the most common product ordered by a customer from Germany?",
        "evidence": "most common product refers to max(count(ProductID)); customer from Germany\u00a0refers to Country = 'Germany'",
        "gold": "SELECT T2.ProductID FROM Customers AS T1 INNER JOIN `Order Details` AS T2 WHERE T1.Country = 'Germany' GROUP BY T2.ProductID ORDER BY COUNT(T2.ProductID) DESC LIMIT 1",
        "pred": "SELECT T3.`ProductName` FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.`CustomerID` = T2.`CustomerID` INNER JOIN OrderDetails AS T3 ON T2.`OrderID` = T3.`OrderID` INNER JOIN Products AS T4 ON T3.`ProductID` = T4.`ProductID` WHERE T1.`Country` = 'Germany' GROUP BY T3.`ProductID` ORDER BY COUNT(T3.`ProductID`) DESC LIMIT 1",
        "pred_result": "no such column: T3.ProductName",
        "repair_sql": "SELECT T4.`ProductName` FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.`CustomerID` = T2.`CustomerID` INNER JOIN OrderDetails AS T3 ON T2.`OrderID` = T3.`OrderID` INNER JOIN Products AS T4 ON T3.`ProductID` = T4.`ProductID` WHERE T1.`Country` = 'Germany' GROUP BY T4.`ProductName` ORDER BY COUNT(T3.`ProductID`) DESC LIMIT 1",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 999,
        "db_id": "retail_world",
        "question": "What are the total products value shipped to Brazil by Speedy Express Company?",
        "evidence": "shipped to Brazil refers to ShipCountry = 'Brazil'; by Speedy Express Company refers to CompanyName = 'Speedy Express'; total products value refers to sum(MULTIPLY(UnitPrice, Quantity))",
        "gold": "SELECT SUM(T2.Quantity * T2.UnitPrice) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Shippers AS T3 ON T1.ShipVia = T3.ShipperID WHERE T3.CompanyName = 'Speedy Express' AND T1.ShipCountry = 'Brazil'",
        "pred": "SELECT SUM(T5.`Price` * T6.`Quantity`) AS Total_Products_Value FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` INNER JOIN Products AS T4 ON T3.`ProductID` = T4.`ProductID` INNER JOIN Customers AS T5 ON T1.`CustomerID` = T5.`CustomerID` WHERE T2.`ShipperName` = 'Speedy Express' AND T5.`City` = 'S\u00e3o Paulo'",
        "pred_result": "no such column: T5.Price",
        "repair_sql": "SELECT SUM(T4.`Price` * T3.`Quantity`) AS Total_Products_Value FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.`ShipperID` = T2.`ShipperID` INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` INNER JOIN Products AS T4 ON T3.`ProductID` = T4.`ProductID` INNER JOIN Customers AS T5 ON T1.`CustomerID` = T5.`CustomerID` WHERE T2.`ShipperName` = 'Speedy Express' AND T5.`City` = 'S\u00e3o Paulo'",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 1000,
        "db_id": "retail_world",
        "question": "How many subordinates does employee ID 2 have and what is the biggest order in terms of value that his/her subordinates have created?",
        "evidence": "subordinates of employee ID 2 refers to EmployeeID where ReportsTo = 2;\u00a0 biggest order in terms of value refers to max(MULTIPLY(Quantity, UnitPrice))",
        "gold": "SELECT COUNT(T1.EmployeeID), SUM(T3.Quantity * T3.UnitPrice) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID WHERE T1.ReportsTo = 2 ORDER BY SUM(T3.UnitPrice * T3.Quantity) DESC LIMIT 1",
        "pred": "SELECT MAX(T3.`Quantity` * T4.`Price`) AS MaxOrderValue FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN OrderDetails AS T3 ON T2.`OrderID` = T3.`OrderID` INNER JOIN Products AS T4 ON T3.`ProductID` = T4.`ProductID` WHERE T1.`ReportsTo` = 2",
        "pred_result": "no such column: T1.ReportsTo",
        "repair_sql": "SELECT COUNT(T1.`EmployeeID`) AS Subordinates, MAX(T3.`Quantity` * T4.`Price`) AS MaxOrderValue FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN OrderDetails AS T3 ON T2.`OrderID` = T3.`OrderID` INNER JOIN Products AS T4 ON T3.`ProductID` = T4.`ProductID` WHERE T1.`ReportsTo` = 2",
        "repair_result": "no such column: T1.ReportsTo"
    },
    {
        "idx": 1001,
        "db_id": "retail_world",
        "question": "How many sales values have been created by sales representative and which sales representative have the highest sales?",
        "evidence": "sales representative refers to Title = 'Sales Representative'; sales values refers to MULTIPLY(Quantity, UnitPrice); the highest sales refers to max(MULTIPLY(Quantity, UnitPrice))",
        "gold": "SELECT SUM(T3.UnitPrice * T3.Quantity) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID WHERE T1.Title = 'Sales Representative' ORDER BY SUM(T3.UnitPrice * T3.Quantity)",
        "pred": "SELECT COUNT(*) FROM ( SELECT T3.`EmployeeID`, SUM(T5.`Quantity` * T6.`Price`) AS sales_value FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN OrderDetails AS T5 ON T1.`OrderID` = T5.`OrderID` INNER JOIN Products AS T6 ON T5.`ProductID` = T6.`ProductID` WHERE T2.`Title` = 'Sales Representative' GROUP BY T3.`EmployeeID` )",
        "pred_result": "no such column: T3.EmployeeID",
        "repair_sql": "SELECT COUNT(*), MAX(sales_value) AS highest_sales FROM ( SELECT T2.`EmployeeID`, SUM(T5.`Quantity` * T6.`Price`) AS sales_value FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN OrderDetails AS T5 ON T1.`OrderID` = T5.`OrderID` INNER JOIN Products AS T6 ON T5.`ProductID` = T6.`ProductID` WHERE T2.`Title` = 'Sales Representative' GROUP BY T2.`EmployeeID` )",
        "repair_result": "no such column: T2.Title"
    },
    {
        "idx": 1002,
        "db_id": "retail_world",
        "question": "How many employees is a UK citizen and are they all covering the same region?",
        "evidence": "is a UK citizen refers to Country = 'UK'",
        "gold": "SELECT COUNT(T1.EmployeeID), T3.RegionID FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.Country = 'UK' GROUP BY T3.RegionID",
        "pred": "SELECT COUNT(DISTINCT `EmployeeID`) FROM client WHERE `EmployeeID` IN ( SELECT `EmployeeID` FROM Employees WHERE Country = 'UK' ) GROUP BY `district_id` HAVING COUNT(DISTINCT `district_id`) = 1",
        "pred_result": "no such table: client",
        "repair_sql": "SELECT COUNT(DISTINCT EmployeeID) FROM Employees WHERE Country = 'UK'",
        "repair_result": "no such column: Country"
    },
    {
        "idx": 1003,
        "db_id": "retail_world",
        "question": "Which customer have the biggest purchase in one order and where does this order being ship to?",
        "evidence": "biggest purchase refers to max(ProductID.Order_Details); ship to refers to ShipCountry",
        "gold": "SELECT T1.CompanyName, T2.ShipCountry FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID GROUP BY T1.CompanyName, T2.ShipCountry ORDER BY COUNT(T3.ProductID) DESC LIMIT 1",
        "pred": "SELECT T6.`Country` AS ShippingCountry FROM Orders AS T1 INNER JOIN OrderDetails AS T4 ON T1.`OrderID` = T4.`OrderID` INNER JOIN Products AS T5 ON T4.`ProductID` = T5.`ProductID` INNER JOIN Customers AS T3 ON T1.`CustomerID` = T3.`CustomerID` INNER JOIN Shippers AS T6 ON T1.`ShipperID` = T6.`ShipperID` WHERE T3.`CustomerName` = ( SELECT T3.`CustomerName` FROM Orders AS T1 INNER JOIN OrderDetails AS T4 ON T1.`OrderID` = T4.`OrderID` INNER JOIN Products AS T5 ON T4.`ProductID` = T5.`ProductID` INNER JOIN Customers AS T3 ON T1.`CustomerID` = T3.`CustomerID` GROUP BY T3.`CustomerName` ORDER BY MAX(T5.`Price` * T4.`Quantity`) DESC LIMIT 1 )",
        "pred_result": "no such column: T6.Country",
        "repair_sql": "SELECT T3.`CustomerName`, MAX(T5.`Price` * T4.`Quantity`) AS MaxPurchase, T6.`Country` AS ShippingCountry FROM Orders AS T1 INNER JOIN OrderDetails AS T4 ON T1.`OrderID` = T4.`OrderID` INNER JOIN Products AS T5 ON T4.`ProductID` = T5.`ProductID` INNER JOIN Customers AS T3 ON T1.`CustomerID` = T3.`CustomerID` INNER JOIN Shippers AS T6 ON T1.`ShipperID` = T6.`ShipperID` GROUP BY T3.`CustomerName` ORDER BY MaxPurchase DESC LIMIT 1;",
        "repair_result": "no such column: T6.Country"
    },
    {
        "idx": 1004,
        "db_id": "retail_world",
        "question": "Which customer is a regular customer in this shop and what are the products category that he mostly buy?",
        "evidence": "regular customer refers to max(count(CustomerID)); products category refers to CategoryName; mostly buy refers to max(count(CategoryID))",
        "gold": "SELECT T1.CustomerID, T4.CategoryName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID INNER JOIN Categories AS T4 ON T3.CategoryID = T4.CategoryID ORDER BY T1.CustomerID DESC, T4.CategoryName DESC",
        "pred": "SELECT T3.`CategoryName` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Categories AS T4 ON T3.`CategoryID` = T4.`CategoryID` WHERE T1.`CustomerID` = ( SELECT T5.`CustomerID` FROM Orders AS T5 GROUP BY T5.`CustomerID` ORDER BY COUNT(T5.`CustomerID`) DESC LIMIT 1 ) GROUP BY T3.`CategoryID` ORDER BY COUNT(T3.`CategoryID`) DESC LIMIT 1",
        "pred_result": "no such column: T3.CategoryName",
        "repair_sql": "SELECT T1.`CustomerID`, T4.`CategoryName` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Categories AS T4 ON T3.`CategoryID` = T4.`CategoryID` WHERE T1.`CustomerID` = ( SELECT T5.`CustomerID` FROM Orders AS T5 GROUP BY T5.`CustomerID` ORDER BY COUNT(T5.`CustomerID`) DESC LIMIT 1 ) GROUP BY T1.`CustomerID`, T4.`CategoryName` ORDER BY COUNT(T4.`CategoryID`) DESC LIMIT 1",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 1005,
        "db_id": "retail_world",
        "question": "What are the most popular confections product and calculate the total sales generated by this product?",
        "evidence": "most popular confections product refers to ProductID = max(count(MULTIPLY(Quantity, UnitPrice))) from CategoryName = 'Confections' ;\u00a0 total sales refers to sum(MULTIPLY(Quantity, UnitPrice))",
        "gold": "SELECT COUNT(T1.UnitPrice * T3.Quantity) FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID INNER JOIN `Order Details` AS T3 ON T1.ProductID = T3.ProductID WHERE T2.CategoryName = 'Confections' GROUP BY T3.Quantity ORDER BY T3.Quantity DESC LIMIT 1",
        "pred": "SELECT SUM(T4.`Price` * T3.`Quantity`) AS TotalSales FROM OrderDetails AS T3 INNER JOIN Products AS T4 ON T3.`ProductID` = T4.`ProductID` WHERE T3.`ProductID` = ( SELECT T1.`ProductID` FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.`CategoryID` = T2.`CategoryID` WHERE T2.`CategoryName` = 'Confections' GROUP BY T1.`ProductID` ORDER BY SUM(T1.`Price` * T3.`Quantity`) DESC LIMIT 1 )",
        "pred_result": "no such column: T3.Quantity",
        "repair_sql": "SELECT T4.`ProductName` AS MostPopularProduct, SUM(T3.`Quantity` * T4.`Price`) AS TotalSales FROM OrderDetails AS T3 INNER JOIN Products AS T4 ON T3.`ProductID` = T4.`ProductID` INNER JOIN Categories AS T2 ON T4.`CategoryID` = T2.`CategoryID` WHERE T2.`CategoryName` = 'Confections' GROUP BY T4.`ProductName` ORDER BY SUM(T3.`Quantity` * T4.`Price`) DESC LIMIT 1;",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 1006,
        "db_id": "retail_world",
        "question": "What is the name of product with the ID of 77?",
        "evidence": "name of product refers to ProductName; ID refers to ProductID",
        "gold": "SELECT ProductName FROM Products WHERE ProductID = 77",
        "pred": "SELECT `ProductName` FROM Products WHERE `ProductID` = 77",
        "pred_result": 1,
        "repair_sql": "SELECT `ProductName` FROM Products WHERE `ProductID` = 77",
        "repair_result": 1
    },
    {
        "idx": 1007,
        "db_id": "retail_world",
        "question": "State the company name of all suppliers in USA.",
        "evidence": "in USA refers to Country = 'USA'",
        "gold": "SELECT CompanyName FROM Suppliers WHERE Country = 'USA'",
        "pred": "SELECT `SupplierName` FROM Suppliers WHERE `SupplierID` IN ( SELECT `SupplierID` FROM Suppliers WHERE `Country` = 'USA' )",
        "pred_result": "no such column: CompanyName",
        "repair_sql": "SELECT `SupplierName` FROM Suppliers WHERE `SupplierID` IN ( SELECT `SupplierID` FROM Suppliers WHERE `Country` = 'USA' )",
        "repair_result": "no such column: CompanyName"
    },
    {
        "idx": 1008,
        "db_id": "retail_world",
        "question": "What is the position title for Laura Callahan?",
        "evidence": "",
        "gold": "SELECT Title FROM Employees WHERE FirstName = 'Laura' AND LastName = 'Callahan'",
        "pred": "SELECT `Notes` FROM Employees WHERE `EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Laura' AND `LastName` = 'Callahan' )",
        "pred_result": "no such column: Title",
        "repair_sql": "SELECT `Notes` FROM Employees WHERE `EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Laura' AND `LastName` = 'Callahan' )",
        "repair_result": "no such column: Title"
    },
    {
        "idx": 1009,
        "db_id": "retail_world",
        "question": "State the name of employee that manages the order from Victuailles en stock?",
        "evidence": "name of employee refers to FirstName; from Victuailles en stock refers to CompanyName = 'Victuailles en stock'",
        "gold": "SELECT DISTINCT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.CompanyName = 'Victuailles en stock'",
        "pred": "SELECT T2.`FirstName` FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN Customers AS T3 ON T1.`CustomerID` = T3.`CustomerID` WHERE T3.`CustomerName` = 'Victuailles en stock'",
        "pred_result": "no such column: T3.CompanyName",
        "repair_sql": "SELECT T2.`FirstName` FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN Customers AS T3 ON T1.`CustomerID` = T3.`CustomerID` WHERE T3.`CustomerName` = 'Victuailles en stock'",
        "repair_result": "no such column: T3.CompanyName"
    },
    {
        "idx": 1010,
        "db_id": "retail_world",
        "question": "How many orders were shipped by Federal Shipping?",
        "evidence": "Federal Shipping refers to CompanyName = 'Federal Shipping'",
        "gold": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping'",
        "pred": "SELECT COUNT(*) FROM Orders WHERE `ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'Federal Shipping' )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT COUNT(*) FROM Orders WHERE `ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'Federal Shipping' )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 1011,
        "db_id": "retail_world",
        "question": "Who was taking charge of orders from Morristown?",
        "evidence": "Morristown refers to TerritoryDescription = 'Morristown'",
        "gold": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Morristown'",
        "pred": "SELECT T2.`FirstName`, T2.`LastName` FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN Customers AS T3 ON T1.`CustomerID` = T3.`CustomerID` INNER JOIN Territories AS T4 ON T3.`TerritoryID` = T4.`TerritoryID` WHERE T4.`TerritoryDescription` = 'Morristown'",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT T2.`FirstName`, T2.`LastName` FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN Customers AS T3 ON T1.`CustomerID` = T3.`CustomerID` WHERE T3.`City` = 'Morristown'",
        "repair_result": "no such table: EmployeeTerritories"
    },
    {
        "idx": 1012,
        "db_id": "retail_world",
        "question": "State the name of all territories in Northern region.",
        "evidence": "name of all territories refers to TerritoryDescription; Northern region refers to RegionDescription = 'Northern'",
        "gold": "SELECT DISTINCT T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Northern'",
        "pred": "SELECT T1.`TerritoryName` FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.`RegionID` = T2.`RegionID` WHERE T2.`RegionDescription` = 'Northern'",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT T1.`TerritoryDescription` FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.`RegionID` = T2.`RegionID` WHERE T2.`RegionDescription` = 'Northern'",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 1013,
        "db_id": "retail_world",
        "question": "How many orders were handled by Michael Suyama. State the order ID.",
        "evidence": "",
        "gold": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'",
        "pred": "SELECT COUNT(T1.`OrderID`) AS num_orders, GROUP_CONCAT(T1.`OrderID`) AS order_ids FROM Orders AS T1 WHERE T1.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Michael' AND `LastName` = 'Suyama' )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(T1.`OrderID`) AS num_orders, GROUP_CONCAT(T1.`OrderID`) AS order_ids FROM Orders AS T1 WHERE T1.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Michael' AND `LastName` = 'Suyama' )",
        "repair_result": 0
    },
    {
        "idx": 1014,
        "db_id": "retail_world",
        "question": "What is the ratio number of territories in Northern region and number territories in Western region?",
        "evidence": "Northern region refers to RegionID = 3; Western region refers to RegionID = 2 ; ratio = divide((TerritoryDescription where RegionID = 3), (TerritoryDescription where RegionID = 2))",
        "gold": "SELECT CAST(( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Northern' ) AS REAL) * 100 / ( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Westerns' ) AS Calu",
        "pred": "SELECT CAST((SELECT COUNT(*) FROM Territories WHERE RegionID = 3) AS REAL) / (SELECT COUNT(*) FROM Territories WHERE RegionID = 2)",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT CAST((SELECT COUNT(*) FROM Territories WHERE RegionID = 3) AS REAL) / (SELECT COUNT(*) FROM Territories WHERE RegionID = 2) AS Ratio",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 1015,
        "db_id": "retail_world",
        "question": "Provide employees' ID who are in-charge of territory ID from 1000 to 2000.",
        "evidence": "territory ID from 1000 to 2000 refers to TerritoryID BETWEEN 1000 and 2000",
        "gold": "SELECT EmployeeID FROM EmployeeTerritories WHERE TerritoryID BETWEEN 1000 AND 2000",
        "pred": "SELECT DISTINCT T1.`EmployeeID` FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T2.`TerritoryID` BETWEEN 1000 AND 2000",
        "pred_result": "no such column: T2.TerritoryID",
        "repair_sql": "SELECT DISTINCT T1.`EmployeeID` FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T1.`EmployeeID` IN ( SELECT DISTINCT T3.`EmployeeID` FROM Employees AS T3 INNER JOIN Orders AS T4 ON T3.`EmployeeID` = T4.`EmployeeID` INNER JOIN Territories AS T5 ON T4.`TerritoryID` = T5.`TerritoryID` WHERE T5.`TerritoryID` BETWEEN 1000 AND 2000 )",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 1016,
        "db_id": "retail_world",
        "question": "List down the territory IDs, descriptions and region description which are under the in-charge of Nancy Davolio,",
        "evidence": "descriptions refers to TerritoryDescription; region refers to RegionDescription",
        "gold": "SELECT T3.RegionID, T3.TerritoryDescription, T4.RegionDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T1.LastName = 'Davolio' AND T1.FirstName = 'Nancy'",
        "pred": "SELECT T1.`TerritoryID`, T1.`TerritoryDescription`, T2.`RegionDescription` FROM Territories AS T1 INNER JOIN Regions AS T2 ON T1.`RegionID` = T2.`RegionID` WHERE T1.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Nancy' AND `LastName` = 'Davolio' )",
        "pred_result": "no such table: Territories",
        "repair_sql": "SELECT T1.`TerritoryID`, T1.`TerritoryDescription`, T2.`RegionDescription` FROM Territories AS T1 INNER JOIN Regions AS T2 ON T1.`RegionID` = T2.`RegionID` WHERE T1.`TerritoryID` IN ( SELECT T3.`TerritoryID` FROM EmployeeTerritories AS T3 WHERE T3.`EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Nancy' AND `LastName` = 'Davolio' ) )",
        "repair_result": "no such table: Territories"
    },
    {
        "idx": 1017,
        "db_id": "retail_world",
        "question": "Describe Sales Representative names who were hired in 1992 and compare the number of orders among them.",
        "evidence": "Sales Representative refers to Title = 'Sales Representative'\uff1bwere hired in 1992 refers to HireDate = '1992'",
        "gold": "SELECT T1.FirstName, T1.LastName, COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.Title = 'Sales Representative' AND STRFTIME('%Y', T1.HireDate) = '1992' GROUP BY T1.EmployeeID, T1.FirstName, T1.LastName",
        "pred": "SELECT T1.`FirstName`, T1.`LastName`, COUNT(T3.`OrderID`) AS NumOrders FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN OrderDetails AS T3 ON T2.`OrderID` = T3.`OrderID` WHERE T1.`Title` = 'Sales Representative' AND strftime('%Y', T1.`HireDate`) = '1992' GROUP BY T1.`EmployeeID`",
        "pred_result": "no such column: T1.Title",
        "repair_sql": "SELECT T1.`FirstName`, T1.`LastName`, COUNT(T3.`OrderID`) AS NumOrders FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN OrderDetails AS T3 ON T2.`OrderID` = T3.`OrderID` WHERE T1.`Title` = 'Sales Representative' AND strftime('%Y', T1.`HireDate`) = '1992' GROUP BY T1.`EmployeeID`",
        "repair_result": "no such column: T1.Title"
    },
    {
        "idx": 1018,
        "db_id": "retail_world",
        "question": "Calculate the total payment of orders for Vegie-spread product.",
        "evidence": "Vegie-spread product refers to ProductName = 'Vegie-spread'\uff1btotal payment = MULTIPLY(UnitPrice, Quantity, (1-Discount))",
        "gold": "SELECT SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) AS sum FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Vegie-spread'",
        "pred": "SELECT SUM(P.`Price` * OD.`Quantity` * (1 - OD.`Discount`)) FROM Products AS P INNER JOIN OrderDetails AS OD ON P.`ProductID` = OD.`ProductID` WHERE P.`ProductName` = 'Vegie-spread'",
        "pred_result": "no such column: OD.Discount",
        "repair_sql": "SELECT SUM(P.`Price` * OD.`Quantity` * (1 - 0)) FROM Products AS P INNER JOIN OrderDetails AS OD ON P.`ProductID` = OD.`ProductID` WHERE P.`ProductName` = 'Vegie-spread'",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 1019,
        "db_id": "retail_world",
        "question": "List down the company names which supplied products for the order on 14th August, 1996.",
        "evidence": "products refers to Order_Details.ProductID; on 14th August, 1996 refers to OrderDate = '8/14/1996'",
        "gold": "SELECT T1.CompanyName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN `Order Details` AS T3 ON T2.ProductID = T3.ProductID INNER JOIN Orders AS T4 ON T3.OrderID = T4.OrderID WHERE date(T4.OrderDate) = '1996-08-14'",
        "pred": "SELECT DISTINCT T3.`SupplierName` FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.`ProductID` = T2.`ProductID` INNER JOIN Suppliers AS T3 ON T1.`SupplierID` = T3.`SupplierID` WHERE T2.`OrderID` IN ( SELECT `OrderID` FROM Orders WHERE `OrderDate` = '1996-08-14' )",
        "pred_result": "no such table: Order Details",
        "repair_sql": "SELECT DISTINCT T3.`SupplierName` FROM Products AS T1 INNER JOIN OrderDetails AS T2 ON T1.`ProductID` = T2.`ProductID` INNER JOIN Suppliers AS T3 ON T1.`SupplierID` = T3.`SupplierID` WHERE T2.`OrderID` IN ( SELECT `OrderID` FROM Orders WHERE `OrderDate` = '1996-08-14' )",
        "repair_result": "no such table: Order Details"
    },
    {
        "idx": 1020,
        "db_id": "retail_world",
        "question": "Among the product lists in order ID 10337, write down the product names and suppliers which had the highest in reorder level.",
        "evidence": "suppliers refers to CompanyName; highest in reorder level refers to Max(ReorderLevel)",
        "gold": "SELECT T2.ProductName, T1.CompanyName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN `Order Details` AS T3 ON T2.ProductID = T3.ProductID WHERE T3.OrderID = 10337 ORDER BY T2.ReorderLevel DESC LIMIT 1",
        "pred": "SELECT T3.`ProductName`, T4.`SupplierName` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Suppliers AS T4 ON T3.`SupplierID` = T4.`SupplierID` WHERE T1.`OrderID` = 10337 AND T3.`ReorderLevel` = ( SELECT MAX(T5.`ReorderLevel`) FROM Orders AS T6 INNER JOIN OrderDetails AS T7 ON T6.`OrderID` = T7.`OrderID` INNER JOIN Products AS T8 ON T7.`ProductID` = T8.`ProductID` WHERE T6.`OrderID` = 10337 )",
        "pred_result": "no such column: T3.ReorderLevel",
        "repair_sql": "SELECT T3.`ProductName`, T4.`SupplierName` FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.`OrderID` = T2.`OrderID` INNER JOIN Products AS T3 ON T2.`ProductID` = T3.`ProductID` INNER JOIN Suppliers AS T4 ON T3.`SupplierID` = T4.`SupplierID` WHERE T1.`OrderID` = 10337 AND T3.`ReorderLevel` = ( SELECT MAX(T8.`ReorderLevel`) FROM OrderDetails AS T7 INNER JOIN Products AS T8 ON T7.`ProductID` = T8.`ProductID` WHERE T7.`OrderID` = 10337 )",
        "repair_result": "no such column: T3.ReorderLevel"
    },
    {
        "idx": 1021,
        "db_id": "retail_world",
        "question": "Name the shipper which had the most shipments in first quarter of 1998.",
        "evidence": "Name the shipper refers to CompanyName; most shipments refers to max(count(OrderID)); first quarter of 1998 refers to ShippedDate = 1998/1 and ShippedDate = 1998/2 and ShippedDate = 1998/3 and ShippedDate = 1998/4",
        "gold": "SELECT T1.CompanyName FROM Shippers AS T1 INNER JOIN Orders AS T2 ON T1.ShipperID = T2.ShipVia WHERE STRFTIME('%Y', T2.ShippedDate) = '1998' GROUP BY T1.CompanyName ORDER BY COUNT(T2.OrderID) DESC LIMIT 1",
        "pred": "SELECT T4.`ShipperName` FROM Orders AS T1 INNER JOIN Shippers AS T4 ON T1.`ShipperID` = T4.`ShipperID` WHERE strftime('%Y', T1.`OrderDate`) = '1998' AND strftime('%m', T1.`OrderDate`) BETWEEN '01' AND '03' GROUP BY T4.`ShipperName` ORDER BY COUNT(T1.`OrderID`) DESC LIMIT 1",
        "pred_result": "no such column: T1.CompanyName",
        "repair_sql": "SELECT T4.`ShipperName` FROM Orders AS T1 INNER JOIN Shippers AS T4 ON T1.`ShipperID` = T4.`ShipperID` WHERE strftime('%Y', T1.`OrderDate`) = '1998' AND strftime('%m', T1.`OrderDate`) BETWEEN '01' AND '03' GROUP BY T4.`ShipperName` ORDER BY COUNT(T1.`OrderID`) DESC LIMIT 1",
        "repair_result": "no such column: T1.CompanyName"
    },
    {
        "idx": 1022,
        "db_id": "retail_world",
        "question": "How many customers are located in London?",
        "evidence": "London refers to City = 'London'",
        "gold": "SELECT COUNT(CustomerID) FROM Customers WHERE City = 'London'",
        "pred": "SELECT COUNT(`CustomerID`) FROM Customers WHERE `City` = 'London'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(`CustomerID`) FROM Customers WHERE `City` = 'London'",
        "repair_result": 1
    },
    {
        "idx": 1023,
        "db_id": "retail_world",
        "question": "What is the title of Michael Suyama?",
        "evidence": "",
        "gold": "SELECT Title FROM Employees WHERE FirstName = 'Michael' AND LastName = 'Suyama'",
        "pred": "SELECT `Title` FROM Employees WHERE `EmployeeID` = ( SELECT `EmployeeID` FROM Employees WHERE `FirstName` = 'Michael' AND `LastName` = 'Suyama' )",
        "pred_result": "no such column: Title",
        "repair_sql": "SELECT `Title` FROM Employees WHERE `FirstName` = 'Michael' AND `LastName` = 'Suyama'",
        "repair_result": "no such column: Title"
    },
    {
        "idx": 1024,
        "db_id": "retail_world",
        "question": "List out the full name of employee who has birth day on \"3/4/1955 12:00:00 AM\".",
        "evidence": "full name refers to FirstName, LastName; brith day refers to BirthDate",
        "gold": "SELECT FirstName, LastName FROM Employees WHERE BirthDate = '1955-03-04 00:00:00'",
        "pred": "SELECT `FirstName` || ' ' || `LastName` AS full_name FROM Employees WHERE `BirthDate` = '1955-03-04'",
        "pred_result": 0,
        "repair_sql": "SELECT `FirstName` || ' ' || `LastName` AS full_name FROM Employees WHERE `BirthDate` = '1955-03-04'",
        "repair_result": 0
    },
    {
        "idx": 1025,
        "db_id": "retail_world",
        "question": "Mention the first name of employee who took care the order id 10250.",
        "evidence": "",
        "gold": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10250",
        "pred": "SELECT T3.`FirstName` FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T1.`OrderID` = 10250",
        "pred_result": "no such column: T3.FirstName",
        "repair_sql": "SELECT T2.`FirstName` FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T1.`OrderID` = 10250",
        "repair_result": 0
    },
    {
        "idx": 1026,
        "db_id": "retail_world",
        "question": "How many orders that the employees who are located in Tacoma handled?",
        "evidence": "located in Tacoma refers to City = 'Tacoma'",
        "gold": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.City = 'Tacoma'",
        "pred": "SELECT COUNT(DISTINCT T1.`OrderID`) FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T2.`City` = 'Tacoma'",
        "pred_result": "no such column: T2.City",
        "repair_sql": "SELECT COUNT(DISTINCT T1.`OrderID`) FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T2.`City` = 'Tacoma'",
        "repair_result": "no such column: T2.City"
    },
    {
        "idx": 1027,
        "db_id": "retail_world",
        "question": "What is the country location of the employee who handled order id 10257?",
        "evidence": "",
        "gold": "SELECT T1.Country FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10257",
        "pred": "SELECT T2.`City` FROM Employees AS T1 INNER JOIN Suppliers AS T2 ON T1.`EmployeeID` = T2.`SupplierID` INNER JOIN Orders AS T3 ON T1.`EmployeeID` = T3.`EmployeeID` WHERE T3.`OrderID` = 10257",
        "pred_result": "no such column: T1.Country",
        "repair_sql": "SELECT T2.`City` FROM Employees AS T1 INNER JOIN Suppliers AS T2 ON T1.`EmployeeID` = T2.`SupplierID` INNER JOIN Orders AS T3 ON T1.`EmployeeID` = T3.`EmployeeID` WHERE T3.`OrderID` = 10257",
        "repair_result": "no such column: T1.Country"
    },
    {
        "idx": 1028,
        "db_id": "retail_world",
        "question": "What is the title of the employee who handled order id 10270?",
        "evidence": "",
        "gold": "SELECT T1.Title FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10257",
        "pred": "SELECT T3.`Title` FROM Orders AS T1 INNER JOIN Employees AS T3 ON T1.`EmployeeID` = T3.`EmployeeID` WHERE T1.`OrderID` = 10270",
        "pred_result": "no such column: T3.Title",
        "repair_sql": "SELECT T3.`Title` FROM Employees AS T3 INNER JOIN Orders AS T1 ON T1.`EmployeeID` = T3.`EmployeeID` WHERE T1.`OrderID` = 10270",
        "repair_result": "no such column: T3.Title"
    },
    {
        "idx": 1029,
        "db_id": "retail_world",
        "question": "Give the phone number of the customer who placed the order id 10264.",
        "evidence": "",
        "gold": "SELECT T1.Phone FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10264",
        "pred": "SELECT `Phone` FROM Customers WHERE `CustomerID` = ( SELECT `CustomerID` FROM Orders WHERE `OrderID` = 10264 )",
        "pred_result": "no such column: Phone",
        "repair_sql": "SELECT c.Phone FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID = 10264",
        "repair_result": "no such column: c.Phone"
    },
    {
        "idx": 1030,
        "db_id": "retail_world",
        "question": "What is the region where the customer who placed the order id 10276 located?",
        "evidence": "",
        "gold": "SELECT T1.Region FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10276",
        "pred": "SELECT C.`City`, C.`Country` FROM Customers AS C INNER JOIN Orders AS O ON C.`CustomerID` = O.`CustomerID` WHERE O.`OrderID` = 10276",
        "pred_result": "no such column: T1.Region",
        "repair_sql": "SELECT C.`City`, C.`Country` FROM Customers AS C INNER JOIN Orders AS O ON C.`CustomerID` = O.`CustomerID` WHERE O.`OrderID` = 10276",
        "repair_result": "no such column: T1.Region"
    },
    {
        "idx": 1031,
        "db_id": "retail_world",
        "question": "Among the employees who handled orders to Brazil, who has the highest salary and calculate the average salary of them.",
        "evidence": "orders to Brazil refers to ShipCountry = 'Brazil'; highest salary refers to max(salary); average salary = AVG(Salary)",
        "gold": "SELECT T1.FirstName, T1.LastName, AVG(T1.Salary) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.ShipCountry = 'Brazil' GROUP BY T1.FirstName, T1.LastName ORDER BY SUM(T1.Salary) DESC LIMIT 1",
        "pred": "SELECT AVG(T5.`Salary`) FROM Employees AS T5 WHERE T5.`EmployeeID` IN ( SELECT DISTINCT T1.`EmployeeID` FROM Orders AS T1 WHERE T1.`ShipCountry` = 'Brazil' )",
        "pred_result": "no such column: T5.Salary",
        "repair_sql": "SELECT T5.`LastName`, T5.`FirstName`, MAX(T5.`Salary`) FROM Employees AS T5 JOIN Orders AS T1 ON T5.`EmployeeID` = T1.`EmployeeID` WHERE T1.`ShipCountry` = 'Brazil' GROUP BY T5.`LastName`, T5.`FirstName`",
        "repair_result": "no such column: T5.Salary"
    },
    {
        "idx": 1032,
        "db_id": "retail_world",
        "question": "Calculate the percentage salary of employees who handled orders shipped in 1996.",
        "evidence": "shipped in 1996 refers to ShippedDate = 1996; percentage salary = divide(sum(Salary when ShippedDate = 1996), sum(Salary)) as percentage",
        "gold": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', T2.ShippedDate) = '1996' THEN T1.Salary ELSE 0 END) AS REAL) * 100 / SUM(T1.Salary) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID",
        "pred": "SELECT SUM(T5.`Salary`) * 100.0 / ( SELECT SUM(`Salary`) FROM Employees ) AS percentage_salary FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` INNER JOIN Products AS T4 ON T3.`ProductID` = T4.`ProductID` INNER JOIN Suppliers AS T5 ON T4.`SupplierID` = T5.`SupplierID` WHERE strftime('%Y', T1.`OrderDate`) = '1996'",
        "pred_result": "no such column: T5.Salary",
        "repair_sql": "SELECT SUM(T5.`Salary`) * 100.0 / ( SELECT SUM(`Salary`) FROM Employees ) AS percentage_salary FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` INNER JOIN OrderDetails AS T3 ON T1.`OrderID` = T3.`OrderID` INNER JOIN Products AS T4 ON T3.`ProductID` = T4.`ProductID` INNER JOIN Suppliers AS T5 ON T4.`SupplierID` = T5.`SupplierID` INNER JOIN Employees AS T6 ON T1.`EmployeeID` = T6.`EmployeeID` WHERE strftime('%Y', T1.`OrderDate`) = '1996'",
        "repair_result": "no such column: T5.Salary"
    },
    {
        "idx": 1033,
        "db_id": "retail_world",
        "question": "When was the employee who handled order id 10281 hired?",
        "evidence": "When was hired refers to HireDate",
        "gold": "SELECT T1.HireDate FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10281",
        "pred": "SELECT T1.`HireDate` FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T2.`OrderID` = 10281",
        "pred_result": "no such column: T1.HireDate",
        "repair_sql": "SELECT T1.`BirthDate` AS HireDate FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.`EmployeeID` = T2.`EmployeeID` WHERE T2.`OrderID` = 10281",
        "repair_result": "no such column: T1.HireDate"
    },
    {
        "idx": 1034,
        "db_id": "retail_world",
        "question": "How many orders was handled by employees who reported to employee id 5?",
        "evidence": "reported to employee id 5 refers to ReportsTo = 5",
        "gold": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.ReportsTo = 5",
        "pred": "SELECT COUNT(DISTINCT OD.OrderID) AS NumOrders FROM Orders O JOIN Employees E ON O.EmployeeID = E.EmployeeID WHERE E.EmployeeID IN ( WITH RECURSIVE EmployeeHierarchy AS ( SELECT EmployeeID FROM Employees WHERE EmployeeID = 5 UNION ALL SELECT e.EmployeeID FROM Employees e JOIN EmployeeHierarchy eh ON e.ReportsTo = eh.EmployeeID ) SELECT EmployeeID FROM EmployeeHierarchy )",
        "pred_result": "no such column: OD.OrderID",
        "repair_sql": "SELECT COUNT(DISTINCT O.OrderID) AS NumOrders FROM Orders O JOIN Employees E ON O.EmployeeID = E.EmployeeID WHERE E.ReportsTo = 5",
        "repair_result": "no such column: E.ReportsTo"
    },
    {
        "idx": 1035,
        "db_id": "retail_world",
        "question": "Give the full name of employee who handled the order id 10280.",
        "evidence": "full name refers to FirstName, LastName",
        "gold": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10280",
        "pred": "SELECT T1.`FirstName` || ' ' || T1.`LastName` AS full_name FROM Employees AS T1 WHERE T1.`EmployeeID` = ( SELECT `EmployeeID` FROM Orders WHERE `OrderID` = 10280 )",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`FirstName` || ' ' || T1.`LastName` AS full_name FROM Employees AS T1 WHERE T1.`EmployeeID` = ( SELECT `EmployeeID` FROM Orders WHERE `OrderID` = 10280 )",
        "repair_result": 0
    },
    {
        "idx": 1036,
        "db_id": "retail_world",
        "question": "State the shipping company of order id 10260.",
        "evidence": "shipping company refers to CompanyName",
        "gold": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10260",
        "pred": "SELECT s.`ShipperName` FROM Orders AS o INNER JOIN Shippers AS s ON o.`ShipperID` = s.`ShipperID` WHERE o.`OrderID` = 10260",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT s.`ShipperName` FROM Orders AS o INNER JOIN Shippers AS s ON o.`ShipperID` = s.`ShipperID` WHERE o.`OrderID` = 10260",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 1037,
        "db_id": "retail_world",
        "question": "How many orders have been shipped through United Package?",
        "evidence": "shipped through refers to ShipVia; United Package refers to CompanyName = 'United Package'",
        "gold": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'United Package'",
        "pred": "SELECT COUNT(*) FROM Orders WHERE `ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'United Package' )",
        "pred_result": "no such column: T2.CompanyName",
        "repair_sql": "SELECT COUNT(*) FROM Orders WHERE `ShipperID` = ( SELECT `ShipperID` FROM Shippers WHERE `ShipperName` = 'United Package' )",
        "repair_result": "no such column: T2.CompanyName"
    },
    {
        "idx": 1038,
        "db_id": "retail_world",
        "question": "List out the phone number of the shipping company of order id 10296.",
        "evidence": "shipping company refers to Shippers; phone number refers to Phone",
        "gold": "SELECT T2.Phone FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10260",
        "pred": "SELECT `Phone` FROM Shippers WHERE `ShipperID` = ( SELECT `ShipperID` FROM Orders WHERE `OrderID` = 10296 )",
        "pred_result": "no such column: T1.ShipVia",
        "repair_sql": "SELECT `Phone` FROM Shippers WHERE `ShipperID` = ( SELECT `ShipperID` FROM Orders WHERE `OrderID` = 10296 )",
        "repair_result": "no such column: T1.ShipVia"
    },
    {
        "idx": 1039,
        "db_id": "software_company",
        "question": "How many customers have never married?",
        "evidence": "MARITAL_STATUS = 'Never-married';",
        "gold": "SELECT COUNT(ID) FROM Customers WHERE MARITAL_STATUS = 'Never-married'",
        "pred": "SELECT COUNT(*) FROM Customers WHERE MARITAL_STATUS = 'Never-married'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Customers WHERE MARITAL_STATUS = 'Never-married'",
        "repair_result": 1
    },
    {
        "idx": 1040,
        "db_id": "software_company",
        "question": "Among all the customers, how many of them are teenagers?",
        "evidence": "teenager is a person aged between 13 and 19 years;",
        "gold": "SELECT COUNT(ID) FROM Customers WHERE age >= 13 AND age <= 19",
        "pred": "SELECT COUNT(*) FROM Customers WHERE age >= 13 AND age <= 19",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Customers WHERE age >= 13 AND age <= 19",
        "repair_result": 1
    },
    {
        "idx": 1041,
        "db_id": "software_company",
        "question": "Please list the occupations of the customers with an education level of 11.",
        "evidence": "education level of 11 refers to EDUCATIONNUM = 11;",
        "gold": "SELECT DISTINCT OCCUPATION FROM Customers WHERE EDUCATIONNUM = 11",
        "pred": "SELECT DISTINCT `OCCUPATION` FROM Customers WHERE `EDUCATIONNUM` = 11",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `OCCUPATION` FROM Customers WHERE `EDUCATIONNUM` = 11",
        "repair_result": 1
    },
    {
        "idx": 1042,
        "db_id": "software_company",
        "question": "Of the first 60,000 customers' responses to the incentive mailing sent by the marketing department, how many of them are considered a true response?",
        "evidence": "RESPONSE = 'true';",
        "gold": "SELECT COUNT(REFID) custmoer_number FROM Mailings1_2 WHERE RESPONSE = 'true'",
        "pred": "SELECT COUNT(*) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.`ID` = T2.`REFID` WHERE T2.`RESPONSE` = 'true' LIMIT 60000",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.`ID` = T2.`REFID` WHERE T2.`RESPONSE` = 'true' LIMIT 60000",
        "repair_result": 1
    },
    {
        "idx": 1043,
        "db_id": "software_company",
        "question": "Among the customers over 30, how many of them are Machine-op-inspcts?",
        "evidence": "over 30 refers to age > 30; OCCUPATION = 'Machine-op-inspct';",
        "gold": "SELECT COUNT(ID) FROM Customers WHERE OCCUPATION = 'Machine-op-inspct' AND age > 30",
        "pred": "SELECT COUNT(*) FROM Customers WHERE age > 30 AND OCCUPATION = 'Machine-op-inspct'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Customers WHERE age > 30 AND OCCUPATION = 'Machine-op-inspct'",
        "repair_result": 1
    },
    {
        "idx": 1044,
        "db_id": "software_company",
        "question": "How many female customers have an education level of over 11?",
        "evidence": "education level of 11 refers to EDUCATIONNUM = 11; SEX = 'Female';",
        "gold": "SELECT COUNT(ID) FROM Customers WHERE EDUCATIONNUM > 11 AND SEX = 'Female'",
        "pred": "SELECT COUNT(*) FROM Customers WHERE SEX = 'Female' AND EDUCATIONNUM > 11",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Customers WHERE SEX = 'Female' AND EDUCATIONNUM > 11",
        "repair_result": 1
    },
    {
        "idx": 1045,
        "db_id": "software_company",
        "question": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are female?",
        "evidence": "RESPONSE = 'true'; SEX = 'Female';",
        "gold": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.SEX = 'Female' AND T2.RESPONSE = 'true'",
        "pred": "SELECT COUNT(*) FROM Customers AS T1 INNER JOIN mailings3 AS T2 ON T1.`ID` = T2.`REFID` WHERE T2.`RESPONSE` = 'true' AND T1.`SEX` = 'Female' LIMIT 60000",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Customers AS T1 INNER JOIN mailings3 AS T2 ON T1.`ID` = T2.`REFID` WHERE T2.`RESPONSE` = 'true' AND T1.`SEX` = 'Female' LIMIT 60000",
        "repair_result": 0
    },
    {
        "idx": 1046,
        "db_id": "software_company",
        "question": "Please list the occupations of the customers over 40 and have sent a true response to the incentive mailing sent by the marketing department.",
        "evidence": "over 40 refers to age > 40; RESPONSE = 'true';",
        "gold": "SELECT DISTINCT T1.OCCUPATION FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.age > 40 AND T2.RESPONSE = 'true'",
        "pred": "SELECT DISTINCT T1.`OCCUPATION` FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.`ID` = T2.`REFID` WHERE T1.`age` > 40 AND T2.`RESPONSE` = 'true'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`OCCUPATION` FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.`ID` = T2.`REFID` WHERE T1.`age` > 40 AND T2.`RESPONSE` = 'true'",
        "repair_result": 1
    },
    {
        "idx": 1047,
        "db_id": "software_company",
        "question": "Among the male customers, how many of them come from a place with over 30,000 inhabitants?",
        "evidence": "SEX = 'Male', over 30,000 inhabitants refer to NHABITANTS_K > 30; place refers to GEOID;",
        "gold": "SELECT COUNT(T1.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T2.INHABITANTS_K > 30",
        "pred": "SELECT COUNT(*) FROM Customers INNER JOIN Demog ON Customers.`GEOID` = Demog.`GEOID` WHERE Customers.`SEX` = 'Male' AND Demog.`INHABITANTS_K` > 30",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Customers INNER JOIN Demog ON Customers.`GEOID` = Demog.`GEOID` WHERE Customers.`SEX` = 'Male' AND Demog.`INHABITANTS_K` > 30",
        "repair_result": 1
    },
    {
        "idx": 1048,
        "db_id": "software_company",
        "question": "How many customers are from the place with the highest average income per month?",
        "evidence": "place with the highest average income per month refers to GEOID where MAX(INCOME_K);",
        "gold": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T2.INCOME_K DESC LIMIT 1",
        "pred": "SELECT COUNT(*) FROM Customers WHERE `GEOID` = ( SELECT `GEOID` FROM Demog ORDER BY `INCOME_K` DESC LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Customers WHERE `GEOID` = ( SELECT `GEOID` FROM Demog ORDER BY `INCOME_K` DESC LIMIT 1 )",
        "repair_result": 0
    },
    {
        "idx": 1049,
        "db_id": "software_company",
        "question": "Among the customers from a place with more than 20,000 and less than 30,000 inhabitants, how many of them are Machine-op-inspcts?",
        "evidence": "place with more than 20,000 and less than 30,000 inhabitants refers to GEOID where INHABITANTS_K BETWEEN 20 AND 30; OCCUPATION = 'Machine-op-inspct';",
        "gold": "SELECT COUNT(T1.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Machine-op-inspct' AND T2.INHABITANTS_K > 20 AND T2.INHABITANTS_K < 30",
        "pred": "SELECT COUNT(*) FROM Customers WHERE `GEOID` IN ( SELECT `GEOID` FROM Demog WHERE `INHABITANTS_K` > 20 AND `INHABITANTS_K` < 30 ) AND `OCCUPATION` = 'Machine-op-inspct'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Customers WHERE `GEOID` IN ( SELECT `GEOID` FROM Demog WHERE `INHABITANTS_K` > 20 AND `INHABITANTS_K` < 30 ) AND `OCCUPATION` = 'Machine-op-inspct'",
        "repair_result": 1
    },
    {
        "idx": 1050,
        "db_id": "software_company",
        "question": "Which customer come from a place with more inhabitants, customer no.0 or customer no.1?",
        "evidence": "place with more inhabitants refers to GEOID where ID = 0 OR ID = 1 and MAX(NHABITANTS_K);",
        "gold": "SELECT T1.ID FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.ID = 0 OR T1.ID = 1 ORDER BY INHABITANTS_K DESC LIMIT 1",
        "pred": "SELECT CASE WHEN T1.`INHABITANTS_K` > T2.`INHABITANTS_K` THEN 'Customer 0' ELSE 'Customer 1' END AS 'Customer with more inhabitants' FROM ( SELECT T1.`ID`, T2.`INHABITANTS_K` FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.`GEOID` = T2.`GEOID` WHERE T1.`ID` = 0 ) AS T1, ( SELECT T1.`ID`, T2.`INHABITANTS_K` FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.`GEOID` = T2.`GEOID` WHERE T1.`ID` = 1 ) AS T2",
        "pred_result": 0,
        "repair_sql": "SELECT CASE WHEN T1.`INHABITANTS_K` > T2.`INHABITANTS_K` THEN 'Customer 0' ELSE 'Customer 1' END AS 'Customer with more inhabitants' FROM ( SELECT T1.`ID`, T2.`INHABITANTS_K` FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.`GEOID` = T2.`GEOID` WHERE T1.`ID` = 0 ) AS T1, ( SELECT T1.`ID`, T2.`INHABITANTS_K` FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.`GEOID` = T2.`GEOID` WHERE T1.`ID` = 1 ) AS T2",
        "repair_result": 0
    },
    {
        "idx": 1051,
        "db_id": "software_company",
        "question": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are from a place with more than 30,000 inhabitants?",
        "evidence": "RESPONSE = 'true'; place with more than 30,000 inhabitants refers to GEOID where INHABITANTS_K > 30;",
        "gold": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T3.INHABITANTS_K > 30 AND T2.RESPONSE = 'true'",
        "pred": "SELECT COUNT(*) FROM ( SELECT T1.`ID` FROM Customers AS T1 INNER JOIN mailings3 AS T2 ON T1.`ID` = T2.`REFID` INNER JOIN Demog AS T3 ON T1.`GEOID` = T3.`GEOID` WHERE T2.`RESPONSE` = 'true' AND T3.`INHABITANTS_K` > 30 LIMIT 60000 ) AS subquery",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM ( SELECT T1.`ID` FROM Customers AS T1 INNER JOIN mailings3 AS T2 ON T1.`ID` = T2.`REFID` INNER JOIN Demog AS T3 ON T1.`GEOID` = T3.`GEOID` WHERE T2.`RESPONSE` = 'true' AND T3.`INHABITANTS_K` > 30 LIMIT 60000 ) AS subquery",
        "repair_result": 0
    },
    {
        "idx": 1052,
        "db_id": "software_company",
        "question": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are divorced males?",
        "evidence": "RESPONSE = 'true'; SEX = 'Male'; MARITAL_STATUS = 'Divorced';",
        "gold": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.SEX = 'Male' AND T1.MARITAL_STATUS = 'Divorced' AND T2.RESPONSE = 'true'",
        "pred": "SELECT COUNT(*) FROM ( SELECT T1.* FROM Customers AS T1 INNER JOIN mailings3 AS T2 ON T1.`ID` = T2.`REFID` WHERE T2.`RESPONSE` = 'true' LIMIT 60000 ) AS T WHERE T.`MARITAL_STATUS` = 'Divorced' AND T.`SEX` = 'Male'",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM ( SELECT T1.* FROM Customers AS T1 INNER JOIN mailings3 AS T2 ON T1.`ID` = T2.`REFID` WHERE T2.`RESPONSE` = 'true' LIMIT 60000 ) AS T WHERE T.`MARITAL_STATUS` = 'Divorced' AND T.`SEX` = 'Male'",
        "repair_result": 0
    },
    {
        "idx": 1053,
        "db_id": "software_company",
        "question": "How many of the first 60,000 customers from the place with the highest average income per month have sent a true response to the incentive mailing sent by the marketing department?",
        "evidence": "place with the highest average income per month refers to GEOID where MAX(INCOME_K); RESPONSE = 'true';",
        "gold": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T2.RESPONSE = 'true' ORDER BY T3.INCOME_K DESC LIMIT 1",
        "pred": "SELECT COUNT(T1.`ID`) FROM Customers AS T1 INNER JOIN mailings3 AS T2 ON T1.`ID` = T2.`REFID` WHERE T1.`GEOID` = ( SELECT `GEOID` FROM Demog ORDER BY `INCOME_K` DESC LIMIT 1 ) AND T2.`RESPONSE` = 'true' LIMIT 60000",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(T1.`ID`) FROM Customers AS T1 INNER JOIN mailings3 AS T2 ON T1.`ID` = T2.`REFID` WHERE T1.`GEOID` = ( SELECT `GEOID` FROM Demog ORDER BY `INCOME_K` DESC LIMIT 1 ) AND T2.`RESPONSE` = 'true' LIMIT 60000",
        "repair_result": 0
    },
    {
        "idx": 1054,
        "db_id": "software_company",
        "question": "What is the number of inhabitants of the place the most customers are from?",
        "evidence": "the most customers are from refers to GEOID where MAX(COUNT(ID)); number of inhabitants refers to INHABITANTS_K;",
        "gold": "SELECT DISTINCT T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T2.INHABITANTS_K DESC",
        "pred": "SELECT T2.`INHABITANTS_K` FROM Demog AS T2 WHERE T2.`GEOID` = ( SELECT T1.`GEOID` FROM Customers AS T1 GROUP BY T1.`GEOID` ORDER BY COUNT(T1.`ID`) DESC LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`INHABITANTS_K` FROM Demog AS T2 WHERE T2.`GEOID` = ( SELECT T1.`GEOID` FROM Customers AS T1 GROUP BY T1.`GEOID` ORDER BY COUNT(T1.`ID`) DESC LIMIT 1 )",
        "repair_result": 0
    },
    {
        "idx": 1055,
        "db_id": "software_company",
        "question": "Among the customers who come from the place with 25746 inhabitants, how many of them are male?",
        "evidence": "place with 44114 inhabitants refers to GEOID where INHABITANTS_K = 44.114; SEX = 'Male';",
        "gold": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INHABITANTS_K = 25.746 AND T1.SEX = 'Male'",
        "pred": "SELECT COUNT(*) FROM Customers WHERE `GEOID` = ( SELECT `GEOID` FROM Demog WHERE `INHABITANTS_K` = 25.746 ) AND `SEX` = 'Male'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Customers WHERE `GEOID` = ( SELECT `GEOID` FROM Demog WHERE `INHABITANTS_K` = 25.746 ) AND `SEX` = 'Male'",
        "repair_result": 1
    },
    {
        "idx": 1056,
        "db_id": "software_company",
        "question": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are teenagers?",
        "evidence": "RESPONSE = 'true'; teenagers are people aged between 13 and 19 years;",
        "gold": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.age >= 13 AND T1.age <= 19 AND T2.RESPONSE = 'true'",
        "pred": "SELECT COUNT(*) FROM ( SELECT T1.* FROM Customers AS T1 INNER JOIN mailings3 AS T2 ON T1.`ID` = T2.`REFID` WHERE T2.`RESPONSE` = 'true' LIMIT 60000 ) AS subquery WHERE subquery.`age` BETWEEN 13 AND 19",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM ( SELECT T1.* FROM Customers AS T1 INNER JOIN mailings3 AS T2 ON T1.`ID` = T2.`REFID` WHERE T2.`RESPONSE` = 'true' LIMIT 60000 ) AS subquery WHERE subquery.`age` BETWEEN 13 AND 19",
        "repair_result": 0
    },
    {
        "idx": 1057,
        "db_id": "software_company",
        "question": "What is the average education level of customers from the place with the highest average income per month?",
        "evidence": "place with the highest average income per month refers to GEOID where MAX(INCOME_K); average education level refers to AVG(EDUCATIONNUM);",
        "gold": "SELECT AVG(T1.EDUCATIONNUM) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T2.INCOME_K DESC LIMIT 1",
        "pred": "SELECT AVG(`EDUCATIONNUM`) FROM Customers WHERE `GEOID` = ( SELECT `GEOID` FROM Demog ORDER BY `INCOME_K` DESC LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(`EDUCATIONNUM`) FROM Customers WHERE `GEOID` = ( SELECT `GEOID` FROM Demog WHERE `INCOME_K` IS NOT NULL ORDER BY `INCOME_K` DESC LIMIT 1 )",
        "repair_result": 0
    },
    {
        "idx": 1058,
        "db_id": "software_company",
        "question": "What is the average age of first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department?",
        "evidence": "RESPONSE = 'true'; AVG(age);",
        "gold": "SELECT AVG(T1.age) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T2.RESPONSE = 'true'",
        "pred": "SELECT AVG(T1.`age`) FROM Customers AS T1 INNER JOIN mailings3 AS T2 ON T1.`ID` = T2.`REFID` WHERE T2.`RESPONSE` = 'true' LIMIT 60000",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(T1.`age`) FROM Customers AS T1 INNER JOIN mailings3 AS T2 ON T1.`ID` = T2.`REFID` WHERE T2.`RESPONSE` = 'true' LIMIT 60000",
        "repair_result": 0
    },
    {
        "idx": 1059,
        "db_id": "software_company",
        "question": "How many of the customers are male?",
        "evidence": "SEX = 'Male';",
        "gold": "SELECT COUNT(ID) FROM Customers WHERE SEX = 'Male'",
        "pred": "SELECT COUNT(*) FROM Customers WHERE SEX = 'Male'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Customers WHERE SEX = 'Male'",
        "repair_result": 1
    },
    {
        "idx": 1060,
        "db_id": "software_company",
        "question": "List down the customer's geographic identifier who are handlers or cleaners.",
        "evidence": "geographic identifier refers to GEOID; OCCUPATION = 'Handlers-cleaners';",
        "gold": "SELECT GEOID FROM Customers WHERE OCCUPATION = 'Handlers-cleaners'",
        "pred": "SELECT DISTINCT T1.`GEOID` FROM Customers AS T1 WHERE T1.`OCCUPATION` IN ('Handlers-cleaners', 'Machine-op-inspct')",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`GEOID` FROM Customers AS T1 WHERE T1.`OCCUPATION` IN ('Handlers-cleaners', 'Machine-op-inspct')",
        "repair_result": 0
    },
    {
        "idx": 1061,
        "db_id": "software_company",
        "question": "What is the total number of customers with an age below 30?",
        "evidence": "age below 30 refers to age < 30;",
        "gold": "SELECT COUNT(ID) FROM Customers WHERE age < 30",
        "pred": "SELECT COUNT(*) FROM Customers WHERE age < 30",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Customers WHERE age < 30",
        "repair_result": 1
    },
    {
        "idx": 1062,
        "db_id": "software_company",
        "question": "List down the geographic identifier with an income that ranges from 2100 to 2500.",
        "evidence": "geographic identifier with an income that ranges from 2100 to 2500 refers to GEOID where INCOME_K BETWEEN 2100 AND 2500;",
        "gold": "SELECT GEOID FROM Demog WHERE INCOME_K >= 2100 AND INCOME_K <= 2500",
        "pred": "SELECT `GEOID` FROM Demog WHERE `INCOME_K` BETWEEN 2100 AND 2500",
        "pred_result": 1,
        "repair_sql": "SELECT `GEOID` FROM Demog WHERE `INCOME_K` BETWEEN 2100 AND 2500",
        "repair_result": 1
    },
    {
        "idx": 1063,
        "db_id": "software_company",
        "question": "In geographic identifier from 20 to 50, how many of them has a number of inhabitants below 20?",
        "evidence": "geographic identifier from 20 to 50 refers to GEOID BETWEEN 20 AND 50; number of inhabitants below 20 refers to INHABITANTS_K < 20;",
        "gold": "SELECT COUNT(GEOID) FROM Demog WHERE INHABITANTS_K < 20 AND GEOID >= 20 AND GEOID <= 50",
        "pred": "SELECT COUNT(*) FROM Demog WHERE GEOID BETWEEN 20 AND 50 AND INHABITANTS_K < 20",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Demog WHERE GEOID BETWEEN 20 AND 50 AND INHABITANTS_K < 20",
        "repair_result": 1
    },
    {
        "idx": 1064,
        "db_id": "software_company",
        "question": "What is the number of inhabitants and income of geographic identifier 239?",
        "evidence": "geographic identifier 239 refers to GEOID = 239; number of inhabitants refers to INHABITANTS_K; income refers to INCOME_K;",
        "gold": "SELECT INHABITANTS_K FROM Demog WHERE GEOID = 239",
        "pred": "SELECT `INHABITANTS_K`, `INCOME_K` FROM Demog WHERE `GEOID` = 239",
        "pred_result": 1,
        "repair_sql": "SELECT `INHABITANTS_K`, `INCOME_K` FROM Demog WHERE `GEOID` = 239",
        "repair_result": 1
    },
    {
        "idx": 1065,
        "db_id": "software_company",
        "question": "Give the level of education and occupation of customers ages from 20 to 35 with an income K of 2000 and below.",
        "evidence": "customers ages from 20 to 35 refer to ID where age BETWEEN 20 AND 35; income K of 2000 and below refers to INCOME_K < 2000; level of education refers to EDUCATIONNUM;",
        "gold": "SELECT T1.EDUCATIONNUM, T1.OCCUPATION FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INCOME_K < 2000 AND T1.age >= 20 AND T1.age <= 35",
        "pred": "SELECT T1.`EDUCATIONNUM`, T1.`OCCUPATION` FROM Customers AS T1 WHERE T1.`ID` IN ( SELECT T2.`ID` FROM Customers AS T2 WHERE T2.`age` BETWEEN 20 AND 35 AND T2.`INCOME_K` < 2000 )",
        "pred_result": "no such column: T2.INCOME_K",
        "repair_sql": "SELECT T1.`EDUCATIONNUM`, T1.`OCCUPATION` FROM Customers AS T1 WHERE T1.`ID` IN ( SELECT T2.`ID` FROM Customers AS T2 WHERE T2.`age` BETWEEN 20 AND 35 AND T2.`INCOME_K` < 2000 )",
        "repair_result": "no such column: T2.INCOME_K"
    },
    {
        "idx": 1066,
        "db_id": "software_company",
        "question": "List down the number of inhabitants of customers with a divorced marital status and older than 50 years old.",
        "evidence": "number of inhabitants refers to INHABITANTS_K; older than 50 years old refers to age < 50; MARITAL_STATUS = 'Divorced;",
        "gold": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.MARITAL_STATUS = 'Divorced' AND T1.age < 50",
        "pred": "SELECT T1.`INHABITANTS_K` FROM Demog AS T1 INNER JOIN Customers AS T2 ON T1.`GEOID` = T2.`ID` WHERE T2.`MARITAL_STATUS` = 'Divorced' AND T2.`age` > 50",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`INHABITANTS_K` FROM Demog AS T1 INNER JOIN Customers AS T2 ON T1.`GEOID` = T2.`ID` WHERE T2.`MARITAL_STATUS` = 'Divorced' AND T2.`age` > 50",
        "repair_result": 0
    },
    {
        "idx": 1067,
        "db_id": "software_company",
        "question": "What is the geographic identifier and income of the oldest customer?",
        "evidence": "the oldest customer refers to MAX(age); geographic identifier refers to GEOID; income refers to INCOME_K;",
        "gold": "SELECT T1.GEOID, T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T1.age DESC LIMIT 1",
        "pred": "SELECT T1.`GEOID`, T1.`INCOME_K` FROM Demog AS T1 INNER JOIN Customers AS T2 ON T1.`GEOID` = T2.`GEOID` WHERE T2.`age` = ( SELECT MAX(`age`) FROM Customers )",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`GEOID`, T1.`INCOME_K` FROM Demog AS T1 INNER JOIN Customers AS T2 ON T1.`GEOID` = T2.`GEOID` WHERE T2.`age` = ( SELECT MAX(`age`) FROM Customers )",
        "repair_result": 0
    },
    {
        "idx": 1068,
        "db_id": "software_company",
        "question": "Among the male customers with an level of education of 4 and below, list their income K.",
        "evidence": "male customers with an level of education of 4 and below refer to SEX = 'Male' where EDUCATIONNUM < 4;",
        "gold": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 4 AND SEX = 'Male' )",
        "pred": "SELECT T1.`INCOME_K` FROM Customers AS T1 WHERE T1.`SEX` = 'Male' AND T1.`EDUCATIONNUM` < 4",
        "pred_result": "no such column: T1.INCOME_K",
        "repair_sql": "SELECT T1.`INCOME_K` FROM Customers AS T1 WHERE T1.`SEX` = 'Male' AND T1.`EDUCATIONNUM` < 4",
        "repair_result": "no such column: T1.INCOME_K"
    },
    {
        "idx": 1069,
        "db_id": "software_company",
        "question": "List the occupation and income of male customers with an level of education of 4 to 6.",
        "evidence": "male customers with an level of education of 4 to 6 refer to SEX = 'Male' where EDUCATIONNUM BETWEEN 4 AND 6; income refers to INCOME_K;",
        "gold": "SELECT T1.OCCUPATION, T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.EDUCATIONNUM >= 4 AND T1.EDUCATIONNUM <= 6 AND T1.SEX = 'Male'",
        "pred": "SELECT T1.`OCCUPATION`, T2.`INCOME_K` FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.`ID` = T2.`GEOID` WHERE T1.`SEX` = 'Male' AND T1.`EDUCATIONNUM` BETWEEN 4 AND 6",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`OCCUPATION`, T2.`INCOME_K` FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.`ID` = T2.`GEOID` WHERE T1.`SEX` = 'Male' AND T1.`EDUCATIONNUM` BETWEEN 4 AND 6",
        "repair_result": 0
    },
    {
        "idx": 1070,
        "db_id": "software_company",
        "question": "In widowed male customers ages from 40 to 60, how many of them has an income ranges from 3000 and above?",
        "evidence": "widowed male customers ages from 40 to 60 refer to SEX = 'Male' where age BETWEEN 40 AND 60 and MARITAL_STATUS = 'Widowed'; income ranges from 3000 and above refers to INCOME_K BETWEEN 2000 AND 3000;",
        "gold": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.age >= 40 AND T1.age <= 60 AND T1.MARITAL_STATUS = 'Widowed' AND T1.SEX = 'Male' AND T2.INCOME_K >= 2000 AND T2.INCOME_K <= 3000",
        "pred": "SELECT COUNT(*) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.ID = T2.GEOID WHERE T1.SEX = 'Male' AND T1.age BETWEEN 40 AND 60 AND T1.MARITAL_STATUS = 'Widowed' AND T2.INCOME_K >= 3000",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.ID = T2.GEOID WHERE T1.SEX = 'Male' AND T1.age BETWEEN 40 AND 60 AND T1.MARITAL_STATUS = 'Widowed' AND T2.INCOME_K >= 3000",
        "repair_result": 0
    },
    {
        "idx": 1071,
        "db_id": "software_company",
        "question": "What is the occupation of customers within number of inhabitants ranges of 30 to 40?",
        "evidence": "number of inhabitants ranges of 30 to 40 refers to INHABITANTS_K BETWEEN 30 AND 40;",
        "gold": "SELECT DISTINCT T1.OCCUPATION FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INHABITANTS_K >= 30 AND T2.INHABITANTS_K <= 40",
        "pred": "SELECT DISTINCT T1.`OCCUPATION` FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.`GEOID` = T2.`GEOID` WHERE T2.`INHABITANTS_K` BETWEEN 30 AND 40",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT T1.`OCCUPATION` FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.`GEOID` = T2.`GEOID` WHERE T2.`INHABITANTS_K` BETWEEN 30 AND 40",
        "repair_result": 1
    },
    {
        "idx": 1072,
        "db_id": "software_company",
        "question": "Among the widowed female customers, give the income of those who has an level of education of 5 and below.",
        "evidence": "widowed female customers refer to SEX = 'Female' where MARITAL_STATUS = 'Widowed'; level of education of 5 and below refers to EDUCATIONNUM \u2264 5;",
        "gold": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 5 AND SEX = 'Female' AND MARITAL_STATUS = 'Widowed' )",
        "pred": "SELECT T1.`INCOME_K` FROM Customers AS T1 WHERE T1.`MARITAL_STATUS` = 'Widowed' AND T1.`SEX` = 'Female' AND T1.`EDUCATIONNUM` <= 5",
        "pred_result": "no such column: T1.INCOME_K",
        "repair_sql": "SELECT T1.`INCOME_K` FROM Customers AS T1 WHERE T1.`MARITAL_STATUS` = 'Widowed' AND T1.`SEX` = 'Female' AND T1.`EDUCATIONNUM` <= 5",
        "repair_result": "no such column: T1.INCOME_K"
    },
    {
        "idx": 1073,
        "db_id": "software_company",
        "question": "List the marital status of customers within the age of 40 to 60 that has the highest income among the group.",
        "evidence": "age of 40 to 60 refers to age BETWEEN 40 AND 60; the highest income refers to MAX(INCOME_K);",
        "gold": "SELECT T1.MARITAL_STATUS FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.age >= 40 AND T1.age <= 60 ORDER BY T2.INCOME_K DESC LIMIT 1",
        "pred": "SELECT T1.`MARITAL_STATUS` FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.`ID` = T2.`GEOID` WHERE T2.`INCOME_K` = ( SELECT MAX(`INCOME_K`) FROM Demog WHERE `age` BETWEEN 40 AND 60 ) AND T2.`age` BETWEEN 40 AND 60",
        "pred_result": "no such column: T2.age",
        "repair_sql": "SELECT T1.`MARITAL_STATUS` FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.`ID` = T2.`GEOID` WHERE T2.`INCOME_K` = ( SELECT MAX(`INCOME_K`) FROM Demog WHERE `age` BETWEEN 40 AND 60 AND T2.`GEOID` = T1.`ID` ) AND T2.`age` BETWEEN 40 AND 60",
        "repair_result": "no such column: T2.age"
    },
    {
        "idx": 1074,
        "db_id": "software_company",
        "question": "What is the number of inhabitants of male customers ages from 20 to 30 years old who are farming or fishing?",
        "evidence": "male customers ages from 20 to 30 years old refer to SEX = 'Male' where age BETWEEN 20 AND 30; farming or fishing refers to OCCUPATION; number of inhabitants refers to INHABITANTS_K;",
        "gold": "SELECT T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Farming-fishing' AND T1.SEX = 'Male' AND T1.age >= 20 AND T1.age <= 30",
        "pred": "SELECT SUM(T1.`INHABITANTS_K`) FROM Demog AS T1 INNER JOIN Customers AS T2 ON T1.`GEOID` = T2.`ID` WHERE T2.`SEX` = 'Male' AND T2.`age` BETWEEN 20 AND 30 AND T2.`OCCUPATION` IN ('Farming-fishing', 'Machine-op-inspct')",
        "pred_result": 0,
        "repair_sql": "SELECT SUM(T1.`INHABITANTS_K`) FROM Demog AS T1 INNER JOIN Customers AS T2 ON T1.`GEOID` = T2.`ID` WHERE T2.`SEX` = 'Male' AND T2.`age` BETWEEN 20 AND 30 AND T2.`OCCUPATION` IN ('Farming-fishing', 'Machine-op-inspct')",
        "repair_result": 0
    },
    {
        "idx": 1075,
        "db_id": "software_company",
        "question": "Among the customers with a marital status of married-civ-spouse, list the number of inhabitants and age of those who are machine-op-inspct.",
        "evidence": "OCCUPATION = 'Machine-op-inspct'; number of inhabitants refers to INHABITANTS_K;",
        "gold": "SELECT T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Farming-fishing' AND T1.SEX = 'Male' AND T1.age >= 20 AND T1.age <= 30",
        "pred": "SELECT T1.`INHABITANTS_K`, T2.`age` FROM Demog AS T1 INNER JOIN Customers AS T2 ON T1.`GEOID` = T2.`ID` WHERE T2.`MARITAL_STATUS` = 'Married-civ-spouse' AND T2.`OCCUPATION` = 'Machine-op-inspct'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`INHABITANTS_K`, T2.`age` FROM Demog AS T1 INNER JOIN Customers AS T2 ON T1.`GEOID` = T2.`ID` WHERE T2.`MARITAL_STATUS` = 'Married-civ-spouse' AND T2.`OCCUPATION` = 'Machine-op-inspct'",
        "repair_result": 0
    },
    {
        "idx": 1076,
        "db_id": "software_company",
        "question": "In female customers ages from 50 to 60, how many of them has an number of inhabitants ranges from 19 to 24?",
        "evidence": "female customers ages from 50 to 60 refer to SEX = 'Female' where age BETWEEN 50 AND 60; number of inhabitants ranges from 19 to 24 refers to INHABITANTS_K BETWEEN 19 AND 24;",
        "gold": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.age >= 50 AND T1.age <= 60 AND T2.INHABITANTS_K >= 19 AND T2.INHABITANTS_K <= 24",
        "pred": "SELECT COUNT(*) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.age BETWEEN 50 AND 60 AND T2.INHABITANTS_K BETWEEN 19 AND 24",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.age BETWEEN 50 AND 60 AND T2.INHABITANTS_K BETWEEN 19 AND 24",
        "repair_result": 1
    },
    {
        "idx": 1077,
        "db_id": "software_company",
        "question": "List the income and number of inhabitants of customers with an age greater than the 80% of average age of all customers?",
        "evidence": "age greater than the 80% of average age refers to age > (AVG(age) * 0.8); income refers to INCOME_K; number of inhabitants refers to INHABITANTS_K;",
        "gold": "SELECT T2.INCOME_K, T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID GROUP BY T2.INCOME_K, T2.INHABITANTS_K HAVING T1.age > 0.8 * AVG(T1.age)",
        "pred": "SELECT T1.`INCOME_K`, T1.`INHABITANTS_K` FROM Demog AS T1 INNER JOIN Customers AS T2 ON T1.`GEOID` = T2.`GEOID` WHERE T2.`age` > ( SELECT AVG(`age`) * 0.8 FROM Customers )",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`INCOME_K`, T1.`INHABITANTS_K` FROM Demog AS T1 INNER JOIN Customers AS T2 ON T1.`GEOID` = T2.`GEOID` WHERE T2.`age` > ( SELECT AVG(`age`) * 0.8 FROM Customers )",
        "repair_result": 0
    },
    {
        "idx": 1078,
        "db_id": "software_company",
        "question": "In customers with marital status of never married, what is the percentage of customers with income of 2500 and above?",
        "evidence": "DIVIDE(COUNT(INCOME_K \u2265 2500 where MARITAL_STATUS = 'Never-married'), COUNT(INCOME_K where MARITAL_STATUS = 'Never-married')) as percentage;",
        "gold": "SELECT CAST(SUM(CASE WHEN T2.INCOME_K > 2500 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.MARITAL_STATUS = 'Never-married'",
        "pred": "SELECT CAST(COUNT(CASE WHEN INCOME_K >= 2500 THEN 1 END) AS REAL) / COUNT(*) FROM Customers WHERE MARITAL_STATUS = 'Never-married'",
        "pred_result": "no such column: INCOME_K",
        "repair_sql": "SELECT CAST(COUNT(CASE WHEN INCOME_K >= 2500 THEN 1 END) AS REAL) / COUNT(*) FROM Demog JOIN Customers ON Demog.ID = Customers.ID WHERE MARITAL_STATUS = 'Never-married'",
        "repair_result": "no such column: Demog.ID"
    },
    {
        "idx": 1079,
        "db_id": "software_company",
        "question": "Find and list the id and geographic ID of the elderly customers with an education level below 3.",
        "evidence": "elderly customers with an education level below 3 refer to age > 65 where EDUCATIONNUM < 3; geographic ID refers to GEOID;",
        "gold": "SELECT ID, GEOID FROM Customers WHERE EDUCATIONNUM < 3 AND age > 65",
        "pred": "SELECT `ID`, `GEOID` FROM Customers WHERE `age` > 65 AND `EDUCATIONNUM` < 3",
        "pred_result": 1,
        "repair_sql": "SELECT `ID`, `GEOID` FROM Customers WHERE `age` > 65 AND `EDUCATIONNUM` < 3",
        "repair_result": 1
    },
    {
        "idx": 1080,
        "db_id": "software_company",
        "question": "List the geographic id of places where the income is above average.",
        "evidence": "geographic ID refers to GEOID; income is above average refers to INCOME_K > DIVIDE(SUM(INCOME_K), COUNT(GEOID));",
        "gold": "SELECT AVG(INCOME_K) FROM Demog",
        "pred": "SELECT `GEOID` FROM Demog WHERE `INCOME_K` > ( SELECT AVG(`INCOME_K`) FROM Demog )",
        "pred_result": 0,
        "repair_sql": "SELECT `GEOID` FROM Demog WHERE `INCOME_K` > ( SELECT AVG(`INCOME_K`) FROM Demog )",
        "repair_result": 0
    },
    {
        "idx": 1081,
        "db_id": "software_company",
        "question": "Calculate the number of customers who did not respond in February of 2007.",
        "evidence": "did not respond refers to RESPONSE = 'false'; February of 2007 refers to REF_DATE BETWEEN '2007-02-01 12:00:00.0'AND '2007-02-28 12:00:00.0';",
        "gold": "SELECT COUNT(REFID) custmoer_number FROM Mailings1_2 WHERE RESPONSE = 'false' AND REF_DATE BETWEEN '2007-02-01' AND '2007-02-28'",
        "pred": "SELECT COUNT(*) FROM Customers AS T1 LEFT JOIN Mailings1_2 AS T2 ON T1.`ID` = T2.`REFID` WHERE T2.`RESPONSE` = 'false' AND T2.`REF_DATE` BETWEEN '2007-02-01 12:00:00.0' AND '2007-02-28 12:00:00.0'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Customers AS T1 LEFT JOIN Mailings1_2 AS T2 ON T1.`ID` = T2.`REFID` WHERE T2.`RESPONSE` = 'false' AND T2.`REF_DATE` BETWEEN '2007-02-01 12:00:00.0' AND '2007-02-28 12:00:00.0'",
        "repair_result": 1
    },
    {
        "idx": 1082,
        "db_id": "software_company",
        "question": "How many teenagers are working as Machine-op-inspct?",
        "evidence": "teenager is a person aged between 13 and 19 years; OCCUPATION = 'Machine-op-inspct';",
        "gold": "SELECT COUNT(ID) teenager_number FROM Customers WHERE OCCUPATION = 'Machine-op-inspct' AND age >= 13 AND age <= 19",
        "pred": "SELECT COUNT(*) FROM Customers WHERE age BETWEEN 13 AND 19 AND OCCUPATION = 'Machine-op-inspct'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Customers WHERE age BETWEEN 13 AND 19 AND OCCUPATION = 'Machine-op-inspct'",
        "repair_result": 1
    },
    {
        "idx": 1083,
        "db_id": "software_company",
        "question": "Of customers who provide other services, how many are from places where inhabitants are more than 20000?",
        "evidence": "OCCUPATION = 'Other-service'; inhabitants are more than 20000 refer to INHABITANTS_K > 20;",
        "gold": "SELECT COUNT(T2.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Other-service' AND T2.INHABITANTS_K > 20",
        "pred": "SELECT COUNT(*) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.`GEOID` = T2.`GEOID` WHERE T1.`OCCUPATION` = 'Other-service' AND T2.`INHABITANTS_K` > 20",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.`GEOID` = T2.`GEOID` WHERE T1.`OCCUPATION` = 'Other-service' AND T2.`INHABITANTS_K` > 20",
        "repair_result": 1
    },
    {
        "idx": 1084,
        "db_id": "software_company",
        "question": "Among the male customer in their twenties, how many are from places where the average income is more than 3000?",
        "evidence": "male customer in their twenties refer to SEX = 'Male' where age BETWEEN 20 AND 29; average income is more than 3000 refers to INCOME_K > 3000;",
        "gold": "SELECT COUNT(T2.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T2.INCOME_K > 3000 AND T1.age >= 20 AND T1.age <= 29",
        "pred": "SELECT COUNT(*) FROM Customers WHERE `SEX` = 'Male' AND `age` BETWEEN 20 AND 29 AND `GEOID` IN ( SELECT `GEOID` FROM Demog WHERE `INCOME_K` > 3000 )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Customers WHERE `SEX` = 'Male' AND `age` BETWEEN 20 AND 29 AND `GEOID` IN ( SELECT `GEOID` FROM Demog WHERE `INCOME_K` > 3000 )",
        "repair_result": 1
    },
    {
        "idx": 1085,
        "db_id": "software_company",
        "question": "What percentage of elderly customers who are never married in the place with geographic ID 24?",
        "evidence": "elderly customers refer to age > 65; DIVIDE(COUNT(ID where age > 65, MARITAL_STATUS = 'never married' and GEOID = 24), COUNT(ID where GEOID = 24)) as percentage;",
        "gold": "SELECT CAST(SUM(CASE WHEN T1.MARITAL_STATUS = 'never married' THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.GEOID = 24",
        "pred": "SELECT (COUNT(CASE WHEN age > 65 AND MARITAL_STATUS = 'Never-married' THEN ID END) * 1.0 / COUNT(ID)) * 100 AS percentage FROM Customers WHERE GEOID = 24",
        "pred_result": 0,
        "repair_sql": "SELECT (COUNT(CASE WHEN age > 65 AND MARITAL_STATUS = 'Never-married' THEN ID END) * 1.0 / COUNT(ID)) * 100 AS percentage FROM Customers WHERE GEOID = 24",
        "repair_result": 0
    },
    {
        "idx": 1086,
        "db_id": "software_company",
        "question": "Among the customers with an average income per inhabitant above 3000, what percentage are in their eighties?",
        "evidence": "average income per inhabitant above 3000 refers to INCOME_K > 3000; eighties refer to age BETWEEN 80 AND 89; DIVIDE(COUNT(INCOME_K > 3000 and age BETWEEN 80 AND 89), COUNT(INCOME_K > 3000 )) as percentage;",
        "gold": "SELECT CAST(SUM(CASE WHEN T1.age BETWEEN 80 AND 89 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INCOME_K > 3000",
        "pred": "SELECT (COUNT(*) * 100.0) / ( SELECT COUNT(*) FROM Customers WHERE INCOME_K > 3000 ) AS percentage FROM Customers WHERE INCOME_K > 3000 AND age BETWEEN 80 AND 89",
        "pred_result": "no such column: INCOME_K",
        "repair_sql": "SELECT (COUNT(*) * 100.0) / ( SELECT COUNT(*) FROM Customers WHERE INCOME_K > 3000 ) AS percentage FROM Customers WHERE INCOME_K > 3000 AND age BETWEEN 80 AND 89",
        "repair_result": "no such column: INCOME_K"
    },
    {
        "idx": 1087,
        "db_id": "software_company",
        "question": "How many of the customer's reference ID that has a TRUE response?",
        "evidence": "reference ID refers to REFID;",
        "gold": "SELECT COUNT(REFID) FROM Mailings1_2 WHERE RESPONSE = 'true'",
        "pred": "SELECT COUNT(DISTINCT T1.`REFID`) FROM Customers AS T1 INNER JOIN Mailings3 AS T2 ON T1.`ID` = T2.`REFID` WHERE T2.`RESPONSE` = 'true'",
        "pred_result": "no such column: T1.REFID",
        "repair_sql": "SELECT COUNT(DISTINCT T2.`REFID`) FROM Customers AS T1 INNER JOIN Mailings3 AS T2 ON T1.`ID` = T2.`REFID` WHERE T2.`RESPONSE` = 'true'",
        "repair_result": 0
    },
    {
        "idx": 1088,
        "db_id": "software_company",
        "question": "List down the customer's reference ID with true response.",
        "evidence": "reference ID refers to REFID;",
        "gold": "SELECT REFID FROM Mailings1_2 WHERE RESPONSE = 'true'",
        "pred": "SELECT T1.`REFID` FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.`ID` = T2.`REFID` WHERE T2.`RESPONSE` = 'true'",
        "pred_result": "no such column: T1.REFID",
        "repair_sql": "SELECT T2.`REFID` FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.`ID` = T2.`REFID` WHERE T2.`RESPONSE` = 'true'",
        "repair_result": 1
    },
    {
        "idx": 1089,
        "db_id": "software_company",
        "question": "What is the total number of widowed customers with an age below 50?",
        "evidence": "widowed customers with an age below 50 refer to MARITAL_STATUS = 'Widowed' where age < 50;",
        "gold": "SELECT COUNT(ID) FROM Customers WHERE MARITAL_STATUS = 'Widowed' AND age < 50",
        "pred": "SELECT COUNT(*) FROM Customers WHERE MARITAL_STATUS = 'Widowed' AND age < 50",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Customers WHERE MARITAL_STATUS = 'Widowed' AND age < 50",
        "repair_result": 1
    },
    {
        "idx": 1090,
        "db_id": "software_company",
        "question": "List down the geographic identifier with an number of inhabitants less than 30.",
        "evidence": "geographic identifier with an number of inhabitants less than 30 refers to GEOID where INHABITANTS_K < 30;",
        "gold": "SELECT GEOID FROM Demog WHERE INHABITANTS_K < 30",
        "pred": "SELECT `GEOID` FROM Demog WHERE `INHABITANTS_K` < 30",
        "pred_result": 1,
        "repair_sql": "SELECT `GEOID` FROM Demog WHERE `INHABITANTS_K` < 30",
        "repair_result": 1
    },
    {
        "idx": 1091,
        "db_id": "software_company",
        "question": "In geographic identifier from 10 to 30, how many of them has an income below 2000?",
        "evidence": "GEOID BETWEEN 10 AND 30; INCOME_K < 2000;",
        "gold": "SELECT COUNT(GEOID) FROM Demog WHERE INCOME_K < 2000 AND GEOID >= 10 AND GEOID <= 30",
        "pred": "SELECT COUNT(*) FROM Demog WHERE GEOID BETWEEN 10 AND 30 AND INCOME_K < 2000",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM Demog WHERE GEOID BETWEEN 10 AND 30 AND INCOME_K < 2000",
        "repair_result": 1
    },
    {
        "idx": 1092,
        "db_id": "software_company",
        "question": "What is the marital status of the customer ages 62 with an level of education of 7?",
        "evidence": "customer ages 62 with an level of education of 7 refer age = 62 where EDUCATIONNUM = 7;",
        "gold": "SELECT DISTINCT MARITAL_STATUS FROM Customers WHERE EDUCATIONNUM = 7 AND age = 62",
        "pred": "SELECT T1.`MARITAL_STATUS` FROM Customers AS T1 WHERE T1.`age` = 62 AND T1.`EDUCATIONNUM` = 7",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`MARITAL_STATUS` FROM Customers AS T1 WHERE T1.`age` = 62 AND T1.`EDUCATIONNUM` = 7",
        "repair_result": 1
    },
    {
        "idx": 1093,
        "db_id": "software_company",
        "question": "List down the number of inhabitants of customers with a widowed marital status and false response .",
        "evidence": "number of inhabitants refers to INHABITANTS_K; RESPONSE = 'false';",
        "gold": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.MARITAL_STATUS = 'Widowed' AND T2.RESPONSE = 'true'",
        "pred": "SELECT T1.`INHABITANTS_K` FROM Demog AS T1 INNER JOIN Customers AS T2 ON T1.`GEOID` = T2.`ID` WHERE T2.`MARITAL_STATUS` = 'Widowed' AND T2.`RESPONSE` = 'false'",
        "pred_result": "no such column: T2.RESPONSE",
        "repair_sql": "SELECT T1.`INHABITANTS_K` FROM Demog AS T1 INNER JOIN Customers AS T2 ON T1.`GEOID` = T2.`ID` INNER JOIN mailings3 AS T3 ON T2.`ID` = T3.`REFID` WHERE T2.`MARITAL_STATUS` = 'Widowed' AND T3.`RESPONSE` = 'false'",
        "repair_result": 0
    },
    {
        "idx": 1094,
        "db_id": "software_company",
        "question": "What is the response and number of inhabitants of the oldest female customer?",
        "evidence": "number of inhabitants refers to INHABITANTS_K; oldest female customer refers to SEX = 'Female' where MAX(age);",
        "gold": "SELECT T2.RESPONSE, T3.INHABITANTS_K FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.SEX = 'Female' ORDER BY T1.age DESC LIMIT 1",
        "pred": "SELECT T3.RESPONSE FROM Customers AS T1 INNER JOIN Mailings3 AS T3 ON T1.ID = T3.REFID WHERE T1.SEX = 'Female' AND T1.age = ( SELECT MAX(age) FROM Customers WHERE SEX = 'Female' )",
        "pred_result": 0,
        "repair_sql": "SELECT T3.RESPONSE FROM Customers AS T1 INNER JOIN Mailings3 AS T3 ON T1.ID = T3.REFID WHERE T1.SEX = 'Female' AND T1.age = ( SELECT MAX(age) FROM Customers WHERE SEX = 'Female' )",
        "repair_result": 0
    },
    {
        "idx": 1095,
        "db_id": "software_company",
        "question": "Among the female customers with an level of education of 3 and below, list their income.",
        "evidence": "female customers with level of education of 3 and below refer to SEX = 'Female' where EDUCATIONNUM \u2264 3; income refers to INCOME_K;",
        "gold": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 3 AND SEX = 'Female' )",
        "pred": "SELECT T1.`INCOME_K` FROM Customers AS T1 WHERE T1.`SEX` = 'Female' AND T1.`EDUCATIONNUM` <= 3",
        "pred_result": "no such column: T1.INCOME_K",
        "repair_sql": "SELECT T1.INCOME_K FROM Customers AS T1 WHERE T1.SEX = 'Female' AND T1.EDUCATIONNUM <= 3",
        "repair_result": "no such column: T1.INCOME_K"
    },
    {
        "idx": 1096,
        "db_id": "software_company",
        "question": "List the level of education and income of customers ages from 30 to 55 with a true response.",
        "evidence": "ages from 30 to 55 refer to age BETWEEN 30 AND 55; RESPONSE = 'true'; income refers to INCOME_K; education level refers to EDUCATIONNUM;",
        "gold": "SELECT T1.EDUCATIONNUM, T3.INCOME_K FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.age >= 30 AND T1.age <= 55 AND T2.RESPONSE = 'true'",
        "pred": "SELECT T1.`EDUCATIONNUM`, T2.`INCOME_K` FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.`ID` = T2.`GEOID` INNER JOIN mailings3 AS T3 ON T1.`ID` = T3.`REFID` WHERE T1.`age` BETWEEN 30 AND 55 AND T3.`RESPONSE` = 'true'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`EDUCATIONNUM`, T2.`INCOME_K` FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.`ID` = T2.`GEOID` INNER JOIN mailings3 AS T3 ON T1.`ID` = T3.`REFID` WHERE T1.`age` BETWEEN 30 AND 55 AND T3.`RESPONSE` = 'true' GROUP BY T1.`EDUCATIONNUM`, T2.`INCOME_K`",
        "repair_result": 0
    },
    {
        "idx": 1097,
        "db_id": "software_company",
        "question": "In male customers ages from 30 to 50, how many of them has an income ranges from 2000 to 2300?",
        "evidence": "male customers ages from 30 to 50 refer to SEX = 'Male' where age BETWEEN 30 AND 50; income ranges from 2000 to 2300 refers to INCOME_K BETWEEN 2000 AND 3000;",
        "gold": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T1.age >= 30 AND T1.age <= 50 AND T2.INCOME_K >= 2000 AND T2.INCOME_K <= 2300",
        "pred": "SELECT COUNT(*) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.ID = T2.GEOID WHERE T1.SEX = 'Male' AND T1.age BETWEEN 30 AND 50 AND T2.INCOME_K BETWEEN 2000 AND 2300",
        "pred_result": 0,
        "repair_sql": "SELECT COUNT(*) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.ID = T2.GEOID WHERE T1.SEX = 'Male' AND T1.age BETWEEN 30 AND 50 AND T2.INCOME_K BETWEEN 2000 AND 2300",
        "repair_result": 0
    },
    {
        "idx": 1098,
        "db_id": "software_company",
        "question": "List the educationnum and response of customers within the age of 20 to 30 that has the highest number of inhabitants among the group.",
        "evidence": "age of 20 to 30 refers to age BETWEEN 20 AND 30; the highest number of inhabitants refers to MAX(INHABITANTS_K);",
        "gold": "SELECT T1.EDUCATIONNUM, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.age >= 20 AND T1.age <= 30 ORDER BY T3.INHABITANTS_K DESC LIMIT 1",
        "pred": "SELECT T2.`EDUCATIONNUM`, T3.`RESPONSE` FROM Demog AS T1 INNER JOIN Customers AS T2 ON T1.`GEOID` = T2.`ID` INNER JOIN mailings3 AS T3 ON T2.`ID` = T3.`REFID` WHERE T2.`age` BETWEEN 20 AND 30 AND T1.`INHABITANTS_K` = ( SELECT MAX(T4.`INHABITANTS_K`) FROM Demog AS T4 INNER JOIN Customers AS T5 ON T4.`GEOID` = T5.`ID` WHERE T5.`age` BETWEEN 20 AND 30 )",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`EDUCATIONNUM`, T3.`RESPONSE` FROM Demog AS T1 INNER JOIN Customers AS T2 ON T1.`GEOID` = T2.`ID` INNER JOIN mailings3 AS T3 ON T2.`ID` = T3.`REFID` WHERE T2.`age` BETWEEN 20 AND 30 AND T1.`INHABITANTS_K` = ( SELECT MAX(T4.`INHABITANTS_K`) FROM Demog AS T4 INNER JOIN Customers AS T5 ON T4.`GEOID` = T5.`ID` WHERE T5.`age` BETWEEN 20 AND 30 AND T4.`INHABITANTS_K` IS NOT NULL )",
        "repair_result": 0
    },
    {
        "idx": 1099,
        "db_id": "software_company",
        "question": "What is the income of female customers ages from 30 to 55 years old and has an occupation of machine-op-inspct?",
        "evidence": "female customers ages from 30 to 55 years old refer to SEX = 'Female' where age BETWEEN 30 AND 55; income refers to INCOME_K;",
        "gold": "SELECT T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.age >= 30 AND T1.age <= 55 AND T1.OCCUPATION = 'Machine-op-inspct'",
        "pred": "SELECT T1.`INCOME_K` FROM Customers AS T1 WHERE T1.`SEX` = 'Female' AND T1.`age` BETWEEN 30 AND 55 AND T1.`OCCUPATION` = 'Machine-op-inspct'",
        "pred_result": "no such column: T1.INCOME_K",
        "repair_sql": "SELECT T1.INCOME_K FROM Customers AS T1 WHERE T1.SEX = 'Female' AND T1.age BETWEEN 30 AND 55 AND T1.OCCUPATION = 'Machine-op-inspct'",
        "repair_result": "no such column: T1.INCOME_K"
    },
    {
        "idx": 1100,
        "db_id": "software_company",
        "question": "List the marital status and response of female customers with an level of education of 8 and above.",
        "evidence": "female customers with an level of education of 8 and above refer to SEX = 'Female' where EDUCATIONNUM \u2265 8;",
        "gold": "SELECT DISTINCT T1.MARITAL_STATUS, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.EDUCATIONNUM > 8 AND T1.SEX = 'Female'",
        "pred": "SELECT T1.`MARITAL_STATUS`, T2.`RESPONSE` FROM Customers AS T1 INNER JOIN Mailings3 AS T2 ON T1.`ID` = T2.`REFID` WHERE T1.`SEX` = 'Female' AND T1.`EDUCATIONNUM` >= 8",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`MARITAL_STATUS`, T2.`RESPONSE` FROM Customers AS T1 INNER JOIN Mailings3 AS T2 ON T1.`ID` = T2.`REFID` WHERE T1.`SEX` = 'Female' AND T1.`EDUCATIONNUM` >= 8",
        "repair_result": 1
    },
    {
        "idx": 1101,
        "db_id": "software_company",
        "question": "What is the age of female customers within the number of inhabitants below 30?",
        "evidence": "female customers within the number of inhabitants below 30 refer to SEX = 'Female' where INHABITANTS_K < 30;",
        "gold": "SELECT age FROM Customers WHERE GEOID IN ( SELECT GEOID FROM Demog WHERE INHABITANTS_K < 30 ) AND SEX = 'Female'",
        "pred": "SELECT `age` FROM Customers WHERE `SEX` = 'Female' AND `GEOID` IN ( SELECT `GEOID` FROM Demog WHERE `INHABITANTS_K` < 30 )",
        "pred_result": 1,
        "repair_sql": "SELECT `age` FROM Customers WHERE `SEX` = 'Female' AND `GEOID` IN ( SELECT `GEOID` FROM Demog WHERE `INHABITANTS_K` < 30 )",
        "repair_result": 1
    },
    {
        "idx": 1102,
        "db_id": "software_company",
        "question": "Among the divorced male customers, give the income and response of those who has an level of education of 6 and above.",
        "evidence": "divorced male customers refer to SEX = 'Male' where MARITAL_STATUS = 'Divorced';",
        "gold": "SELECT DISTINCT T3.INCOME_K, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.EDUCATIONNUM > 6 AND T1.SEX = 'Male' AND T1.MARITAL_STATUS = 'Divorced'",
        "pred": "SELECT T1.`INCOME_K`, T2.`RESPONSE` FROM Customers AS T1 INNER JOIN Mailings3 AS T2 ON T1.`ID` = T2.`REFID` WHERE T1.`MARITAL_STATUS` = 'Divorced' AND T1.`SEX` = 'Male' AND T1.`EDUCATIONNUM` >= 6",
        "pred_result": "no such column: T1.INCOME_K",
        "repair_sql": "SELECT T1.`INCOME_K`, T2.`RESPONSE` FROM Customers AS T1 INNER JOIN Mailings3 AS T2 ON T1.`ID` = T2.`REFID` WHERE T1.`MARITAL_STATUS` = 'Divorced' AND T1.`SEX` = 'Male' AND T1.`EDUCATIONNUM` >= 6",
        "repair_result": "no such column: T1.INCOME_K"
    },
    {
        "idx": 1103,
        "db_id": "software_company",
        "question": "What is the occupation and response of female customers within the number of inhabitants range of 20 to 25?",
        "evidence": "female customers within the number of inhabitants range of 20 to 25 refer to SEX = 'Female' where INHABITANTS_K BETWEEN 20 AND 25;",
        "gold": "SELECT DISTINCT T1.OCCUPATION, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.SEX = 'Female' AND T3.INHABITANTS_K >= 20 AND T3.INHABITANTS_K <= 25",
        "pred": "SELECT T1.`OCCUPATION`, T3.`RESPONSE` FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.`GEOID` = T2.`GEOID` INNER JOIN Mailings3 AS T3 ON T1.`ID` = T3.`REFID` WHERE T1.`SEX` = 'Female' AND T2.`INHABITANTS_K` BETWEEN 20 AND 25",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`OCCUPATION`, T3.`RESPONSE` FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.`GEOID` = T2.`GEOID` INNER JOIN Mailings3 AS T3 ON T1.`ID` = T3.`REFID` WHERE T1.`SEX` = 'Female' AND T2.`INHABITANTS_K` BETWEEN 20 AND 25",
        "repair_result": 0
    },
    {
        "idx": 1104,
        "db_id": "software_company",
        "question": "In male customers with an occupation handlers or cleaners, what is the percentage of customers with a true response?",
        "evidence": "DIVIDE(COUNT(OCCUPATION = 'Handlers-cleaners', SEX = 'Male' and RESPONSE = 'true'), COUNT(OCCUPATION = 'Handlers-cleaners' and SEX = 'Male')) as percentage;",
        "gold": "SELECT CAST(SUM(CASE WHEN T2.RESPONSE = 'true' THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.REFID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.OCCUPATION = 'Handlers-cleaners' AND T1.SEX = 'Male'",
        "pred": "SELECT (COUNT(CASE WHEN `OCCUPATION` = 'Handlers-cleaners' AND `SEX` = 'Male' AND `RESPONSE` = 'true' THEN 1 END) * 1.0) / COUNT(CASE WHEN `OCCUPATION` = 'Handlers-cleaners' AND `SEX` = 'Male' THEN 1 END) as percentage FROM Customers INNER JOIN Mailings1_2 ON Customers.`ID` = Mailings1_2.`REFID` WHERE Customers.`SEX` = 'Male' AND Customers.`OCCUPATION` IN ('Handlers-cleaners')",
        "pred_result": 0,
        "repair_sql": "SELECT (COUNT(CASE WHEN `OCCUPATION` = 'Handlers-cleaners' AND `SEX` = 'Male' AND `RESPONSE` = 'true' THEN 1 END) * 1.0) / COUNT(CASE WHEN `OCCUPATION` = 'Handlers-cleaners' AND `SEX` = 'Male' THEN 1 END) as percentage FROM Customers INNER JOIN Mailings1_2 ON Customers.`ID` = Mailings1_2.`REFID` WHERE Customers.`SEX` = 'Male' AND Customers.`OCCUPATION` IN ('Handlers-cleaners')",
        "repair_result": 0
    },
    {
        "idx": 1105,
        "db_id": "software_company",
        "question": "List the income and number of inhabitants of customers with a reference ID greater than the 50% of average of number of false response?",
        "evidence": "reference ID greater than the 50% of average of number of false response refers to REFID > DIVIDE(MULTIPLY(0.5, COUNT(RESPONSE = 'false')), COUNT(RESPONSE)); income refers to INCOME_K; number of inhabitants refer to INHABITANTS_K;",
        "gold": "SELECT T2.INCOME_K, T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID INNER JOIN Mailings1_2 AS T3 ON T1.ID = T3.REFID WHERE T3.REFID > ( SELECT 0.5 * COUNT(CASE WHEN RESPONSE = 'false' THEN 1 ELSE NULL END) / COUNT(RESPONSE) FROM Mailings1_2 )",
        "pred": "SELECT T1.`INCOME_K`, T1.`INHABITANTS_K` FROM Demog AS T1 INNER JOIN Customers AS T2 ON T1.`GEOID` = T2.`ID` WHERE T2.`REFID` > ( SELECT 0.5 * AVG(CASE WHEN T3.`RESPONSE` = 'false' THEN 1 ELSE 0 END) FROM mailings3 AS T3 )",
        "pred_result": "no such column: T2.REFID",
        "repair_sql": "SELECT T1.`INCOME_K`, T1.`INHABITANTS_K` FROM Demog AS T1 INNER JOIN Customers AS T2 ON T1.`GEOID` = T2.`ID` WHERE T2.`ID` > ( SELECT 0.5 * AVG(CASE WHEN T3.`RESPONSE` = 'false' THEN 1 ELSE 0 END) FROM mailings3 AS T3 )",
        "repair_result": 0
    },
    {
        "idx": 1106,
        "db_id": "software_company",
        "question": "What is the ratio of male and female among the age of teenager when the education is above 10?",
        "evidence": "ratio = DIVIDE(COUNT(SEX = 'Male' where age BETWEEN 13 AND 19 and EDUCATIONNUM > 10),COUNT(SEX = 'Female' where age BETWEEN 13 AND 19 and EDUCATIONNUM > 10));",
        "gold": "SELECT CAST(SUM(CASE WHEN SEX = 'Male' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN SEX = 'Female' THEN 1 ELSE 0 END) FROM Customers WHERE age BETWEEN 13 AND 19 AND EDUCATIONNUM > 10",
        "pred": "SELECT CAST(COUNT(CASE WHEN SEX = 'Male' THEN 1 END) AS REAL) / COUNT(CASE WHEN SEX = 'Female' THEN 1 END) AS ratio FROM Customers WHERE age BETWEEN 13 AND 19 AND EDUCATIONNUM > 10",
        "pred_result": 1,
        "repair_sql": "SELECT CAST(COUNT(CASE WHEN SEX = 'Male' THEN 1 END) AS REAL) / COUNT(CASE WHEN SEX = 'Female' THEN 1 END) AS ratio FROM Customers WHERE age BETWEEN 13 AND 19 AND EDUCATIONNUM > 10",
        "repair_result": 1
    },
    {
        "idx": 1107,
        "db_id": "software_company",
        "question": "What is the geographic ID and total income per year when the average income is above 3300 dollar.",
        "evidence": "total income per year refers to MULTIPLY(12, INHABITANTS_K, INCOME_K) where INCOME_K > 3300; geographic ID refers to GEOID;",
        "gold": "SELECT GEOID, INHABITANTS_K * INCOME_K * 12 FROM Demog WHERE INCOME_K > 3300",
        "pred": "SELECT T1.`GEOID`, SUM(12 * T1.`INHABITANTS_K` * T1.`INCOME_K`) AS total_income_per_year FROM Demog AS T1 GROUP BY T1.`GEOID` HAVING AVG(T1.`INCOME_K`) > 3300",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`GEOID`, SUM(12 * T1.`INHABITANTS_K` * T1.`INCOME_K`) AS total_income_per_year FROM Demog AS T1 GROUP BY T1.`GEOID` HAVING AVG(T1.`INCOME_K`) > 3300",
        "repair_result": 1
    },
    {
        "idx": 1108,
        "db_id": "software_company",
        "question": "Point out the greater one between the number of actual responding and not responding to mailing.",
        "evidence": "COUNT(REFID where RESPONSE = 'true')>or<COUNT(REFID where RESPONSE = 'false');",
        "gold": "SELECT RESPONSE FROM Mailings1_2 GROUP BY RESPONSE ORDER BY COUNT(RESPONSE) DESC LIMIT 1",
        "pred": "SELECT CASE WHEN ( SELECT COUNT(REFID) FROM mailings3 WHERE RESPONSE = 'true' ) > ( SELECT COUNT(REFID) FROM mailings3 WHERE RESPONSE = 'false' ) THEN 'Actual responses' ELSE 'Non-responses' END AS greater_response",
        "pred_result": 0,
        "repair_sql": "SELECT CASE WHEN ( SELECT COUNT(REFID) FROM mailings3 WHERE RESPONSE = 'true' ) > ( SELECT COUNT(REFID) FROM mailings3 WHERE RESPONSE = 'false' ) THEN 'Actual responses' ELSE 'Non-responses' END AS greater_response",
        "repair_result": 0
    },
    {
        "idx": 1109,
        "db_id": "software_company",
        "question": "Find out the yearly income of geographic ID when the customer is female and occupation as sales.",
        "evidence": "yearly income of geographic ID refers to GEOID where MULTIPLY(INHABITANTS_K, INCOME_K, 12); SEX = 'Female';",
        "gold": "SELECT T2.INHABITANTS_K * T2.INCOME_K * 12 FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.OCCUPATION = 'Sales'",
        "pred": "SELECT T1.`GEOID`, T1.`INHABITANTS_K` * T1.`INCOME_K` * 12 AS yearly_income FROM Demog AS T1 WHERE T1.`GEOID` IN ( SELECT T2.`GEOID` FROM Customers AS T2 WHERE T2.`SEX` = 'Female' AND T2.`OCCUPATION` = 'Sales' )",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`GEOID`, T1.`INHABITANTS_K` * T1.`INCOME_K` * 12 AS yearly_income FROM Demog AS T1 WHERE T1.`GEOID` IN ( SELECT T2.`GEOID` FROM Customers AS T2 WHERE T2.`SEX` = 'Female' AND T2.`OCCUPATION` = 'Sales' )",
        "repair_result": 0
    },
    {
        "idx": 1110,
        "db_id": "software_company",
        "question": "Among the geographic ID which has 33.658K of inhabitants, describe the education, occupation and age of female widow.",
        "evidence": "geographic ID which has 33.658K of inhabitants refers to GEOID where INHABITANTS_K = 33.658; education refers to EDUCATIONNUM; female widow refers to SEX = 'Female' where MARITAL_STATUS = 'Widowed';",
        "gold": "SELECT T1.EDUCATIONNUM, T1.OCCUPATION, T1.age FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INHABITANTS_K = 33.658 AND T1.SEX = 'Female' AND T1.MARITAL_STATUS = 'Widowed'",
        "pred": "SELECT T1.`EDUCATIONNUM`, T1.`OCCUPATION`, T1.`age` FROM Customers AS T1 WHERE T1.`GEOID` = ( SELECT `GEOID` FROM Demog WHERE `INHABITANTS_K` = 33.658 ) AND T1.`SEX` = 'Female' AND T1.`MARITAL_STATUS` = 'Widowed'",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`EDUCATIONNUM`, T1.`OCCUPATION`, T1.`age` FROM Customers AS T1 WHERE T1.`GEOID` = ( SELECT `GEOID` FROM Demog WHERE `INHABITANTS_K` = 33.658 ) AND T1.`SEX` = 'Female' AND T1.`MARITAL_STATUS` = 'Widowed'",
        "repair_result": 1
    },
    {
        "idx": 1111,
        "db_id": "software_company",
        "question": "Find the response status to customer whose geographic ID of 134.",
        "evidence": "GEOID = 134;",
        "gold": "SELECT T2.RESPONSE FROM Customers AS T1 INNER JOIN mailings3 AS T2 ON T1.ID = T2.REFID WHERE T1.GEOID = 134",
        "pred": "SELECT T1.`RESPONSE` FROM Customers AS T1 INNER JOIN mailings3 AS T2 ON T1.`GEOID` = T2.`GEOID` WHERE T1.`GEOID` = 134",
        "pred_result": "no such column: T1.RESPONSE",
        "repair_sql": "SELECT T2.`RESPONSE` FROM Customers AS T1 INNER JOIN mailings3 AS T2 ON T1.`ID` = T2.`REFID` WHERE T1.`GEOID` = 134",
        "repair_result": 1
    },
    {
        "idx": 1112,
        "db_id": "software_company",
        "question": "Describe the average income per month and yearly income of the geographic ID in which customer of ID \"209556\" and \"290135\".",
        "evidence": "the average income per month refers to INCOME_K; yearly income of geographic ID refers to GEOID where MULTIPLY(INHABITANTS_K, INCOME_K, 12);",
        "gold": "SELECT T2.INCOME_K, T2.INHABITANTS_K * T2.INCOME_K * 12 FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.ID = 209556 OR T1.ID = 290135",
        "pred": "SELECT T1.`GEOID`, SUM(T1.`INHABITANTS_K` * T1.`INCOME_K` * 12) AS yearly_income FROM Demog AS T1 INNER JOIN Customers AS T2 ON T1.`GEOID` = T2.`GEOID` WHERE T2.`ID` IN (209556, 290135) GROUP BY T1.`GEOID`",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`GEOID`, SUM(T1.`INHABITANTS_K` * T1.`INCOME_K` * 12) AS yearly_income FROM Demog AS T1 INNER JOIN Customers AS T2 ON T1.`GEOID` = T2.`GEOID` WHERE T2.`ID` IN (209556, 290135) GROUP BY T1.`GEOID`",
        "repair_result": 0
    },
    {
        "idx": 1113,
        "db_id": "software_company",
        "question": "Among the reference ID of under 10 who got response by marketing department, compare their education status.",
        "evidence": "reference ID of under 10 refers to REFID < 10; got response refers to RESPONSE = 'true'; education status refers to EDUCATIONNUM;",
        "gold": "SELECT T1.EDUCATIONNUM FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T2.REFID < 10 AND T2.RESPONSE = 'true'",
        "pred": "SELECT T2.`EDUCATIONNUM` FROM Customers AS T2 INNER JOIN mailings3 AS T1 ON T2.`ID` = T1.`REFID` WHERE T1.`RESPONSE` = 'true' AND T1.`REFID` < 10",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`EDUCATIONNUM` FROM Customers AS T2 INNER JOIN mailings3 AS T1 ON T2.`ID` = T1.`REFID` WHERE T1.`RESPONSE` = 'true' AND T1.`REFID` < 10 GROUP BY T2.`EDUCATIONNUM`",
        "repair_result": 0
    },
    {
        "idx": 1114,
        "db_id": "craftbeer",
        "question": "Which distinct state makes beer that has the least amount of bitterness?",
        "evidence": "",
        "gold": "SELECT DISTINCT T2.state, T1.ibu FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T1.ibu IS NOT NULL AND T1.ibu = ( SELECT MIN(ibu) FROM beers )",
        "pred": "SELECT DISTINCT T1.`state` FROM breweries AS T1 INNER JOIN beers AS T2 ON T1.`id` = T2.`brewery_id` WHERE T1.`state` = ( SELECT T1.`state` FROM ( SELECT T1.`state`, AVG(T2.`ibu`) AS avg_bitterness FROM breweries AS T1 INNER JOIN beers AS T2 ON T1.`id` = T2.`brewery_id` GROUP BY T1.`state` ) AS subquery ORDER BY subquery.avg_bitterness ASC LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT DISTINCT T1.`state` FROM breweries AS T1 INNER JOIN beers AS T2 ON T1.`id` = T2.`brewery_id` WHERE T1.`state` = ( SELECT T1.`state` FROM ( SELECT T1.`state`, AVG(T2.`ibu`) AS avg_bitterness FROM breweries AS T1 INNER JOIN beers AS T2 ON T1.`id` = T2.`brewery_id` GROUP BY T1.`state` ) AS subquery ORDER BY subquery.avg_bitterness ASC LIMIT 1 )",
        "repair_result": 0
    },
    {
        "idx": 1115,
        "db_id": "craftbeer",
        "question": "Where in New York can you locate the brewery that makes the bitterest beer? List both the brewery's name and the name of the city.",
        "evidence": "The more IBU, the more bitter the beer is, bitterest means highest IBU.",
        "gold": "SELECT T2.name, T2.city FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T2.state = 'NY' ORDER BY T1.ibu DESC LIMIT 1",
        "pred": "SELECT T1.`name`, T1.`city` FROM breweries AS T1 INNER JOIN beers AS T2 ON T1.`id` = T2.`brewery_id` WHERE T1.`state` = 'NY' ORDER BY T2.`ibu` DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`name`, T1.`city` FROM breweries AS T1 INNER JOIN beers AS T2 ON T1.`id` = T2.`brewery_id` WHERE T1.`state` = 'NY' ORDER BY T2.`ibu` DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 1116,
        "db_id": "craftbeer",
        "question": "What is the average alcohol content per 12-ounce beer bottle produced by Boston Beer Company?",
        "evidence": "",
        "gold": "SELECT AVG(T1.abv) FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T2.name = 'Boston Beer Company' AND T1.ounces = 12",
        "pred": "SELECT AVG(`abv`) FROM beers WHERE `brewery_id` = ( SELECT `id` FROM breweries WHERE `name` = 'Boston Beer Company' ) AND `ounces` = 12.0",
        "pred_result": 1,
        "repair_sql": "SELECT AVG(`abv`) FROM beers WHERE `brewery_id` = ( SELECT `id` FROM breweries WHERE `name` = 'Boston Beer Company' ) AND `ounces` = 12.0",
        "repair_result": 1
    },
    {
        "idx": 1117,
        "db_id": "craftbeer",
        "question": "Of all the beer styles produced by Stevens Point Brewery, how many percent do they allot for American Adjunct Lager?",
        "evidence": "Percent allotted = count(American Adjunct Lager beer styles) / count(styles) * 100%",
        "gold": "SELECT CAST(SUM(IIF(T1.style = 'American Adjunct Lager', 1, 0)) AS REAL) * 100 / COUNT(T1.brewery_id) FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T2.name = 'Stevens Point Brewery'",
        "pred": "SELECT (COUNT(*) * 100.0) / ( SELECT COUNT(*) FROM beers WHERE `brewery_id` = ( SELECT `id` FROM breweries WHERE `name` = 'Stevens Point Brewery' ) ) FROM beers WHERE `brewery_id` = ( SELECT `id` FROM breweries WHERE `name` = 'Stevens Point Brewery' ) AND `style` = 'American Adjunct Lager'",
        "pred_result": 1,
        "repair_sql": "SELECT (COUNT(*) * 100.0) / ( SELECT COUNT(*) FROM beers WHERE `brewery_id` = ( SELECT `id` FROM breweries WHERE `name` = 'Stevens Point Brewery' ) ) FROM beers WHERE `brewery_id` = ( SELECT `id` FROM breweries WHERE `name` = 'Stevens Point Brewery' ) AND `style` = 'American Adjunct Lager'",
        "repair_result": 1
    },
    {
        "idx": 1118,
        "db_id": "craftbeer",
        "question": "Which city and state produces the most and least bitter beer, and what is the difference in bitterness between the two? List also the names of the beer.",
        "evidence": "The more IBU, the more bitter the beer is, most bitter means highest IBU; The less IBU, the less bitter the beer is, least bitter means lowest IBU",
        "gold": "SELECT T1.state, T1.city, T2.name, T2.ibu FROM breweries AS T1 INNER JOIN beers AS T2 ON T1.id = T2.brewery_id GROUP BY T1.state, T1.city, T2.name, T2.ibu HAVING MAX(ibu) AND MIN(ibu) LIMIT 2",
        "pred": "SELECT MAX(`ibu`) - MIN(`ibu`) AS difference_in_bitterness FROM beers",
        "pred_result": 0,
        "repair_sql": "SELECT MAX(`ibu`) - MIN(`ibu`) AS difference_in_bitterness FROM beers",
        "repair_result": 0
    },
    {
        "idx": 1119,
        "db_id": "craftbeer",
        "question": "When compared to the total number of breweries in the US producing American Blonde Ale, how many in the state of Wisconsin produces American Blonde Ale? Indicate your answer in percentage (%).",
        "evidence": "Percentage of the state of Wisconsin produces American Blonde Ale could be computed by count(breweries in Wisconsin producing American Blonde Ale) / count(all breweries)",
        "gold": "SELECT CAST(SUM(IIF(T2.state = 'WI', 1, 0)) AS REAL) * 100 / COUNT(T1.id) FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T1.style = 'American Blonde Ale'",
        "pred": "SELECT (COUNT(DISTINCT T2.`id`) * 100.0) / ( SELECT COUNT(DISTINCT T1.`brewery_id`) FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.`brewery_id` = T2.`id` WHERE T1.`style` = 'American Blonde Ale' ) AS percentage FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.`brewery_id` = T2.`id` WHERE T1.`style` = 'American Blonde Ale' AND T2.`state` = 'WI'",
        "pred_result": 0,
        "repair_sql": "SELECT (COUNT(DISTINCT T2.`id`) * 100.0) / ( SELECT COUNT(DISTINCT T1.`brewery_id`) FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.`brewery_id` = T2.`id` WHERE T1.`style` = 'American Blonde Ale' ) AS percentage FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.`brewery_id` = T2.`id` WHERE T1.`style` = 'American Blonde Ale' AND T2.`state` = 'WI'",
        "repair_result": 0
    },
    {
        "idx": 1120,
        "db_id": "human_resources",
        "question": "Which employee has the highest salary? Please give his or her full name.",
        "evidence": "the highest salary refers to MAX(salary); full name = firstname, lastname",
        "gold": "SELECT firstname, lastname FROM employee ORDER BY salary DESC LIMIT 1",
        "pred": "SELECT T1.`firstname`, T1.`lastname` FROM employee AS T1 INNER JOIN ( SELECT MAX(`salary`) AS max_salary FROM employee ) AS T2 ON T1.`salary` = T2.max_salary",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`firstname`, T1.`lastname` FROM employee AS T1 INNER JOIN ( SELECT MAX(`salary`) AS max_salary FROM employee ) AS T2 ON T1.`salary` = T2.max_salary",
        "repair_result": 1
    },
    {
        "idx": 1121,
        "db_id": "human_resources",
        "question": "How many emplyees have a good job performance?",
        "evidence": "good job performance refers to performance = 'Good'",
        "gold": "SELECT COUNT(*) FROM employee WHERE performance = 'Good'",
        "pred": "SELECT COUNT(*) FROM employee WHERE `performance` = 'Good'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM employee WHERE `performance` = 'Good'",
        "repair_result": 1
    },
    {
        "idx": 1122,
        "db_id": "human_resources",
        "question": "Please list the social security numbers of the male employees with a salary of over $70,000 a year.",
        "evidence": "social security numbers refers to ssn; male employees refers to gender = 'M'; salary of over $70,000 a year refers to salary > '70000'",
        "gold": "SELECT ssn FROM employee WHERE gender = 'M' AND CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) > 70000",
        "pred": "SELECT `ssn` FROM employee WHERE `gender` = 'M' AND CAST(REPLACE(`salary`, 'US$', '') AS REAL) > 70000",
        "pred_result": 0,
        "repair_sql": "SELECT `ssn` FROM employee JOIN position ON employee.positionID = position.positionID WHERE `gender` = 'M' AND CAST(REPLACE(`salary`, 'US$', '') AS REAL) > 70000",
        "repair_result": 0
    },
    {
        "idx": 1123,
        "db_id": "human_resources",
        "question": "What is the required education for the position of regional manager?",
        "evidence": "required education refers to educationrequired; position of regional manager refers to\u00a0 positiontitle = 'Regional Manager'",
        "gold": "SELECT educationrequired FROM position WHERE positiontitle = 'Regional Manager'",
        "pred": "SELECT `educationrequired` FROM position WHERE `positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Regional Manager' )",
        "pred_result": 1,
        "repair_sql": "SELECT `educationrequired` FROM position WHERE `positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Regional Manager' )",
        "repair_result": 1
    },
    {
        "idx": 1124,
        "db_id": "human_resources",
        "question": "Which position has a lower minimum salary, Account Representative or Trainee?",
        "evidence": "position of Account Representative refers to positiontitle = 'Account Representative'; position of Trainee refers to positiontitle = 'Trainee'; lower minimum salary refers to MIN(minsalary)",
        "gold": "SELECT positiontitle FROM position WHERE positiontitle = 'Account Representative' OR positiontitle = 'Trainee' ORDER BY minsalary ASC LIMIT 1",
        "pred": "SELECT CASE WHEN ( SELECT MIN(CAST(T4.`minsalary` AS REAL)) FROM employee AS T3 INNER JOIN position AS T4 ON T3.`positionID` = T4.`positionID` WHERE T4.`positiontitle` = 'Account Representative' ) < ( SELECT MIN(CAST(T6.`minsalary` AS REAL)) FROM employee AS T5 INNER JOIN position AS T6 ON T5.`positionID` = T6.`positionID` WHERE T6.`positiontitle` = 'Trainee' ) THEN 'Account Representative' ELSE 'Trainee' END AS lower_minimum_salary_position",
        "pred_result": 1,
        "repair_sql": "SELECT CASE WHEN ( SELECT MIN(CAST(T4.`minsalary` AS REAL)) FROM employee AS T3 INNER JOIN position AS T4 ON T3.`positionID` = T4.`positionID` WHERE T4.`positiontitle` = 'Account Representative' ) < ( SELECT MIN(CAST(T6.`minsalary` AS REAL)) FROM employee AS T5 INNER JOIN position AS T6 ON T5.`positionID` = T6.`positionID` WHERE T6.`positiontitle` = 'Trainee' ) THEN 'Account Representative' ELSE 'Trainee' END AS lower_minimum_salary_position",
        "repair_result": 1
    },
    {
        "idx": 1125,
        "db_id": "human_resources",
        "question": "In which city's office does Sandy Adams work at?",
        "evidence": "Sandy Adams is the fullname of an employee; full name = firstname, lastname; city refers to locationcity",
        "gold": "SELECT T2.locationcity FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID WHERE T1.lastname = 'Adams' AND T1.firstname = 'Sandy'",
        "pred": "SELECT `locationcity` FROM location WHERE `locationID` = ( SELECT `locationID` FROM employee WHERE `firstname` = 'Sandy' AND `lastname` = 'Adams' )",
        "pred_result": 1,
        "repair_sql": "SELECT `locationcity` FROM location WHERE `locationID` = ( SELECT `locationID` FROM employee WHERE `firstname` = 'Sandy' AND `lastname` = 'Adams' )",
        "repair_result": 1
    },
    {
        "idx": 1126,
        "db_id": "human_resources",
        "question": "Among the employees working at the office in New York, how many of them have a good job performance?",
        "evidence": "Sandy Adams is the fullname of an employee; full name = firstname, lastname; New York refers to state = 'NY'; good job performance refers to performance = 'Good';",
        "gold": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID WHERE T2.state = 'NY' AND T1.performance = 'Good'",
        "pred": "SELECT COUNT(*) FROM employee WHERE `locationID` = ( SELECT `locationID` FROM location WHERE `state` = 'NY' ) AND `performance` = 'Good'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM employee WHERE `locationID` = ( SELECT `locationID` FROM location WHERE `state` = 'NY' ) AND `performance` = 'Good'",
        "repair_result": 1
    },
    {
        "idx": 1127,
        "db_id": "human_resources",
        "question": "What is the office phone number of the location at which Sandy Adams works?",
        "evidence": "Sandy Adams is the fullname of an employee; full name = firstname, lastname;",
        "gold": "SELECT T2.officephone FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID WHERE T1.lastname = 'Adams' AND T1.firstname = 'Sandy'",
        "pred": "SELECT `officephone` FROM location WHERE `locationID` = ( SELECT `locationID` FROM employee WHERE `ssn` = ( SELECT `ssn` FROM employee WHERE `firstname` = 'Sandy' AND `lastname` = 'Adams' ) )",
        "pred_result": 1,
        "repair_sql": "SELECT `officephone` FROM location WHERE `locationID` = ( SELECT `locationID` FROM employee WHERE `ssn` = ( SELECT `ssn` FROM employee WHERE `firstname` = 'Sandy' AND `lastname` = 'Adams' ) )",
        "repair_result": 1
    },
    {
        "idx": 1128,
        "db_id": "human_resources",
        "question": "How many male employees work at the address 450 Peachtree Rd?",
        "evidence": "male employees refers to gender = 'M'",
        "gold": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID WHERE T2.address = '450 Peachtree Rd' AND T1.gender = 'M'",
        "pred": "SELECT COUNT(*) FROM employee WHERE `locationID` = ( SELECT `locationID` FROM location WHERE `address` = '450 Peachtree Rd' ) AND `gender` = 'M'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM employee WHERE `locationID` = ( SELECT `locationID` FROM location WHERE `address` = '450 Peachtree Rd' ) AND `gender` = 'M'",
        "repair_result": 1
    },
    {
        "idx": 1129,
        "db_id": "human_resources",
        "question": "How many employees work as an Account Representative?",
        "evidence": "work as an Account Representative refers to positiontitle = 'Account Representative'",
        "gold": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Account Representative'",
        "pred": "SELECT COUNT(*) FROM employee WHERE `positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Account Representative' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM employee WHERE `positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Account Representative' )",
        "repair_result": 1
    },
    {
        "idx": 1130,
        "db_id": "human_resources",
        "question": "How much higher is James Johnson's salary from the minimum salary of his title?",
        "evidence": "James Johnson is the fullname of an employee; full name = firstname, lastname; minimum salary refers to minsalary; calculation = SUBTRACT(salary, minsalary)",
        "gold": "SELECT CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) - CAST(REPLACE(SUBSTR(T2.minsalary, 4), ',', '') AS REAL) AS diff FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T1.lastname = 'Johnson' AND T1.firstname = 'James'",
        "pred": "SELECT (T4.`salary` - T3.`minsalary`) AS salary_difference FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` INNER JOIN location AS T3 ON T1.`locationID` = T3.`locationID` WHERE T1.`firstname` = 'James' AND T1.`lastname` = 'Johnson'",
        "pred_result": "no such column: T4.salary",
        "repair_sql": "SELECT (T1.`salary` - T2.`minsalary`) AS salary_difference FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T1.`firstname` = 'James' AND T1.`lastname` = 'Johnson'",
        "repair_result": 0
    },
    {
        "idx": 1131,
        "db_id": "human_resources",
        "question": "Among the employees who are Trainees, how many of them work in New York?",
        "evidence": "Trainees is a position title; California refers to state = 'NY'",
        "gold": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID INNER JOIN position AS T3 ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Trainee' AND T2.state = 'NY'",
        "pred": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` INNER JOIN location AS T3 ON T1.`locationID` = T3.`locationID` WHERE T2.`positiontitle` = 'Trainee' AND T3.`state` = 'NY'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` INNER JOIN location AS T3 ON T1.`locationID` = T3.`locationID` WHERE T2.`positiontitle` = 'Trainee' AND T3.`state` = 'NY'",
        "repair_result": 1
    },
    {
        "idx": 1132,
        "db_id": "human_resources",
        "question": "Please list the full names of the employees who are working as a Trainee.",
        "evidence": "full name = firstname, lastname; trainees is a position title",
        "gold": "SELECT T1.firstname, T1.lastname FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee'",
        "pred": "SELECT `firstname` || ' ' || `lastname` AS full_name FROM employee WHERE `positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Trainee' )",
        "pred_result": 0,
        "repair_sql": "SELECT `firstname` || ' ' || `lastname` AS full_name FROM employee WHERE `positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Trainee' )",
        "repair_result": 0
    },
    {
        "idx": 1133,
        "db_id": "human_resources",
        "question": "Which employee's job position requires a higher education level, Jose Rodriguez or Sandy Adams?",
        "evidence": "Jose Rodriguez AND Sandy Adams are the fullname of employee; full name = firstname, lastname; higher education level refers to MAX(educationrequired)",
        "gold": "SELECT T1.firstname, T1.lastname FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE (T1.lastname = 'Adams' AND T1.firstname = 'Sandy') OR (T1.lastname = 'Rodriguez' AND T1.firstname = 'Jose') ORDER BY T2.educationrequired DESC LIMIT 1",
        "pred": "SELECT CASE WHEN ( SELECT MAX(T2.`educationrequired`) FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T1.`firstname` = 'Jose' AND T1.`lastname` = 'Rodriguez' ) > ( SELECT MAX(T4.`educationrequired`) FROM employee AS T3 INNER JOIN position AS T4 ON T3.`positionID` = T4.`positionID` WHERE T3.`firstname` = 'Sandy' AND T3.`lastname` = 'Adams' ) THEN 'Jose Rodriguez' ELSE 'Sandy Adams' END AS higher_education_level_employee",
        "pred_result": 0,
        "repair_sql": "SELECT CASE WHEN ( SELECT MAX(T2.`educationrequired`) FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T1.`firstname` = 'Jose' AND T1.`lastname` = 'Rodriguez' ) > ( SELECT MAX(T4.`educationrequired`) FROM employee AS T3 INNER JOIN position AS T4 ON T3.`positionID` = T4.`positionID` WHERE T3.`firstname` = 'Sandy' AND T3.`lastname` = 'Adams' ) THEN 'Jose Rodriguez' ELSE 'Sandy Adams' END AS higher_education_level_employee",
        "repair_result": 0
    },
    {
        "idx": 1134,
        "db_id": "human_resources",
        "question": "Please list the zip codes of the offices where all the male employees with a good job performance work at.",
        "evidence": "male employees refers to gender = 'M'; good job performance refers to performance = 'Good'",
        "gold": "SELECT T2.zipcode FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID WHERE T1.gender = 'M' AND T1.performance = 'Good'",
        "pred": "SELECT T3.`zipcode` FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` INNER JOIN location AS T3 ON T1.`locationID` = T3.`locationID` WHERE T1.`gender` = 'M' AND T1.`performance` = 'Good'",
        "pred_result": 1,
        "repair_sql": "SELECT T3.`zipcode` FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` INNER JOIN location AS T3 ON T1.`locationID` = T3.`locationID` WHERE T1.`gender` = 'M' AND T1.`performance` = 'Good'",
        "repair_result": 1
    },
    {
        "idx": 1135,
        "db_id": "human_resources",
        "question": "Please list the social security numbers of all the employees who work in California.",
        "evidence": "social security numbers refers to ssn; California refers to state = 'CA'",
        "gold": "SELECT T1.ssn FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID WHERE T2.state = 'CA'",
        "pred": "SELECT `ssn` FROM employee WHERE `locationID` IN ( SELECT `locationID` FROM location WHERE `state` = 'CA' )",
        "pred_result": 1,
        "repair_sql": "SELECT e.`ssn` FROM employee e JOIN location l ON e.`locationID` = l.`locationID` WHERE l.`state` = 'CA'",
        "repair_result": 1
    },
    {
        "idx": 1136,
        "db_id": "human_resources",
        "question": "Among the employees who work as a Trainee, how many of them have a salary of over &20,000 a year?",
        "evidence": "Trainee is a position title; salary of over 20,000 refers to salary > '20000'",
        "gold": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) > 20000 AND T2.positiontitle = 'Trainee'",
        "pred": "SELECT COUNT(*) FROM employee WHERE `positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Trainee' ) AND CAST(REPLACE(REPLACE(`salary`, 'US$', ''), ',', '') AS REAL) > 20000",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM employee WHERE `positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Trainee' ) AND CAST(REPLACE(REPLACE(`salary`, 'US$', ''), ',', '') AS REAL) > 20000",
        "repair_result": 1
    },
    {
        "idx": 1137,
        "db_id": "human_resources",
        "question": "What is the average salary of the employees who work as a Trainee?",
        "evidence": "average = DIVIDE( SUM(salary), COUNT(positiontitle) where positiontitle = 'Trainee'; Trainee is a position title",
        "gold": "SELECT AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) AS avg FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee'",
        "pred": "SELECT AVG(CAST(T3.`salary` AS REAL)) FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T2.`positiontitle` = 'Trainee'",
        "pred_result": "no such column: T3.salary",
        "repair_sql": "SELECT AVG(CAST(T1.`salary` AS REAL)) FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T2.`positiontitle` = 'Trainee'",
        "repair_result": 0
    },
    {
        "idx": 1138,
        "db_id": "human_resources",
        "question": "By what percentage is the average salary of Trainees higher than the minimum salary of this postion?",
        "evidence": "AVG(salary); Trainee is a position title; minimum salary refers to minsalary; calculation = DIVIDE(SUBTRACT(AVG(salary), minsalary), minsalary) * 100",
        "gold": "SELECT 100 * (AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) - CAST(REPLACE(SUBSTR(T2.minsalary, 4), ',', '') AS REAL)) / CAST(REPLACE(SUBSTR(T2.minsalary, 4), ',', '') AS REAL) AS per FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee'",
        "pred": "SELECT ((AVG(CAST(T3.`salary` AS REAL)) - CAST(T2.`minsalary` AS REAL)) / CAST(T2.`minsalary` AS REAL)) * 100 FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` INNER JOIN location AS T3 ON T1.`locationID` = T3.`locationID` WHERE T2.`positiontitle` = 'Trainee'",
        "pred_result": "no such column: T3.salary",
        "repair_sql": "SELECT ((AVG(CAST(T1.`salary` AS REAL)) - CAST(T2.`minsalary` AS REAL)) / CAST(T2.`minsalary` AS REAL)) * 100 FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T2.`positiontitle` = 'Trainee'",
        "repair_result": 0
    },
    {
        "idx": 1139,
        "db_id": "human_resources",
        "question": "Give the number of female employees.",
        "evidence": "number of female employees means COUNT(gender = 'F')",
        "gold": "SELECT COUNT(*) FROM employee WHERE gender = 'F'",
        "pred": "SELECT COUNT(*) FROM employee WHERE `gender` = 'F'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM employee WHERE `gender` = 'F'",
        "repair_result": 1
    },
    {
        "idx": 1140,
        "db_id": "human_resources",
        "question": "State the name of the city where Jose Rodriguez works.",
        "evidence": "Jose Rodriguez is the fullname of an employee; full name = firstname, lastname; name of city refers to locationcity",
        "gold": "SELECT T2.locationcity FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID WHERE T1.firstname = 'Jose' AND T1.lastname = 'Rodriguez'",
        "pred": "SELECT `locationcity` FROM location WHERE `locationID` = ( SELECT `locationID` FROM employee WHERE `firstname` = 'Jose' AND `lastname` = 'Rodriguez' )",
        "pred_result": 1,
        "repair_sql": "SELECT `locationcity` FROM location WHERE `locationID` = ( SELECT `locationID` FROM employee WHERE `firstname` = 'Jose' AND `lastname` = 'Rodriguez' )",
        "repair_result": 1
    },
    {
        "idx": 1141,
        "db_id": "human_resources",
        "question": "In which state does Emily Wood work?",
        "evidence": "Emily Wood is the full name of an employee; full name = firstname, lastname;",
        "gold": "SELECT T2.state FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID WHERE T1.firstname = 'Emily' AND T1.lastname = 'Wood'",
        "pred": "SELECT `state` FROM location WHERE `locationID` = ( SELECT `locationID` FROM employee WHERE `ssn` = ( SELECT `ssn` FROM employee WHERE `firstname` = 'Emily' AND `lastname` = 'Wood' ) )",
        "pred_result": 1,
        "repair_sql": "SELECT `state` FROM location WHERE `locationID` = ( SELECT `locationID` FROM employee WHERE `ssn` = ( SELECT `ssn` FROM employee WHERE `firstname` = 'Emily' AND `lastname` = 'Wood' ) )",
        "repair_result": 1
    },
    {
        "idx": 1142,
        "db_id": "human_resources",
        "question": "What is the education required for David Whitehead to reach his current position?",
        "evidence": "David Whitehead is the full name of an employee; full name = firstname, lastname",
        "gold": "SELECT T2.educationrequired FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T1.firstname = 'David' AND T1.lastname = 'Whitehead' AND T1.gender = 'M'",
        "pred": "SELECT `educationrequired` FROM position WHERE `positionID` = ( SELECT `positionID` FROM employee WHERE `firstname` = 'David' AND `lastname` = 'Whitehead' )",
        "pred_result": 1,
        "repair_sql": "SELECT `educationrequired` FROM position WHERE `positionID` = ( SELECT `positionID` FROM employee WHERE `firstname` = 'David' AND `lastname` = 'Whitehead' )",
        "repair_result": 1
    },
    {
        "idx": 1143,
        "db_id": "human_resources",
        "question": "How many employees are there in the \"Miami\" office?",
        "evidence": "Miami office refers to locationcity = 'Miami'",
        "gold": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID WHERE T2.locationcity = 'Miami'",
        "pred": "SELECT COUNT(*) FROM employee WHERE `locationID` = ( SELECT `locationID` FROM location WHERE `locationcity` = 'Miami' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM employee WHERE `locationID` = ( SELECT `locationID` FROM location WHERE `locationcity` = 'Miami' )",
        "repair_result": 1
    },
    {
        "idx": 1144,
        "db_id": "human_resources",
        "question": "Who is the highest paid employee in \"Boston\"? Give the full name.",
        "evidence": "Boston refers to locationcity = 'Boston'; the highest paid employee refers to MAX(salary); full name = firstname, lastname",
        "gold": "SELECT T1.firstname, T1.lastname FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID WHERE T2.locationcity = 'Boston' ORDER BY T1.salary DESC LIMIT 1",
        "pred": "SELECT T1.`firstname`, T1.`lastname` FROM employee AS T1 INNER JOIN location AS T2 ON T1.`locationID` = T2.`locationID` WHERE T2.`locationcity` = 'Boston' ORDER BY CAST(REPLACE(REPLACE(T1.`salary`, 'US$', ''), ',', '') AS REAL) DESC LIMIT 1",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`firstname`, T1.`lastname` FROM employee AS T1 INNER JOIN location AS T2 ON T1.`locationID` = T2.`locationID` WHERE T2.`locationcity` = 'Boston' ORDER BY CAST(REPLACE(REPLACE(T1.`salary`, 'US$', ''), ',', '') AS REAL) DESC LIMIT 1",
        "repair_result": 0
    },
    {
        "idx": 1145,
        "db_id": "human_resources",
        "question": "Who is the employee in \u201cNew York City\u201d with a good performance? Give the social security number of the employee.",
        "evidence": "New York City refers to locationcity = 'New York City'; good performance refers to performance = 'Good'; social security number refers to ssn",
        "gold": "SELECT T1.firstname, T1.lastname, T1.ssn FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID WHERE T2.locationcity = 'New York City' AND T1.performance = 'Good'",
        "pred": "SELECT `firstname`, `lastname` FROM employee WHERE `locationID` = ( SELECT `locationID` FROM location WHERE `locationcity` = 'New York City' ) AND `performance` = 'Good'",
        "pred_result": 0,
        "repair_sql": "SELECT `firstname`, `lastname` FROM employee WHERE `locationID` = ( SELECT `locationID` FROM location WHERE `locationcity` = 'New York City' ) AND `performance` = 'Good'",
        "repair_result": 0
    },
    {
        "idx": 1146,
        "db_id": "human_resources",
        "question": "How many \"account representatives\" are there in Chicago with a good performance?",
        "evidence": "account representatives is a position title; Chicago refers to locationcity = 'Chicago'; good performance refers to performance = 'Good'",
        "gold": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID INNER JOIN position AS T3 ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Account Representative' AND T2.locationcity = 'Chicago' AND T1.performance = 'Good'",
        "pred": "SELECT COUNT(*) FROM employee WHERE `positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Account Representative' ) AND `locationID` = ( SELECT `locationID` FROM location WHERE `locationcity` = 'Chicago' ) AND `performance` = 'Good'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM employee WHERE `positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Account Representative' ) AND `locationID` = ( SELECT `locationID` FROM location WHERE `locationcity` = 'Chicago' ) AND `performance` = 'Good'",
        "repair_result": 1
    },
    {
        "idx": 1147,
        "db_id": "human_resources",
        "question": "What is Kenneth Charles's position title?",
        "evidence": "Kenneth Charles is the full name of an employee; full name = firstname, lastname",
        "gold": "SELECT T2.positiontitle FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T1.firstname = 'Kenneth' AND T1.lastname = 'Charles'",
        "pred": "SELECT T2.`positiontitle` FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T1.`ssn` = ( SELECT `ssn` FROM employee WHERE `firstname` = 'Kenneth' AND `lastname` = 'Charles' )",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`positiontitle` FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T1.`ssn` = ( SELECT `ssn` FROM employee WHERE `firstname` = 'Kenneth' AND `lastname` = 'Charles' )",
        "repair_result": 1
    },
    {
        "idx": 1148,
        "db_id": "human_resources",
        "question": "Give the full address of the office of the highest paid manager.",
        "evidence": "the highest paid refers to MAX(salary); manager is a position title",
        "gold": "SELECT T2.address FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID INNER JOIN position AS T3 ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Manager' ORDER BY T1.salary DESC LIMIT 1",
        "pred": "SELECT `address`, `locationcity`, `state`, `zipcode` FROM location WHERE `locationID` = ( SELECT `locationID` FROM employee WHERE `positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Manager' ) ORDER BY CAST(REPLACE(REPLACE(`salary`, 'US$', ''), ',', '') AS REAL) DESC LIMIT 1 )",
        "pred_result": 0,
        "repair_sql": "SELECT `address`, `locationcity`, `state`, `zipcode` FROM location WHERE `locationID` = ( SELECT `locationID` FROM employee WHERE `positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Manager' ) ORDER BY CAST(REPLACE(REPLACE(`salary`, 'US$', ''), ',', '') AS REAL) DESC LIMIT 1 )",
        "repair_result": 0
    },
    {
        "idx": 1149,
        "db_id": "human_resources",
        "question": "What is the max salary for 'Tracy Coulter' if he/she stays on his/her position?",
        "evidence": "Tracy Coulter is the full name of an employee; full name = firstname, lastname",
        "gold": "SELECT T2.maxsalary FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T1.firstname = 'Tracy' AND T1.lastname = 'Coulter'",
        "pred": "SELECT MAX(`maxsalary`) FROM position WHERE `positionID` = ( SELECT `positionID` FROM employee WHERE `firstname` || ' ' || `lastname` = 'Tracy Coulter' )",
        "pred_result": 1,
        "repair_sql": "SELECT MAX(`maxsalary`) FROM position WHERE `positionID` = ( SELECT `positionID` FROM employee WHERE `firstname` || ' ' || `lastname` = 'Tracy Coulter' )",
        "repair_result": 1
    },
    {
        "idx": 1150,
        "db_id": "human_resources",
        "question": "If Jose Rodriguez tried his best, how many percentage can his salary raise without changing his position?",
        "evidence": "Jose Rodriguez is the full name of an employee; full name = firstname, lastname; calculation = DIVIDE(SUBTRACT(maxsalary, salary), salary) * 100",
        "gold": "SELECT 100 * (CAST(REPLACE(SUBSTR(T2.maxsalary, 4), ',', '') AS REAL) - CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) / CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) AS per FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T1.firstname = 'Jose' AND T1.lastname = 'Rodriguez'",
        "pred": "SELECT ((CAST(SUBSTR(T2.`maxsalary`, 4) AS REAL) - CAST(SUBSTR(T1.`salary`, 4) AS REAL)) / CAST(SUBSTR(T1.`salary`, 4) AS REAL)) * 100 AS raise_percentage FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T1.`firstname` = 'Jose' AND T1.`lastname` = 'Rodriguez'",
        "pred_result": 0,
        "repair_sql": "SELECT ((CAST(SUBSTR(T2.`maxsalary`, 4) AS REAL) - CAST(SUBSTR(T1.`salary`, 4) AS REAL)) / CAST(SUBSTR(T1.`salary`, 4) AS REAL)) * 100 AS raise_percentage FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T1.`firstname` = 'Jose' AND T1.`lastname` = 'Rodriguez'",
        "repair_result": 0
    },
    {
        "idx": 1151,
        "db_id": "human_resources",
        "question": "How many employees whose performance is poor have a salary of over $50,000 per year?",
        "evidence": "performance is poor refers to performance = 'Poor'; salary of over $50,000 refers to salary > '50000'",
        "gold": "SELECT COUNT(*) FROM employee WHERE performance = 'Poor' AND CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) > 50000",
        "pred": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T1.`performance` = 'Poor' AND CAST(REPLACE(REPLACE(T1.`salary`, 'US$', ''), ',', '') AS REAL) > 50000",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T1.`performance` = 'Poor' AND CAST(REPLACE(REPLACE(T1.`salary`, 'US$', ''), ',', '') AS REAL) > 50000",
        "repair_result": 1
    },
    {
        "idx": 1152,
        "db_id": "human_resources",
        "question": "Who is the employee with the highest salary? Specify his/her full name.",
        "evidence": "the highest salary refers to MAX(salary); full name = firstname, lastname",
        "gold": "SELECT firstname, lastname FROM employee WHERE CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) = ( SELECT MAX(CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL)) FROM employee )",
        "pred": "SELECT `firstname`, `lastname` FROM employee WHERE `salary` = ( SELECT MAX(`salary`) FROM employee )",
        "pred_result": 0,
        "repair_sql": "SELECT `firstname`, `lastname` FROM employee WHERE `salary` = ( SELECT MAX(`salary`) FROM employee )",
        "repair_result": 0
    },
    {
        "idx": 1153,
        "db_id": "human_resources",
        "question": "How many positions have a maximum salary of no more than US$1000,000?",
        "evidence": "maximum salary of no more than US$1000,000 refers to maxsalary < '100000';",
        "gold": "SELECT COUNT(*) FROM position WHERE CAST(REPLACE(SUBSTR(maxsalary, 4), ',', '') AS REAL) < 100000",
        "pred": "SELECT COUNT(*) FROM position WHERE CAST(REPLACE(REPLACE(maxsalary, 'US$', ''), ',', '') AS REAL) < 100000",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM position WHERE CAST(REPLACE(REPLACE(maxsalary, 'US$', ''), ',', '') AS REAL) < 100000",
        "repair_result": 1
    },
    {
        "idx": 1154,
        "db_id": "human_resources",
        "question": "How much is the salary of the first ever employee that was hired?",
        "evidence": "first-ever employee that was hired refers to MIN(hiredate)",
        "gold": "SELECT salary FROM employee ORDER BY hiredate ASC LIMIT 1",
        "pred": "SELECT `salary` FROM employee WHERE `hiredate` = ( SELECT MIN(`hiredate`) FROM employee )",
        "pred_result": 1,
        "repair_sql": "SELECT `salary` FROM employee WHERE `hiredate` = ( SELECT MIN(`hiredate`) FROM employee )",
        "repair_result": 1
    },
    {
        "idx": 1155,
        "db_id": "human_resources",
        "question": "How much is the minimum salary given to the position with the most complex work?",
        "evidence": "most complex work refers to MAX(educationrequired); minimum salary refers to minsalary",
        "gold": "SELECT minsalary FROM position ORDER BY educationrequired DESC LIMIT 1",
        "pred": "SELECT `minsalary` FROM position WHERE `positionID` = ( SELECT `positionID` FROM position WHERE `educationrequired` = ( SELECT MAX(`educationrequired`) FROM position ) )",
        "pred_result": 1,
        "repair_sql": "SELECT `minsalary` FROM position WHERE `positionID` = ( SELECT `positionID` FROM position WHERE `educationrequired` = ( SELECT MAX(`educationrequired`) FROM position ) )",
        "repair_result": 1
    },
    {
        "idx": 1156,
        "db_id": "human_resources",
        "question": "What is the full office location address where most of the employees work at?",
        "evidence": "full office location address = address, locationcity, state, zipcode; location where most employees work at refers to MAX(locationID)",
        "gold": "SELECT T2.address, T2.locationcity, T2.state, T2.zipcode FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID GROUP BY T2.address, T2.locationcity, T2.state, T2.zipcode ORDER BY COUNT(*) DESC LIMIT 1",
        "pred": "SELECT T1.`address`, T1.`locationcity`, T1.`state`, T1.`zipcode` FROM location AS T1 INNER JOIN employee AS T2 ON T1.`locationID` = T2.`locationID` WHERE T2.`locationID` = ( SELECT `locationID` FROM employee GROUP BY `locationID` ORDER BY COUNT(*) DESC LIMIT 1 )",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`address`, T1.`locationcity`, T1.`state`, T1.`zipcode` FROM location AS T1 INNER JOIN employee AS T2 ON T1.`locationID` = T2.`locationID` WHERE T2.`locationID` = ( SELECT `locationID` FROM employee GROUP BY `locationID` ORDER BY COUNT(*) DESC LIMIT 1 )",
        "repair_result": 1
    },
    {
        "idx": 1157,
        "db_id": "human_resources",
        "question": "What is the average salary of all employees with a 2 year degree position?",
        "evidence": "2 year degree refers to educationrequired = '2 year degree'; calculation = DIVIDE(SUM(salary), COUNT(positiontitle))",
        "gold": "SELECT AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T2.educationrequired = '2 year degree'",
        "pred": "SELECT AVG(CAST(T3.`salary` AS REAL)) FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T2.`educationrequired` = '2 year degree'",
        "pred_result": "no such column: T3.salary",
        "repair_sql": "SELECT AVG(CAST(T1.`salary` AS REAL)) FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T2.`educationrequired` = '2 year degree'",
        "repair_result": 0
    },
    {
        "idx": 1158,
        "db_id": "human_resources",
        "question": "How many male Regional Managers are there?",
        "evidence": "male refers to gender = 'M'; Regional Managers is a position title",
        "gold": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Regional Manager' AND T1.gender = 'M'",
        "pred": "SELECT COUNT(*) FROM employee WHERE `gender` = 'M' AND `positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Regional Manager' )",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM employee WHERE `gender` = 'M' AND `positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Regional Manager' )",
        "repair_result": 1
    },
    {
        "idx": 1159,
        "db_id": "human_resources",
        "question": "Which position has the highest amount of poor performing employees?",
        "evidence": "poor performing employees refers to performance = 'Poor'; the highest amount of employees refers to MAX(positiontitle)",
        "gold": "SELECT T2.positiontitle FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T1.performance = 'Poor' GROUP BY T2.positiontitle ORDER BY COUNT(T2.positiontitle) DESC LIMIT 1",
        "pred": "SELECT T2.`positiontitle` FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T1.`performance` = 'Poor' GROUP BY T2.`positiontitle` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": 1,
        "repair_sql": "SELECT T2.`positiontitle` FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T1.`performance` = 'Poor' GROUP BY T2.`positiontitle` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": 1
    },
    {
        "idx": 1160,
        "db_id": "human_resources",
        "question": "Which position has the highest number of female employees with a 2 year degree?",
        "evidence": "2 year degree refers to educationrequired = '2 year degree'; female refers to gender = 'F'; the highest number of employees refers to MAX(positionID)",
        "gold": "SELECT T2.positiontitle FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T2.educationrequired = '2 year degree' AND T1.gender = 'F' GROUP BY T2.positiontitle ORDER BY COUNT(T2.positiontitle) DESC LIMIT 1",
        "pred": "SELECT T2.`positiontitle` FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T1.`educationrequired` = '2 year degree' AND T1.`gender` = 'F' AND T2.`positionID` = ( SELECT T3.`positionID` FROM employee AS T4 INNER JOIN position AS T3 ON T4.`positionID` = T3.`positionID` WHERE T4.`educationrequired` = '2 year degree' AND T4.`gender` = 'F' GROUP BY T3.`positionID` ORDER BY COUNT(*) DESC LIMIT 1 )",
        "pred_result": "no such column: T1.educationrequired",
        "repair_sql": "SELECT T2.`positiontitle` FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T1.`educationrequired` = '2 year degree' AND T1.`gender` = 'F' GROUP BY T2.`positionID` ORDER BY COUNT(*) DESC LIMIT 1",
        "repair_result": "no such column: T1.educationrequired"
    },
    {
        "idx": 1161,
        "db_id": "human_resources",
        "question": "How many Account Representatives are there in Illinois with satisfying performance?",
        "evidence": "Account Representatives is a position title; satisfying performance mostly refers togood performance",
        "gold": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID INNER JOIN position AS T3 ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Account Representative' AND T1.performance = 'Good' AND T2.state = 'IL'",
        "pred": "SELECT COUNT(*) FROM employee WHERE `positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Account Representative' ) AND `locationID` = ( SELECT `locationID` FROM location WHERE `state` = 'IL' ) AND `performance` = 'Good'",
        "pred_result": 1,
        "repair_sql": "SELECT COUNT(*) FROM employee WHERE `positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Account Representative' ) AND `locationID` = ( SELECT `locationID` FROM location WHERE `state` = 'IL' ) AND `performance` = 'Good'",
        "repair_result": 1
    },
    {
        "idx": 1162,
        "db_id": "human_resources",
        "question": "What is the average salary of the worst performing managers?",
        "evidence": "the worst performing refers to performance = 'Poor'; manager is a positiontitle; average salary refers to AVG(salary)",
        "gold": "SELECT AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T1.performance = 'Poor' AND T2.positiontitle = 'Manager'",
        "pred": "SELECT AVG(CAST(T1.`salary` AS REAL)) FROM employee AS T1 WHERE T1.`positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Manager' ) AND T1.`performance` = 'Poor'",
        "pred_result": 0,
        "repair_sql": "SELECT AVG(CAST(T1.`salary` AS REAL)) FROM employee AS T1 WHERE T1.`positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Manager' ) AND T1.`performance` = 'Poor'",
        "repair_result": 0
    },
    {
        "idx": 1163,
        "db_id": "human_resources",
        "question": "In which state can you find the highest amount of good performing Account Representatives?",
        "evidence": "good performing refers to performance = 'Good'; Account Representatives is a positiontitle; highest amount of employee refers to MAX(positionID);",
        "gold": "SELECT T2.state FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID INNER JOIN position AS T3 ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Account Representative' AND T1.performance = 'Good' GROUP BY T2.state ORDER BY COUNT(T2.state) DESC LIMIT 1",
        "pred": "SELECT T2.`state`, COUNT(*) FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` INNER JOIN location AS T3 ON T1.`locationID` = T3.`locationID` WHERE T2.`positiontitle` = 'Account Representative' AND T1.`performance` = 'Good' GROUP BY T2.`state` ORDER BY COUNT(*) DESC LIMIT 1",
        "pred_result": "no such column: T2.state",
        "repair_sql": "SELECT T3.state, COUNT(*) AS num_good_performing_representatives FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID INNER JOIN location AS T3 ON T1.locationID = T3.locationID WHERE T2.positiontitle = 'Account Representative' AND T1.performance = 'Good' GROUP BY T3.state ORDER BY num_good_performing_representatives DESC LIMIT 1;",
        "repair_result": 0
    },
    {
        "idx": 1164,
        "db_id": "human_resources",
        "question": "Mention the employee's full name and performance status who got the lowest in salary per year.",
        "evidence": "full name = firstname, lastname; the lowest salary refers to MIN(salary)",
        "gold": "SELECT firstname, lastname, performance FROM employee ORDER BY salary ASC LIMIT 1",
        "pred": "SELECT T1.`firstname`, T1.`lastname`, T1.`performance` FROM employee AS T1 INNER JOIN ( SELECT MIN(`salary`) AS min_salary FROM employee ) AS T2 ON T1.`salary` = T2.min_salary",
        "pred_result": 1,
        "repair_sql": "SELECT T1.`firstname`, T1.`lastname`, T1.`performance` FROM employee AS T1 INNER JOIN ( SELECT MIN(`salary`) AS min_salary FROM employee ) AS T2 ON T1.`salary` = T2.min_salary",
        "repair_result": 1
    },
    {
        "idx": 1165,
        "db_id": "human_resources",
        "question": "List the location cities in the Western states.",
        "evidence": "Western states refers to state = 'CO' OR state = 'UT' OR state = 'CA'; location cities refers to locationcity",
        "gold": "SELECT locationcity FROM location WHERE state IN ('CO', 'UT', 'CA')",
        "pred": "SELECT DISTINCT `locationcity` FROM location WHERE `state` = 'CO' OR `state` = 'UT' OR `state` = 'CA'",
        "pred_result": 1,
        "repair_sql": "SELECT DISTINCT `locationcity` FROM location WHERE `state` = 'CO' OR `state` = 'UT' OR `state` = 'CA'",
        "repair_result": 1
    },
    {
        "idx": 1166,
        "db_id": "human_resources",
        "question": "Which city and address has zip code of above 90000?",
        "evidence": "zip code of above 90000 refers to zipcode > 90000; city refers to locationcity",
        "gold": "SELECT locationcity, address FROM location WHERE zipcode > 90000",
        "pred": "SELECT `locationcity`, `address` FROM location WHERE `zipcode` > 90000",
        "pred_result": 1,
        "repair_sql": "SELECT `locationcity`, `address` FROM location WHERE `zipcode` > 90000",
        "repair_result": 1
    },
    {
        "idx": 1167,
        "db_id": "human_resources",
        "question": "Which positions are suitable with 4 years degree education?",
        "evidence": "4 years degree education refers to educationrequired = '4 year degree'; positions refers to positiontitle",
        "gold": "SELECT positiontitle FROM position WHERE educationrequired = '4 year degree'",
        "pred": "SELECT `positiontitle` FROM position WHERE `educationrequired` = '4 year degree'",
        "pred_result": 1,
        "repair_sql": "SELECT `positiontitle` FROM position WHERE `educationrequired` = '4 year degree'",
        "repair_result": 1
    },
    {
        "idx": 1168,
        "db_id": "human_resources",
        "question": "What is the maximum salary of position \"Trainer\"?",
        "evidence": "maximum salary refers to maxsalary; Trainee is a positiontitle",
        "gold": "SELECT maxsalary FROM position WHERE positiontitle = 'Trainee'",
        "pred": "SELECT `maxsalary` FROM position WHERE `positiontitle` = 'Trainee'",
        "pred_result": 1,
        "repair_sql": "SELECT `maxsalary` FROM position WHERE `positiontitle` = 'Trainee'",
        "repair_result": 1
    },
    {
        "idx": 1169,
        "db_id": "human_resources",
        "question": "List the full name and social security number of the account representative with average performance.",
        "evidence": "full name = firstname, lastname; social security number refers to ssn; account representative is a position title; average performance refers to performance = 'Average'",
        "gold": "SELECT T1.firstname, T1.lastname, T1.ssn FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T1.performance = 'Average'",
        "pred": "SELECT `firstname` || ' ' || `lastname`, `ssn` FROM employee WHERE `positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Account Representative' ) AND `performance` = 'Average'",
        "pred_result": 0,
        "repair_sql": "SELECT `firstname` || ' ' || `lastname`, `ssn` FROM employee WHERE `positionID` = ( SELECT `positionID` FROM position WHERE `positiontitle` = 'Account Representative' ) AND `performance` = 'Average'",
        "repair_result": 0
    },
    {
        "idx": 1170,
        "db_id": "human_resources",
        "question": "When was Emily Wood hired? Mention her position and salary.",
        "evidence": "Emily Wood is the full name of an employee; full name = firstname, lastname; when was she hired refers to hiredate",
        "gold": "SELECT T1.hiredate, T2.positiontitle, T1.salary FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T1.firstname = 'Emily' AND T1.lastname = 'Wood'",
        "pred": "SELECT `hiredate`, `positiontitle`, `salary` FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T1.`ssn` = ( SELECT `ssn` FROM employee WHERE `firstname` = 'Emily' AND `lastname` = 'Wood' )",
        "pred_result": 1,
        "repair_sql": "SELECT `hiredate`, `positiontitle`, `salary` FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T1.`ssn` = ( SELECT `ssn` FROM employee WHERE `firstname` = 'Emily' AND `lastname` = 'Wood' )",
        "repair_result": 1
    },
    {
        "idx": 1171,
        "db_id": "human_resources",
        "question": "What are the maximum and minimum salary range and position title of Bill Marlin?",
        "evidence": "Bill Marlin is the full name of an employee; full name = firstname, lastname; maximum salary refers to maxsalary; minimum salary refers to minsalary",
        "gold": "SELECT T2.maxsalary, T2.minsalary, T2.positiontitle FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T1.firstname = 'Bill' AND T1.lastname = 'Marlin'",
        "pred": "SELECT T2.`positiontitle`, T2.`minsalary`, T2.`maxsalary` FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T1.`ssn` = ( SELECT `ssn` FROM employee WHERE `firstname` = 'Bill' AND `lastname` = 'Marlin' )",
        "pred_result": 0,
        "repair_sql": "SELECT T2.`positiontitle`, T2.`minsalary`, T2.`maxsalary` FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T1.`ssn` = ( SELECT `ssn` FROM employee WHERE `firstname` = 'Bill' AND `lastname` = 'Marlin' )",
        "repair_result": 0
    },
    {
        "idx": 1172,
        "db_id": "human_resources",
        "question": "List the full names, gender and positions who's location is in New York city.",
        "evidence": "full name = firstname, lastname; New York city refers to locationcity = 'New York City'",
        "gold": "SELECT T1.firstname, T1.lastname, T1.gender, T3.positiontitle FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID INNER JOIN position AS T3 ON T3.positionID = T1.positionID WHERE T2.locationcity = 'New York City'",
        "pred": "SELECT T1.`firstname` || ' ' || T1.`lastname` AS full_name, T1.`gender`, T2.`positiontitle` FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` INNER JOIN location AS T3 ON T1.`locationID` = T3.`locationID` WHERE T3.`locationcity` = 'New York City'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`firstname` || ' ' || T1.`lastname` AS full_name, T1.`gender`, T2.`positiontitle` FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` INNER JOIN location AS T3 ON T1.`locationID` = T3.`locationID` WHERE T3.`locationcity` = 'New York City'",
        "repair_result": 0
    },
    {
        "idx": 1173,
        "db_id": "human_resources",
        "question": "Mention the full name, hired date and performance status of the employee whose location is in Utah state.",
        "evidence": "full name = firstname, lastname; Utah refers to state = 'UT'",
        "gold": "SELECT T1.firstname, T1.lastname, T1.hiredate, T1.performance FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID WHERE T2.state = 'UT'",
        "pred": "SELECT T1.`firstname` || ' ' || T1.`lastname` AS full_name, T1.`hiredate`, T1.`performance` FROM employee AS T1 WHERE T1.`locationID` IN ( SELECT `locationID` FROM location WHERE `state` = 'UT' )",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`firstname` || ' ' || T1.`lastname` AS full_name, T1.`hiredate`, T1.`performance` FROM employee AS T1 WHERE T1.`locationID` IN ( SELECT `locationID` FROM location WHERE `state` = 'UT' )",
        "repair_result": 0
    },
    {
        "idx": 1174,
        "db_id": "human_resources",
        "question": "Among the employees with poor performance, provide the managers' full names, location city, address and its zip code.",
        "evidence": "poor performance refers to performance = 'Poor'; full name = firstname, lastname; managers is a position title",
        "gold": "SELECT T1.firstname, T1.lastname, T2.locationcity, T2.address, T2.zipcode FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID INNER JOIN position AS T3 ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Manager' AND T1.performance = 'Poor'",
        "pred": "SELECT T1.`firstname` || ' ' || T1.`lastname` AS full_name, T3.`locationcity`, T3.`address`, T3.`zipcode` FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` INNER JOIN location AS T3 ON T1.`locationID` = T3.`locationID` WHERE T1.`performance` = 'Poor' AND T2.`positiontitle` = 'Manager'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`firstname` || ' ' || T1.`lastname` AS full_name, T3.`locationcity`, T3.`address`, T3.`zipcode` FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` INNER JOIN location AS T3 ON T1.`locationID` = T3.`locationID` WHERE T1.`performance` = 'Poor' AND T2.`positiontitle` = 'Manager'",
        "repair_result": 0
    },
    {
        "idx": 1175,
        "db_id": "human_resources",
        "question": "What is the education required to be account representative? Mention account representative full name and salary who got poor in performance status.",
        "evidence": "account representative is a position title; full name = firstname, lastname; poor performance refers to performance = 'Poor'",
        "gold": "SELECT T2.educationrequired, T1.firstname, T1.lastname, T1.salary FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T1.performance = 'Poor' AND T2.positiontitle = 'Account Representative'",
        "pred": "SELECT T1.`firstname`, T1.`lastname`, T1.`salary` FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T2.`positiontitle` = 'Account Representative' AND T1.`performance` = 'Poor'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`firstname`, T1.`lastname`, T1.`salary` FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` WHERE T2.`positiontitle` = 'Account Representative' AND T1.`performance` = 'Poor'",
        "repair_result": 0
    },
    {
        "idx": 1176,
        "db_id": "human_resources",
        "question": "Write down the full name, performance status and located city of the employee who's social security number is \"767-74-7373\".",
        "evidence": "full name = firstname, lastname; ssn = '767-74-7373'",
        "gold": "SELECT T1.firstname, T1.lastname, T2.state, T2.locationcity FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID WHERE T1.ssn = '767-74-7373'",
        "pred": "SELECT T1.`firstname` || ' ' || T1.`lastname` AS full_name, T1.`performance`, T2.`locationcity` FROM employee AS T1 INNER JOIN location AS T2 ON T1.`locationID` = T2.`locationID` WHERE T1.`ssn` = '767-74-7373'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`firstname` || ' ' || T1.`lastname` AS full_name, T1.`performance`, T2.`locationcity` FROM employee AS T1 INNER JOIN location AS T2 ON T1.`locationID` = T2.`locationID` WHERE T1.`ssn` = '767-74-7373'",
        "repair_result": 0
    },
    {
        "idx": 1177,
        "db_id": "human_resources",
        "question": "Describe the employees' full name, positions, located city and office phone number within Colorado state.",
        "evidence": "full name = firstname, lastname; Colorado state refers to state = 'CO'; positions refers to positiontitle; located city refers to locationcity; office phone number refers to officephone;",
        "gold": "SELECT T1.firstname, T1.lastname, T3.positiontitle, T2.locationcity, T2.officephone FROM employee AS T1 INNER JOIN location AS T2 ON T1.locationID = T2.locationID INNER JOIN position AS T3 ON T3.positionID = T1.positionID WHERE T2.state = 'CO'",
        "pred": "SELECT T1.`firstname` || ' ' || T1.`lastname` AS full_name, T2.`positiontitle` AS position, T3.`locationcity` AS located_city, T3.`officephone` AS office_phone FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` INNER JOIN location AS T3 ON T1.`locationID` = T3.`locationID` WHERE T3.`state` = 'CO'",
        "pred_result": 0,
        "repair_sql": "SELECT T1.`firstname` || ' ' || T1.`lastname` AS full_name, T2.`positiontitle` AS position, T3.`locationcity` AS located_city, T3.`officephone` AS office_phone FROM employee AS T1 INNER JOIN position AS T2 ON T1.`positionID` = T2.`positionID` INNER JOIN location AS T3 ON T1.`locationID` = T3.`locationID` WHERE T3.`state` = 'CO'",
        "repair_result": 0
    },
    {
        "idx": 1178,
        "db_id": "human_resources",
        "question": "Calculate the monthly average salary of the employee with highest salary. Mention his name, position title and location city.",
        "evidence": "highest salary refers to MAX(salary); name = firstname, lastname; calculation = DIVIDE(MAX(salary), 12)",
        "gold": "SELECT SUM(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) / 12 AS avg, T1.firstname, T1.lastname , T2.positiontitle, T3.locationcity FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID INNER JOIN location AS T3 ON T1.locationID = T3.locationID WHERE CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) = ( SELECT MAX(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID INNER JOIN location AS T3 ON T1.locationID = T3.locationID )",
        "pred": "SELECT CAST(MAX(`salary`) AS REAL) / 12 AS monthly_average_salary FROM employee",
        "pred_result": 0,
        "repair_sql": "SELECT CAST(MAX(`salary`) AS REAL) / 12 AS monthly_average_salary FROM employee",
        "repair_result": 0
    }
]